From 2c68ec27a69c2ca9bcbc790964e767a2893849b5 Mon Sep 17 00:00:00 2001
From: "chak-kei.lam" <chak-kei.lam@mediatek.com>
Date: Tue, 1 Oct 2024 09:52:29 +0800
Subject: [PATCH] net ethernet mtkhnat add static mode entry check

---
 drivers/net/ethernet/mediatek/mtk_hnat/hnat.h |  9 +++++
 .../ethernet/mediatek/mtk_hnat/hnat_nf_hook.c | 38 +++++++++++++++----
 2 files changed, 40 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/mediatek/mtk_hnat/hnat.h b/drivers/net/ethernet/mediatek/mtk_hnat/hnat.h
index ad23b8d..9bcef5b 100644
--- a/drivers/net/ethernet/mediatek/mtk_hnat/hnat.h
+++ b/drivers/net/ethernet/mediatek/mtk_hnat/hnat.h
@@ -1377,4 +1377,13 @@ static inline u16 foe_timestamp(struct mtk_hnat *h)
 	return (readl(hnat_priv->fe_base + 0x0010)) & 0xffff;
 }
 
+static inline int hnat_check_entry_pkt_type_match(struct foe_entry *entry, struct foe_entry *foe)
+{
+	if ((IS_IPV4_HNAPT(entry) && !IS_IPV4_HNAPT(foe)) ||
+	    (IS_IPV6_5T_ROUTE(entry) && !IS_IPV6_5T_ROUTE(foe)))
+		return -1;
+
+	return 0;
+}
+
 #endif /* NF_HNAT_H */
diff --git a/drivers/net/ethernet/mediatek/mtk_hnat/hnat_nf_hook.c b/drivers/net/ethernet/mediatek/mtk_hnat/hnat_nf_hook.c
index 05f28e9..dc7e676 100644
--- a/drivers/net/ethernet/mediatek/mtk_hnat/hnat_nf_hook.c
+++ b/drivers/net/ethernet/mediatek/mtk_hnat/hnat_nf_hook.c
@@ -1338,7 +1338,7 @@ struct foe_entry ppe_fill_info_blk(struct ethhdr *eth, struct foe_entry entry,
 	entry.bfib1.psn = (hw_path->flags & FLOW_OFFLOAD_PATH_PPPOE) ? 1 : 0;
 	entry.bfib1.vlan_layer += (hw_path->flags & FLOW_OFFLOAD_PATH_VLAN) ? 1 : 0;
 	entry.bfib1.vpm = (entry.bfib1.vlan_layer) ? 1 : 0;
-	entry.bfib1.cah = 1;
+	entry.bfib1.cah = 0;
 	entry.bfib1.time_stamp = (hnat_priv->data->version == MTK_HNAT_V2 ||
 				  hnat_priv->data->version == MTK_HNAT_V3) ?
 		readl(hnat_priv->fe_base + 0x0010) & (0xFF) :
@@ -2389,16 +2389,25 @@ static unsigned int skb_to_hnat_info(struct sk_buff *skb,
 
 hnat_entry_skip_bind:
 	if (spin_trylock(&hnat_priv->entry_lock)) {
+		if (foe->udib1.sta) {
+			spin_unlock(&hnat_priv->entry_lock);
+			return 0;
+		}
+
+		/* Set static mode to lock hardware entry */
+		foe->udib1.sta = 1;
+		/* We must ensure all info has been updated before set to hw */
+		wmb();
 		/* Final check if the entry is not in UNBIND state,
 		 * we should not modify it right now.
 		 */
-		if (foe->udib1.state != UNBIND) {
+		if (foe->udib1.state != UNBIND ||
+		    hnat_check_entry_pkt_type_match(&entry, foe) < 0) {
+			foe->udib1.sta = 0;
 			spin_unlock(&hnat_priv->entry_lock);
 			return 0;
 		}
 
-		/* We must ensure all info has been updated before set to hw */
-		wmb();
 		/* Before entry enter BIND state, write other fields first,
 		 * prevent racing with hardware accesses.
 		 */
@@ -2409,6 +2418,9 @@ static unsigned int skb_to_hnat_info(struct sk_buff *skb,
 		/* After other fields have been written, write info1 to BIND the entry */
 		memcpy(&foe->bfib1, &entry.bfib1, sizeof(entry.bfib1));
 
+		foe->bfib1.cah = 1;
+		wmb();
+
 		/* reset statistic for this entry */
 		if (hnat_priv->data->per_flow_accounting &&
 		    skb_hnat_entry(skb) < hnat_priv->foe_etry_num &&
@@ -2710,15 +2722,25 @@ int mtk_sw_nat_hook_tx(struct sk_buff *skb, int gmac_no)
 
 	entry.bfib1.ttl = 1;
 	entry.bfib1.state = BIND;
+	entry.bfib1.sta = 0;
+
+	if (hw_entry->udib1.sta)
+		return NF_ACCEPT;
+
+	/* Set static mode to lock hardware entry */
+	hw_entry->udib1.sta = 1;
+	/* We must ensure all info has been updated before set to hw */
+	wmb();
 
 	/* Final check if the entry is not in UNBIND state,
 	 * we should not modify it right now.
 	 */
-	if (hw_entry->udib1.state != UNBIND)
+	if (hw_entry->udib1.state != UNBIND ||
+	    hw_entry->udib1.pkt_type != entry.bfib1.pkt_type) {
+		hw_entry->udib1.sta = 0;
 		goto check_release_entry_lock;
+	}
 
-	/* We must ensure all info has been updated before set to hw */
-	wmb();
 	/* Before entry enter BIND state, write other fields first,
 	 * prevent racing with hardware accesses.
 	 */
@@ -2730,6 +2752,8 @@ int mtk_sw_nat_hook_tx(struct sk_buff *skb, int gmac_no)
 	memcpy(&hw_entry->bfib1, &entry.bfib1, sizeof(entry.bfib1));
 
 	hnat_set_entry_lock(hw_entry, false);
+	hw_entry->bfib1.cah = 1;
+	wmb();
 
 	/* reset statistic for this entry */
 	if (hnat_priv->data->per_flow_accounting) {
-- 
2.45.2

