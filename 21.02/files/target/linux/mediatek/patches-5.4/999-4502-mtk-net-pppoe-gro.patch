Index: drivers/net/ppp/pppoe.c
===================================================================
--- a/drivers/net/ppp/pppoe.c
+++ b/drivers/net/ppp/pppoe.c
@@ -1215,6 +1215,113 @@ static struct pernet_operations pppoe_ne
 	.size = sizeof(struct pppoe_net),
 };
 
+static struct sk_buff *pppoes_gro_receive(struct list_head *head,
+					struct sk_buff *skb)
+{
+	const struct packet_offload *ptype;
+	unsigned int hlen, offset;
+	struct sk_buff *p, *pp = NULL;
+	struct pppoe_hdr *phdr;
+	__be16 type, *ppp;
+	int flush = 1;
+
+	offset = skb_gro_offset(skb);
+	hlen = offset + sizeof(*phdr);
+	phdr = skb_gro_header_fast(skb, offset);
+	if (skb_gro_header_hard(skb, hlen)) {
+		phdr = skb_gro_header_slow(skb, hlen, offset);
+		if (unlikely(!phdr))
+			goto out;
+	}
+
+	hlen = sizeof(*phdr);
+	ppp = (__be16 *)(phdr + 1);
+
+	switch (be16_to_cpu(*ppp)) {
+	case PPP_IP:
+		type = cpu_to_be16(ETH_P_IP);
+		break;
+	case PPP_IPV6:
+		type = cpu_to_be16(ETH_P_IPV6);
+		break;
+	default:
+		goto out;
+	}
+	hlen += sizeof(__be16);
+
+	rcu_read_lock();
+	ptype = gro_find_receive_by_type(type);
+	if (!ptype)
+		goto out_unlock;
+
+	flush = 0;
+	list_for_each_entry(p, head, list) {
+		struct pppoe_hdr *hdr2;
+
+		if (!NAPI_GRO_CB(p)->same_flow)
+			continue;
+
+		hdr2 = (struct pppoe_hdr *)(p->data + offset);
+		if (phdr->sid != hdr2->sid)
+			NAPI_GRO_CB(p)->same_flow = 0;
+	}
+
+	skb_gro_pull(skb, hlen);
+	skb_gro_postpull_rcsum(skb, phdr, hlen);
+	pp = call_gro_receive(ptype->callbacks.gro_receive, head, skb);
+
+out_unlock:
+	rcu_read_unlock();
+out:
+	skb_gro_flush_final(skb, pp, flush);
+
+	return pp;
+}
+
+static int pppoes_gro_complete(struct sk_buff *skb, int nhoff)
+{
+	struct pppoe_hdr *phdr = (struct pppoe_hdr *)(skb->data + nhoff);
+	struct packet_offload *ptype;
+	__be16 type, newlen, *ppp;
+	int hlen, err = -ENOENT;
+
+	hlen = sizeof(*phdr);
+	ppp = (__be16 *)(phdr + 1);
+
+	switch (be16_to_cpu(*ppp)) {
+	case PPP_IP:
+		type = cpu_to_be16(ETH_P_IP);
+		break;
+	case PPP_IPV6:
+		type = cpu_to_be16(ETH_P_IPV6);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	hlen += sizeof(__be16);
+	newlen = cpu_to_be16(skb->len - nhoff - sizeof(*phdr));
+	phdr->length = newlen;
+
+	rcu_read_lock();
+	ptype = gro_find_complete_by_type(type);
+	if (ptype)
+		err = ptype->callbacks.gro_complete(skb, nhoff + hlen);
+
+	rcu_read_unlock();
+
+	return err;
+}
+
+static struct packet_offload pppoes_packet_offload __read_mostly = {
+	.type = cpu_to_be16(ETH_P_PPP_SES),
+	.priority = 10,
+	.callbacks = {
+		.gro_receive = pppoes_gro_receive,
+		.gro_complete = pppoes_gro_complete,
+	},
+};
+
 static int __init pppoe_init(void)
 {
 	int err;
@@ -1233,6 +1340,7 @@ static int __init pppoe_init(void)
 
 	dev_add_pack(&pppoes_ptype);
 	dev_add_pack(&pppoed_ptype);
+	dev_add_offload(&pppoes_packet_offload);
 	register_netdevice_notifier(&pppoe_notifier);
 
 	return 0;
@@ -1248,6 +1356,7 @@ out:
 static void __exit pppoe_exit(void)
 {
 	unregister_netdevice_notifier(&pppoe_notifier);
+	dev_remove_offload(&pppoes_packet_offload);
 	dev_remove_pack(&pppoed_ptype);
 	dev_remove_pack(&pppoes_ptype);
 	unregister_pppox_proto(PX_PROTO_OE);
