--- a/drivers/net/ethernet/mediatek/mtk_hnat/Makefile
+++ b/drivers/net/ethernet/mediatek/mtk_hnat/Makefile
@@ -1,7 +1,9 @@
 ccflags-y=-Werror
 
 obj-$(CONFIG_NET_MEDIATEK_HNAT)         += mtkhnat.o
-mtkhnat-objs := hnat.o hnat_nf_hook.o hnat_debugfs.o hnat_mcast.o
+mtkhnat-objs := hnat.o hnat_nf_hook.o hnat_debugfs.o hnat_mcast.o \
+		external/hnat_entry.o
+mtkhnat-$(CONFIG_MEDIATEK_NETSYS_V3) += external/v3/hnat_ipv4_hnapt.o
 ifeq ($(CONFIG_NET_DSA_AN8855), y)
 mtkhnat-y	+= hnat_stag.o
 else
--- a/drivers/net/ethernet/mediatek/mtk_hnat/hnat_debugfs.c
+++ b/drivers/net/ethernet/mediatek/mtk_hnat/hnat_debugfs.c
@@ -2919,6 +2919,7 @@ u32 hnat_get_ppe_hash(struct foe_entry *
 
 	return hash;
 }
+EXPORT_SYMBOL(hnat_get_ppe_hash);
 
 static u32 hnat_char2hex(const char c)
 {
--- /dev/null
+++ b/drivers/net/ethernet/mediatek/mtk_hnat/external/hnat_entry.c
@@ -0,0 +1,61 @@
+/*   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; version 2 of the License
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   Copyright (C) 2024 Frank-zj Lin <frank-zj.lin@mediatek.com>
+ */
+#include <linux/bits.h>
+
+#include "../hnat.h"
+#include "hnat_entry.h"
+
+static inline int ppe_id_get_by_sport(u32 sp)
+{
+        if (CFG_PPE_NUM == 3) {
+                switch (sp) {
+                case NR_GMAC1_PORT:
+                        return 0;
+                case NR_GMAC2_PORT:
+                        return 1;
+                case NR_GMAC3_PORT:
+                        return 2;
+                }
+        }
+
+        return 0;
+}
+
+void hnat_entry_add(struct foe_entry *foe)
+{
+        struct foe_entry *dst_foe;
+        u32 ppe_id;
+        int hash;
+	int i;
+
+        hash = hnat_get_ppe_hash(foe);
+        ppe_id = ppe_id_get_by_sport(foe->ipv4_hnapt.bfib1.sp);
+
+	/* collision policy: at most 4 entries with the same hash value */
+	for (i = 0; i < 4; i++) {
+		dst_foe = hnat_get_foe_entry(ppe_id,
+					     ((hash + i) % hnat_priv->foe_etry_num));
+
+	        if ((IS_ERR(dst_foe)))
+	                return;
+
+		if (dst_foe->ipv4_hnapt.bfib1.state == BIND)
+			continue;
+
+		break;
+	}
+
+        /* We must ensure all info has been updated before set to hw */
+        wmb();
+        memcpy(dst_foe, foe, sizeof(*foe));
+}
+EXPORT_SYMBOL(hnat_entry_add);
--- /dev/null
+++ b/drivers/net/ethernet/mediatek/mtk_hnat/external/hnat_entry.h
@@ -0,0 +1,45 @@
+/*   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; version 2 of the License
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   Copyright (C) 2024 Frank-zj Lin <frank-zj.lin@mediatek.com>
+ */
+
+#ifndef _MTK_HNAT_EXTERNAL_HNAT_ENTRY_H_
+#define _MTK_HNAT_EXTERNAL_HNAT_ENTRY_H_
+
+#include <linux/debugfs.h>
+
+#include "../hnat.h"
+
+void hnat_entry_add(struct foe_entry *foe);
+
+/* necessary apis to access struct hnapt_ipv4_hnapt from external kernel module */
+int hnat_ipv4_hnapt_init(struct hnat_ipv4_hnapt *entry);
+int hnat_ipv4_hnapt_sp_set(struct hnat_ipv4_hnapt *entry, u32 val);
+int hnat_ipv4_hnapt_qid_set(struct hnat_ipv4_hnapt *entry, u32 val);
+int hnat_ipv4_hnapt_fp_set(struct hnat_ipv4_hnapt *entry, u32 val);
+int hnat_ipv4_hnapt_sip_set(struct hnat_ipv4_hnapt *entry, __be32 val);
+int hnat_ipv4_hnapt_dip_set(struct hnat_ipv4_hnapt *entry, __be32 val);
+int hnat_ipv4_hnapt_dport_set(struct hnat_ipv4_hnapt *entry, u16 val);
+int hnat_ipv4_hnapt_sport_set(struct hnat_ipv4_hnapt *entry, u16 val);
+int hnat_ipv4_hnapt_new_sip_set(struct hnat_ipv4_hnapt *entry, __be32 val);
+int hnat_ipv4_hnapt_new_dip_set(struct hnat_ipv4_hnapt *entry, __be32 val);
+int hnat_ipv4_hnapt_new_dport_set(struct hnat_ipv4_hnapt *entry, u16 val);
+int hnat_ipv4_hnapt_new_sport_set(struct hnat_ipv4_hnapt *entry, u16 val);
+int hnat_ipv4_hnapt_dmac_set(struct hnat_ipv4_hnapt *entry, u8 *mac);
+int hnat_ipv4_hnapt_smac_set(struct hnat_ipv4_hnapt *entry, u8 *mac);
+#if defined(CONFIG_MEDIATEK_NETSYS_V3)
+int hnat_ipv4_hnapt_cdrt_id_set(struct hnat_ipv4_hnapt *entry, u32 val);
+u32 hnat_ipv4_hnapt_tops_entry_get(struct hnat_ipv4_hnapt *entry);
+int hnat_ipv4_hnapt_tops_entry_set(struct hnat_ipv4_hnapt *entry, u32 val);
+u32 hnat_ipv4_hnapt_tport_id_get(struct hnat_ipv4_hnapt *entry);
+int hnat_ipv4_hnapt_tport_id_set(struct hnat_ipv4_hnapt *entry, u32 val);
+#endif /* (CONFIG_MEDIATEK_NETSYS_V3) */
+
+#endif /* _MTK_HNAT_EXTERNAL_HNAT_ENTRY_H_ */
--- /dev/null
+++ b/drivers/net/ethernet/mediatek/mtk_hnat/external/v3/hnat_ipv4_hnapt.c
@@ -0,0 +1,272 @@
+/*   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; version 2 of the License
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   Copyright (C) 2024 Frank-zj Lin <frank-zj.lin@mediatek.com>
+ */
+#include <linux/bits.h>
+
+#include "../hnat_entry.h"
+
+/* Initialize with default values of a statically bind entry */
+static int hnat_bind_info_blk_init(struct hnat_bind_info_blk* blk)
+{
+	if (!blk)
+		return -EINVAL;
+
+	blk->pkt_type	= IPV4_HNAPT;
+	blk->cah	= 0x1;
+	blk->ttl	= 0x1;
+	blk->state	= 0x2; /* bind */
+	blk->sta	= 0x1; /* static entry */
+
+	return 0;
+}
+
+/* PSE source port 0~15 */
+static int hnat_bind_info_blk_sp_set(struct hnat_bind_info_blk* blk, u32 val)
+{
+	u32 _val = val & GENMASK(3, 0);
+
+	if (!blk || _val != val)
+		return -EINVAL;
+
+	blk->sp = _val;
+
+	return 0;
+}
+
+/* Initialize with default values of a statically bind entry */
+static int hnat_info_blk2_init(struct hnat_info_blk2* blk)
+{
+	if (!blk)
+		return -EINVAL;
+
+	blk->mibf	= 0x1;
+	blk->port_ag	= 0xF;
+
+	return 0;
+}
+
+static int hnat_info_blk2_qid_set(struct hnat_info_blk2* blk, u32 val)
+{
+	u32 _val = val & GENMASK(6, 0);
+
+	if (!blk || _val != val)
+		return -EINVAL;
+
+	blk->qid = _val;
+
+	return 0;
+}
+
+/* PSE final port 0~15 */
+static int hnat_info_blk2_fp_set(struct hnat_info_blk2* blk, u32 val)
+{
+	u32 _val = val & GENMASK(3, 0);
+
+	if (!blk || _val != val)
+		return -EINVAL;
+
+	blk->dp = _val;
+
+	return 0;
+}
+
+int hnat_ipv4_hnapt_init(struct hnat_ipv4_hnapt *entry)
+{
+	if (!entry)
+		return -EINVAL;
+
+	hnat_bind_info_blk_init(&entry->bfib1);
+	hnat_info_blk2_init(&entry->iblk2);
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_init);
+
+int hnat_ipv4_hnapt_sp_set(struct hnat_ipv4_hnapt *entry, u32 val)
+{
+	return hnat_bind_info_blk_sp_set(&entry->bfib1, val);
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_sp_set);
+
+int hnat_ipv4_hnapt_qid_set(struct hnat_ipv4_hnapt *entry, u32 val)
+{
+	return hnat_info_blk2_qid_set(&entry->iblk2, val);
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_qid_set);
+
+int hnat_ipv4_hnapt_fp_set(struct hnat_ipv4_hnapt *entry, u32 val)
+{
+	return hnat_info_blk2_fp_set(&entry->iblk2, val);
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_fp_set);
+
+int hnat_ipv4_hnapt_sip_set(struct hnat_ipv4_hnapt *entry, __be32 val)
+{
+	if (!entry)
+		return -EINVAL;
+
+	entry->sip = ntohl(val);
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_sip_set);
+
+int hnat_ipv4_hnapt_dip_set(struct hnat_ipv4_hnapt *entry, __be32 val)
+{
+	if (!entry)
+		return -EINVAL;
+
+	entry->dip = ntohl(val);
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_dip_set);
+
+int hnat_ipv4_hnapt_dport_set(struct hnat_ipv4_hnapt *entry, u16 val)
+{
+	if (!entry)
+		return -EINVAL;
+
+	entry->dport = val;
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_dport_set);
+
+int hnat_ipv4_hnapt_sport_set(struct hnat_ipv4_hnapt *entry, u16 val)
+{
+	if (!entry)
+		return -EINVAL;
+
+	entry->sport = val;
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_sport_set);
+
+int hnat_ipv4_hnapt_new_sip_set(struct hnat_ipv4_hnapt *entry, __be32 val)
+{
+	if (!entry)
+		return -EINVAL;
+
+	entry->new_sip = ntohl(val);
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_new_sip_set);
+
+int hnat_ipv4_hnapt_new_dip_set(struct hnat_ipv4_hnapt *entry, __be32 val)
+{
+	if (!entry)
+		return -EINVAL;
+
+	entry->new_dip = ntohl(val);
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_new_dip_set);
+
+int hnat_ipv4_hnapt_new_dport_set(struct hnat_ipv4_hnapt *entry, u16 val)
+{
+	if (!entry)
+		return -EINVAL;
+
+	entry->new_dport = val;
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_new_dport_set);
+
+int hnat_ipv4_hnapt_new_sport_set(struct hnat_ipv4_hnapt *entry, u16 val)
+{
+	if (!entry)
+		return -EINVAL;
+
+	entry->new_sport = val;
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_new_sport_set);
+
+int hnat_ipv4_hnapt_cdrt_id_set(struct hnat_ipv4_hnapt *entry, u32 val)
+{
+	u32 _val = val & GENMASK(7, 0);
+
+	if (!entry || _val != val)
+		return -EINVAL;
+
+	entry->cdrt_id = _val;
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_cdrt_id_set);
+
+u32 hnat_ipv4_hnapt_tops_entry_get(struct hnat_ipv4_hnapt *entry)
+{
+	return entry->tops_entry;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_tops_entry_get);
+
+int hnat_ipv4_hnapt_tops_entry_set(struct hnat_ipv4_hnapt *entry, u32 val)
+{
+	u32 _val = val & GENMASK(5, 0);
+
+	if (!entry || _val != val)
+		return -EINVAL;
+
+	entry->tops_entry = _val;
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_tops_entry_set);
+
+u32 hnat_ipv4_hnapt_tport_id_get(struct hnat_ipv4_hnapt *entry)
+{
+	return entry->tport_id;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_tport_id_get);
+
+int hnat_ipv4_hnapt_tport_id_set(struct hnat_ipv4_hnapt *entry, u32 val)
+{
+	u32 _val = val & GENMASK(3, 0);
+
+	if (!entry || _val != val)
+		return -EINVAL;
+
+	entry->tport_id = _val;
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_tport_id_set);
+
+int hnat_ipv4_hnapt_dmac_set(struct hnat_ipv4_hnapt *entry, u8 *mac)
+{
+	if (!entry || !mac)
+		return -EINVAL;
+
+	entry->dmac_hi = swab32(*((u32 *)mac));
+	entry->dmac_lo = swab16(*((u16 *)&mac[4]));
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_dmac_set);
+
+int hnat_ipv4_hnapt_smac_set(struct hnat_ipv4_hnapt *entry, u8 *mac)
+{
+	if (!entry || !mac)
+		return -EINVAL;
+
+	entry->smac_hi = swab32(*((u32 *)mac));
+	entry->smac_lo = swab16(*((u16 *)&mac[4]));
+
+	return 0;
+}
+EXPORT_SYMBOL(hnat_ipv4_hnapt_smac_set);
