From 899dd8680e50d77797da83b7cfccc9eb7490b9d2 Mon Sep 17 00:00:00 2001
From: "chak-kei.lam" <chak-kei.lam@mediatek.com>
Date: Wed, 23 Jul 2025 18:36:01 +0800
Subject: [PATCH] flow offload add mtkhnat dscp

---
 drivers/net/ethernet/mediatek/mtk_ppe.c       | 10 +++
 drivers/net/ethernet/mediatek/mtk_ppe.h       |  1 +
 .../net/ethernet/mediatek/mtk_ppe_offload.c   | 16 ++++-
 include/net/netfilter/nf_conntrack_extend.h   |  2 +
 include/net/netfilter/nf_conntrack_qos.h      | 64 +++++++++++++++++++
 include/net/netfilter/nf_flow_table.h         |  2 +
 include/net/netns/conntrack.h                 |  1 +
 net/netfilter/Makefile                        |  2 +-
 net/netfilter/nf_conntrack_core.c             |  9 +++
 net/netfilter/nf_conntrack_netlink.c          |  1 +
 net/netfilter/nf_conntrack_qos.c              | 43 +++++++++++++
 net/netfilter/nf_conntrack_standalone.c       | 27 ++++++++
 net/netfilter/nf_flow_table_core.c            |  2 +
 net/netfilter/nf_flow_table_offload.c         |  7 +-
 net/netfilter/nft_flow_offload.c              | 45 ++++++++++++-
 net/netfilter/xt_FLOWOFFLOAD.c                | 41 ++++++++++++
 16 files changed, 267 insertions(+), 6 deletions(-)
 create mode 100644 include/net/netfilter/nf_conntrack_qos.h
 create mode 100644 net/netfilter/nf_conntrack_qos.c

diff --git a/drivers/net/ethernet/mediatek/mtk_ppe.c b/drivers/net/ethernet/mediatek/mtk_ppe.c
index fdb6dc0..793ba41 100755
--- a/drivers/net/ethernet/mediatek/mtk_ppe.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe.c
@@ -467,6 +467,16 @@ int mtk_foe_entry_set_qid(struct mtk_foe_entry *entry, int qid)
 	return 0;
 }
 
+int mtk_foe_entry_set_dscp(struct mtk_foe_entry *entry, int dscp)
+{
+	u32 *ib2 = mtk_foe_entry_ib2(entry);
+
+	*ib2 &= ~MTK_FOE_IB2_DSCP;
+	*ib2 |= FIELD_PREP(MTK_FOE_IB2_DSCP, dscp);
+
+	return 0;
+}
+
 int mtk_foe_entry_set_keep_dscp_ecn(struct mtk_foe_entry *entry, bool keep_en)
 {
 #if defined(CONFIG_MEDIATEK_NETSYS_V3)
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe.h b/drivers/net/ethernet/mediatek/mtk_ppe.h
index d1d30c5..6c80525 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe.h
+++ b/drivers/net/ethernet/mediatek/mtk_ppe.h
@@ -422,6 +422,7 @@ int mtk_foe_entry_set_tops_entry(struct mtk_foe_entry *entry, int tops_entry);
 int mtk_foe_entry_set_wdma(struct mtk_foe_entry *entry, int wdma_idx, int txq,
 			   int bss, int wcid);
 int mtk_foe_entry_set_qid(struct mtk_foe_entry *entry, int qid);
+int mtk_foe_entry_set_dscp(struct mtk_foe_entry *entry, int dscp);
 int mtk_foe_entry_set_keep_dscp_ecn(struct mtk_foe_entry *entry, bool keep_en);
 bool mtk_foe_entry_match(struct mtk_foe_entry *entry, struct mtk_foe_entry *data);
 int mtk_foe_entry_commit(struct mtk_ppe *ppe, struct mtk_flow_entry *entry);
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
index c995bae..7e38988 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
@@ -187,7 +187,7 @@ static int
 mtk_flow_set_output_device(struct mtk_eth *eth, struct mtk_foe_entry *foe,
 			   struct net_device *idev, struct net_device *odev,
 			   struct flow_cls_offload *f, const u8 *dest_mac,
-			   int *wed_index)
+			   int *wed_index, int dscp)
 {
 	struct mtk_wdma_info info = {};
 	struct nf_conn *ct = NULL;
@@ -241,6 +241,8 @@ mtk_flow_set_output_device(struct mtk_eth *eth, struct mtk_foe_entry *foe,
 		mtk_foe_entry_set_qid(foe, queue & MTK_QDMA_TX_MASK);
 
 out:
+	mtk_foe_entry_set_dscp(foe, dscp);
+
 	if (eth->qos_toggle == 1 || (ct_mark & MTK_QDMA_TX_MASK) >= 6) {
 		u8 qos_ul_toggle;
 
@@ -279,6 +281,7 @@ mtk_flow_offload_replace(struct mtk_eth *eth, struct flow_cls_offload *f)
 	int wed_index = -1;
 	u16 addr_type = 0;
 	u8 l4proto = 0;
+	u8 dscp = 0;
 	int err = 0;
 	int i;
 
@@ -315,6 +318,15 @@ mtk_flow_offload_replace(struct mtk_eth *eth, struct flow_cls_offload *f)
 		return -EOPNOTSUPP;
 	}
 
+	if (flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_IP)) {
+		struct flow_match_ip match;
+
+		flow_rule_match_ip(rule, &match);
+		dscp = match.key->tos;
+	} else {
+		return -EOPNOTSUPP;
+	}
+
 	switch (addr_type) {
 	case 0:
 		offload_type = MTK_PPE_PKT_TYPE_BRIDGE;
@@ -489,7 +501,7 @@ mtk_flow_offload_replace(struct mtk_eth *eth, struct flow_cls_offload *f)
 		mtk_foe_entry_set_pppoe(&foe, data.pppoe.sid);
 
 	err = mtk_flow_set_output_device(eth, &foe, idev, odev, f, data.eth.h_dest,
-					 &wed_index);
+					 &wed_index, dscp);
 	if (err)
 		return err;
 
diff --git a/include/net/netfilter/nf_conntrack_extend.h b/include/net/netfilter/nf_conntrack_extend.h
index 112a6f4..d7fb4db 100644
--- a/include/net/netfilter/nf_conntrack_extend.h
+++ b/include/net/netfilter/nf_conntrack_extend.h
@@ -13,6 +13,7 @@ enum nf_ct_ext_id {
 #endif
 	NF_CT_EXT_SEQADJ,
 	NF_CT_EXT_ACCT,
+	NF_CT_EXT_QOS,
 #ifdef CONFIG_NF_CONNTRACK_EVENTS
 	NF_CT_EXT_ECACHE,
 #endif
@@ -35,6 +36,7 @@ enum nf_ct_ext_id {
 #define NF_CT_EXT_NAT_TYPE struct nf_conn_nat
 #define NF_CT_EXT_SEQADJ_TYPE struct nf_conn_seqadj
 #define NF_CT_EXT_ACCT_TYPE struct nf_conn_acct
+#define NF_CT_EXT_QOS_TYPE struct nf_conn_qos
 #define NF_CT_EXT_ECACHE_TYPE struct nf_conntrack_ecache
 #define NF_CT_EXT_TSTAMP_TYPE struct nf_conn_tstamp
 #define NF_CT_EXT_TIMEOUT_TYPE struct nf_conn_timeout
diff --git a/include/net/netfilter/nf_conntrack_qos.h b/include/net/netfilter/nf_conntrack_qos.h
new file mode 100644
index 0000000..d2934da
--- /dev/null
+++ b/include/net/netfilter/nf_conntrack_qos.h
@@ -0,0 +1,64 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+
+#ifndef _NF_CONNTRACK_QOS_H
+#define _NF_CONNTRACK_QOS_H
+#include <net/net_namespace.h>
+#include <linux/netfilter/nf_conntrack_common.h>
+#include <linux/netfilter/nf_conntrack_tuple_common.h>
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_extend.h>
+
+struct nf_conn_tos {
+	u8		value;
+	atomic64_t	counter;
+};
+
+struct nf_conn_qos {
+	struct nf_conn_tos	tos[IP_CT_DIR_MAX];
+};
+
+static inline
+struct nf_conn_qos *nf_conn_qos_find(const struct nf_conn *ct)
+{
+	return nf_ct_ext_find(ct, NF_CT_EXT_QOS);
+}
+
+static inline
+struct nf_conn_qos *nf_ct_qos_ext_add(struct nf_conn *ct, gfp_t gfp)
+{
+#if IS_ENABLED(CONFIG_NF_CONNTRACK)
+	struct net *net = nf_ct_net(ct);
+	struct nf_conn_qos *qos;
+
+	if (!net->ct.sysctl_qos)
+		return NULL;
+
+	qos = nf_ct_ext_add(ct, NF_CT_EXT_QOS, gfp);
+	if (!qos)
+		pr_debug("failed to add qos extension area");
+
+	memset(qos, 0, sizeof(struct nf_conn_qos));
+
+	return qos;
+#else
+	return NULL;
+#endif
+}
+
+static inline void nf_ct_qos_clear(struct nf_conn *ct)
+{
+#if IS_ENABLED(CONFIG_NF_CONNTRACK)
+	struct nf_conn_qos *qos;
+
+	qos = nf_ct_ext_find(ct, NF_CT_EXT_QOS);
+	if (qos)
+		memset(qos, 0, sizeof(struct nf_conn_qos));
+#endif
+}
+
+void nf_conntrack_qos_pernet_init(struct net *net);
+
+int nf_conntrack_qos_init(void);
+void nf_conntrack_qos_fini(void);
+
+#endif /* _NF_CONNTRACK_QOS_H */
diff --git a/include/net/netfilter/nf_flow_table.h b/include/net/netfilter/nf_flow_table.h
index 7a2945e..4d0abec 100644
--- a/include/net/netfilter/nf_flow_table.h
+++ b/include/net/netfilter/nf_flow_table.h
@@ -38,6 +38,7 @@ struct nf_flow_key {
 	};
 	struct flow_dissector_key_tcp			tcp;
 	struct flow_dissector_key_ports			tp;
+	struct flow_dissector_key_ip			ip;
 } __aligned(BITS_PER_LONG / 8); /* Ensure that we can do comparisons as longs. */
 
 struct nf_flow_match {
@@ -147,6 +148,7 @@ struct flow_offload_tuple {
 			u8		h_dest[ETH_ALEN];
 		} out;
 	};
+	u8				tos;
 };
 
 struct flow_offload_tuple_rhash {
diff --git a/include/net/netns/conntrack.h b/include/net/netns/conntrack.h
index 9e3963c..31bdee1 100644
--- a/include/net/netns/conntrack.h
+++ b/include/net/netns/conntrack.h
@@ -112,6 +112,7 @@ struct netns_ct {
 	unsigned int		sysctl_log_invalid; /* Log invalid packets */
 	int			sysctl_events;
 	int			sysctl_acct;
+	u8			sysctl_qos;
 	int			sysctl_auto_assign_helper;
 	int			sysctl_tstamp;
 	int			sysctl_checksum;
diff --git a/net/netfilter/Makefile b/net/netfilter/Makefile
index d93a121..54f6b6d 100644
--- a/net/netfilter/Makefile
+++ b/net/netfilter/Makefile
@@ -4,7 +4,7 @@ netfilter-objs := core.o nf_log.o nf_queue.o nf_sockopt.o utils.o
 nf_conntrack-y	:= nf_conntrack_core.o nf_conntrack_standalone.o nf_conntrack_expect.o nf_conntrack_helper.o \
 		   nf_conntrack_proto.o nf_conntrack_proto_generic.o nf_conntrack_proto_tcp.o nf_conntrack_proto_udp.o \
 		   nf_conntrack_proto_icmp.o \
-		   nf_conntrack_extend.o nf_conntrack_acct.o nf_conntrack_seqadj.o
+		   nf_conntrack_extend.o nf_conntrack_acct.o nf_conntrack_qos.o nf_conntrack_seqadj.o
 
 nf_conntrack-$(subst m,y,$(CONFIG_IPV6)) += nf_conntrack_proto_icmpv6.o
 nf_conntrack-$(CONFIG_NF_CONNTRACK_TIMEOUT) += nf_conntrack_timeout.o
diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
index 65d16ef..601f61f 100644
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@ -42,6 +42,7 @@
 #include <net/netfilter/nf_conntrack_core.h>
 #include <net/netfilter/nf_conntrack_extend.h>
 #include <net/netfilter/nf_conntrack_acct.h>
+#include <net/netfilter/nf_conntrack_qos.h>
 #include <net/netfilter/nf_conntrack_ecache.h>
 #include <net/netfilter/nf_conntrack_zones.h>
 #include <net/netfilter/nf_conntrack_timestamp.h>
@@ -1432,6 +1433,7 @@ init_conntrack(struct net *net, struct nf_conn *tmpl,
 				      GFP_ATOMIC);
 
 	nf_ct_acct_ext_add(ct, GFP_ATOMIC);
+	nf_ct_qos_ext_add(ct, GFP_ATOMIC);
 	nf_ct_tstamp_ext_add(ct, GFP_ATOMIC);
 	nf_ct_labels_ext_add(ct);
 
@@ -2466,6 +2468,10 @@ int nf_conntrack_init_start(void)
 	if (ret < 0)
 		goto err_acct;
 
+	ret = nf_conntrack_qos_init();
+	if (ret < 0)
+		goto err_qos;
+
 	ret = nf_conntrack_tstamp_init();
 	if (ret < 0)
 		goto err_tstamp;
@@ -2512,6 +2518,8 @@ int nf_conntrack_init_start(void)
 err_ecache:
 	nf_conntrack_tstamp_fini();
 err_tstamp:
+	nf_conntrack_qos_fini();
+err_qos:
 	nf_conntrack_acct_fini();
 err_acct:
 	nf_conntrack_expect_fini();
@@ -2572,6 +2580,7 @@ int nf_conntrack_init_net(struct net *net)
 		goto err_expect;
 
 	nf_conntrack_acct_pernet_init(net);
+	nf_conntrack_qos_pernet_init(net);
 	nf_conntrack_tstamp_pernet_init(net);
 	nf_conntrack_ecache_pernet_init(net);
 	nf_conntrack_helper_pernet_init(net);
diff --git a/net/netfilter/nf_conntrack_netlink.c b/net/netfilter/nf_conntrack_netlink.c
index 45d0218..665e179 100644
--- a/net/netfilter/nf_conntrack_netlink.c
+++ b/net/netfilter/nf_conntrack_netlink.c
@@ -2003,6 +2003,7 @@ ctnetlink_create_conntrack(struct net *net,
 		goto err2;
 
 	nf_ct_acct_ext_add(ct, GFP_ATOMIC);
+	nf_ct_qos_ext_add(ct, GFP_ATOMIC);
 	nf_ct_tstamp_ext_add(ct, GFP_ATOMIC);
 	nf_ct_ecache_ext_add(ct, 0, 0, GFP_ATOMIC);
 	nf_ct_labels_ext_add(ct);
diff --git a/net/netfilter/nf_conntrack_qos.c b/net/netfilter/nf_conntrack_qos.c
new file mode 100644
index 0000000..086ce44
--- /dev/null
+++ b/net/netfilter/nf_conntrack_qos.c
@@ -0,0 +1,43 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/* QoS handling for netfilter. */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/netfilter.h>
+#include <linux/slab.h>
+#include <linux/kernel.h>
+#include <linux/moduleparam.h>
+#include <linux/export.h>
+
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_extend.h>
+#include <net/netfilter/nf_conntrack_qos.h>
+
+static bool nf_ct_qos __read_mostly = 1;
+
+module_param_named(qos, nf_ct_qos, bool, 0644);
+MODULE_PARM_DESC(qos, "Enable connection tracking qos.");
+
+static const struct nf_ct_ext_type qos_extend = {
+	.len	= sizeof(struct nf_conn_qos),
+	.align	= __alignof__(struct nf_conn_qos),
+	.id	= NF_CT_EXT_QOS,
+};
+
+void nf_conntrack_qos_pernet_init(struct net *net)
+{
+	net->ct.sysctl_qos = nf_ct_qos;
+}
+
+int nf_conntrack_qos_init(void)
+{
+	int ret = nf_ct_extend_register(&qos_extend);
+	if (ret < 0)
+		pr_err("Unable to register extension\n");
+	return ret;
+}
+
+void nf_conntrack_qos_fini(void)
+{
+	nf_ct_extend_unregister(&qos_extend);
+}
diff --git a/net/netfilter/nf_conntrack_standalone.c b/net/netfilter/nf_conntrack_standalone.c
index a2cfafa..58b976e 100644
--- a/net/netfilter/nf_conntrack_standalone.c
+++ b/net/netfilter/nf_conntrack_standalone.c
@@ -21,6 +21,7 @@
 #include <net/netfilter/nf_conntrack_expect.h>
 #include <net/netfilter/nf_conntrack_helper.h>
 #include <net/netfilter/nf_conntrack_acct.h>
+#include <net/netfilter/nf_conntrack_qos.h>
 #include <net/netfilter/nf_conntrack_zones.h>
 #include <net/netfilter/nf_conntrack_timestamp.h>
 #include <linux/rculist_nulls.h>
@@ -294,6 +295,18 @@ seq_print_acct(struct seq_file *s, const struct nf_conn *ct, int dir)
 	return 0;
 }
 
+static void
+seq_print_qos(struct seq_file *s, const struct nf_conn *ct, int dir)
+{
+	struct nf_conn_qos *qos;
+
+	qos = nf_conn_qos_find(ct);
+	if (!qos)
+		return;
+
+	seq_printf(s, "tos=%u ", qos->tos[dir].value);
+}
+
 /* return 0 on success, 1 in case of error */
 static int ct_seq_show(struct seq_file *s, void *v)
 {
@@ -343,6 +356,8 @@ static int ct_seq_show(struct seq_file *s, void *v)
 	if (seq_print_acct(s, ct, IP_CT_DIR_ORIGINAL))
 		goto release;
 
+	seq_print_qos(s, ct, IP_CT_DIR_ORIGINAL);
+
 	if (!(test_bit(IPS_SEEN_REPLY_BIT, &ct->status)))
 		seq_puts(s, "[UNREPLIED] ");
 
@@ -353,6 +368,8 @@ static int ct_seq_show(struct seq_file *s, void *v)
 	if (seq_print_acct(s, ct, IP_CT_DIR_REPLY))
 		goto release;
 
+	seq_print_qos(s, ct, IP_CT_DIR_REPLY);
+
 	if (test_bit(IPS_HW_OFFLOAD_BIT, &ct->status))
 		seq_puts(s, "[HW_OFFLOAD] ");
 	else if (test_bit(IPS_OFFLOAD_BIT, &ct->status))
@@ -604,6 +621,7 @@ enum nf_ct_sysctl_index {
 	NF_SYSCTL_CT_LOG_INVALID,
 	NF_SYSCTL_CT_EXPECT_MAX,
 	NF_SYSCTL_CT_ACCT,
+	NF_SYSCTL_CT_QOS,
 	NF_SYSCTL_CT_HELPER,
 #ifdef CONFIG_NF_CONNTRACK_EVENTS
 	NF_SYSCTL_CT_EVENTS,
@@ -722,6 +740,15 @@ static struct ctl_table nf_ct_sysctl_table[] = {
 		.extra1 	= SYSCTL_ZERO,
 		.extra2 	= SYSCTL_ONE,
 	},
+	[NF_SYSCTL_CT_QOS] = {
+		.procname	= "nf_conntrack_qos",
+		.data		= &init_net.ct.sysctl_qos,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec_minmax,
+		.extra1 	= SYSCTL_ZERO,
+		.extra2 	= SYSCTL_ONE,
+	},
 	[NF_SYSCTL_CT_HELPER] = {
 		.procname	= "nf_conntrack_helper",
 		.data		= &init_net.ct.sysctl_auto_assign_helper,
diff --git a/net/netfilter/nf_flow_table_core.c b/net/netfilter/nf_flow_table_core.c
index a342d92..d2f1650 100644
--- a/net/netfilter/nf_flow_table_core.c
+++ b/net/netfilter/nf_flow_table_core.c
@@ -9,6 +9,7 @@
 #include <net/ip6_route.h>
 #include <net/netfilter/nf_flow_table.h>
 #include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_qos.h>
 #include <net/netfilter/nf_conntrack_core.h>
 #include <net/netfilter/nf_conntrack_l4proto.h>
 #include <net/netfilter/nf_conntrack_tuple.h>
@@ -352,6 +353,7 @@ static void flow_offload_del(struct nf_flowtable *flow_table,
 
 void flow_offload_teardown(struct flow_offload *flow)
 {
+	nf_ct_qos_clear(flow->ct);
 	clear_bit(IPS_OFFLOAD_BIT, &flow->ct->status);
 	set_bit(NF_FLOW_TEARDOWN, &flow->flags);
 
diff --git a/net/netfilter/nf_flow_table_offload.c b/net/netfilter/nf_flow_table_offload.c
index ba34572..b8b2fa6 100644
--- a/net/netfilter/nf_flow_table_offload.c
+++ b/net/netfilter/nf_flow_table_offload.c
@@ -104,6 +104,7 @@ static int nf_flow_rule_match(struct nf_flow_match *match,
 	NF_FLOW_DISSECTOR(match, FLOW_DISSECTOR_KEY_IPV6_ADDRS, ipv6);
 	NF_FLOW_DISSECTOR(match, FLOW_DISSECTOR_KEY_TCP, tcp);
 	NF_FLOW_DISSECTOR(match, FLOW_DISSECTOR_KEY_PORTS, tp);
+	NF_FLOW_DISSECTOR(match, FLOW_DISSECTOR_KEY_IP, ip);
 
 	if (other_dst && other_dst->lwtstate) {
 		tun_info = lwt_tun_info(other_dst->lwtstate);
@@ -183,10 +184,14 @@ static int nf_flow_rule_match(struct nf_flow_match *match,
 	key->tp.dst = tuple->dst_port;
 	mask->tp.dst = 0xffff;
 
+	key->ip.tos = tuple->tos;
+	mask->ip.tos = 0xff;
+
 	match->dissector.used_keys |= BIT(FLOW_DISSECTOR_KEY_META) |
 				      BIT(FLOW_DISSECTOR_KEY_CONTROL) |
 				      BIT(FLOW_DISSECTOR_KEY_BASIC) |
-				      BIT(FLOW_DISSECTOR_KEY_PORTS);
+				      BIT(FLOW_DISSECTOR_KEY_PORTS) |
+				      BIT(FLOW_DISSECTOR_KEY_IP);
 	return 0;
 }
 
diff --git a/net/netfilter/nft_flow_offload.c b/net/netfilter/nft_flow_offload.c
index ab542a0..922daeb 100644
--- a/net/netfilter/nft_flow_offload.c
+++ b/net/netfilter/nft_flow_offload.c
@@ -11,6 +11,7 @@
 #include <net/ip.h> /* for ipv4 options. */
 #include <net/netfilter/nf_tables.h>
 #include <net/netfilter/nf_tables_core.h>
+#include <net/netfilter/nf_conntrack_qos.h>
 #include <net/netfilter/nf_conntrack_core.h>
 #include <net/netfilter/nf_conntrack_extend.h>
 #include <net/netfilter/nf_flow_table.h>
@@ -20,6 +21,19 @@ struct nft_flow_offload {
 	struct nft_flowtable	*flowtable;
 };
 
+static void
+flow_offload_dscp_init(struct flow_offload *flow, const struct nf_conn *ct,
+		       enum ip_conntrack_dir dir)
+{
+	struct nf_conn_qos *qos;
+
+	qos = nf_conn_qos_find(ct);
+	if (qos) {
+		flow->tuplehash[dir].tuple.tos = qos->tos[dir].value;
+		flow->tuplehash[!dir].tuple.tos = qos->tos[!dir].value;
+	}
+}
+
 static enum flow_offload_xmit_type nft_xmit_type(struct dst_entry *dst)
 {
 	if (dst_xfrm(dst))
@@ -474,6 +488,11 @@ static void nft_flow_offload_eval(const struct nft_expr *expr,
 	struct flow_offload *flow;
 	enum ip_conntrack_dir dir;
 	struct nf_conn *ct;
+	struct nf_conn_qos *qos;
+	struct ipv6hdr *ip6h;
+	struct iphdr *iph;
+	u32 offset = 0;
+	u8 tos = 0;
 	int ret;
 
 	if (nft_flow_offload_skip(pkt->skb, nft_pf(pkt)))
@@ -506,11 +525,31 @@ static void nft_flow_offload_eval(const struct nft_expr *expr,
 	if (!nf_ct_is_confirmed(ct))
 		goto out;
 
+	dir = CTINFO2DIR(ctinfo);
+
+	qos = nf_conn_qos_find(ct);
+	if (qos) {
+		switch (nft_pf(pkt)) {
+		case NFPROTO_IPV4:
+			iph = (struct iphdr *)(skb_network_header(pkt->skb) + offset);
+			tos = iph->tos;
+			break;
+		case NFPROTO_IPV6:
+			ip6h = (struct ipv6hdr *)(skb_network_header(pkt->skb) + offset);
+			tos = ipv6_get_dsfield(ip6h);
+			break;
+		}
+
+		qos->tos[dir].value = tos;
+		atomic64_add(1, &qos->tos[dir].counter);
+
+		if (atomic64_read(&qos->tos[dir].counter) < 30)
+			goto out;
+	}
+
 	if (test_and_set_bit(IPS_OFFLOAD_BIT, &ct->status))
 		goto out;
 
-	dir = CTINFO2DIR(ctinfo);
-
 	if (nft_flow_offload_is_bridging(pkt->skb)) {
 		if (nft_flow_route_bridging(pkt, ct, &route, dir, priv->flowtable) < 0)
 			goto err_flow_route;
@@ -526,6 +565,8 @@ static void nft_flow_offload_eval(const struct nft_expr *expr,
 	if (flow_offload_route_init(flow, &route) < 0)
 		goto err_flow_add;
 
+	flow_offload_dscp_init(flow, ct, dir);
+
 	if (tcph) {
 		ct->proto.tcp.seen[0].flags |= IP_CT_TCP_FLAG_BE_LIBERAL;
 		ct->proto.tcp.seen[1].flags |= IP_CT_TCP_FLAG_BE_LIBERAL;
diff --git a/net/netfilter/xt_FLOWOFFLOAD.c b/net/netfilter/xt_FLOWOFFLOAD.c
index b7b4f30..18bebfe 100644
--- a/net/netfilter/xt_FLOWOFFLOAD.c
+++ b/net/netfilter/xt_FLOWOFFLOAD.c
@@ -12,6 +12,7 @@
 #include <linux/if_vlan.h>
 #include <net/ip.h>
 #include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_qos.h>
 #include <net/netfilter/nf_conntrack_core.h>
 #include <net/netfilter/nf_conntrack_extend.h>
 #include <net/netfilter/nf_conntrack_helper.h>
@@ -51,6 +52,19 @@ static DEFINE_SPINLOCK(hooks_lock);
 
 struct xt_flowoffload_table flowtable[2];
 
+static void
+xt_flowoffload_dscp_init(struct flow_offload *flow, const struct nf_conn *ct,
+			 enum ip_conntrack_dir dir)
+{
+	struct nf_conn_qos *qos;
+
+	qos = nf_conn_qos_find(ct);
+	if (qos) {
+		flow->tuplehash[dir].tuple.tos = qos->tos[dir].value;
+		flow->tuplehash[!dir].tuple.tos = qos->tos[!dir].value;
+	}
+}
+
 static unsigned int
 xt_flowoffload_net_hook(void *priv, struct sk_buff *skb,
 			const struct nf_hook_state *state)
@@ -652,6 +666,11 @@ flowoffload_tg(struct sk_buff *skb, const struct xt_action_param *par)
 	struct net_device *devs[2] = {};
 	struct nf_conn *ct;
 	struct net *net;
+	struct nf_conn_qos *qos;
+	struct ipv6hdr *ip6h;
+	struct iphdr *iph;
+	u32 offset = 0;
+	u8 tos = 0;
 
 	if (xt_flowoffload_skip(skb, xt_family(par)))
 		return XT_CONTINUE;
@@ -685,6 +704,26 @@ flowoffload_tg(struct sk_buff *skb, const struct xt_action_param *par)
 
 	dir = CTINFO2DIR(ctinfo);
 
+	qos = nf_conn_qos_find(ct);
+	if (qos) {
+		switch (xt_family(par)) {
+		case NFPROTO_IPV4:
+			iph = (struct iphdr *)(skb_network_header(skb) + offset);
+			tos = iph->tos;
+			break;
+		case NFPROTO_IPV6:
+			ip6h = (struct ipv6hdr *)(skb_network_header(skb) + offset);
+			tos = ipv6_get_dsfield(ip6h);
+			break;
+		}
+
+		qos->tos[dir].value = tos;
+		atomic64_add(1, &qos->tos[dir].counter);
+
+		if (atomic64_read(&qos->tos[dir].counter) < 30)
+			return XT_CONTINUE;
+	}
+
 	devs[dir] = xt_out(par);
 	devs[!dir] = xt_in(par);
 
@@ -714,6 +753,8 @@ flowoffload_tg(struct sk_buff *skb, const struct xt_action_param *par)
 	if (flow_offload_route_init(flow, &route) < 0)
 		goto err_flow_add;
 
+	xt_flowoffload_dscp_init(flow, ct, dir);
+
 	if (tcph) {
 		ct->proto.tcp.seen[0].flags |= IP_CT_TCP_FLAG_BE_LIBERAL;
 		ct->proto.tcp.seen[1].flags |= IP_CT_TCP_FLAG_BE_LIBERAL;
-- 
2.45.2

