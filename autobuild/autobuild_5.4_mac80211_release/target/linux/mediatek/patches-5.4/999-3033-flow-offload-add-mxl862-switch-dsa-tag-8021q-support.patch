From 0dfc692f15f8539bfaa25b729a70d936f1dd4ec5 Mon Sep 17 00:00:00 2001
From: "chak-kei.lam" <chak-kei.lam@mediatek.com>
Date: Mon, 28 Apr 2025 14:29:30 +0800
Subject: [PATCH] flow offload add mxl862 switch dsa tag 8021q support

---
 drivers/net/ethernet/mediatek/mtk_ppe.c       | 25 +++++++++++-----
 drivers/net/ethernet/mediatek/mtk_ppe.h       |  2 +-
 .../net/ethernet/mediatek/mtk_ppe_offload.c   | 30 +++++++++++--------
 3 files changed, 35 insertions(+), 22 deletions(-)

diff --git a/drivers/net/ethernet/mediatek/mtk_ppe.c b/drivers/net/ethernet/mediatek/mtk_ppe.c
index 967c8d3..0eb980a 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe.c
@@ -365,20 +365,29 @@ int mtk_foe_entry_set_ipv6_tuple(struct mtk_foe_entry *entry,
 	return 0;
 }
 
-int mtk_foe_entry_set_dsa(struct mtk_foe_entry *entry, int port)
+int mtk_foe_entry_set_dsa(struct mtk_foe_entry *entry, int proto, int port)
 {
-	struct mtk_foe_mac_info *l2 = mtk_foe_entry_l2(entry);
+#if IS_ENABLED(CONFIG_NET_DSA)
+	struct mtk_foe_mac_info *l2;
 
-	l2->etype = BIT(port);
+	if (proto == DSA_TAG_PROTO_MXL862_8021Q) {
+		mtk_foe_entry_set_vlan(entry, port + BIT(11));
+	} else {
+		l2 = mtk_foe_entry_l2(entry);
+		l2->etype = BIT(port);
 
-	if (!(entry->ib1 & MTK_FOE_IB1_BIND_VLAN_LAYER))
-		entry->ib1 |= FIELD_PREP(MTK_FOE_IB1_BIND_VLAN_LAYER, 1);
-	else
-		l2->etype |= BIT(8);
+		if (!(entry->ib1 & MTK_FOE_IB1_BIND_VLAN_LAYER))
+			entry->ib1 |= FIELD_PREP(MTK_FOE_IB1_BIND_VLAN_LAYER, 1);
+		else
+			l2->etype |= BIT(8);
 
-	entry->ib1 &= ~MTK_FOE_IB1_BIND_VLAN_TAG;
+		entry->ib1 &= ~MTK_FOE_IB1_BIND_VLAN_TAG;
+	}
 
 	return 0;
+#else
+	return -ENODEV;
+#endif
 }
 
 int mtk_foe_entry_set_vlan(struct mtk_foe_entry *entry, int vid)
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe.h b/drivers/net/ethernet/mediatek/mtk_ppe.h
index 36f8ecd..81d870a 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe.h
+++ b/drivers/net/ethernet/mediatek/mtk_ppe.h
@@ -417,7 +417,7 @@ int mtk_foe_entry_set_ipv4_tuple(struct mtk_foe_entry *entry, bool orig,
 int mtk_foe_entry_set_ipv6_tuple(struct mtk_foe_entry *entry,
 				 __be32 *src_addr, __be16 src_port,
 				 __be32 *dest_addr, __be16 dest_port);
-int mtk_foe_entry_set_dsa(struct mtk_foe_entry *entry, int port);
+int mtk_foe_entry_set_dsa(struct mtk_foe_entry *entry, int proto, int port);
 int mtk_foe_entry_set_vlan(struct mtk_foe_entry *entry, int vid);
 int mtk_foe_entry_set_pppoe(struct mtk_foe_entry *entry, int sid);
 int mtk_foe_entry_set_tops_entry(struct mtk_foe_entry *entry, int tops_entry);
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
index e51cce4..84399ca 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
@@ -166,7 +166,7 @@ mtk_flow_mangle_ipv4(const struct flow_action_entry *act,
 }
 
 static int
-mtk_flow_get_dsa_port(struct net_device **dev)
+mtk_flow_get_dsa_port(struct net_device **dev, int *proto)
 {
 #if IS_ENABLED(CONFIG_NET_DSA)
 	struct dsa_port *dp;
@@ -176,10 +176,13 @@ mtk_flow_get_dsa_port(struct net_device **dev)
 		return -ENODEV;
 
 	if (dp->cpu_dp->tag_ops->proto != DSA_TAG_PROTO_MTK &&
-	    dp->cpu_dp->tag_ops->proto != DSA_TAG_PROTO_ARHT)
+	    dp->cpu_dp->tag_ops->proto != DSA_TAG_PROTO_ARHT &&
+	    dp->cpu_dp->tag_ops->proto != DSA_TAG_PROTO_MXL862_8021Q)
 		return -ENODEV;
 
 	*dev = dp->cpu_dp->master;
+	if (proto)
+		*proto = dp->cpu_dp->tag_ops->proto;
 
 	return dp->index;
 #else
@@ -277,7 +280,7 @@ mtk_flow_set_output_device(struct mtk_eth *eth, struct mtk_foe_entry *foe,
 	struct nf_conn *ct = NULL;
 	struct mtk_mac *mac;
 	u32 ct_mark = 0;
-	int pse_port, dsa_port, queue;
+	int pse_port, dsa_port, dsa_proto, queue;
 
 	if (f->flow && f->flow->ct) {
 		ct = f->flow->ct;
@@ -302,7 +305,7 @@ mtk_flow_set_output_device(struct mtk_eth *eth, struct mtk_foe_entry *foe,
 		goto out;
 	}
 
-	dsa_port = mtk_flow_get_dsa_port(&odev);
+	dsa_port = mtk_flow_get_dsa_port(&odev, &dsa_proto);
 
 	if (odev == eth->netdev[0]) {
 		mac = eth->mac[0];
@@ -318,7 +321,7 @@ mtk_flow_set_output_device(struct mtk_eth *eth, struct mtk_foe_entry *foe,
 
 	if (dsa_port >= 0) {
 		queue = dsa_port + MTK_GMAC_ID_MAX;
-		mtk_foe_entry_set_dsa(foe, dsa_port);
+		mtk_foe_entry_set_dsa(foe, dsa_proto, dsa_port);
 	} else {
 		queue = (pse_port == PSE_GDM3_PORT) ? 2 : pse_port - 1;
 	}
@@ -502,6 +505,7 @@ mtk_flow_offload_replace(struct mtk_eth *eth, struct flow_cls_offload *f)
 		return err;
 
 #if defined(CONFIG_MEDIATEK_NETSYS_V2) || defined(CONFIG_MEDIATEK_NETSYS_V3)
+	mtk_flow_get_dsa_port(&idev, NULL);
 	if (idev && idev->netdev_ops->ndo_fill_receive_path) {
 		ctx.dev = idev;
 		idev->netdev_ops->ndo_fill_receive_path(&ctx, &path);
@@ -582,6 +586,14 @@ mtk_flow_offload_replace(struct mtk_eth *eth, struct flow_cls_offload *f)
 			return err;
 	}
 
+	err = mtk_flow_set_output_device(eth, &foe, idev, odev, f, data.eth.h_dest,
+					 &wed_index, dscp);
+	if (err)
+		return err;
+
+	if (wed_index >= 0 && (err = mtk_wed_flow_add(wed_index)) < 0)
+		return err;
+
 	if (offload_type == MTK_PPE_PKT_TYPE_BRIDGE)
 		foe.bridge.vlan = data.vlan_in;
 
@@ -594,14 +606,6 @@ mtk_flow_offload_replace(struct mtk_eth *eth, struct flow_cls_offload *f)
 	if (data.pppoe.num == 1)
 		mtk_foe_entry_set_pppoe(&foe, data.pppoe.sid);
 
-	err = mtk_flow_set_output_device(eth, &foe, idev, odev, f, data.eth.h_dest,
-					 &wed_index, dscp);
-	if (err)
-		return err;
-
-	if (wed_index >= 0 && (err = mtk_wed_flow_add(wed_index)) < 0)
-		return err;
-
 	entry = kzalloc(sizeof(*entry), GFP_KERNEL);
 	if (!entry)
 		return -ENOMEM;
-- 
2.45.2

