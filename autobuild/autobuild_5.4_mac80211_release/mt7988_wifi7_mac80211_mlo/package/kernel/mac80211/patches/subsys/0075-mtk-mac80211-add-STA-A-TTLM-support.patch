From b16b59bd3de47f2aa16501572b0d321dc08a3c87 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Fri, 2 Aug 2024 17:08:08 +0800
Subject: [PATCH 75/87] mtk: mac80211: add STA A-TTLM support

Move adv_ttlm_info to ieee80211_vif so that driver can use it in
vif_cfg_changed callback.

Add BSS_CHANGED_MLD_ADV_TTLM and re-name the changed flag for
negotiation TTLM.

It is necessary to distinguish adv_ttlm from neg_ttlm because of the
different data structure used.
(ieee80211_adv_ttlm_info vs. ieee80211_neg_ttlm)

This change includes:
1. do not call ieee80211_set_active_link(), which will remove
   disabled/dormant links. Removing the disabled/dormant links is not
   the purpose of TTLM.
2. use the flag BSS_CHANGED_MLD_ADV_TTLM properly.
3. set adv_ttlm_info to active _before_ calling ieee80211_ttlm_set_links
   so that driver knows the adv-TTLM is active or not when handle the
   vif_cfg_vhanged callback.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 .../wireless/intel/iwlwifi/mvm/mld-mac80211.c |  2 +-
 include/net/mac80211.h                        | 27 +++++++++--
 net/mac80211/ieee80211_i.h                    | 12 -----
 net/mac80211/main.c                           |  3 +-
 net/mac80211/mlme.c                           | 48 +++++++++++--------
 5 files changed, 56 insertions(+), 36 deletions(-)

diff --git a/drivers/net/wireless/intel/iwlwifi/mvm/mld-mac80211.c b/drivers/net/wireless/intel/iwlwifi/mvm/mld-mac80211.c
index dec06641..28935486 100644
--- a/drivers/net/wireless/intel/iwlwifi/mvm/mld-mac80211.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/mld-mac80211.c
@@ -950,7 +950,7 @@ static void iwl_mvm_mld_vif_cfg_changed_station(struct iwl_mvm *mvm,
 			IWL_ERR(mvm, "failed to update power mode\n");
 	}
 
-	if (changes & (BSS_CHANGED_MLD_VALID_LINKS | BSS_CHANGED_MLD_TTLM) &&
+	if (changes & (BSS_CHANGED_MLD_VALID_LINKS | BSS_CHANGED_MLD_NEG_TTLM) &&
 	    ieee80211_vif_is_mld(vif) && mvmvif->authorized)
 		wiphy_delayed_work_queue(mvm->hw->wiphy,
 					 &mvmvif->mlo_int_scan_wk, 0);
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 1a29425c..bb80d823 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -363,7 +363,8 @@ struct ieee80211_vif_chanctx_switch {
  * @BSS_CHANGED_UNSOL_BCAST_PROBE_RESP: Unsolicited broadcast probe response
  *	status changed.
  * @BSS_CHANGED_MLD_VALID_LINKS: MLD valid links status changed.
- * @BSS_CHANGED_MLD_TTLM: negotiated TID to link mapping was changed
+ * @BSS_CHANGED_MLD_NEG_TTLM: negotiated TID to link mapping was changed
+ * @BSS_CHANGED_MLD_ADV_TTLM: advertised TID to link mapping was changed
  * @BSS_CHANGED_TPE: transmit power envelope changed
  */
 enum ieee80211_bss_change {
@@ -400,8 +401,9 @@ enum ieee80211_bss_change {
 	BSS_CHANGED_FILS_DISCOVERY      = 1<<30,
 	BSS_CHANGED_UNSOL_BCAST_PROBE_RESP = BIT_ULL(31),
 	BSS_CHANGED_MLD_VALID_LINKS	= BIT_ULL(33),
-	BSS_CHANGED_MLD_TTLM		= BIT_ULL(34),
-	BSS_CHANGED_TPE			= BIT_ULL(35),
+	BSS_CHANGED_MLD_NEG_TTLM	= BIT_ULL(34),
+	BSS_CHANGED_MLD_ADV_TTLM	= BIT_ULL(35),
+	BSS_CHANGED_TPE			= BIT_ULL(36),
 
 	/* when adding here, make sure to change ieee80211_reconfig */
 };
@@ -1939,6 +1941,22 @@ struct ieee80211_vif_cfg {
 
 #define IEEE80211_TTLM_NUM_TIDS 8
 
+/**
+ * struct ieee8021_adv_ttlm - advertised TID to link map info
+ *
+ * @switch_time: time in TUs at which the new mapping is established, or 0 if
+ *      there is no planned advertised TID-to-link mapping.
+ * @duration: duration of the planned TID-to-link mapping in TUs.
+ * @map: bitmap of usable links for all TIDs.
+ * @active: whether the advertised mapping is active or not.
+ */
+struct ieee80211_adv_ttlm {
+	u16 switch_time;
+	u32 duration;
+	u16 map;
+	bool active;
+};
+
 /**
  * struct ieee80211_neg_ttlm - negotiated TID to link map info
  *
@@ -1989,6 +2007,8 @@ enum ieee80211_neg_ttlm_res {
  *	suspended due to negotiated TTLM, and could be activated in the
  *	future by tearing down the TTLM negotiation.
  *	0 for non-MLO.
+ * @adv_ttlm: advertised TID to link mapping info.
+ *	see &struct ieee80211_adv_ttlm.
  * @neg_ttlm: negotiated TID to link mapping info.
  *	see &struct ieee80211_neg_ttlm.
  * @addr: address of this interface
@@ -2029,6 +2049,7 @@ struct ieee80211_vif {
 	struct ieee80211_bss_conf bss_conf;
 	struct ieee80211_bss_conf __rcu *link_conf[IEEE80211_MLD_MAX_NUM_LINKS];
 	u16 valid_links, active_links, dormant_links, suspended_links;
+	struct ieee80211_adv_ttlm adv_ttlm;
 	struct ieee80211_neg_ttlm neg_ttlm;
 	u8 addr[ETH_ALEN] __aligned(2);
 	bool p2p;
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index ca52549a..09c4102a 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -496,17 +496,6 @@ struct ieee80211_sta_tx_tspec {
 	bool downgraded;
 };
 
-/* Advertised TID-to-link mapping info */
-struct ieee80211_adv_ttlm_info {
-	/* time in TUs at which the new mapping is established, or 0 if there is
-	 * no planned advertised TID-to-link mapping
-	 */
-	u16 switch_time;
-	u32 duration; /* duration of the planned T2L map in TUs */
-	u16 map; /* map of usable links for all TIDs */
-	bool active; /* whether the advertised mapping is active or not */
-};
-
 DECLARE_EWMA(beacon_signal, 4, 4)
 
 struct ieee80211_if_managed {
@@ -606,7 +595,6 @@ struct ieee80211_if_managed {
 
 	/* TID-to-link mapping support */
 	struct wiphy_delayed_work ttlm_work;
-	struct ieee80211_adv_ttlm_info ttlm_info;
 	struct wiphy_work teardown_ttlm_work;
 
 	/* dialog token enumerator for neg TTLM request */
diff --git a/net/mac80211/main.c b/net/mac80211/main.c
index cdb4a377..20a7c75c 100644
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -328,7 +328,8 @@ EXPORT_SYMBOL(ieee80211_emulate_switch_vif_chanctx);
 				   BSS_CHANGED_ARP_FILTER |\
 				   BSS_CHANGED_SSID |\
 				   BSS_CHANGED_MLD_VALID_LINKS |\
-				   BSS_CHANGED_MLD_TTLM)
+				   BSS_CHANGED_MLD_ADV_TTLM |\
+				   BSS_CHANGED_MLD_NEG_TTLM)
 
 void ieee80211_bss_info_change_notify(struct ieee80211_sub_if_data *sdata,
 				      u64 changed)
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index 1ed98fc1..c8d690e9 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -3788,8 +3788,8 @@ static void ieee80211_set_disassoc(struct ieee80211_sub_if_data *sdata,
 	sdata->vif.cfg.eml_med_sync_delay = 0;
 	sdata->vif.cfg.mld_capa_op = 0;
 
-	memset(&sdata->u.mgd.ttlm_info, 0,
-	       sizeof(sdata->u.mgd.ttlm_info));
+	memset(&sdata->vif.adv_ttlm, 0,
+	       sizeof(sdata->vif.adv_ttlm));
 	wiphy_delayed_work_cancel(sdata->local->hw.wiphy, &ifmgd->ttlm_work);
 
 	memset(&sdata->vif.neg_ttlm, 0, sizeof(sdata->vif.neg_ttlm));
@@ -6471,7 +6471,7 @@ static int ieee80211_ttlm_set_links(struct ieee80211_sub_if_data *sdata,
 	if (sdata->vif.neg_ttlm.valid) {
 		memset(&sdata->vif.neg_ttlm, 0, sizeof(sdata->vif.neg_ttlm));
 		sdata->vif.suspended_links = 0;
-		changed = BSS_CHANGED_MLD_TTLM;
+		changed = BSS_CHANGED_MLD_NEG_TTLM;
 	}
 
 	if (sdata->vif.active_links != active_links) {
@@ -6479,6 +6479,9 @@ static int ieee80211_ttlm_set_links(struct ieee80211_sub_if_data *sdata,
 		 * so notify the driver about the status change
 		 */
 		changed |= BSS_CHANGED_MLD_VALID_LINKS;
+		/* FIXME calling ieee80211_set_active_links leads to inactive
+		 * links being deleted, which should not be the purpose of
+		 * "disabling links"
 		active_links &= sdata->vif.active_links;
 		if (!active_links)
 			active_links =
@@ -6489,6 +6492,7 @@ static int ieee80211_ttlm_set_links(struct ieee80211_sub_if_data *sdata,
 			sdata_info(sdata, "Failed to set TTLM active links\n");
 			goto out;
 		}
+		*/
 	}
 
 	ret = ieee80211_vif_set_links(sdata, sdata->vif.valid_links,
@@ -6500,7 +6504,10 @@ static int ieee80211_ttlm_set_links(struct ieee80211_sub_if_data *sdata,
 
 	sdata->vif.suspended_links = suspended_links;
 	if (sdata->vif.suspended_links)
-		changed |= BSS_CHANGED_MLD_TTLM;
+		changed |= BSS_CHANGED_MLD_NEG_TTLM;
+
+	if (sdata->vif.adv_ttlm.active)
+		changed |= BSS_CHANGED_MLD_ADV_TTLM;
 
 	ieee80211_vif_cfg_change_notify(sdata, changed);
 
@@ -6519,18 +6526,19 @@ static void ieee80211_tid_to_link_map_work(struct wiphy *wiphy,
 		container_of(work, struct ieee80211_sub_if_data,
 			     u.mgd.ttlm_work.work);
 
-	new_active_links = sdata->u.mgd.ttlm_info.map &
+	new_active_links = sdata->vif.adv_ttlm.map &
 			   sdata->vif.valid_links;
-	new_dormant_links = ~sdata->u.mgd.ttlm_info.map &
+	new_dormant_links = ~sdata->vif.adv_ttlm.map &
 			    sdata->vif.valid_links;
+	sdata->vif.adv_ttlm.active = true;
+	sdata->vif.adv_ttlm.switch_time = 0;
 
 	ieee80211_vif_set_links(sdata, sdata->vif.valid_links, 0);
 	if (ieee80211_ttlm_set_links(sdata, new_active_links, new_dormant_links,
-				     0))
+				     0)) {
+		sdata->vif.adv_ttlm.active = false;
 		return;
-
-	sdata->u.mgd.ttlm_info.active = true;
-	sdata->u.mgd.ttlm_info.switch_time = 0;
+	}
 }
 
 static u16 ieee80211_get_ttlm(u8 bm_size, u8 *data)
@@ -6544,7 +6552,7 @@ static u16 ieee80211_get_ttlm(u8 bm_size, u8 *data)
 static int
 ieee80211_parse_adv_t2l(struct ieee80211_sub_if_data *sdata,
 			const struct ieee80211_ttlm_elem *ttlm,
-			struct ieee80211_adv_ttlm_info *ttlm_info)
+			struct ieee80211_adv_ttlm *ttlm_info)
 {
 	/* The element size was already validated in
 	 * ieee80211_tid_to_link_map_size_ok()
@@ -6633,13 +6641,13 @@ static void ieee80211_process_adv_ttlm(struct ieee80211_sub_if_data *sdata,
 		return;
 
 	if (!elems->ttlm_num) {
-		if (sdata->u.mgd.ttlm_info.switch_time) {
+		if (sdata->vif.adv_ttlm.switch_time) {
 			/* if a planned TID-to-link mapping was cancelled -
 			 * abort it
 			 */
 			wiphy_delayed_work_cancel(sdata->local->hw.wiphy,
 						  &sdata->u.mgd.ttlm_work);
-		} else if (sdata->u.mgd.ttlm_info.active) {
+		} else if (sdata->vif.adv_ttlm.active) {
 			/* if no TID-to-link element, set to default mapping in
 			 * which all TIDs are mapped to all setup links
 			 */
@@ -6650,16 +6658,18 @@ static void ieee80211_process_adv_ttlm(struct ieee80211_sub_if_data *sdata,
 				sdata_info(sdata, "Failed setting valid/dormant links\n");
 				return;
 			}
+			sdata->vif.adv_ttlm.active = false;
 			ieee80211_vif_cfg_change_notify(sdata,
-							BSS_CHANGED_MLD_VALID_LINKS);
+							BSS_CHANGED_MLD_VALID_LINKS |
+							BSS_CHANGED_MLD_ADV_TTLM);
 		}
-		memset(&sdata->u.mgd.ttlm_info, 0,
-		       sizeof(sdata->u.mgd.ttlm_info));
+		memset(&sdata->vif.adv_ttlm, 0,
+		       sizeof(sdata->vif.adv_ttlm));
 		return;
 	}
 
 	for (i = 0; i < elems->ttlm_num; i++) {
-		struct ieee80211_adv_ttlm_info ttlm_info;
+		struct ieee80211_adv_ttlm ttlm_info;
 		u32 res;
 
 		res = ieee80211_parse_adv_t2l(sdata, elems->ttlm[i],
@@ -6705,7 +6715,7 @@ static void ieee80211_process_adv_ttlm(struct ieee80211_sub_if_data *sdata,
 			else
 				delay_jiffies = 0;
 
-			sdata->u.mgd.ttlm_info = ttlm_info;
+			sdata->vif.adv_ttlm = ttlm_info;
 			wiphy_delayed_work_cancel(sdata->local->hw.wiphy,
 						  &sdata->u.mgd.ttlm_work);
 			wiphy_delayed_work_queue(sdata->local->hw.wiphy,
@@ -7566,7 +7576,7 @@ static void ieee80211_teardown_ttlm_work(struct wiphy *wiphy,
 	sdata->vif.suspended_links = 0;
 	ieee80211_vif_set_links(sdata, sdata->vif.valid_links,
 				new_dormant_links);
-	ieee80211_vif_cfg_change_notify(sdata, BSS_CHANGED_MLD_TTLM |
+	ieee80211_vif_cfg_change_notify(sdata, BSS_CHANGED_MLD_NEG_TTLM |
 					       BSS_CHANGED_MLD_VALID_LINKS);
 }
 
-- 
2.45.2

