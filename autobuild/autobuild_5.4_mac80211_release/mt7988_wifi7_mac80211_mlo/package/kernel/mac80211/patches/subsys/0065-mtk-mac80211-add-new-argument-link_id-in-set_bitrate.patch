From 380f1709630fb46e7e0c51a868638cd981a36d6e Mon Sep 17 00:00:00 2001
From: Howard Hsu <howard-yh.hsu@mediatek.com>
Date: Thu, 30 May 2024 16:08:54 +0800
Subject: [PATCH 65/87] mtk: mac80211: add new argument link_id in
 set_bitrate_mask

mt76 driver needs link id to fix parital rate on the specific link.

Signed-off-by: Howard Hsu <howard-yh.hsu@mediatek.com>

---
 include/net/mac80211.h    |  3 ++-
 net/mac80211/cfg.c        |  2 +-
 net/mac80211/driver-ops.h |  7 ++++---
 net/mac80211/trace.h      | 12 ++++++++----
 4 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 81c5c56f..0ce20da7 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -4700,7 +4700,8 @@ struct ieee80211_ops {
 			      u32 *tx, u32 *tx_max, u32 *rx, u32 *rx_max);
 	bool (*tx_frames_pending)(struct ieee80211_hw *hw);
 	int (*set_bitrate_mask)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
-				const struct cfg80211_bitrate_mask *mask);
+				const struct cfg80211_bitrate_mask *mask,
+				unsigned int link_id);
 	void (*event_callback)(struct ieee80211_hw *hw,
 			       struct ieee80211_vif *vif,
 			       const struct ieee80211_event *event);
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 398e0ff9..ae9a29f2 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -3481,7 +3481,7 @@ static int ieee80211_set_bitrate_mask(struct wiphy *wiphy,
 	}
 
 	if (ieee80211_hw_check(&local->hw, HAS_RATE_CONTROL)) {
-		ret = drv_set_bitrate_mask(local, sdata, mask);
+		ret = drv_set_bitrate_mask(local, sdata, mask, link_id);
 		if (ret)
 			return ret;
 	}
diff --git a/net/mac80211/driver-ops.h b/net/mac80211/driver-ops.h
index 6b052920..3b1eef2f 100644
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -865,7 +865,8 @@ static inline bool drv_tx_frames_pending(struct ieee80211_local *local)
 
 static inline int drv_set_bitrate_mask(struct ieee80211_local *local,
 				       struct ieee80211_sub_if_data *sdata,
-				       const struct cfg80211_bitrate_mask *mask)
+				       const struct cfg80211_bitrate_mask *mask,
+				       unsigned int link_id)
 {
 	int ret = -EOPNOTSUPP;
 
@@ -875,10 +876,10 @@ static inline int drv_set_bitrate_mask(struct ieee80211_local *local,
 	if (!check_sdata_in_driver(sdata))
 		return -EIO;
 
-	trace_drv_set_bitrate_mask(local, sdata, mask);
+	trace_drv_set_bitrate_mask(local, sdata, mask, link_id);
 	if (local->ops->set_bitrate_mask)
 		ret = local->ops->set_bitrate_mask(&local->hw,
-						   &sdata->vif, mask);
+						   &sdata->vif, mask, link_id);
 	trace_drv_return_int(local, ret);
 
 	return ret;
diff --git a/net/mac80211/trace.h b/net/mac80211/trace.h
index 9daeff85..280dc18e 100644
--- a/net/mac80211/trace.h
+++ b/net/mac80211/trace.h
@@ -1421,15 +1421,17 @@ DEFINE_EVENT(local_only_evt, drv_offchannel_tx_cancel_wait,
 TRACE_EVENT(drv_set_bitrate_mask,
 	TP_PROTO(struct ieee80211_local *local,
 		 struct ieee80211_sub_if_data *sdata,
-		 const struct cfg80211_bitrate_mask *mask),
+		 const struct cfg80211_bitrate_mask *mask,
+		 unsigned int link_id),
 
-	TP_ARGS(local, sdata, mask),
+	TP_ARGS(local, sdata, mask, link_id),
 
 	TP_STRUCT__entry(
 		LOCAL_ENTRY
 		VIF_ENTRY
 		__field(u32, legacy_2g)
 		__field(u32, legacy_5g)
+		__field(unsigned int, link_id)
 	),
 
 	TP_fast_assign(
@@ -1437,11 +1439,13 @@ TRACE_EVENT(drv_set_bitrate_mask,
 		VIF_ASSIGN;
 		__entry->legacy_2g = mask->control[NL80211_BAND_2GHZ].legacy;
 		__entry->legacy_5g = mask->control[NL80211_BAND_5GHZ].legacy;
+		__entry->link_id = link_id;
 	),
 
 	TP_printk(
-		LOCAL_PR_FMT  VIF_PR_FMT " 2G Mask:0x%x 5G Mask:0x%x",
-		LOCAL_PR_ARG, VIF_PR_ARG, __entry->legacy_2g, __entry->legacy_5g
+		LOCAL_PR_FMT  VIF_PR_FMT " 2G Mask:0x%x 5G Mask:0x%x, link_id: %d",
+		LOCAL_PR_ARG, VIF_PR_ARG, __entry->legacy_2g, __entry->legacy_5g,
+		__entry->link_id
 	)
 );
 
-- 
2.45.2

