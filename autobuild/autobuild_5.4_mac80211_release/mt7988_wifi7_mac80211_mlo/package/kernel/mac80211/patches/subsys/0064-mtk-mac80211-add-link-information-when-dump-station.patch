From 187005e2412bac6f70f0a3c962d9120784f35f2e Mon Sep 17 00:00:00 2001
From: Peter Chiu <chui-hao.chiu@mediatek.com>
Date: Tue, 11 Jun 2024 18:08:13 +0800
Subject: [PATCH 64/87] mtk: mac80211: add link information when dump station

Report following per-link information to upper-layer application:
- TX/RX byte counts
- TX MPDU failed/retried counts
- RX MPDU total/failed counts
- TX/RX airtime
- ACK RSSI

Signed-off-by: Benjamin Lin <benjamin-jw.lin@mediatek.com>
Signed-off-by: Peter Chiu <chui-hao.chiu@mediatek.com>
---
 include/net/cfg80211.h    |  67 ++++++++++++
 include/net/mac80211.h    |   9 +-
 net/mac80211/driver-ops.h |  18 ++++
 net/mac80211/ethtool.c    |  39 +++----
 net/mac80211/sta_info.c   |  26 +++++
 net/wireless/nl80211.c    | 210 ++++++++++++++++++++++++++++++++------
 6 files changed, 316 insertions(+), 53 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 7c4ef574..ce564e3a 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -2049,6 +2049,64 @@ struct cfg80211_tid_stats {
 
 #define IEEE80211_MAX_CHAINS	4
 
+/**
+ * struct station_link_info - station link information
+ *
+ * @filled: bitflag of flags using the bits of &enum nl80211_sta_info to
+ *	indicate the relevant values in this struct for them
+ * @link_addr: link address
+ * @rx_bytes: bytes (size of MPDUs) received from this station link
+ * @tx_bytes: bytes (size of MPDUs) transmitted to this station link
+ * @signal: The signal strength, type depends on the wiphy's signal_type.
+ *	For CFG80211_SIGNAL_TYPE_MBM, value is expressed in _dBm_.
+ * @signal_avg: Average signal strength, type depends on the wiphy's signal_type.
+ *	For CFG80211_SIGNAL_TYPE_MBM, value is expressed in _dBm_.
+ * @chains: bitmask for filled values in @chain_signal, @chain_signal_avg
+ * @chain_signal: per-chain signal strength of last received packet in dBm
+ * @chain_signal_avg: per-chain signal strength average in dBm
+ * @txrate: current unicast bitrate to this station link
+ * @rxrate: current unicast bitrate from this station link
+ * @tx_retries: cumulative retry counts (MPDUs)
+ * @tx_failed: number of failed transmissions (MPDUs) (retries exceeded, no ACK)
+ * @bss_param: current BSS parameters
+ * @tx_duration: aggregate PPDU duration(usecs) for all the frames to a peer
+ * @rx_duration: aggregate PPDU duration(usecs) for all the frames from a peer
+ * @ack_signal: signal strength (in dBm) of the last ACK frame.
+ * @avg_ack_signal: average rssi value of ack packet for the no of msdu's has
+ *	been sent.
+ * @rx_mpdu_count: number of MPDUs received from this station link
+ * @fcs_err_count: number of packets (MPDUs) received from this station link with
+ *	an FCS error. This counter should be incremented only when TA of the
+ *	received packet with an FCS error matches the peer MAC address.
+ */
+struct station_link_info {
+	u64 filled;
+	u8 link_addr[ETH_ALEN] __aligned(2);
+	u64 rx_bytes;
+	u64 tx_bytes;
+	s8 signal;
+	s8 signal_avg;
+
+	u8 chains;
+	s8 chain_signal[IEEE80211_MAX_CHAINS];
+	s8 chain_signal_avg[IEEE80211_MAX_CHAINS];
+
+	struct rate_info txrate;
+	struct rate_info rxrate;
+	u32 tx_retries;
+	u32 tx_failed;
+	struct sta_bss_parameters bss_param;
+
+	u64 tx_duration;
+	u64 rx_duration;
+
+	s8 ack_signal;
+	s8 avg_ack_signal;
+
+	u32 rx_mpdu_count;
+	u32 fcs_err_count;
+};
+
 /**
  * struct station_info - station information
  *
@@ -2198,6 +2256,15 @@ struct station_info {
 	u8 mld_addr[ETH_ALEN] __aligned(2);
 	const u8 *assoc_resp_ies;
 	size_t assoc_resp_ies_len;
+
+	u16 valid_links;
+
+	/*
+	 * FIXME: Should be refactored to legacy (real) + links (pointer)
+	 * for saving memory space, as MAX_NUM_LINKS is 15 which would
+	 * cause much of the space allocated but never unused
+	 */
+	struct station_link_info links[IEEE80211_MLD_MAX_NUM_LINKS];
 };
 
 /**
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 02d549e3..81c5c56f 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1503,7 +1503,7 @@ ieee80211_tx_info_clear_status(struct ieee80211_tx_info *info)
  * @RX_FLAG_AMPDU_EOF_BIT_KNOWN: The EOF value is known
  * @RX_FLAG_RADIOTAP_HE: HE radiotap data is present
  *	(&struct ieee80211_radiotap_he, mac80211 will fill in
- *	
+ *
  *	 - DATA3_DATA_MCS
  *	 - DATA3_DATA_DCM
  *	 - DATA3_CODING
@@ -1511,7 +1511,7 @@ ieee80211_tx_info_clear_status(struct ieee80211_tx_info *info)
  *	 - DATA5_DATA_BW_RU_ALLOC
  *	 - DATA6_NSTS
  *	 - DATA3_STBC
- *	
+ *
  *	from the RX info data, so leave those zeroed when building this data)
  * @RX_FLAG_RADIOTAP_HE_MU: HE MU radiotap data is present
  *	(&struct ieee80211_radiotap_he_mu)
@@ -4616,6 +4616,11 @@ struct ieee80211_ops {
 			       struct ieee80211_vif *vif,
 			       struct ieee80211_sta *sta,
 			       struct station_info *sinfo);
+	void (*sta_link_statistics)(struct ieee80211_hw *hw,
+				    struct ieee80211_vif *vif,
+				    struct ieee80211_sta *sta,
+				    unsigned int link_id,
+				    struct station_link_info *linfo);
 	int (*conf_tx)(struct ieee80211_hw *hw,
 		       struct ieee80211_vif *vif,
 		       unsigned int link_id, u16 ac,
diff --git a/net/mac80211/driver-ops.h b/net/mac80211/driver-ops.h
index 12641e72..6b052920 100644
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -631,6 +631,24 @@ static inline void drv_sta_statistics(struct ieee80211_local *local,
 	trace_drv_return_void(local);
 }
 
+static inline void drv_sta_link_statistics(struct ieee80211_local *local,
+					   struct ieee80211_sub_if_data *sdata,
+					   struct ieee80211_sta *sta,
+					   unsigned int link_id,
+					   struct station_link_info *linfo)
+{
+	might_sleep();
+	lockdep_assert_wiphy(local->hw.wiphy);
+
+	sdata = get_bss_sdata(sdata);
+	if (!check_sdata_in_driver(sdata))
+		return;
+
+	if (local->ops->sta_link_statistics)
+		local->ops->sta_link_statistics(&local->hw, &sdata->vif, sta,
+						link_id, linfo);
+}
+
 int drv_conf_tx(struct ieee80211_local *local,
 		struct ieee80211_link_data *link, u16 ac,
 		const struct ieee80211_tx_queue_params *params);
diff --git a/net/mac80211/ethtool.c b/net/mac80211/ethtool.c
index 03c2de9c..0f25fb90 100644
--- a/net/mac80211/ethtool.c
+++ b/net/mac80211/ethtool.c
@@ -89,7 +89,7 @@ static void ieee80211_get_stats(struct net_device *dev,
 	struct ieee80211_channel *channel;
 	struct sta_info *sta;
 	struct ieee80211_local *local = sdata->local;
-	struct station_info sinfo;
+	struct station_info *sinfo;
 	struct survey_info survey;
 	int i, q;
 #define STA_STATS_SURVEY_LEN 7
@@ -98,17 +98,17 @@ static void ieee80211_get_stats(struct net_device *dev,
 
 #define ADD_STA_STATS(sta)					\
 	do {							\
-		data[i++] += sinfo.rx_packets;			\
-		data[i++] += sinfo.rx_bytes;			\
+		data[i++] += sinfo->rx_packets;			\
+		data[i++] += sinfo->rx_bytes;			\
 		data[i++] += (sta)->rx_stats.num_duplicates;	\
 		data[i++] += (sta)->rx_stats.fragments;		\
-		data[i++] += sinfo.rx_dropped_misc;		\
+		data[i++] += sinfo->rx_dropped_misc;		\
 								\
-		data[i++] += sinfo.tx_packets;			\
-		data[i++] += sinfo.tx_bytes;			\
+		data[i++] += sinfo->tx_packets;			\
+		data[i++] += sinfo->tx_bytes;			\
 		data[i++] += (sta)->status_stats.filtered;	\
-		data[i++] += sinfo.tx_failed;			\
-		data[i++] += sinfo.tx_retries;			\
+		data[i++] += sinfo->tx_failed;			\
+		data[i++] += sinfo->tx_retries;			\
 	} while (0)
 
 	/* For Managed stations, find the single station based on BSSID
@@ -116,6 +116,9 @@ static void ieee80211_get_stats(struct net_device *dev,
 	 * stations and add stats for any station that is assigned to this
 	 * network device.
 	 */
+	sinfo = kzalloc(sizeof(struct station_info), GFP_KERNEL);
+	if (!sinfo)
+		return;
 
 	wiphy_lock(local->hw.wiphy);
 
@@ -125,8 +128,7 @@ static void ieee80211_get_stats(struct net_device *dev,
 		if (!(sta && !WARN_ON(sta->sdata->dev != dev)))
 			goto do_survey;
 
-		memset(&sinfo, 0, sizeof(sinfo));
-		sta_set_sinfo(sta, &sinfo, false);
+		sta_set_sinfo(sta, sinfo, false);
 
 		i = 0;
 		ADD_STA_STATS(&sta->deflink);
@@ -134,17 +136,17 @@ static void ieee80211_get_stats(struct net_device *dev,
 		data[i++] = sta->sta_state;
 
 
-		if (sinfo.filled & BIT_ULL(NL80211_STA_INFO_TX_BITRATE))
+		if (sinfo->filled & BIT_ULL(NL80211_STA_INFO_TX_BITRATE))
 			data[i] = 100000ULL *
-				cfg80211_calculate_bitrate(&sinfo.txrate);
+				cfg80211_calculate_bitrate(&sinfo->txrate);
 		i++;
-		if (sinfo.filled & BIT_ULL(NL80211_STA_INFO_RX_BITRATE))
+		if (sinfo->filled & BIT_ULL(NL80211_STA_INFO_RX_BITRATE))
 			data[i] = 100000ULL *
-				cfg80211_calculate_bitrate(&sinfo.rxrate);
+				cfg80211_calculate_bitrate(&sinfo->rxrate);
 		i++;
 
-		if (sinfo.filled & BIT_ULL(NL80211_STA_INFO_SIGNAL_AVG))
-			data[i] = (u8)sinfo.signal_avg;
+		if (sinfo->filled & BIT_ULL(NL80211_STA_INFO_SIGNAL_AVG))
+			data[i] = (u8)sinfo->signal_avg;
 		i++;
 	} else {
 		list_for_each_entry(sta, &local->sta_list, list) {
@@ -152,14 +154,15 @@ static void ieee80211_get_stats(struct net_device *dev,
 			if (sta->sdata->dev != dev)
 				continue;
 
-			memset(&sinfo, 0, sizeof(sinfo));
-			sta_set_sinfo(sta, &sinfo, false);
+			memset(sinfo, 0, sizeof(*sinfo));
+			sta_set_sinfo(sta, sinfo, false);
 			i = 0;
 			ADD_STA_STATS(&sta->deflink);
 		}
 	}
 
 do_survey:
+	kfree(sinfo);
 	i = STA_STATS_LEN - STA_STATS_SURVEY_LEN;
 	/* Get survey stats for current channel */
 	survey.filled = 0;
diff --git a/net/mac80211/sta_info.c b/net/mac80211/sta_info.c
index b1caf116..0e615174 100644
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -2858,6 +2858,32 @@ void sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo,
 		sinfo->airtime_link_metric =
 			airtime_link_metric_get(local, sta);
 	}
+
+	sinfo->valid_links = sta->sta.valid_links;
+	if (sinfo->valid_links) {
+		unsigned int link_id;
+
+		sinfo->mlo_params_valid = true;
+		memcpy(sinfo->mld_addr, sta->sta.addr, ETH_ALEN);
+		for_each_valid_link(sinfo, link_id) {
+			struct ieee80211_link_sta *link_sta =
+				link_sta_dereference_protected(&sta->sta, link_id);
+			struct ieee80211_bss_conf *link_conf =
+				sdata_dereference(sdata->vif.link_conf[link_id],
+						  sdata);
+			struct station_link_info *linfo = &sinfo->links[link_id];
+
+			if (!link_sta || !link_conf)
+				continue;
+
+			memcpy(linfo->link_addr, link_sta->addr, ETH_ALEN);
+			drv_sta_link_statistics(local, sdata, &sta->sta,
+						link_id, linfo);
+			linfo->filled |= BIT_ULL(NL80211_STA_INFO_BSS_PARAM);
+			linfo->bss_param.dtim_period = link_conf->dtim_period;
+			linfo->bss_param.beacon_interval = link_conf->beacon_int;
+		}
+	}
 }
 
 u32 sta_get_expected_throughput(struct sta_info *sta)
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 9d83aebc..4275a190 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -6941,14 +6941,120 @@ static int nl80211_send_station(struct sk_buff *msg, u32 cmd, u32 portid,
 		goto nla_put_failure;
 
 	if (sinfo->mlo_params_valid) {
-		if (nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID,
-			       sinfo->assoc_link_id))
-			goto nla_put_failure;
+		struct nlattr *nested;
+		unsigned int link_id;
+		int i = 1;
 
 		if (!is_zero_ether_addr(sinfo->mld_addr) &&
 		    nla_put(msg, NL80211_ATTR_MLD_ADDR, ETH_ALEN,
 			    sinfo->mld_addr))
 			goto nla_put_failure;
+
+		nested = nla_nest_start(msg, NL80211_ATTR_MLO_LINKS);
+		if (!nested)
+			goto nla_put_failure;
+
+		for_each_valid_link(sinfo, link_id) {
+			struct nlattr *nested_mlo_links;
+			struct station_link_info *linfo = &sinfo->links[link_id];
+
+			nested_mlo_links = nla_nest_start(msg, i);
+			if (!nested_mlo_links)
+				goto nla_put_failure;
+
+			if (nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, link_id) ||
+			    (nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN,
+				     linfo->link_addr)))
+				goto nla_put_failure;
+
+			sinfoattr = nla_nest_start_noflag(msg, NL80211_ATTR_STA_INFO);
+			if (!sinfoattr)
+				goto nla_put_failure;
+
+#define PUT_LINFO(attr, memb, type) do {				\
+	BUILD_BUG_ON(sizeof(type) == sizeof(u64));			\
+	if (linfo->filled & BIT_ULL(NL80211_STA_INFO_ ## attr) &&	\
+	    nla_put_ ## type(msg, NL80211_STA_INFO_ ## attr,		\
+			     linfo->memb))				\
+		goto nla_put_failure;					\
+	} while (0)
+#define PUT_LINFO_U64(attr, memb) do {					\
+	if (linfo->filled & BIT_ULL(NL80211_STA_INFO_ ## attr) &&	\
+	    nla_put_u64_64bit(msg, NL80211_STA_INFO_ ## attr,		\
+			      linfo->memb, NL80211_STA_INFO_PAD))	\
+		goto nla_put_failure;					\
+	} while (0)
+
+			PUT_LINFO_U64(RX_BYTES64, rx_bytes);
+			PUT_LINFO_U64(TX_BYTES64, tx_bytes);
+			PUT_LINFO_U64(RX_DURATION, rx_duration);
+			PUT_LINFO_U64(TX_DURATION, tx_duration);
+
+			switch (rdev->wiphy.signal_type) {
+			case CFG80211_SIGNAL_TYPE_MBM:
+				PUT_LINFO(SIGNAL, signal, u8);
+				PUT_LINFO(SIGNAL_AVG, signal_avg, u8);
+				break;
+			default:
+				break;
+			}
+			if (linfo->filled & BIT_ULL(NL80211_STA_INFO_CHAIN_SIGNAL)) {
+				if (!nl80211_put_signal(msg, linfo->chains,
+							linfo->chain_signal,
+							NL80211_STA_INFO_CHAIN_SIGNAL))
+					goto nla_put_failure;
+			}
+			if (linfo->filled & BIT_ULL(NL80211_STA_INFO_CHAIN_SIGNAL_AVG)) {
+				if (!nl80211_put_signal(msg, linfo->chains,
+							linfo->chain_signal_avg,
+							NL80211_STA_INFO_CHAIN_SIGNAL_AVG))
+					goto nla_put_failure;
+			}
+			if (linfo->filled & BIT_ULL(NL80211_STA_INFO_TX_BITRATE)) {
+				if (!nl80211_put_sta_rate(msg, &linfo->txrate,
+							  NL80211_STA_INFO_TX_BITRATE))
+					goto nla_put_failure;
+			}
+			if (linfo->filled & BIT_ULL(NL80211_STA_INFO_RX_BITRATE)) {
+				if (!nl80211_put_sta_rate(msg, &linfo->rxrate,
+							  NL80211_STA_INFO_RX_BITRATE))
+					goto nla_put_failure;
+			}
+
+			PUT_LINFO(TX_RETRIES, tx_retries, u32);
+			PUT_LINFO(TX_FAILED, tx_failed, u32);
+
+			if (linfo->filled & BIT_ULL(NL80211_STA_INFO_BSS_PARAM)) {
+				bss_param = nla_nest_start_noflag(msg,
+								  NL80211_STA_INFO_BSS_PARAM);
+				if (!bss_param)
+					goto nla_put_failure;
+
+				if (nla_put_u8(msg, NL80211_STA_BSS_PARAM_DTIM_PERIOD,
+					       linfo->bss_param.dtim_period) ||
+				    nla_put_u16(msg, NL80211_STA_BSS_PARAM_BEACON_INTERVAL,
+						linfo->bss_param.beacon_interval))
+					goto nla_put_failure;
+
+				nla_nest_end(msg, bss_param);
+			}
+
+			PUT_LINFO(RX_MPDUS, rx_mpdu_count, u32);
+			PUT_LINFO(FCS_ERROR_COUNT, fcs_err_count, u32);
+			if (wiphy_ext_feature_isset(&rdev->wiphy,
+						    NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT)) {
+				PUT_LINFO(ACK_SIGNAL, ack_signal, u8);
+				PUT_LINFO(ACK_SIGNAL_AVG, avg_ack_signal, u8);
+			}
+
+#undef PUT_LINFO
+#undef PUT_LINFO_U64
+
+			nla_nest_end(msg, sinfoattr);
+			nla_nest_end(msg, nested_mlo_links);
+			i++;
+		}
+		nla_nest_end(msg, nested);
 	}
 
 	cfg80211_sinfo_release_content(sinfo);
@@ -6964,7 +7070,7 @@ static int nl80211_send_station(struct sk_buff *msg, u32 cmd, u32 portid,
 static int nl80211_dump_station(struct sk_buff *skb,
 				struct netlink_callback *cb)
 {
-	struct station_info sinfo;
+	struct station_info *sinfo;
 	struct cfg80211_registered_device *rdev;
 	struct wireless_dev *wdev;
 	u8 mac_addr[ETH_ALEN];
@@ -6974,6 +7080,10 @@ static int nl80211_dump_station(struct sk_buff *skb,
 	err = nl80211_prepare_wdev_dump(cb, &rdev, &wdev, NULL);
 	if (err)
 		return err;
+
+	sinfo = kzalloc(sizeof(struct station_info), GFP_KERNEL);
+	if (!sinfo)
+		return -ENOMEM;
 	/* nl80211_prepare_wdev_dump acquired it in the successful case */
 	__acquire(&rdev->wiphy.mtx);
 
@@ -6988,9 +7098,9 @@ static int nl80211_dump_station(struct sk_buff *skb,
 	}
 
 	while (1) {
-		memset(&sinfo, 0, sizeof(sinfo));
+		memset(sinfo, 0, sizeof(*sinfo));
 		err = rdev_dump_station(rdev, wdev->netdev, sta_idx,
-					mac_addr, &sinfo);
+					mac_addr, sinfo);
 		if (err == -ENOENT)
 			break;
 		if (err)
@@ -7000,7 +7110,7 @@ static int nl80211_dump_station(struct sk_buff *skb,
 				NETLINK_CB(cb->skb).portid,
 				cb->nlh->nlmsg_seq, NLM_F_MULTI,
 				rdev, wdev->netdev, mac_addr,
-				&sinfo) < 0)
+				sinfo) < 0)
 			goto out;
 
 		sta_idx++;
@@ -7011,6 +7121,7 @@ static int nl80211_dump_station(struct sk_buff *skb,
 	err = skb->len;
  out_err:
 	wiphy_unlock(&rdev->wiphy);
+	kfree(sinfo);
 
 	return err;
 }
@@ -7019,13 +7130,11 @@ static int nl80211_get_station(struct sk_buff *skb, struct genl_info *info)
 {
 	struct cfg80211_registered_device *rdev = info->user_ptr[0];
 	struct net_device *dev = info->user_ptr[1];
-	struct station_info sinfo;
+	struct station_info *sinfo;
 	struct sk_buff *msg;
 	u8 *mac_addr = NULL;
 	int err;
 
-	memset(&sinfo, 0, sizeof(sinfo));
-
 	if (!info->attrs[NL80211_ATTR_MAC])
 		return -EINVAL;
 
@@ -7034,24 +7143,35 @@ static int nl80211_get_station(struct sk_buff *skb, struct genl_info *info)
 	if (!rdev->ops->get_station)
 		return -EOPNOTSUPP;
 
-	err = rdev_get_station(rdev, dev, mac_addr, &sinfo);
+	sinfo = kzalloc(sizeof(struct station_info), GFP_KERNEL);
+	if (!sinfo)
+		return -ENOMEM;
+
+	err = rdev_get_station(rdev, dev, mac_addr, sinfo);
 	if (err)
-		return err;
+		goto out;
 
 	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
 	if (!msg) {
-		cfg80211_sinfo_release_content(&sinfo);
-		return -ENOMEM;
+		cfg80211_sinfo_release_content(sinfo);
+		err = -ENOMEM;
+		goto out;
 	}
 
 	if (nl80211_send_station(msg, NL80211_CMD_NEW_STATION,
 				 info->snd_portid, info->snd_seq, 0,
-				 rdev, dev, mac_addr, &sinfo) < 0) {
+				 rdev, dev, mac_addr, sinfo) < 0) {
 		nlmsg_free(msg);
-		return -ENOBUFS;
+		err = -ENOBUFS;
+		goto out;
 	}
 
-	return genlmsg_reply(msg, info);
+	err = genlmsg_reply(msg, info);
+
+out:
+	kfree(sinfo);
+
+	return err;
 }
 
 int cfg80211_check_station_change(struct wiphy *wiphy,
@@ -13123,19 +13243,27 @@ static int cfg80211_cqm_rssi_update(struct cfg80211_registered_device *rdev,
 	if (!cqm_config->last_rssi_event_value &&
 	    wdev->links[0].client.current_bss &&
 	    rdev->ops->get_station) {
-		struct station_info sinfo = {};
+		struct station_info *sinfo;
 		u8 *mac_addr;
 
+		sinfo = kzalloc(sizeof(struct station_info), GFP_KERNEL);
+		if (!sinfo)
+			return -ENOMEM;
+
 		mac_addr = wdev->links[0].client.current_bss->pub.bssid;
 
-		err = rdev_get_station(rdev, dev, mac_addr, &sinfo);
-		if (err)
+		err = rdev_get_station(rdev, dev, mac_addr, sinfo);
+		if (err) {
+			kfree(sinfo);
 			return err;
+		}
 
-		cfg80211_sinfo_release_content(&sinfo);
-		if (sinfo.filled & BIT_ULL(NL80211_STA_INFO_BEACON_SIGNAL_AVG))
+		cfg80211_sinfo_release_content(sinfo);
+		if (sinfo->filled & BIT_ULL(NL80211_STA_INFO_BEACON_SIGNAL_AVG))
 			cqm_config->last_rssi_event_value =
-				(s8) sinfo.rx_beacon_signal_avg;
+				(s8) sinfo->rx_beacon_signal_avg;
+
+		kfree(sinfo);
 	}
 
 	last = cqm_config->last_rssi_event_value;
@@ -16020,7 +16148,7 @@ static int nl80211_probe_mesh_link(struct sk_buff *skb, struct genl_info *info)
 	struct cfg80211_registered_device *rdev = info->user_ptr[0];
 	struct net_device *dev = info->user_ptr[1];
 	struct wireless_dev *wdev = dev->ieee80211_ptr;
-	struct station_info sinfo = {};
+	struct station_info *sinfo;
 	const u8 *buf;
 	size_t len;
 	u8 *dest;
@@ -16049,13 +16177,22 @@ static int nl80211_probe_mesh_link(struct sk_buff *skb, struct genl_info *info)
 	    !ether_addr_equal(buf + ETH_ALEN, dev->dev_addr))
 		return -EINVAL;
 
-	err = rdev_get_station(rdev, dev, dest, &sinfo);
+	sinfo = kzalloc(sizeof(struct station_info), GFP_KERNEL);
+	if (!sinfo)
+		return -ENOMEM;
+
+	err = rdev_get_station(rdev, dev, dest, sinfo);
 	if (err)
-		return err;
+		goto out;
 
-	cfg80211_sinfo_release_content(&sinfo);
+	cfg80211_sinfo_release_content(sinfo);
 
-	return rdev_probe_mesh_link(rdev, dev, dest, buf, len);
+	err = rdev_probe_mesh_link(rdev, dev, dest, buf, len);
+
+out:
+	kfree(sinfo);
+
+	return err;
 }
 
 static int parse_tid_conf(struct cfg80211_registered_device *rdev,
@@ -19002,27 +19139,34 @@ void cfg80211_del_sta_sinfo(struct net_device *dev, const u8 *mac_addr,
 	struct wiphy *wiphy = dev->ieee80211_ptr->wiphy;
 	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
 	struct sk_buff *msg;
-	struct station_info empty_sinfo = {};
+	bool new_allocate = false;
 
-	if (!sinfo)
-		sinfo = &empty_sinfo;
+	if (!sinfo) {
+		sinfo = kzalloc(sizeof(struct station_info), GFP_KERNEL);
+		if (!sinfo)
+			return;
+		new_allocate = true;
+	}
 
 	trace_cfg80211_del_sta(dev, mac_addr);
 
 	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, gfp);
 	if (!msg) {
 		cfg80211_sinfo_release_content(sinfo);
-		return;
+		goto out;
 	}
 
 	if (nl80211_send_station(msg, NL80211_CMD_DEL_STATION, 0, 0, 0,
 				 rdev, dev, mac_addr, sinfo) < 0) {
 		nlmsg_free(msg);
-		return;
+		goto out;
 	}
 
 	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
 				NL80211_MCGRP_MLME, gfp);
+out:
+	if (new_allocate)
+		kfree(sinfo);
 }
 EXPORT_SYMBOL(cfg80211_del_sta_sinfo);
 
-- 
2.45.2

