From cb82b0c29e70b004c57cff7c5b3639b448062723 Mon Sep 17 00:00:00 2001
From: MeiChia Chiu <MeiChia.Chiu@mediatek.com>
Date: Fri, 6 Sep 2024 17:23:08 +0800
Subject: [PATCH 78/87] mtk: mac80211: Add TSF offset event support

To add TSF (Timing Synchronization Function) offset event handler and
send these values to hostapd to populate the TSF offset in the per-station
profile within the beacon

Signed-off-by: MeiChia Chiu <MeiChia.Chiu@mediatek.com>
---
 include/net/cfg80211.h       | 12 ++++++++++++
 include/net/mac80211.h       |  9 +++++++++
 include/uapi/linux/nl80211.h |  3 +++
 net/mac80211/cfg.c           |  8 ++++++++
 net/wireless/nl80211.c       | 37 ++++++++++++++++++++++++++++++++++++
 5 files changed, 69 insertions(+)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index ba6bb2ca..e4151223 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -9762,6 +9762,18 @@ int cfg80211_bss_color_notify(struct net_device *dev,
  */
 void cfg80211_attlm_notify(struct wireless_dev *wdev, u16 switch_time_tsf_tu,
 			   enum nl80211_attlm_event event, gfp_t gfp);
+
+/**
+ * cfg80211_tsf_offset_notify - notify about tsf offset
+ * @wdev: the wireless device to receive notification
+ * @link_id: the link ID of the other reported link which would be put in per-sta profile
+ * @tsf_offset: the TSF offset of the reporting links
+ * @len: The len of tsf_offset
+ * @gfp: allocation flags
+ */
+void cfg80211_tsf_offset_notify(struct wireless_dev *wdev, unsigned int link_id,
+				s64 *tsf_offset, size_t len, gfp_t gfp);
+
 /**
  * cfg80211_obss_color_collision_notify - notify about bss color collision
  * @dev: network device
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 893d93b3..909930d6 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -7860,6 +7860,15 @@ void ieee80211_links_removed(struct ieee80211_vif *vif, u16 removed_links);
  */
 unsigned long ieee80211_get_scanning(struct ieee80211_hw *hw);
 
+/**
+ * ieee80211_tsf_offset_notify - Get tsf offset
+ * @vif: interface to be notified
+ * @tsf_offset: The tsf_offset
+ *
+ */
+void ieee80211_tsf_offset_notify(struct ieee80211_vif *vif, unsigned int link_id,
+				 s64 *tsf_offset, size_t len, gfp_t gfp);
+
 /**
  * ieee80211_crit_update_notify - notify mac80211 about the status of a critical update event
  * @vif: &struct ieee80211_vif pointer from the add_interface callback.
diff --git a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
index 4ce82a04..51e94338 100644
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -1595,6 +1595,7 @@ enum nl80211_commands {
 	NL80211_CMD_ATTLM_EVENT,
 	NL80211_CMD_SET_ATTLM,
 	NL80211_CMD_NOTIFY_CRIT_UPDATE,
+	NL80211_CMD_TSF_OFFSET_EVENT,
 
 	/* used to define NL80211_CMD_MAX below */
 	__NL80211_CMD_AFTER_LAST,
@@ -3464,6 +3465,8 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_CRTI_UPDATE_EVENT,
 
+	NL80211_ATTR_MLO_TSF_OFFSET_VAL,
+
 	__NL80211_ATTR_AFTER_LAST,
 	NUM_NL80211_ATTR = __NL80211_ATTR_AFTER_LAST,
 	NL80211_ATTR_MAX = __NL80211_ATTR_AFTER_LAST - 1
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 0e65b020..834792b9 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -5331,6 +5331,14 @@ void ieee80211_attlm_notify(struct ieee80211_vif *vif, u16 switch_time_tsf_tu,
 }
 EXPORT_SYMBOL_GPL(ieee80211_attlm_notify);
 
+void ieee80211_tsf_offset_notify(struct ieee80211_vif *vif, unsigned int link_id,
+				 s64 *tsf_offset, size_t len, gfp_t gfp)
+{
+	cfg80211_tsf_offset_notify(ieee80211_vif_to_wdev(vif), link_id,
+				   tsf_offset, len, gfp);
+}
+EXPORT_SYMBOL_GPL(ieee80211_tsf_offset_notify);
+
 void ieee80211_links_removed(struct ieee80211_vif *vif, u16 removed_links)
 {
 	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 92457fcf..8823f22a 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -854,6 +854,8 @@ static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
 	[NL80211_ATTR_MLO_ATTLM_SWITCH_TIME] = { .type = NLA_U16 },
 	[NL80211_ATTR_MLO_ATTLM_DURATION] = { .type = NLA_U32 },
 	[NL80211_ATTR_MLO_ATTLM_SWITCH_TIME_TSF_TU] = { .type = NLA_U16 },
+	[NL80211_ATTR_MLO_TSF_OFFSET_VAL] =
+		{ .type = NLA_BINARY, .len = IEEE80211_MLD_MAX_NUM_LINKS * sizeof(s64) },
 	[NL80211_ATTR_BSS_DUMP_INCLUDE_USE_DATA] = { .type = NLA_FLAG },
 	[NL80211_ATTR_MLO_TTLM_DLINK] = NLA_POLICY_EXACT_LEN(sizeof(u16) * 8),
 	[NL80211_ATTR_MLO_TTLM_ULINK] = NLA_POLICY_EXACT_LEN(sizeof(u16) * 8),
@@ -20020,6 +20022,41 @@ nla_put_failure:
 }
 EXPORT_SYMBOL(cfg80211_attlm_notify);
 
+void cfg80211_tsf_offset_notify(struct wireless_dev *wdev, unsigned int link_id,
+				s64 *tsf_offset, size_t len, gfp_t gfp)
+{
+	struct wiphy *wiphy = wdev->wiphy;
+	struct sk_buff *msg;
+	void *hdr;
+
+	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, gfp);
+	if (!msg)
+		return;
+
+	hdr = nl80211hdr_put(msg, 0, 0, 0, NL80211_CMD_TSF_OFFSET_EVENT);
+	if (!hdr) {
+		nlmsg_free(msg);
+		return;
+	}
+
+	if (wdev->valid_links &&
+	    nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, link_id))
+		goto nla_put_failure;
+
+	if (nla_put(msg, NL80211_ATTR_MLO_TSF_OFFSET_VAL, len, tsf_offset))
+		goto nla_put_failure;
+
+	genlmsg_end(msg, hdr);
+
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(wiphy), msg, 0,
+				NL80211_MCGRP_MLME, gfp);
+	return;
+
+nla_put_failure:
+	nlmsg_free(msg);
+}
+EXPORT_SYMBOL(cfg80211_tsf_offset_notify);
+
 void
 nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 		     const struct cfg80211_chan_def *chandef,
-- 
2.45.2

