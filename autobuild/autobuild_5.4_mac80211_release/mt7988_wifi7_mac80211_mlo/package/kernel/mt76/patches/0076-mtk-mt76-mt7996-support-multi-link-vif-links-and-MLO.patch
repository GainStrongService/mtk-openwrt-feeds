From 7d83b7c6b948b1b14f66683eb1ea8ff207b6e681 Mon Sep 17 00:00:00 2001
From: Shayne Chen <shayne.chen@mediatek.com>
Date: Thu, 23 Nov 2023 18:22:11 +0800
Subject: [PATCH 076/146] mtk: mt76: mt7996: support multi-link vif links and
 MLO bss callbacks

Rework add/remove interface functions to add/remove bss_conf functions,
and also switch to callbacks for MLO bss.
This is a preliminary patch to add MLO support for mt7996 chipsets.

mtk: mt76: mt7996: remove chanctx in mt7996_bss_conf

Different vif under the same phy cannot use different chanctx.
So it is better to maintain the chanctx in mt7996_phy.
Instead of mconf->chanctx, get the chanctx by mconf->phy->chanctx.

mtk: mt76: mt7996: fix own_mld_id overflow

Some of the masks, for example, mld_id_mask uses u64, so get_free_idx()
needs to be extended to support u64 operation.

mtk: mt76: mt7996: workaround for get_tsf crash issue

mtk: mt76: mt7996: do not remove bss_info and starec when assign_vif_chanctx

When STA interface re-connect from rootAP, it would unsign/assign vif
chanctx for both AP and station interface. If remove/re-allocate
bss_info and starec for AP interface, the WTBL and GTK of AP would
be cleared. But the hostapd does not remove interface so it would not
set key again.

Signed-off-by: Bo Jiao <Bo.Jiao@mediatek.com>
Signed-off-by: Peter Chiu <chui-hao.chiu@mediatek.com>
Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>
---
 mt7996/main.c   | 339 +++++++++++++++++++++++++++++++++++++++---------
 mt7996/mcu.c    |  29 +++--
 mt7996/mt7996.h |   9 +-
 3 files changed, 303 insertions(+), 74 deletions(-)

diff --git a/mt7996/main.c b/mt7996/main.c
index 040b8810..c7096f84 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -157,9 +157,11 @@ static void mt7996_stop(struct ieee80211_hw *hw, bool suspend)
 	mutex_unlock(&dev->mt76.mutex);
 }
 
-static inline int get_free_idx(u32 mask, u8 start, u8 end)
+static inline int get_free_idx(u64 mask, u8 start, u8 end)
 {
-	return ffs(~mask & GENMASK(end, start));
+	if (~mask & GENMASK_ULL(end, start))
+		return __ffs64(~mask & GENMASK_ULL(end, start)) + 1;
+	return 0;
 }
 
 static int get_omac_idx(enum nl80211_iftype type, u64 mask)
@@ -205,6 +207,45 @@ static int get_omac_idx(enum nl80211_iftype type, u64 mask)
 	return -1;
 }
 
+static int get_own_mld_idx(u64 mask, bool group_mld)
+{
+	u8 start, end;
+	int i;
+
+	if (group_mld) {
+		start = 0;
+		end = 15;
+	} else {
+		start = 16;
+		end = 63;
+	}
+
+	i = get_free_idx(mask, start, end);
+	if (i)
+		return i - 1;
+
+	/* if 16-63 are fully used, find again from 0-15 */
+	if (!group_mld && !i) {
+		i = get_free_idx(mask, 0, 15);
+		if (i)
+			return i - 1;
+	}
+
+	return -1;
+}
+
+static int get_mld_remap_idx(u64 mask)
+{
+	u8 start = 0, end = 15;
+	int i;
+
+	i = get_free_idx(mask, start, end);
+	if (i)
+		return i - 1;
+
+	return -1;
+}
+
 static void mt7996_init_bitrate_mask(struct mt7996_bss_conf *mconf)
 {
 	int i;
@@ -223,48 +264,111 @@ static void mt7996_init_bitrate_mask(struct mt7996_bss_conf *mconf)
 	}
 }
 
-static int mt7996_add_interface(struct ieee80211_hw *hw,
-				struct ieee80211_vif *vif)
+static void mt7996_remove_bss_conf(struct ieee80211_vif *vif,
+				   struct ieee80211_bss_conf *conf,
+				   struct mt7996_bss_conf *mconf)
 {
-	struct ieee80211_bss_conf *conf = &vif->bss_conf;
+	struct mt7996_phy *phy = mconf->phy;
+	struct mt7996_dev *dev = phy->dev;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf = &mvif->deflink;
-	struct mt7996_link_sta *mlink = &mvif->sta.deflink;
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_phy *phy = mt7996_hw_phy(hw);
+	u8 link_id = conf->link_id;
+	struct mt7996_link_sta *mlink =
+		mlink_dereference_protected(&mvif->sta, link_id);
+
+	if (!mlink)
+		return;
+
+	mt7996_mcu_add_sta(dev, conf, mconf, NULL, mlink, false, false);
+	mt7996_mcu_add_bss_info(phy, conf, mconf, mlink, false);
+	mt7996_mcu_add_dev_info(phy, conf, mconf, false);
+
+	rcu_assign_pointer(dev->mt76.wcid[mlink->wcid.idx], NULL);
+	rcu_assign_pointer(mvif->link[link_id], NULL);
+	rcu_assign_pointer(mvif->sta.link[link_id], NULL);
+
+	dev->mt76.vif_mask &= ~BIT_ULL(mconf->mt76.idx);
+	dev->mld_id_mask &= ~BIT_ULL(mconf->own_mld_id);
+	phy->omac_mask &= ~BIT_ULL(mconf->mt76.omac_idx);
+
+	spin_lock_bh(&dev->mt76.sta_poll_lock);
+	if (!list_empty(&mlink->wcid.poll_list))
+		list_del_init(&mlink->wcid.poll_list);
+	spin_unlock_bh(&dev->mt76.sta_poll_lock);
+
+	mt76_wcid_cleanup(&dev->mt76, &mlink->wcid);
+
+	if (mlink != &mvif->sta.deflink)
+		kfree(mlink);
+
+	if (mconf != &mvif->deflink)
+		kfree(mconf);
+}
+
+static int mt7996_add_bss_conf(struct mt7996_phy *phy,
+			       struct ieee80211_vif *vif,
+			       struct ieee80211_bss_conf *conf)
+{
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_dev *dev = phy->dev;
+	struct mt7996_bss_conf *mconf;
+	struct mt7996_link_sta *mlink;
 	struct mt76_txq *mtxq;
 	u8 band_idx = phy->mt76->band_idx;
-	int idx, ret = 0;
+	u8 link_id = conf->link_id;
+	int idx, ret;
 
-	mutex_lock(&dev->mt76.mutex);
+	if (rcu_access_pointer(mvif->link[link_id]))
+		return 0;
 
-	if (vif->type == NL80211_IFTYPE_MONITOR &&
-	    is_zero_ether_addr(vif->addr))
-		phy->monitor_vif = vif;
+	if (conf != &vif->bss_conf) {
+		mconf = kzalloc(sizeof(*mconf), GFP_KERNEL);
+		if (!mconf)
+			return -ENOMEM;
+	} else {
+		mconf = &mvif->deflink;
+	}
 
 	mconf->mt76.idx = __ffs64(~dev->mt76.vif_mask);
 	if (mconf->mt76.idx >= mt7996_max_interface_num(dev)) {
 		ret = -ENOSPC;
-		goto out;
+		goto error;
 	}
 
 	idx = get_omac_idx(vif->type, phy->omac_mask);
 	if (idx < 0) {
 		ret = -ENOSPC;
-		goto out;
+		goto error;
+	}
+
+	mconf->own_mld_id = get_own_mld_idx(dev->mld_id_mask, false);
+	if (mconf->own_mld_id < 0) {
+		ret = -ENOSPC;
+		goto error;
 	}
+
 	mconf->mt76.omac_idx = idx;
 	mconf->vif = mvif;
 	mconf->phy = phy;
 	mconf->mt76.band_idx = band_idx;
 	mconf->mt76.wmm_idx = vif->type == NL80211_IFTYPE_AP ? 0 : 3;
-	mvif->dev = dev;
+	mconf->link_id = link_id;
 
 	ret = mt7996_mcu_add_dev_info(phy, conf, mconf, true);
 	if (ret)
-		goto out;
+		goto error;
+
+	if (ieee80211_vif_is_mld(vif)) {
+		mlink = kzalloc(sizeof(*mlink), GFP_KERNEL);
+		if (!mlink) {
+			ret = -ENOMEM;
+			goto error;
+		}
+	} else {
+		mlink = &mvif->sta.deflink;
+	}
 
 	dev->mt76.vif_mask |= BIT_ULL(mconf->mt76.idx);
+	dev->mld_id_mask |= BIT_ULL(mconf->own_mld_id);
 	phy->omac_mask |= BIT_ULL(mconf->mt76.omac_idx);
 
 	idx = MT7996_WTBL_RESERVED - mconf->mt76.idx;
@@ -275,6 +379,9 @@ static int mt7996_add_interface(struct ieee80211_hw *hw,
 	mlink->wcid.phy_idx = band_idx;
 	mlink->wcid.hw_key_idx = -1;
 	mlink->wcid.tx_info |= MT_WCID_TX_INFO_SET;
+	mlink->wcid.def_wcid = &mvif->sta.deflink.wcid;
+	mlink->wcid.link_id = link_id;
+	mlink->wcid.link_valid = ieee80211_vif_is_mld(vif);
 	mlink->sta = &mvif->sta;
 	mlink->sta->vif = mvif;
 	mt76_wcid_init(&mlink->wcid);
@@ -296,7 +403,6 @@ static int mt7996_add_interface(struct ieee80211_hw *hw,
 		mconf->mt76.basic_rates_idx = MT7996_BASIC_RATES_TBL + 4;
 	else
 		mconf->mt76.basic_rates_idx = MT7996_BASIC_RATES_TBL;
-
 	mt7996_init_bitrate_mask(mconf);
 
 	mt7996_mcu_add_bss_info(phy, conf, mconf, mlink, true);
@@ -306,10 +412,32 @@ static int mt7996_add_interface(struct ieee80211_hw *hw,
 	if (vif->type != NL80211_IFTYPE_STATION)
 		mt7996_mcu_add_sta(dev, conf, mconf, NULL, mlink, true, true);
 	rcu_assign_pointer(dev->mt76.wcid[idx], &mlink->wcid);
-	rcu_assign_pointer(mvif->link[0], mconf);
-	rcu_assign_pointer(mvif->sta.link[0], mlink);
+	rcu_assign_pointer(mvif->link[link_id], mconf);
+	rcu_assign_pointer(mvif->sta.link[link_id], mlink);
 
-out:
+	return 0;
+error:
+	mt7996_remove_bss_conf(vif, conf, mconf);
+	return ret;
+}
+
+static int mt7996_add_interface(struct ieee80211_hw *hw,
+			        struct ieee80211_vif *vif)
+{
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct mt7996_phy *phy = mt7996_hw_phy(hw);
+	int ret = 0;
+
+	mutex_lock(&dev->mt76.mutex);
+	if (vif->type == NL80211_IFTYPE_MONITOR &&
+	    is_zero_ether_addr(vif->addr))
+		phy->monitor_vif = vif;
+
+	mvif->dev = dev;
+	mvif->sta.vif = mvif;
+
+	ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
 	mutex_unlock(&dev->mt76.mutex);
 
 	return ret;
@@ -321,39 +449,27 @@ static void mt7996_remove_interface(struct ieee80211_hw *hw,
 	struct ieee80211_bss_conf *conf;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_bss_conf *mconf;
-	struct mt7996_link_sta *mlink = &mvif->sta.deflink;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mt7996_hw_phy(hw);
-	int idx = mlink->wcid.idx;
 
 	cancel_delayed_work_sync(&phy->scan_work);
 
 	mutex_lock(&dev->mt76.mutex);
 
-	conf = link_conf_dereference_protected(vif, 0);
-	mconf = mconf_dereference_protected(mvif, 0);
-	mt7996_mcu_add_sta(dev, conf, mconf, NULL, mlink, false, false);
-	mt7996_mcu_add_bss_info(phy, conf, mconf, mlink, false);
+	if (test_bit(MT76_SCANNING, &phy->mt76->state))
+		mt7996_scan_complete(phy, true);
 
 	if (vif == phy->monitor_vif)
 		phy->monitor_vif = NULL;
 
-	mt7996_mcu_add_dev_info(phy, conf, mconf, false);
-
-	rcu_assign_pointer(dev->mt76.wcid[idx], NULL);
-
-	dev->mt76.vif_mask &= ~BIT_ULL(mconf->mt76.idx);
-	phy->omac_mask &= ~BIT_ULL(mconf->mt76.omac_idx);
-
-	spin_lock_bh(&dev->mt76.sta_poll_lock);
-	if (!list_empty(&mlink->wcid.poll_list))
-		list_del_init(&mlink->wcid.poll_list);
-	spin_unlock_bh(&dev->mt76.sta_poll_lock);
+	conf = link_conf_dereference_protected(vif, 0);
+	mconf = mconf_dereference_protected(mvif, 0);
+	if (!mconf || !conf)
+		goto out;
 
-	mt76_wcid_cleanup(&dev->mt76, &mlink->wcid);
-	rcu_assign_pointer(mvif->link[0], NULL);
-	rcu_assign_pointer(mvif->sta.link[0], NULL);
+	mt7996_remove_bss_conf(vif, conf, mconf);
 
+out:
 	mutex_unlock(&dev->mt76.mutex);
 }
 
@@ -713,10 +829,31 @@ mt7996_update_mu_group(struct ieee80211_hw *hw, struct ieee80211_bss_conf *conf,
 	mt76_wr(dev, MT_WF_PHYRX_BAND_GID_TAB_POS3(band), mu[3]);
 }
 
-static void mt7996_bss_info_changed(struct ieee80211_hw *hw,
-				    struct ieee80211_vif *vif,
-				    struct ieee80211_bss_conf *info,
-				    u64 changed)
+static void mt7996_vif_cfg_changed(struct ieee80211_hw *hw,
+				   struct ieee80211_vif *vif, u64 changed)
+{
+	struct mt7996_phy *phy = mt7996_hw_phy(hw);
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+
+	mutex_lock(&dev->mt76.mutex);
+
+	if (changed & BSS_CHANGED_ASSOC && vif->cfg.assoc) {
+		struct ieee80211_bss_conf *conf = &vif->bss_conf;
+		struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+		struct mt7996_bss_conf *mconf = mconf_dereference_protected(mvif, 0);
+		struct mt7996_link_sta *mlink = mlink_dereference_protected(&mvif->sta, 0);
+
+		mt7996_mcu_add_bss_info(phy, conf, mconf, mlink, true);
+		mt7996_mcu_add_sta(dev, conf, mconf, NULL, mlink, true, false);
+	}
+
+	mutex_unlock(&dev->mt76.mutex);
+}
+
+static void mt7996_link_info_changed(struct ieee80211_hw *hw,
+				     struct ieee80211_vif *vif,
+				     struct ieee80211_bss_conf *info,
+				     u64 changed)
 {
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_bss_conf *mconf;
@@ -732,7 +869,6 @@ static void mt7996_bss_info_changed(struct ieee80211_hw *hw,
 	 * and then peer references bss_info_rfch to set bandwidth cap.
 	 */
 	if ((changed & BSS_CHANGED_BSSID && !is_zero_ether_addr(info->bssid)) ||
-	    (changed & BSS_CHANGED_ASSOC && vif->cfg.assoc) ||
 	    (changed & BSS_CHANGED_BEACON_ENABLED && info->enable_beacon)) {
 		mt7996_mcu_add_bss_info(phy, info, mconf, mlink, true);
 		mt7996_mcu_add_sta(dev, info, mconf, NULL, mlink, true,
@@ -1074,11 +1210,20 @@ mt7996_get_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_bss_conf *mconf;
-	u64 ret;
+	u64 ret = -1ULL;
+	int i;
 
 	mutex_lock(&dev->mt76.mutex);
-	mconf = mconf_dereference_protected(mvif, 0);
-	ret = __mt7996_get_tsf(hw, mconf);
+	/* FIXME workaround for preventing kernel crash during ACS
+	 * (i.e., link 0 is doing ACS while link 1 queries tsf)
+	 */
+	for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++) {
+		mconf = mconf_dereference_protected(mvif, i);
+		if (mconf)
+			break;
+	}
+	if (mconf)
+		ret = __mt7996_get_tsf(hw, mconf);
 	mutex_unlock(&dev->mt76.mutex);
 
 	return ret;
@@ -1100,7 +1245,7 @@ mt7996_set_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	mutex_lock(&dev->mt76.mutex);
 
-	mconf = mconf_dereference_protected(mvif, 0);
+	mconf = mconf_dereference_protected(mvif, mvif->master_link_id);
 	n = mconf->mt76.omac_idx > HW_BSSID_MAX ? HW_BSSID_0
 					       : mconf->mt76.omac_idx;
 	mt76_wr(dev, MT_LPON_UTTR0(phy->mt76->band_idx), tsf.t32[0]);
@@ -1128,7 +1273,7 @@ mt7996_offset_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	mutex_lock(&dev->mt76.mutex);
 
-	mconf = mconf_dereference_protected(mvif, 0);
+	mconf = mconf_dereference_protected(mvif, mvif->master_link_id);
 	n = mconf->mt76.omac_idx > HW_BSSID_MAX ? HW_BSSID_0
 					       : mconf->mt76.omac_idx;
 	mt76_wr(dev, MT_LPON_UTTR0(phy->mt76->band_idx), tsf.t32[0]);
@@ -1304,7 +1449,7 @@ mt7996_set_bitrate_mask(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	u32 changed = IEEE80211_RC_SUPP_RATES_CHANGED;
 
 	mutex_lock(&dev->mt76.mutex);
-	mconf = mconf_dereference_protected(mvif, 0);
+	mconf = mconf_dereference_protected(mvif, mvif->master_link_id);
 	mconf->bitrate_mask = *mask;
 	mutex_unlock(&dev->mt76.mutex);
 
@@ -1524,7 +1669,7 @@ void mt7996_get_et_stats(struct ieee80211_hw *hw,
 	int i, ei = 0;
 
 	mutex_lock(&dev->mt76.mutex);
-	mconf = mconf_dereference_protected(mvif, 0);
+	mconf = mconf_dereference_protected(mvif, mvif->master_link_id);
 	wi.idx = mconf->mt76.idx,
 
 	mt7996_mac_update_stats(phy);
@@ -1897,6 +2042,8 @@ mt7996_assign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	struct mt7996_phy *phy = ctx->phy;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_bss_conf *mconf;
+	u8 link_id = link_conf->link_id;
+	int ret;
 
 	wiphy_info(hw->wiphy, "Assign VIF (addr: %pM, type: %d, link_id: %d) to channel context: %d MHz\n",
 		    vif->addr, vif->type, link_conf->link_id,
@@ -1904,10 +2051,28 @@ mt7996_assign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	mutex_lock(&phy->dev->mt76.mutex);
 
-	mconf = mconf_dereference_protected(mvif, 0);
-	mconf->chanctx = ctx;
+	mconf = mconf_dereference_protected(mvif, link_id);
+
+	/* Remove bss conf when change non-MLO interface to MLO interface */
+	if (ieee80211_vif_is_mld(vif) && mconf == &mvif->deflink)
+		mt7996_remove_bss_conf(vif, link_conf, mconf);
+	else if (mconf && phy != mconf->phy)
+		dev_err(phy->dev->mt76.dev,
+			"%s: error: change link[%d] from phy%d to phy%d",
+			__func__, link_id, mconf->phy->mt76->band_idx,
+			phy->mt76->band_idx);
+
+	ret = mt7996_add_bss_conf(phy, vif, link_conf);
+	if (ret) {
+		mutex_unlock(&phy->dev->mt76.mutex);
+		return ret;
+	}
+
 	ctx->nbss_assigned++;
 
+	if (mt7996_hw_phy(hw) == phy)
+		mvif->master_link_id = link_id;
+
 	mutex_unlock(&phy->dev->mt76.mutex);
 
 	return 0;
@@ -1920,8 +2085,6 @@ mt7996_unassign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 {
 	struct mt7996_chanctx *ctx = mt7996_chanctx_get(conf);
 	struct mt7996_phy *phy = ctx->phy;
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
 
 	wiphy_info(hw->wiphy, "Remove VIF (addr: %pM, type: %d, link_id: %d) from channel context: %d MHz\n",
 		   vif->addr, vif->type, link_conf->link_id,
@@ -1933,8 +2096,6 @@ mt7996_unassign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	if (test_bit(MT76_SCANNING, &phy->mt76->state))
 		mt7996_scan_complete(phy, true);
 
-	mconf = mconf_dereference_protected(mvif, 0);
-	mconf->chanctx = NULL;
 	ctx->nbss_assigned--;
 
 	mutex_unlock(&phy->dev->mt76.mutex);
@@ -1973,6 +2134,60 @@ mt7996_switch_vif_chanctx(struct ieee80211_hw *hw,
 	return mt7996_set_channel(phy, &new_ctx->chandef);
 }
 
+static int
+mt7996_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+			u16 old_links, u16 new_links,
+			struct ieee80211_bss_conf *old[IEEE80211_MLD_MAX_NUM_LINKS])
+{
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct mt7996_phy *phy = mt7996_hw_phy(hw);
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	unsigned long rem = old_links & ~new_links;
+	unsigned int link_id;
+	int ret = 0;
+
+	if (old_links == new_links)
+		return 0;
+
+	mutex_lock(&dev->mt76.mutex);
+
+	/* remove first */
+	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
+		struct mt7996_bss_conf *mconf =
+			mconf_dereference_protected(mvif, link_id);
+
+		if (!mconf)
+			continue;
+
+		mt7996_remove_bss_conf(vif, old[link_id], mconf);
+	}
+
+	if (!old_links) {
+		struct mt7996_bss_conf *mconf =
+			mconf_dereference_protected(mvif, 0);
+
+		if (ieee80211_vif_is_mld(vif) && mconf == &mvif->deflink)
+			mt7996_remove_bss_conf(vif, &vif->bss_conf, mconf);
+
+		mvif->group_mld_id = get_own_mld_idx(dev->mld_id_mask, true);
+		dev->mld_id_mask |= BIT_ULL(mvif->group_mld_id);
+
+		mvif->mld_remap_id = get_mld_remap_idx(dev->mld_remap_id_mask);
+		dev->mld_remap_id_mask |= BIT_ULL(mvif->mld_remap_id);
+	}
+
+	/* fallback to non-MLO interface */
+	if (!new_links) {
+		ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+		dev->mld_id_mask &= ~BIT_ULL(mvif->group_mld_id);
+		dev->mld_remap_id_mask &= ~BIT_ULL(mvif->mld_remap_id);
+	}
+
+	mutex_unlock(&dev->mt76.mutex);
+
+	return ret;
+}
+
 const struct ieee80211_ops mt7996_ops = {
 	.add_chanctx = ieee80211_emulate_add_chanctx,
 	.remove_chanctx = ieee80211_emulate_remove_chanctx,
@@ -1986,7 +2201,8 @@ const struct ieee80211_ops mt7996_ops = {
 	.config = mt7996_config,
 	.conf_tx = mt7996_conf_tx,
 	.configure_filter = mt7996_configure_filter,
-	.bss_info_changed = mt7996_bss_info_changed,
+	.vif_cfg_changed = mt7996_vif_cfg_changed,
+	.link_info_changed = mt7996_link_info_changed,
 	.sta_state = mt76_sta_state,
 	.sta_pre_rcu_remove = mt76_sta_pre_rcu_remove,
 	.link_sta_rc_update = mt7996_link_sta_rc_update,
@@ -2032,4 +2248,5 @@ const struct ieee80211_ops mt7996_ops = {
 	.assign_vif_chanctx = mt7996_assign_vif_chanctx,
 	.unassign_vif_chanctx = mt7996_unassign_vif_chanctx,
 	.switch_vif_chanctx = mt7996_switch_vif_chanctx,
+	.change_vif_links = mt7996_change_vif_links,
 };
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index a31a6c17..18c6f1bd 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -1046,15 +1046,23 @@ static void
 mt7996_mcu_bss_mld_tlv(struct sk_buff *skb, struct ieee80211_vif *vif,
 		       struct mt7996_bss_conf *mconf)
 {
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct bss_mld_tlv *mld;
 	struct tlv *tlv;
 
 	tlv = mt7996_mcu_add_uni_tlv(skb, UNI_BSS_INFO_MLD, sizeof(*mld));
-
 	mld = (struct bss_mld_tlv *)tlv;
-	mld->group_mld_id = 0xff;
-	mld->own_mld_id = mconf->mt76.idx;
-	mld->remap_idx = 0xff;
+
+	if (ieee80211_vif_is_mld(vif)) {
+		mld->group_mld_id = mvif->group_mld_id;
+		mld->remap_idx = mvif->mld_remap_id;
+		memcpy(mld->mac_addr, vif->addr, ETH_ALEN);
+	} else {
+		mld->group_mld_id = 0xff;
+		mld->remap_idx = 0xff;
+	}
+
+	mld->own_mld_id = mconf->own_mld_id;
 }
 
 static void
@@ -1135,13 +1143,11 @@ mt7996_mcu_bss_ifs_timing_tlv(struct sk_buff *skb, struct mt7996_phy *phy)
 }
 
 static int
-mt7996_mcu_bss_basic_tlv(struct sk_buff *skb,
-			 struct ieee80211_bss_conf *conf,
-			 struct mt7996_bss_conf *mconf,
-			 struct ieee80211_sta *sta,
-			 struct mt76_phy *phy, u16 wlan_idx,
-			 bool enable)
+mt7996_mcu_bss_basic_tlv(struct sk_buff *skb, struct ieee80211_bss_conf *conf,
+			 struct mt7996_bss_conf *mconf, struct ieee80211_sta *sta,
+			 u16 wlan_idx, bool enable)
 {
+	struct mt76_phy *phy = mconf->phy->mt76;
 	struct ieee80211_vif *vif = conf->vif;
 	struct cfg80211_chan_def *chandef = &phy->chandef;
 	struct mt76_connac_bss_basic_tlv *bss;
@@ -1253,8 +1259,7 @@ int mt7996_mcu_add_bss_info(struct mt7996_phy *phy,
 		return PTR_ERR(skb);
 
 	/* bss_basic must be first */
-	mt7996_mcu_bss_basic_tlv(skb, conf, mconf, NULL, phy->mt76,
-				 mlink->wcid.idx, enable);
+	mt7996_mcu_bss_basic_tlv(skb, conf, mconf, NULL, mlink->wcid.idx, enable);
 	mt7996_mcu_bss_sec_tlv(skb, mconf);
 
 	if (vif->type == NL80211_IFTYPE_MONITOR)
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index f00a43c1..b0f96eb0 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -353,7 +353,8 @@ struct mt7996_bss_conf {
 	struct ieee80211_tx_queue_params queue_params[IEEE80211_NUM_ACS];
 	struct cfg80211_bitrate_mask bitrate_mask;
 
-	struct mt7996_chanctx *chanctx;
+	u8 link_id;
+	u8 own_mld_id;
 };
 
 struct mt7996_vif {
@@ -362,6 +363,10 @@ struct mt7996_vif {
 
 	struct mt7996_sta sta;
 	struct mt7996_dev *dev;
+
+	u8 master_link_id;
+	u8 group_mld_id;
+	u8 mld_remap_id;
 };
 
 /* crash-dump */
@@ -560,6 +565,8 @@ struct mt7996_dev {
 	u16 chainmask;
 	u8 chainshift[__MT_MAX_BAND];
 	u32 hif_idx;
+	u64 mld_id_mask;
+	u64 mld_remap_id_mask;
 
 	struct work_struct init_work;
 	struct work_struct rc_work;
-- 
2.45.2

