From 8b3def5f4f8b71437e916be69920afdc45130eaa Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Thu, 26 Sep 2024 09:05:32 +0800
Subject: [PATCH 218/265] mtk: mt76: mt7996: refactor check for TX BA sesstion
 status

Now mt76 checks TX BA session status under following cases
1. receive TxS with no fixed rated
2. receive TxFree from QoS data

The status check includes
1. if the TX BA session has existed, refresh the timer
2. if the TX BA session does not exist, try to create the TX BA session
   and record the current time
3. do not retry the TX BA session request within ADDBA_RETRY_PERIOD
   seconds

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 mt7996/mac.c    | 56 ++++++++++++++++++++++++++++++-------------------
 mt7996/mt7996.h |  3 +++
 2 files changed, 38 insertions(+), 21 deletions(-)

diff --git a/mt7996/mac.c b/mt7996/mac.c
index 00366a05..b6b85c65 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -1115,16 +1115,17 @@ u32 mt7996_wed_init_buf(void *ptr, dma_addr_t phys, int token_id)
 }
 
 static void
-mt7996_tx_check_aggr(struct ieee80211_sta *sta, struct sk_buff *skb,
-		     struct mt76_wcid *wcid)
+mt7996_check_tx_ba_status(struct mt76_wcid *wcid, u8 tid)
 {
+	struct ieee80211_sta *sta;
 	struct mt7996_sta *msta;
-	struct mt7996_link_sta *mlink;
 	struct ieee80211_link_sta *link_sta;
-	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
-	bool is_8023 = info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP;
-	u16 fc, tid;
 
+	if (!wcid)
+		return;
+
+	sta = wcid_to_sta(wcid);
+	msta = (struct mt7996_sta *)sta->drv_priv;
 	link_sta = rcu_dereference(sta->link[wcid->link_id]);
 	if (!link_sta)
 		return;
@@ -1132,6 +1133,28 @@ mt7996_tx_check_aggr(struct ieee80211_sta *sta, struct sk_buff *skb,
 	if (!sta->mlo && !(link_sta->ht_cap.ht_supported || link_sta->he_cap.has_he))
 		return;
 
+	if (test_bit(tid, &wcid->ampdu_state)) {
+		ieee80211_refresh_tx_agg_session_timer(sta, tid);
+		return;
+	}
+
+	if (!msta->last_addba_req_time[tid] ||
+	    time_after(jiffies, msta->last_addba_req_time[tid] + ADDBA_RETRY_PERIOD)) {
+		set_bit(tid, &wcid->ampdu_state);
+		if (ieee80211_start_tx_ba_session(sta, tid, 0) < 0)
+			clear_bit(tid, &wcid->ampdu_state);
+		msta->last_addba_req_time[tid] = jiffies;
+	}
+}
+
+static void
+mt7996_tx_check_aggr(struct ieee80211_sta *sta, struct sk_buff *skb,
+		     struct mt76_wcid *wcid)
+{
+	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
+	bool is_8023 = info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP;
+	u16 fc, tid;
+
 	tid = skb->priority & IEEE80211_QOS_CTL_TID_MASK;
 
 	if (is_8023) {
@@ -1152,15 +1175,7 @@ mt7996_tx_check_aggr(struct ieee80211_sta *sta, struct sk_buff *skb,
 	if (unlikely(fc != (IEEE80211_FTYPE_DATA | IEEE80211_STYPE_QOS_DATA)))
 		return;
 
-	msta = (struct mt7996_sta *)sta->drv_priv;
-	mlink = rcu_dereference(msta->link[msta->pri_link]);
-	if (!mlink)
-		return;
-
-	if (!test_and_set_bit(tid, &mlink->wcid.ampdu_state)) {
-		if (ieee80211_start_tx_ba_session(sta, tid, 0))
-			clear_bit(tid, &mlink->wcid.ampdu_state);
-	}
+	mt7996_check_tx_ba_status(wcid, tid);
 }
 
 static void
@@ -1359,12 +1374,11 @@ mt7996_mac_add_txs_skb(struct mt7996_dev *dev, struct mt76_wcid *wcid,
 	}
 
 	if (mtk_wed_device_active(&dev->mt76.mmio.wed) && wcid->sta) {
-		struct ieee80211_sta *sta;
-		u8 tid;
-
-		sta = wcid_to_sta(wcid);
-		tid = FIELD_GET(MT_TXS0_TID, txs);
-		ieee80211_refresh_tx_agg_session_timer(sta, tid);
+		/* Do not check TX BA status for mgmt frames which are sent at a
+		 * fixed rate
+		 */
+		if (!le32_get_bits(txs_data[3], MT_TXS3_FIXED_RATE))
+			mt7996_check_tx_ba_status(wcid, FIELD_GET(MT_TXS0_TID, txs));
 	}
 
 	txrate = FIELD_GET(MT_TXS0_TX_RATE, txs);
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 06e7f9d4..8b8ff166 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -155,6 +155,7 @@
 #define MT7996_MAX_PROBE_TRIES		2
 
 #define IP_DSCP_NUM			64
+#define ADDBA_RETRY_PERIOD		(5 * HZ)
 
 struct mt7996_vif;
 struct mt7996_sta;
@@ -402,6 +403,8 @@ struct mt7996_sta {
 	struct mt7996_vif *vif;
 	u8 pri_link;
 	u8 sec_link;
+
+	unsigned long last_addba_req_time[IEEE80211_NUM_TIDS];
 };
 
 struct mt7996_bss_conf {
-- 
2.45.2

