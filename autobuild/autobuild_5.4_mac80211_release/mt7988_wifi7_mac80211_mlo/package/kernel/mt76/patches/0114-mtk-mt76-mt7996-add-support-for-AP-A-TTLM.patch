From eb2ef2c3d92e6b40e9dbf1050d33fa460a84aefa Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Fri, 28 Jun 2024 13:45:15 +0800
Subject: [PATCH 114/146] mtk: mt76: mt7996: add support for AP A-TTLM

This add support for AP A-TTLM support by following actions
1. request at2lm resource to FW and get switch time TSF value
2. handle 2 events from FW and send notification to higher layer:
   switch time erxpired and AT2LM end
3. provide TTLM offset to FW if TTLM needs count down.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 mt76_connac_mcu.h |   1 +
 mt7996/main.c     |  14 +++++
 mt7996/mcu.c      | 152 +++++++++++++++++++++++++++++++++++++++++++++-
 mt7996/mcu.h      |  46 ++++++++++++++
 mt7996/mt7996.h   |   2 +
 5 files changed, 214 insertions(+), 1 deletion(-)

diff --git a/mt76_connac_mcu.h b/mt76_connac_mcu.h
index 4976d944..18758ff2 100644
--- a/mt76_connac_mcu.h
+++ b/mt76_connac_mcu.h
@@ -1401,6 +1401,7 @@ enum {
 	UNI_BSS_INFO_BCN_CRIT_UPDATE = 32,
 	UNI_BSS_INFO_BCN_STA_PROF_CSA = 37,
 	UNI_BSS_INFO_BCN_ML_RECONF = 38,
+	UNI_BSS_INFO_BCN_ATTLM = 39,
 };
 
 enum {
diff --git a/mt7996/main.c b/mt7996/main.c
index cfb4b293..ccdf2fe2 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -3252,6 +3252,19 @@ out:
 	return ret;
 }
 
+static int
+mt7996_set_attlm(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+		 u16 disabled_links, u16 switch_time, u32 duration)
+{
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	int ret;
+
+	mutex_lock(&dev->mt76.mutex);
+	ret = mt7996_mcu_mld_set_attlm(dev, vif, disabled_links, switch_time, duration);
+	mutex_unlock(&dev->mt76.mutex);
+	return ret;
+}
+
 static void
 mt7996_event_callback(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		      const struct ieee80211_event *event)
@@ -3412,4 +3425,5 @@ const struct ieee80211_ops mt7996_ops = {
 	.change_vif_links = mt7996_change_vif_links,
 	.change_sta_links = mt7996_change_sta_links,
 	.set_qos_map = mt7996_set_qos_map,
+	.set_attlm = mt7996_set_attlm,
 };
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 6e57387e..a30685e2 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -1362,6 +1362,22 @@ mt7996_mcu_mld_reconf_finish(void *priv, u8 *mac, struct ieee80211_vif *vif)
 	ieee80211_links_removed(vif, le16_to_cpu(reconf->link_bitmap));
 }
 
+static void
+mt7996_mcu_mld_attlm_event(void *priv, u8 *mac, struct ieee80211_vif *vif)
+{
+	struct mt7996_mld_event_data *data = priv;
+	struct mt7996_mcu_mld_attlm_timeout_event *ttlm = (void *)data->data;
+
+	if (!ether_addr_equal(vif->addr, data->mld_addr))
+		return;
+
+	/*
+	 * TODO: Remap the FW event type to MAC80211 event type.
+	 * For now, we align it because this is a proprietary implementation.
+	 */
+	ieee80211_attlm_notify(vif, 0, ttlm->event_type, GFP_ATOMIC);
+}
+
 static void
 mt7996_mcu_mld_event(struct mt7996_dev *dev, struct sk_buff *skb)
 {
@@ -1376,9 +1392,15 @@ mt7996_mcu_mld_event(struct mt7996_dev *dev, struct sk_buff *skb)
 	len = skb->len;
 
 	while (len > 0 && le16_to_cpu(tlv->len) <= len) {
+		data.data = (u8 *)tlv;
+
 		switch (le16_to_cpu(tlv->tag)) {
+		case UNI_EVENT_MLD_ATTLM_TIMEOUT:
+			ieee80211_iterate_active_interfaces_atomic(dev->mt76.hw,
+					IEEE80211_IFACE_ITER_RESUME_ALL,
+					mt7996_mcu_mld_attlm_event, &data);
+			break;
 		case UNI_EVENT_MLD_RECONF_AP_REM_TIMER:
-			data.data = (u8 *)tlv;
 			ieee80211_iterate_active_interfaces_atomic(dev->mt76.hw,
 					IEEE80211_IFACE_ITER_RESUME_ALL,
 					mt7996_mcu_mld_reconf_finish, &data);
@@ -3542,6 +3564,91 @@ mt7996_mcu_mld_reconf(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 	return mt76_mcu_skb_send_msg(&dev->mt76, skb, MCU_WM_UNI_CMD(MLD), true);
 }
 
+int mt7996_mcu_mld_set_attlm(struct mt7996_dev *dev, struct ieee80211_vif *vif,
+			     u16 disabled_links, u16 switch_time, u32 duration)
+{
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mld_req_hdr hdr = { .mld_idx = 0xff };
+	struct mld_attlm_req *req;
+	struct mt7996_mcu_mld_attlm_resp_event *resp;
+	struct sk_buff *skb, *rskb;
+	struct tlv *tlv;
+	int len = sizeof(hdr) + sizeof(*req), ret;
+	unsigned long valid_disabled_links =
+			(unsigned long) vif->valid_links & disabled_links;
+	u8 link_id;
+	bool bss_idx_set = false;
+
+	memcpy(hdr.mld_addr, vif->addr, ETH_ALEN);
+
+	skb = mt76_mcu_msg_alloc(&dev->mt76, NULL, len);
+	if (!skb)
+		return -ENOMEM;
+
+	skb_put_data(skb, &hdr, sizeof(hdr));
+	tlv = mt7996_mcu_add_uni_tlv(skb, UNI_CMD_MLD_ATTLM_RES_REQ, sizeof(*req));
+	req = (struct mld_attlm_req *)tlv;
+
+	req->attlm_idx = 0;
+	req->mst_timer = 1;
+	req->e_timer = 1;
+	req->mst_timer_adv_time = cpu_to_le16(50);
+	req->e_timer_adv_time = cpu_to_le16(0);
+	req->mst_duration = cpu_to_le32(switch_time * USEC_PER_MSEC);
+	req->e_duration = cpu_to_le32(duration * USEC_PER_MSEC);
+	req->disabled_link_bitmap = cpu_to_le16(valid_disabled_links);
+	for_each_set_bit(link_id, &valid_disabled_links,
+			 IEEE80211_MLD_MAX_NUM_LINKS) {
+		struct mt7996_bss_conf *mconf =
+				mconf_dereference_protected(mvif, link_id);
+
+		if (!mconf)
+			continue;
+
+		if (!bss_idx_set) {
+			req->bss_idx = mconf->mt76.idx;
+			bss_idx_set = true;
+		}
+
+		req->disabled_bss_idx[link_id] = mconf->mt76.idx;
+	}
+
+	if (!bss_idx_set) {
+		dev_kfree_skb(skb);
+		return -ENOLINK;
+	}
+
+	ret = mt76_mcu_skb_send_and_get_msg(&dev->mt76, skb, MCU_WM_UNI_CMD(MLD),
+					    true, &rskb);
+
+	if (ret)
+		return ret;
+
+	skb_pull(rskb, sizeof(struct mt7996_mcu_mld_event) - sizeof(struct mt7996_mcu_rxd));
+	resp = (struct mt7996_mcu_mld_attlm_resp_event *)rskb->data;
+	switch(le16_to_cpu(resp->tag)) {
+	case UNI_EVENT_MLD_ATTLM_RES_RSP: {
+		u32 tsf_0, tsf_1;
+		u64 switch_time_tsf;
+		u16 switch_time_tsf_tu;
+
+		tsf_0 = le32_to_cpu(resp->switch_time_tsf[0]);
+		tsf_1 = le32_to_cpu(resp->switch_time_tsf[1]);
+		switch_time_tsf = (u64)tsf_0 + ((u64)tsf_1 << 32);
+		switch_time_tsf_tu = (u16)u64_get_bits(switch_time_tsf,
+						   GENMASK_ULL(25, 10));
+		ieee80211_attlm_notify(vif, switch_time_tsf_tu,
+				       NL80211_ATTLM_STARTED, GFP_KERNEL);
+		break;
+	}
+	default:
+		break;
+	}
+
+	dev_kfree_skb(rskb);
+	return ret;
+}
+
 static void
 mt7996_mcu_beacon_cntdwn(struct ieee80211_bss_conf *conf, struct sk_buff *rskb,
 			 struct sk_buff *skb,
@@ -3824,6 +3931,48 @@ mt7996_mcu_beacon_ml_reconf(struct mt7996_dev *dev,
 	}
 }
 
+static void
+mt7996_mcu_beacon_ttlm(struct mt7996_dev *dev, struct ieee80211_bss_conf *conf,
+		       struct sk_buff *rskb, struct sk_buff *skb,
+		       struct ieee80211_mutable_offsets *offs)
+{
+	u16 offset = 0, tail_offset = offs->tim_offset + offs->tim_length;
+	struct bss_bcn_attlm_offset_tlv *attlm_offset;
+	u8 *beacon_tail = skb->data + tail_offset;
+	const struct element *elem;
+	struct ieee80211_ttlm_elem *ttlm;
+	bool cntdown_ttlm = false;
+	struct tlv *tlv;
+
+	if (!ieee80211_vif_is_mld(conf->vif))
+		return;
+
+	for_each_element_extid(elem, WLAN_EID_EXT_TID_TO_LINK_MAPPING,
+			       beacon_tail, skb->len - tail_offset) {
+		if (ieee80211_tid_to_link_map_size_ok(elem->data + 1,
+						      elem->datalen - 1)) {
+			ttlm = (struct ieee80211_ttlm_elem *)elem->data + 1;
+			if (!(ttlm->control &
+			      IEEE80211_TTLM_CONTROL_SWITCH_TIME_PRESENT) &&
+			    (ttlm->control &
+			     IEEE80211_TTLM_CONTROL_EXPECTED_DUR_PRESENT)) {
+				offset = (u8 *)elem - skb->data;
+				cntdown_ttlm = true;
+				break;
+			}
+		}
+	}
+
+	if (!cntdown_ttlm)
+		return;
+
+	tlv = mt7996_mcu_add_uni_tlv(rskb, UNI_BSS_INFO_BCN_ATTLM,
+				     sizeof(*attlm_offset));
+	attlm_offset = (struct bss_bcn_attlm_offset_tlv *)tlv;
+	attlm_offset->valid_id_bitmap = BIT(0);
+	attlm_offset->offset = cpu_to_le16(offset);
+}
+
 int mt7996_mcu_add_beacon(struct ieee80211_hw *hw,
 			  struct ieee80211_bss_conf *conf,
 			  struct mt7996_bss_conf *mconf, int en)
@@ -3878,6 +4027,7 @@ int mt7996_mcu_add_beacon(struct ieee80211_hw *hw,
 	mt7996_mcu_beacon_sta_prof_csa(rskb, conf, &offs);
 	mt7996_mcu_beacon_crit_update(rskb, skb, conf, mconf, &offs);
 	mt7996_mcu_beacon_ml_reconf(dev, conf, rskb, skb, &offs);
+	mt7996_mcu_beacon_ttlm(dev, conf, rskb, skb, &offs);
 out:
 	dev_kfree_skb(skb);
 	return mt76_mcu_skb_send_msg(&phy->dev->mt76, rskb,
diff --git a/mt7996/mcu.h b/mt7996/mcu.h
index 63b58c1e..36a18c69 100644
--- a/mt7996/mcu.h
+++ b/mt7996/mcu.h
@@ -560,6 +560,14 @@ struct bss_bcn_ml_reconf_offset {
 	u8 rsv;
 } __packed;
 
+struct bss_bcn_attlm_offset_tlv {
+	__le16 tag;
+	__le16 len;
+	u8 valid_id_bitmap;
+	u8 rsv;
+	__le16 offset;
+} __packed;
+
 struct bss_txcmd_tlv {
 	__le16 tag;
 	__le16 len;
@@ -1140,6 +1148,22 @@ struct mld_req_hdr {
 	u8 buf[];
 } __packed;
 
+struct mld_attlm_req {
+	__le16 tag;
+	__le16 len;
+	u8 attlm_idx;
+	u8 bss_idx;
+	u8 mst_timer;
+	u8 e_timer;
+	__le16 mst_timer_adv_time;
+	__le16 e_timer_adv_time;
+	__le32 mst_duration;
+	__le32 e_duration;
+	__le16 disabled_link_bitmap;
+	u8 disabled_bss_idx[16];
+	u8 rsv[2];
+} __packed;
+
 struct mld_reconf_timer {
 	__le16 tag;
 	__le16 len;
@@ -1158,6 +1182,7 @@ struct mld_reconf_stop_link {
 } __packed;
 
 enum {
+	UNI_CMD_MLD_ATTLM_RES_REQ = 0x02,
 	UNI_CMD_MLD_RECONF_AP_REM_TIMER = 0x03,
 };
 
@@ -1178,6 +1203,25 @@ struct mt7996_mld_event_data {
 	u8 *data;
 };
 
+struct mt7996_mcu_mld_attlm_resp_event {
+	__le16 tag;
+	__le16 len;
+	u8 status;
+	u8 attlm_idx;
+	u8 bss_idx;
+	u8 rsv;
+	__le32 switch_time_tsf[2];
+	__le32 end_tsf[2];
+} __packed;
+
+struct mt7996_mcu_mld_attlm_timeout_event {
+	__le16 tag;
+	__le16 len;
+	u8 attlm_idx;
+	u8 event_type;
+	u8 rsv[2];
+} __packed;
+
 struct mt7996_mcu_mld_ap_reconf_event {
 	__le16 tag;
 	__le16 len;
@@ -1187,6 +1231,8 @@ struct mt7996_mcu_mld_ap_reconf_event {
 } __packed;
 
 enum {
+	UNI_EVENT_MLD_ATTLM_RES_RSP = 0x02,
+	UNI_EVENT_MLD_ATTLM_TIMEOUT = 0x03,
 	UNI_EVENT_MLD_RECONF_AP_REM_TIMER = 0x04,
 };
 
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 79aac488..aa1d0a5e 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -1161,6 +1161,8 @@ int mt7996_mcu_set_vow_drr_ctrl(struct mt7996_phy *phy,
 				enum vow_drr_ctrl_id id);
 int mt7996_mcu_set_vow_feature_ctrl(struct mt7996_phy *phy);
 void mt7996_mcu_wmm_pbc_work(struct work_struct *work);
+int mt7996_mcu_mld_set_attlm(struct mt7996_dev *dev, struct ieee80211_vif *vif,
+			     u16 disabled_links, u16 switch_time, u32 duration);
 
 static inline u8 mt7996_max_interface_num(struct mt7996_dev *dev)
 {
-- 
2.45.2

