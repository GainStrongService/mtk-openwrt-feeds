From 20f00e7aab802256e380f896dfcffb9d12f82d43 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Fri, 31 Mar 2023 11:36:34 +0800
Subject: [PATCH 040/146] mtk: mt76: mt7996: add binfile mode support

Fix binfile cannot sync precal data to atenl
Binfile is viewed as efuse mode in atenl, so atenl does not allocate
precal memory for its eeprom file
Use mtd offset == 0xFFFFFFFF to determine whether it is binfile or flash mode
Add support for loading precal in binfile mode

Align upstream

mtk: mt76: mt7996: refactor eeprom loading flow for sku checking

Add eeprom sku checking mechanism to avoid using the
wrong eeprom in flash/binfile mode
The fields listed below will be checked by comparing the loaded eeprom to the default bin
1. FEM type
2. MAC address (warning for using default MAC address)
3. RF path & streams
   (to distinguish cases such as BE7200 4i5i, BE6500 3i5i, and BE5040 2i3i)

1. Reset eeprom content before loading efuse
   eeprom array might contain incomplete data read from flash or
   binfile, which is not overwritten since this block is invalid
   in efuse.
2. Remove testmode default bin since it is unnecessary
   Not used in logan. Directly load normal mode default bin is fine.
   Also, this way is better since we don't need to put testmode default
   eeprom for each sku (especially mt7992's sku) in our SDK.
3. Set testmode_en field for default bin mode for consistency sake

1.
Fix efuse mode txpower = 0 issue
This fix might be changed if fw supports efuse merge for buffer mode = EE_MODE_EFUSE
2.
Add mt7996 BE19000 ifem default bin, add mt7996 default bin bootstrip

mtk: mt76: mt7996: add fallback in case of missing precal data

Align Wi-Fi 6 upstream changes
https://github.com/openwrt/mt76/commit/2135e201e7a9339e018d4e2d4a33c73266e674d7

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 eeprom.c             | 25 ++++++++++++++
 mt76.h               |  3 ++
 mt7996/eeprom.c      | 80 +++++++++++++++++++++++++++++++++++++++-----
 mt7996/eeprom.h      |  7 ++++
 mt7996/init.c        |  2 +-
 mt7996/main.c        |  2 +-
 mt7996/mcu.c         |  2 +-
 mt7996/mt7996.h      |  3 ++
 mt7996/mtk_debugfs.c | 42 ++++++++++++++++++++++-
 testmode.h           |  2 +-
 10 files changed, 155 insertions(+), 13 deletions(-)

diff --git a/eeprom.c b/eeprom.c
index 847ef34b..27a898fa 100644
--- a/eeprom.c
+++ b/eeprom.c
@@ -161,6 +161,31 @@ static int mt76_get_of_eeprom(struct mt76_dev *dev, void *eep, int len)
 	return mt76_get_of_data_from_nvmem(dev, eep, "eeprom", len);
 }
 
+bool mt76_check_bin_file_mode(struct mt76_dev *dev)
+{
+	struct device_node *np = dev->dev->of_node;
+	const char *bin_file_name = NULL;
+
+	if (!np)
+		return false;
+
+	of_property_read_string(np, "bin_file_name", &bin_file_name);
+
+	dev->bin_file_name = bin_file_name;
+	if (dev->bin_file_name) {
+		dev_info(dev->dev, "Using bin file %s\n", dev->bin_file_name);
+#ifdef CONFIG_NL80211_TESTMODE
+		dev->test_mtd.name = devm_kstrdup(dev->dev, bin_file_name, GFP_KERNEL);
+		dev->test_mtd.offset = -1;
+#endif
+	}
+
+	of_node_put(np);
+
+	return dev->bin_file_name ? true : false;
+}
+EXPORT_SYMBOL_GPL(mt76_check_bin_file_mode);
+
 void
 mt76_eeprom_override(struct mt76_phy *phy)
 {
diff --git a/mt76.h b/mt76.h
index a0b617ec..7c7c7645 100644
--- a/mt76.h
+++ b/mt76.h
@@ -981,6 +981,8 @@ struct mt76_dev {
 		struct mt76_usb usb;
 		struct mt76_sdio sdio;
 	};
+
+	const char *bin_file_name;
 };
 
 #define MT76_MAX_AMSDU_NUM 8
@@ -1256,6 +1258,7 @@ void mt76_eeprom_override(struct mt76_phy *phy);
 int mt76_get_of_data_from_mtd(struct mt76_dev *dev, void *eep, int offset, int len);
 int mt76_get_of_data_from_nvmem(struct mt76_dev *dev, void *eep,
 				const char *cell_name, int len);
+bool mt76_check_bin_file_mode(struct mt76_dev *dev);
 
 struct mt76_queue *
 mt76_init_queue(struct mt76_dev *dev, int qid, int idx, int n_desc,
diff --git a/mt7996/eeprom.c b/mt7996/eeprom.c
index d70f63a4..56c7d8a3 100644
--- a/mt7996/eeprom.c
+++ b/mt7996/eeprom.c
@@ -63,11 +63,8 @@ static int mt7996_check_eeprom(struct mt7996_dev *dev)
 	}
 }
 
-static char *mt7996_eeprom_name(struct mt7996_dev *dev)
+const char *mt7996_eeprom_name(struct mt7996_dev *dev)
 {
-	if (dev->testmode_enable)
-		return MT7996_EEPROM_DEFAULT_TM;
-
 	switch (mt76_chip(&dev->mt76)) {
 	case MT7992_DEVICE_ID:
 		switch (dev->var.type) {
@@ -221,6 +218,7 @@ mt7996_eeprom_check_or_use_default(struct mt7996_dev *dev, bool use_default)
 
 	dev_warn(dev->mt76.dev, "eeprom load fail, use default bin\n");
 	memcpy(eeprom, fw->data, MT7996_EEPROM_SIZE);
+	dev->bin_file_mode = false;
 	dev->flash_mode = true;
 	dev->eeprom_mode = DEFAULT_BIN_MODE;
 	eeprom[MT_EE_TESTMODE_EN] = dev->testmode_enable;
@@ -346,6 +344,7 @@ static int mt7996_eeprom_load(struct mt7996_dev *dev)
 				goto out;
 			}
 		}
+		dev->eeprom_mode = EFUSE_MODE;
 	}
 
 out:
@@ -455,18 +454,83 @@ int mt7996_eeprom_parse_hw_cap(struct mt7996_dev *dev, struct mt7996_phy *phy)
 	return mt7996_eeprom_parse_band_config(phy);
 }
 
-int mt7996_eeprom_init(struct mt7996_dev *dev)
+static int
+mt7996_eeprom_load_precal_binfile(struct mt7996_dev *dev, u32 offs, u32 size)
 {
+	const struct firmware *fw = NULL;
 	int ret;
 
-	ret = mt7996_eeprom_load(dev);
-	if (ret < 0)
+	ret = request_firmware(&fw, dev->mt76.bin_file_name, dev->mt76.dev);
+	if (ret)
 		return ret;
 
-	ret = mt7996_eeprom_load_precal(dev);
+	if (!fw || !fw->data) {
+		dev_err(dev->mt76.dev, "Invalid bin (bin file mode), load precal fail\n");
+		ret = -EINVAL;
+		goto out;
+	}
+
+	memcpy(dev->cal, fw->data + offs, size);
+
+out:
+	release_firmware(fw);
+
+	return ret;
+}
+
+static int mt7996_eeprom_load_precal(struct mt7996_dev *dev)
+{
+	struct mt76_dev *mdev = &dev->mt76;
+	u8 *eeprom = mdev->eeprom.data;
+	u32 offs = MT_EE_DO_PRE_CAL;
+	u32 size, val = eeprom[offs];
+	int ret;
+
+	mt7996_eeprom_init_precal(dev);
+
+	if (!dev->flash_mode || !val)
+		return 0;
+
+	size = MT_EE_CAL_GROUP_SIZE + MT_EE_CAL_DPD_SIZE;
+
+	dev->cal = devm_kzalloc(mdev->dev, size, GFP_KERNEL);
+	if (!dev->cal) {
+		ret = -ENOMEM;
+		goto fail;
+	}
+
+	if (dev->bin_file_mode) {
+		ret = mt7996_eeprom_load_precal_binfile(dev, MT_EE_PRECAL, size);
+		if (ret)
+			goto fail;
+	}
+
+	ret = mt76_get_of_data_from_mtd(mdev, dev->cal, offs, size);
+	if (!ret)
+		return 0;
+
+	ret = mt76_get_of_data_from_nvmem(mdev, dev->cal, "precal", size);
+	if (!ret)
+		return 0;
+
+fail:
+	dev_warn(dev->mt76.dev, "Failed to load precal data: %d\n", ret);
+	devm_kfree(dev->mt76.dev, dev->cal);
+	dev->cal = NULL;
+
+	return ret;
+}
+
+int mt7996_eeprom_init(struct mt7996_dev *dev)
+{
+	int ret;
+
+	ret = mt7996_eeprom_load(dev);
 	if (ret)
 		return ret;
 
+	mt7996_eeprom_load_precal(dev);
+
 	ret = mt7996_eeprom_parse_hw_cap(dev, &dev->phy);
 	if (ret < 0)
 		return ret;
diff --git a/mt7996/eeprom.h b/mt7996/eeprom.h
index 186022b3..5d8deb85 100644
--- a/mt7996/eeprom.h
+++ b/mt7996/eeprom.h
@@ -103,6 +103,13 @@ enum mt7996_eeprom_band {
 	MT_EE_BAND_SEL_6GHZ,
 };
 
+enum mt7915_eeprom_mode {
+	DEFAULT_BIN_MODE,
+	EFUSE_MODE,
+	FLASH_MODE,
+	BIN_FILE_MODE,
+};
+
 static inline int
 mt7996_get_channel_group_5g(int channel)
 {
diff --git a/mt7996/init.c b/mt7996/init.c
index f4d5842b..95dc0951 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -1012,7 +1012,7 @@ static int mt7996_init_hardware(struct mt7996_dev *dev)
 	if (ret < 0)
 		return ret;
 
-	if (dev->flash_mode) {
+	if (dev->cal) {
 		ret = mt7996_mcu_apply_group_cal(dev);
 		if (ret)
 			return ret;
diff --git a/mt7996/main.c b/mt7996/main.c
index bd48024d..e8d0faf7 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -332,7 +332,7 @@ int mt7996_set_channel(struct mt76_phy *mphy)
 	struct mt7996_phy *phy = mphy->priv;
 	int ret;
 
-	if (dev->flash_mode) {
+	if (dev->cal) {
 		ret = mt7996_mcu_apply_tx_dpd(phy);
 		if (ret)
 			goto out;
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 4b3361cb..fd3c1469 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -3538,7 +3538,7 @@ int mt7996_mcu_set_chan_info(struct mt7996_phy *phy, u16 tag)
 				 &req, sizeof(req), true);
 }
 
-static int mt7996_mcu_set_eeprom_flash(struct mt7996_dev *dev)
+int mt7996_mcu_set_eeprom_flash(struct mt7996_dev *dev)
 {
 #define MAX_PAGE_IDX_MASK	GENMASK(7, 5)
 #define PAGE_IDX_MASK		GENMASK(4, 2)
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 5664117e..3beafc7f 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -420,6 +420,8 @@ struct mt7996_dev {
 	} wed_rro;
 
 	bool testmode_enable;
+	bool bin_file_mode;
+	u8 eeprom_mode;
 
 	bool ibf;
 	u8 fw_debug_wm;
@@ -567,6 +569,7 @@ irqreturn_t mt7996_irq_handler(int irq, void *dev_instance);
 u64 __mt7996_get_tsf(struct ieee80211_hw *hw, struct mt7996_vif *mvif);
 int mt7996_register_device(struct mt7996_dev *dev);
 void mt7996_unregister_device(struct mt7996_dev *dev);
+const char *mt7996_eeprom_name(struct mt7996_dev *dev);
 int mt7996_eeprom_init(struct mt7996_dev *dev);
 int mt7996_eeprom_check_fw_mode(struct mt7996_dev *dev);
 int mt7996_eeprom_parse_hw_cap(struct mt7996_dev *dev, struct mt7996_phy *phy);
diff --git a/mt7996/mtk_debugfs.c b/mt7996/mtk_debugfs.c
index 0117699e..450e16bd 100644
--- a/mt7996/mtk_debugfs.c
+++ b/mt7996/mtk_debugfs.c
@@ -348,7 +348,6 @@ static int mt7996_dump_version(struct seq_file *s, void *data)
 	u16 adie_chip_id, adie_chip_ver;
 	int adie_idx;
 	static const char * const fem_type[] = {
-		[MT7996_FEM_UNSET] = "N/A",
 		[MT7996_FEM_EXT] = "eFEM",
 		[MT7996_FEM_INT] = "iFEM",
 		[MT7996_FEM_MIX] = "mixed FEM",
@@ -2805,6 +2804,44 @@ static const struct file_operations mt7996_txpower_path_fops = {
 	.llseek = default_llseek,
 };
 
+static int mt7996_show_eeprom_mode(struct seq_file *s, void *data)
+{
+	struct mt7996_dev *dev = dev_get_drvdata(s->private);
+	struct mt76_dev *mdev = &dev->mt76;
+#ifdef CONFIG_NL80211_TESTMODE
+	const char *mtd_name = mdev->test_mtd.name;
+	u32 mtd_offset = mdev->test_mtd.offset;
+#else
+	const char *mtd_name = NULL;
+	u32 mtd_offset;
+#endif
+
+	seq_printf(s, "Current eeprom mode:\n");
+
+	switch (dev->eeprom_mode) {
+	case DEFAULT_BIN_MODE:
+		seq_printf(s, "   default bin mode\n   filename = %s\n", mt7996_eeprom_name(dev));
+		break;
+	case EFUSE_MODE:
+		seq_printf(s, "   efuse mode\n");
+		break;
+	case FLASH_MODE:
+		if (mtd_name)
+			seq_printf(s, "   flash mode\n   mtd name = %s\n   flash offset = 0x%x\n",
+				   mtd_name, mtd_offset);
+		else
+			seq_printf(s, "   flash mode\n");
+		break;
+	case BIN_FILE_MODE:
+		seq_printf(s, "   bin file mode\n   filename = %s\n", dev->mt76.bin_file_name);
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
 int mt7996_mtk_init_debugfs(struct mt7996_phy *phy, struct dentry *dir)
 {
 	struct mt7996_dev *dev = phy->dev;
@@ -2874,6 +2911,9 @@ int mt7996_mtk_init_debugfs(struct mt7996_phy *phy, struct dentry *dir)
 	debugfs_create_file("txpower_sku", 0600, dir, phy, &mt7996_txpower_sku_fops);
 	debugfs_create_file("txpower_path", 0600, dir, phy, &mt7996_txpower_path_fops);
 
+	debugfs_create_devm_seqfile(dev->mt76.dev, "eeprom_mode", dir,
+				    mt7996_show_eeprom_mode);
+
 	debugfs_create_devm_seqfile(dev->mt76.dev, "wtbl_info", dir,
 				    mt7996_wtbl_read);
 
diff --git a/testmode.h b/testmode.h
index 3348d0d5..6d79832a 100644
--- a/testmode.h
+++ b/testmode.h
@@ -16,7 +16,7 @@
  * @MT76_TM_ATTR_RESET: reset parameters to default (flag)
  * @MT76_TM_ATTR_STATE: test state (u32), see &enum mt76_testmode_state
  *
- * @MT76_TM_ATTR_MTD_PART: mtd partition used for eeprom data (string)
+ * @MT76_TM_ATTR_MTD_PART: mtd partition or binfile used for eeprom data (string)
  * @MT76_TM_ATTR_MTD_OFFSET: offset of eeprom data within the partition (u32)
  * @MT76_TM_ATTR_BAND_IDX: band idx of the chip (u8)
  *
-- 
2.45.2

