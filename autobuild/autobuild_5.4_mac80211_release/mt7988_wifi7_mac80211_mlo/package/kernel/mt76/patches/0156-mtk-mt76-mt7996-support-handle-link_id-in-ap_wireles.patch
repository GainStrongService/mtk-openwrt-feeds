From 7f8c5ad3590a674a0a974e2780630fc46421bbfe Mon Sep 17 00:00:00 2001
From: Howard Hsu <howard-yh.hsu@mediatek.com>
Date: Fri, 14 Jun 2024 14:54:44 +0800
Subject: [PATCH 156/265] mtk: mt76: mt7996: support handle link_id in
 ap_wireless vendor cmd

Add support handle link_id in ap_wireless vendor command. The link_id is
used to find the corresponding phy and its band_idx. The band_idx is the
critical information required by some mcu commands.

This commit also refactor some functions, changing the parameter from
phy to dev since phy is not required.

Signed-off-by: Howard Hsu <howard-yh.hsu@mediatek.com>
---
 mt7996/mt7996.h  | 12 +++++------
 mt7996/mtk_mcu.c | 53 +++++++++++++++++++++++++++++++-----------------
 mt7996/vendor.c  | 46 ++++++++++++++++++++++++++++-------------
 mt7996/vendor.h  |  6 +-----
 4 files changed, 73 insertions(+), 44 deletions(-)

diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index edd9c7c9..c122989d 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -1304,8 +1304,8 @@ int mt7996_vendor_amnt_sta_remove(struct mt7996_phy *phy,
 				  struct ieee80211_sta *sta);
 void mt7996_set_wireless_amsdu(struct ieee80211_hw *hw, u8 en);
 void mt7996_mcu_set_mimo(struct mt7996_phy *phy);
-int mt7996_set_muru_cfg(struct mt7996_phy *phy, u8 action, u8 val);
-int mt7996_mcu_set_muru_cfg(struct mt7996_phy *phy, void *data);
+int mt7996_set_muru_cfg(struct mt7996_dev *dev, u8 action, u8 val);
+int mt7996_mcu_set_muru_cfg(struct mt7996_dev *dev, void *data);
 void mt7996_set_beacon_vif(void *data, u8 *mac, struct ieee80211_vif *vif);
 int mt7996_mcu_set_csi(struct mt7996_phy *phy, u8 mode,
 		       u8 cfg, u8 v1, u32 v2, u8 *mac_addr);
@@ -1336,12 +1336,12 @@ int mt7996_mcu_set_muru_fixed_rate_parameter(struct mt7996_dev *dev, u8 action,
 int mt7996_mcu_set_txbf_snd_info(struct mt7996_dev *dev, void *para);
 int mt7996_mcu_set_muru_cmd(struct mt7996_dev *dev, u16 action, int val);
 int mt7996_mcu_muru_set_prot_frame_thr(struct mt7996_dev *dev, u32 val);
-int mt7996_mcu_set_bypass_smthint(struct mt7996_phy *phy, u8 val);
+int mt7996_mcu_set_bypass_smthint(struct mt7996_dev *dev, u8 band_idx, u8 val);
 int mt7996_mcu_set_rfeature_trig_type(struct mt7996_dev *dev, u8 band_idx,
 				      u8 enable, u8 trig_type);
-void mt7996_mcu_set_ppdu_tx_type(struct mt7996_phy *phy, u8 ppdu_type);
-void mt7996_mcu_set_nusers_ofdma(struct mt7996_phy *phy, u8 type, u8 ofdma_user_cnt);
-void mt7996_mcu_set_cert(struct mt7996_phy *phy, u8 type);
+void mt7996_mcu_set_ppdu_tx_type(struct mt7996_dev *dev, u8 ppdu_type);
+void mt7996_mcu_set_nusers_ofdma(struct mt7996_dev *dev, u8 band_idx, u8 ofdma_user_cnt);
+void mt7996_mcu_set_cert(struct mt7996_dev *dev);
 void mt7996_tm_update_channel(struct mt7996_phy *phy);
 
 int mt7996_mcu_set_vow_drr_dbg(struct mt7996_dev *dev, u32 val);
diff --git a/mt7996/mtk_mcu.c b/mt7996/mtk_mcu.c
index c87daf8e..8bacf29d 100644
--- a/mt7996/mtk_mcu.c
+++ b/mt7996/mtk_mcu.c
@@ -1082,11 +1082,10 @@ int mt7996_mcu_muru_set_prot_frame_thr(struct mt7996_dev *dev, u32 val)
 				 false);
 }
 
-int mt7996_mcu_set_bypass_smthint(struct mt7996_phy *phy, u8 val)
+int mt7996_mcu_set_bypass_smthint(struct mt7996_dev *dev, u8 band_idx, u8 val)
 {
 #define BF_PHY_SMTH_INT_BYPASS 0
 #define BYPASS_VAL 1
-	struct mt7996_dev *dev = phy->dev;
 	struct {
 		u8 _rsv[4];
 
@@ -1101,11 +1100,11 @@ int mt7996_mcu_set_bypass_smthint(struct mt7996_phy *phy, u8 val)
 		.tag = cpu_to_le16(BF_CFG_PHY),
 		.len = cpu_to_le16(sizeof(data) - 4),
 		.action = BF_PHY_SMTH_INT_BYPASS,
-		.band_idx = phy->mt76->band_idx,
+		.band_idx = band_idx,
 		.smthintbypass = val,
 	};
 
-	if (val != BYPASS_VAL)
+	if (val != BYPASS_VAL || !mt7996_band_valid(dev, band_idx))
 		return -EINVAL;
 
 	return mt76_mcu_send_msg(&dev->mt76, MCU_WM_UNI_CMD(BF), &data, sizeof(data),
@@ -1174,9 +1173,8 @@ int mt7996_mcu_set_rfeature_trig_type(struct mt7996_dev *dev, u8 band_idx,
 	}
 }
 
-int mt7996_mcu_set_muru_cfg(struct mt7996_phy *phy, void *data)
+int mt7996_mcu_set_muru_cfg(struct mt7996_dev *dev, void *data)
 {
-	struct mt7996_dev *dev = phy->dev;
 	struct mt7996_muru *muru;
 	struct {
 		u8 _rsv[4];
@@ -1202,7 +1200,7 @@ int mt7996_mcu_set_muru_cfg(struct mt7996_phy *phy, void *data)
 				 sizeof(req), false);
 }
 
-int mt7996_set_muru_cfg(struct mt7996_phy *phy, u8 action, u8 val)
+int mt7996_set_muru_cfg(struct mt7996_dev *dev, u8 action, u8 val)
 {
 	struct mt7996_muru *muru;
 	struct mt7996_muru_dl *dl;
@@ -1222,7 +1220,7 @@ int mt7996_set_muru_cfg(struct mt7996_phy *phy, u8 action, u8 val)
 		comm->sch_type = MURU_OFDMA_SCH_TYPE_DL;
 		muru->cfg_comm = cpu_to_le32(MURU_COMM_SET);
 		muru->cfg_dl = cpu_to_le32(MURU_FIXED_DL_TOTAL_USER_CNT);
-		ret = mt7996_mcu_set_muru_cfg(phy, muru);
+		ret = mt7996_mcu_set_muru_cfg(dev, muru);
 		break;
 	case MU_CTRL_UL_USER_CNT:
 		ul->user_num = val;
@@ -1230,7 +1228,7 @@ int mt7996_set_muru_cfg(struct mt7996_phy *phy, u8 action, u8 val)
 		comm->sch_type = MURU_OFDMA_SCH_TYPE_UL;
 		muru->cfg_comm = cpu_to_le32(MURU_COMM_SET);
 		muru->cfg_ul = cpu_to_le32(MURU_FIXED_UL_TOTAL_USER_CNT);
-		ret = mt7996_mcu_set_muru_cfg(phy, muru);
+		ret = mt7996_mcu_set_muru_cfg(dev, muru);
 		break;
 	default:
 		break;
@@ -1240,16 +1238,15 @@ int mt7996_set_muru_cfg(struct mt7996_phy *phy, u8 action, u8 val)
 	return ret;
 }
 
-void mt7996_mcu_set_ppdu_tx_type(struct mt7996_phy *phy, u8 ppdu_type)
+void mt7996_mcu_set_ppdu_tx_type(struct mt7996_dev *dev, u8 ppdu_type)
 {
-	struct mt7996_dev *dev = phy->dev;
 	int enable_su;
 
 	switch (ppdu_type) {
 	case CAPI_SU:
 		enable_su = 1;
 		mt7996_mcu_set_muru_cmd(dev, UNI_CMD_MURU_SUTX_CTRL, enable_su);
-		mt7996_set_muru_cfg(phy, MU_CTRL_DL_USER_CNT, 0);
+		mt7996_set_muru_cfg(dev, MU_CTRL_DL_USER_CNT, 0);
 		break;
 	case CAPI_MU:
 		enable_su = 0;
@@ -1260,16 +1257,35 @@ void mt7996_mcu_set_ppdu_tx_type(struct mt7996_phy *phy, u8 ppdu_type)
 	}
 }
 
-void mt7996_mcu_set_nusers_ofdma(struct mt7996_phy *phy, u8 type, u8 user_cnt)
+void mt7996_mcu_set_nusers_ofdma(struct mt7996_dev *dev, u8 band_idx, u8 user_cnt)
 {
-	struct mt7996_dev *dev = phy->dev;
+	struct mt76_phy *mphy;
+	struct mt7996_phy *phy;
 	int enable_su = 0;
+	u8 type;
+
+	if (!mt7996_band_valid(dev, band_idx)) {
+		dev_err(dev->mt76.dev, "Invalid band_idx\n");
+		return;
+	}
+
+	mphy = dev->mt76.phys[band_idx];
+	if (!mphy)
+		return;
+
+	phy = (struct mt7996_phy *)mphy->priv;
 
 	mt7996_mcu_set_muru_cmd(dev, UNI_CMD_MURU_SUTX_CTRL, enable_su);
-	mt7996_mcu_set_muru_cmd(dev, UNI_CMD_MURU_SET_MUDL_ACK_POLICY, MU_DL_ACK_POLICY_SU_BAR);
+	mt7996_mcu_set_muru_cmd(dev, UNI_CMD_MURU_SET_MUDL_ACK_POLICY,
+				MU_DL_ACK_POLICY_SU_BAR);
 	mt7996_mcu_muru_set_prot_frame_thr(dev, 9999);
 
-	mt7996_set_muru_cfg(phy, type, user_cnt);
+	if (phy->muru_onoff & OFDMA_UL)
+		type = MU_CTRL_UL_USER_CNT;
+	else
+		type = MU_CTRL_DL_USER_CNT;
+
+	mt7996_set_muru_cfg(dev, type, user_cnt);
 }
 
 void mt7996_mcu_set_mimo(struct mt7996_phy *phy)
@@ -1300,9 +1316,8 @@ void mt7996_mcu_set_mimo(struct mt7996_phy *phy)
 	mt7996_mcu_set_muru_cmd(dev, UNI_CMD_MURU_SET_FORCE_MU, force_mu);
 }
 
-void mt7996_mcu_set_cert(struct mt7996_phy *phy, u8 type)
+void mt7996_mcu_set_cert(struct mt7996_dev *dev)
 {
-	struct mt7996_dev *dev = phy->dev;
 	struct {
 		u8 _rsv[4];
 
@@ -1313,7 +1328,7 @@ void mt7996_mcu_set_cert(struct mt7996_phy *phy, u8 type)
 	} __packed req = {
 		.tag = cpu_to_le16(UNI_CMD_CERT_CFG),
 		.len = cpu_to_le16(sizeof(req) - 4),
-		.action = type, /* 1: CAPI Enable */
+		.action = !!dev->cert_mode, /* 1: CAPI Enable */
 	};
 
 	mt76_mcu_send_msg(&dev->mt76, MCU_WM_UNI_CMD(WSYS_CONFIG), &req,
diff --git a/mt7996/vendor.c b/mt7996/vendor.c
index ed7c1322..33c682c0 100644
--- a/mt7996/vendor.c
+++ b/mt7996/vendor.c
@@ -31,6 +31,7 @@ wireless_ctrl_policy[NUM_MTK_VENDOR_ATTRS_WIRELESS_CTRL] = {
 	[MTK_VENDOR_ATTR_WIRELESS_CTRL_NUSERS_OFDMA] = {.type = NLA_U8 },
 	[MTK_VENDOR_ATTR_WIRELESS_CTRL_MIMO] = {.type = NLA_U8 },
 	[MTK_VENDOR_ATTR_WIRELESS_CTRL_BA_BUFFER_SIZE] = {.type = NLA_U16 },
+	[MTK_VENDOR_ATTR_WIRELESS_CTRL_LINK_ID] = {.type = NLA_U8 },
 };
 
 static const struct nla_policy
@@ -182,7 +183,7 @@ static int mt7996_vendor_mu_ctrl(struct wiphy *wiphy,
 		nla_memcpy(muru, tb[MTK_VENDOR_ATTR_MU_CTRL_STRUCT],
 			   sizeof(struct mt7996_muru));
 
-		err = mt7996_mcu_set_muru_cfg(phy, muru);
+		err = mt7996_mcu_set_muru_cfg(phy->dev, muru);
 		kfree(muru);
 	}
 
@@ -953,9 +954,12 @@ static int mt7996_vendor_wireless_ctrl(struct wiphy *wiphy,
 	struct ieee80211_hw *hw = wiphy_to_ieee80211_hw(wiphy);
 	struct mt7996_phy *phy = mt7996_hw_phy(hw);
 	struct mt7996_dev *dev = phy->dev;
+	struct ieee80211_vif *vif = wdev_to_ieee80211_vif(wdev);
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_bss_conf *mconf;
 	struct nlattr *tb[NUM_MTK_VENDOR_ATTRS_WIRELESS_CTRL];
 	int err;
-	u8 val8;
+	u8 val8, band_idx, link_id = 0;
 	u16 val16;
 	u32 val32;
 
@@ -964,12 +968,28 @@ static int mt7996_vendor_wireless_ctrl(struct wiphy *wiphy,
 	if (err)
 		return err;
 
-	val32 = CAPI_WIRELESS_CHANGED;
+	if (ieee80211_vif_is_mld(vif) && tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_LINK_ID]) {
+		link_id = nla_get_u8(tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_LINK_ID]);
+
+		if (link_id >= IEEE80211_LINK_UNSPECIFIED)
+			return -EINVAL;
+	}
+
+	rcu_read_lock();
+	mconf = rcu_dereference(mvif->link[link_id]);
+	if (!mconf || !mconf->phy) {
+		rcu_read_unlock();
+		return -EINVAL;
+	}
+
+	band_idx = mconf->phy->mt76->band_idx;
+	rcu_read_unlock();
 
 	if (tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_OFDMA]) {
 		val8 = nla_get_u8(tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_OFDMA]);
-		val32 |= FIELD_PREP(RATE_CFG_MODE, RATE_PARAM_FIXED_OFDMA) |
-			 FIELD_PREP(RATE_CFG_VAL, val8);
+		val32 = FIELD_PREP(RATE_CFG_MODE, RATE_PARAM_FIXED_OFDMA) |
+			FIELD_PREP(RATE_CFG_VAL, val8) |
+			FIELD_PREP(RATE_CFG_BAND_IDX, band_idx);
 		ieee80211_iterate_active_interfaces_atomic(hw, IEEE80211_IFACE_ITER_RESUME_ALL,
 			mt7996_set_wireless_vif, &val32);
 		if (val8 == 3) /* DL20and80 */
@@ -980,24 +1000,22 @@ static int mt7996_vendor_wireless_ctrl(struct wiphy *wiphy,
 		hw->max_rx_aggregation_subframes = val16;
 	} else if (tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_PPDU_TX_TYPE]) {
 		val8 = nla_get_u8(tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_PPDU_TX_TYPE]);
-		mt7996_mcu_set_ppdu_tx_type(phy, val8);
+		mt7996_mcu_set_ppdu_tx_type(dev, val8);
 	} else if (tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_NUSERS_OFDMA]) {
 		val8 = nla_get_u8(tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_NUSERS_OFDMA]);
-		if (phy->muru_onoff & OFDMA_UL)
-			mt7996_mcu_set_nusers_ofdma(phy, MU_CTRL_UL_USER_CNT, val8);
-		else
-			mt7996_mcu_set_nusers_ofdma(phy, MU_CTRL_DL_USER_CNT, val8);
+		mt7996_mcu_set_nusers_ofdma(dev, band_idx, val8);
 	} else if (tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_MIMO]) {
 		val8 = nla_get_u8(tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_MIMO]);
-		val32 |= FIELD_PREP(RATE_CFG_MODE, RATE_PARAM_FIXED_MIMO) |
-			 FIELD_PREP(RATE_CFG_VAL, val8);
+		val32 = FIELD_PREP(RATE_CFG_MODE, RATE_PARAM_FIXED_MIMO) |
+			FIELD_PREP(RATE_CFG_VAL, val8) |
+			FIELD_PREP(RATE_CFG_BAND_IDX, band_idx);
 		ieee80211_iterate_active_interfaces_atomic(hw, IEEE80211_IFACE_ITER_RESUME_ALL,
 			mt7996_set_wireless_vif, &val32);
 	} else if (tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_CERT]) {
 		val8 = nla_get_u8(tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_CERT]);
 		dev->cert_mode = val8;
-		mt7996_mcu_set_cert(phy, !!val8);
-		mt7996_mcu_set_bypass_smthint(phy, val8);
+		mt7996_mcu_set_cert(dev);
+		mt7996_mcu_set_bypass_smthint(dev, band_idx, val8);
 	} else if (tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_AMSDU]) {
 		val8 = nla_get_u8(tb[MTK_VENDOR_ATTR_WIRELESS_CTRL_AMSDU]);
 		mt7996_set_wireless_amsdu(hw, val8);
diff --git a/mt7996/vendor.h b/mt7996/vendor.h
index 5608a3b4..714f0b3e 100644
--- a/mt7996/vendor.h
+++ b/mt7996/vendor.h
@@ -78,11 +78,6 @@ enum mtk_vendor_attr_mu_ctrl {
 		NUM_MTK_VENDOR_ATTRS_MU_CTRL - 1
 };
 
-enum mtk_capi_control_changed {
-	CAPI_RFEATURE_CHANGED = BIT(16),
-	CAPI_WIRELESS_CHANGED = BIT(17),
-};
-
 enum mtk_vendor_attr_rfeature_ctrl {
 	MTK_VENDOR_ATTR_RFEATURE_CTRL_UNSPEC,
 
@@ -117,6 +112,7 @@ enum mtk_vendor_attr_wireless_ctrl {
 	MTK_VENDOR_ATTR_WIRELESS_CTRL_CERT = 9,
 	MTK_VENDOR_ATTR_WIRELESS_CTRL_RTS_SIGTA,
 	MTK_VENDOR_ATTR_WIRELESS_CTRL_MU_EDCA, /* reserve */
+	MTK_VENDOR_ATTR_WIRELESS_CTRL_LINK_ID,
 
 	/* keep last */
 	NUM_MTK_VENDOR_ATTRS_WIRELESS_CTRL,
-- 
2.45.2

