From c674be36f9ae70387b0a61208063936e86fd216b Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Wed, 12 Mar 2025 20:30:09 +0800
Subject: [PATCH 2/2] mtk: mt76: mt7996: fix testmode rx stats issue

Fix testmode RX stats issue
Originally, RX ok count is calculated by RX MDRDY count - FCS err count
- len mismatch count.
However, this is incorrect as the other err counts are not included in
the FW event.
Therefore, just use the RX ok count reported from FW.

mtk: mt76: mt7996: rework testmode dump stats

Rework testmode dump stats for dump order
Originally, the dump order is determined by the order of MT76 testmode
attribute enums, and the order of the attribute enum cannot be exchanged.
If a new attribute which is related to the previous attribute, the dump
info of these two attributes will be separated.
Therefore, use nla_for_each_nested instead of for loop to dump info, so
that the dump order will be determined by the order of nla_put
in driver.

Additionally, adjust the dump stats flow to adjust the order of dump
info.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mac80211.c        |   4 +-
 mt76.h            |  17 ++++++--
 mt7996/mt7996.h   |  14 -------
 mt7996/testmode.c | 105 +++++++++++++++-------------------------------
 testmode.c        |  80 ++++++++++++++++++++++++++++++++---
 testmode.h        |   5 ++-
 tools/fields.c    |  28 +++++++------
 7 files changed, 143 insertions(+), 110 deletions(-)

diff --git a/mac80211.c b/mac80211.c
index 988f40a00..331903eba 100644
--- a/mac80211.c
+++ b/mac80211.c
@@ -842,9 +842,9 @@ void mt76_rx(struct mt76_dev *dev, enum mt76_rxq_id q, struct sk_buff *skb)
 #ifdef CONFIG_NL80211_TESTMODE
 	if (!(phy->test.flag & MT_TM_FW_RX_COUNT) &&
 	    phy->test.state == MT76_TM_STATE_RX_FRAMES) {
-		phy->test.rx_stats.packets[q]++;
+		phy->test.rx_stats[q].packets++;
 		if (status->flag & RX_FLAG_FAILED_FCS_CRC)
-			phy->test.rx_stats.fcs_error[q]++;
+			phy->test.rx_stats[q].fcs_error++;
 	}
 #endif
 
diff --git a/mt76.h b/mt76.h
index d063b1c54..20f05096e 100644
--- a/mt76.h
+++ b/mt76.h
@@ -863,12 +863,23 @@ struct mt76_testmode_data {
 	u16 tx_queued_limit;
 	u32 tx_done;
 	struct {
-		u64 packets[__MT_RXQ_MAX];
-		u64 fcs_error[__MT_RXQ_MAX];
+		u64 packets;
+		u64 rx_success;
+		u64 fcs_error;
 		u64 len_mismatch;
-	} rx_stats;
+	} rx_stats[__MT_RXQ_MAX];
 	u8 flag;
 
+	struct {
+		s32 freq_offset;
+		u8 path;
+		u8 *rcpi;
+		s8 *rssi;
+		s8 *ib_rssi;
+		s8 *wb_rssi;
+		u8 snr;
+	} last_rx;
+
 	struct {
 		u8 type;
 		u8 enable;
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index fe7d14983..76215f685 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -749,20 +749,6 @@ struct mt7996_phy {
 
 	u8 muru_onoff;
 
-#ifdef CONFIG_NL80211_TESTMODE
-	struct {
-		u32 *reg_backup;
-
-		s32 last_freq_offset;
-		u8 last_rcpi[5];
-		s8 last_rssi[5];
-		s8 last_ib_rssi[5];
-		s8 last_wb_rssi[5];
-		u8 last_snr;
-
-		u8 spe_idx;
-	} test;
-#endif
 #ifdef CONFIG_MTK_VENDOR
 	u8 rts_bw_sig;
 	spinlock_t amnt_lock;
diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index f8afbc0eb..f63e36bce 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -2108,8 +2108,9 @@ mt7996_tm_get_rx_stats(struct mt7996_phy *phy)
 	struct sk_buff *skb;
 	enum mt76_rxq_id qid;
 	int i, ret = 0;
-	u32 mac_rx_mdrdy_cnt;
-	u16 mac_rx_len_mismatch, fcs_err_count;
+	u16 fcs_err_count, fcs_ok_count;
+	u16 len_mismatch;
+	u32 mdrdy_count;
 
 	if (td->state != MT76_TM_STATE_RX_FRAMES)
 		return 0;
@@ -2123,29 +2124,30 @@ mt7996_tm_get_rx_stats(struct mt7996_phy *phy)
 	rx_stats = (struct mt7996_tm_rx_event *)skb->data;
 	rx_stats_all = &rx_stats->rx_stat_all;
 
-	phy->test.last_freq_offset = le32_to_cpu(rx_stats_all->user_info[0].freq_offset);
-	phy->test.last_snr = le32_to_cpu(rx_stats_all->user_info[0].snr);
-	for (i = 0; i < ARRAY_SIZE(phy->test.last_rcpi); i++) {
-		phy->test.last_rcpi[i] = le16_to_cpu(rx_stats_all->rxv_info[i].rcpi);
-		phy->test.last_rssi[i] = le16_to_cpu(rx_stats_all->rxv_info[i].rssi);
-		phy->test.last_ib_rssi[i] = rx_stats_all->fagc[i].ib_rssi;
-		phy->test.last_wb_rssi[i] = rx_stats_all->fagc[i].wb_rssi;
+	td->last_rx.freq_offset = le32_to_cpu(rx_stats_all->user_info[0].freq_offset);
+	td->last_rx.snr = le32_to_cpu(rx_stats_all->user_info[0].snr);
+	for (i = 0; i < td->last_rx.path; i++) {
+		td->last_rx.rcpi[i] = le16_to_cpu(rx_stats_all->rxv_info[i].rcpi);
+		td->last_rx.rssi[i] = le16_to_cpu(rx_stats_all->rxv_info[i].rssi);
+		td->last_rx.ib_rssi[i] = rx_stats_all->fagc[i].ib_rssi;
+		td->last_rx.wb_rssi[i] = rx_stats_all->fagc[i].wb_rssi;
 	}
 
-	if (phy->mt76->band_idx == 2)
+	if (phy->mt76->band_idx == MT_BAND2)
 		qid = MT_RXQ_BAND2;
-	else if (phy->mt76->band_idx == 1)
+	else if (phy->mt76->band_idx == MT_BAND1)
 		qid = MT_RXQ_BAND1;
 	else
 		qid = MT_RXQ_MAIN;
 
+	mdrdy_count = le32_to_cpu(rx_stats_all->band_info.mac_rx_mdrdy_cnt);
+	fcs_ok_count = le16_to_cpu(rx_stats_all->band_info.mac_rx_fcs_ok_cnt);
 	fcs_err_count = le16_to_cpu(rx_stats_all->band_info.mac_rx_fcs_err_cnt);
-	mac_rx_len_mismatch = le16_to_cpu(rx_stats_all->band_info.mac_rx_len_mismatch);
-	mac_rx_mdrdy_cnt = le32_to_cpu(rx_stats_all->band_info.mac_rx_mdrdy_cnt);
-	td->rx_stats.packets[qid] += mac_rx_mdrdy_cnt;
-	td->rx_stats.packets[qid] += fcs_err_count;
-	td->rx_stats.fcs_error[qid] += fcs_err_count;
-	td->rx_stats.len_mismatch += mac_rx_len_mismatch;
+	len_mismatch = le16_to_cpu(rx_stats_all->band_info.mac_rx_len_mismatch);
+	td->rx_stats[qid].packets += mdrdy_count;
+	td->rx_stats[qid].rx_success += fcs_ok_count;
+	td->rx_stats[qid].fcs_error += fcs_err_count;
+	td->rx_stats[qid].len_mismatch += len_mismatch;
 
 	dev_kfree_skb(skb);
 
@@ -2184,66 +2186,25 @@ mt7996_tm_get_tx_stats(struct mt7996_phy *phy)
 static int
 mt7996_tm_dump_stats(struct mt76_phy *mphy, struct sk_buff *msg)
 {
+	struct mt76_testmode_data *td = &mphy->test;
 	struct mt7996_phy *phy = mphy->priv;
-	void *rx, *rssi;
-	int i;
+	struct mt7996_dev *dev = phy->dev;
+	int band_idx = mphy->band_idx;
+
+	if (!td->last_rx.path) {
+		td->last_rx.path = hweight32(mphy->chainmask >> dev->chainshift[band_idx]);
+		if (phy->has_aux_rx)
+			td->last_rx.path++;
+		td->last_rx.rcpi = devm_kzalloc(dev->mt76.dev, td->last_rx.path, GFP_KERNEL);
+		td->last_rx.rssi = devm_kzalloc(dev->mt76.dev, td->last_rx.path, GFP_KERNEL);
+		td->last_rx.ib_rssi = devm_kzalloc(dev->mt76.dev, td->last_rx.path, GFP_KERNEL);
+		td->last_rx.wb_rssi = devm_kzalloc(dev->mt76.dev, td->last_rx.path, GFP_KERNEL);
+	}
 
-	mt7996_tm_set(phy->dev, SET_ID(BAND_IDX), mphy->band_idx);
+	mt7996_tm_set(dev, SET_ID(BAND_IDX), band_idx);
 	mt7996_tm_get_rx_stats(phy);
 	mt7996_tm_get_tx_stats(phy);
 
-	rx = nla_nest_start(msg, MT76_TM_STATS_ATTR_LAST_RX);
-	if (!rx)
-		return -ENOMEM;
-
-	if (nla_put_s32(msg, MT76_TM_RX_ATTR_FREQ_OFFSET, phy->test.last_freq_offset))
-		return -ENOMEM;
-
-	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_RCPI);
-	if (!rssi)
-		return -ENOMEM;
-
-	for (i = 0; i < ARRAY_SIZE(phy->test.last_rcpi); i++)
-		if (nla_put_u8(msg, i, phy->test.last_rcpi[i]))
-			return -ENOMEM;
-
-	nla_nest_end(msg, rssi);
-
-	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_RSSI);
-	if (!rssi)
-		return -ENOMEM;
-
-	for (i = 0; i < ARRAY_SIZE(phy->test.last_rssi); i++)
-		if (nla_put_s8(msg, i, phy->test.last_rssi[i]))
-			return -ENOMEM;
-
-	nla_nest_end(msg, rssi);
-
-	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_IB_RSSI);
-	if (!rssi)
-		return -ENOMEM;
-
-	for (i = 0; i < ARRAY_SIZE(phy->test.last_ib_rssi); i++)
-		if (nla_put_s8(msg, i, phy->test.last_ib_rssi[i]))
-			return -ENOMEM;
-
-	nla_nest_end(msg, rssi);
-
-	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_WB_RSSI);
-	if (!rssi)
-		return -ENOMEM;
-
-	for (i = 0; i < ARRAY_SIZE(phy->test.last_wb_rssi); i++)
-		if (nla_put_s8(msg, i, phy->test.last_wb_rssi[i]))
-			return -ENOMEM;
-
-	nla_nest_end(msg, rssi);
-
-	if (nla_put_u8(msg, MT76_TM_RX_ATTR_SNR, phy->test.last_snr))
-		return -ENOMEM;
-
-	nla_nest_end(msg, rx);
-
 	return 0;
 }
 
diff --git a/testmode.c b/testmode.c
index 15e738602..fc895d634 100644
--- a/testmode.c
+++ b/testmode.c
@@ -1007,13 +1007,77 @@ out:
 }
 EXPORT_SYMBOL(mt76_testmode_cmd);
 
+static int
+mt76_testmode_dump_last_rx_stats(struct mt76_phy *phy, struct sk_buff *msg)
+{
+	struct mt76_testmode_data *td = &phy->test;
+	void *rx, *rssi;
+	int i;
+
+	rx = nla_nest_start(msg, MT76_TM_STATS_ATTR_LAST_RX);
+	if (!rx)
+		return -ENOMEM;
+
+	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_RSSI);
+	if (!rssi)
+		return -ENOMEM;
+
+	for (i = 0; i < td->last_rx.path; i++)
+		if (nla_put_s8(msg, i, td->last_rx.rssi[i]))
+			return -ENOMEM;
+
+	nla_nest_end(msg, rssi);
+
+	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_RCPI);
+	if (!rssi)
+		return -ENOMEM;
+
+	for (i = 0; i < td->last_rx.path; i++)
+		if (nla_put_u8(msg, i, td->last_rx.rcpi[i]))
+			return -ENOMEM;
+
+	nla_nest_end(msg, rssi);
+
+	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_IB_RSSI);
+	if (!rssi)
+		return -ENOMEM;
+
+	for (i = 0; i < td->last_rx.path; i++)
+		if (nla_put_s8(msg, i, td->last_rx.ib_rssi[i]))
+			return -ENOMEM;
+
+	nla_nest_end(msg, rssi);
+
+	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_WB_RSSI);
+	if (!rssi)
+		return -ENOMEM;
+
+	for (i = 0; i < td->last_rx.path; i++)
+		if (nla_put_s8(msg, i, td->last_rx.wb_rssi[i]))
+			return -ENOMEM;
+
+	nla_nest_end(msg, rssi);
+
+	if (nla_put_s32(msg, MT76_TM_RX_ATTR_FREQ_OFFSET, td->last_rx.freq_offset))
+		return -ENOMEM;
+
+	if (nla_put_u8(msg, MT76_TM_RX_ATTR_SNR, td->last_rx.snr))
+		return -ENOMEM;
+
+	nla_nest_end(msg, rx);
+
+	return 0;
+}
+
 static int
 mt76_testmode_dump_stats(struct mt76_phy *phy, struct sk_buff *msg)
 {
 	struct mt76_testmode_data *td = &phy->test;
 	struct mt76_dev *dev = phy->dev;
 	u64 rx_packets = 0;
+	u64 rx_success = 0;
 	u64 rx_fcs_error = 0;
+	u64 rx_len_mismatch = 0;
 	int i;
 
 	if (dev->test_ops->dump_stats) {
@@ -1024,9 +1088,11 @@ mt76_testmode_dump_stats(struct mt76_phy *phy, struct sk_buff *msg)
 			return ret;
 	}
 
-	for (i = 0; i < ARRAY_SIZE(td->rx_stats.packets); i++) {
-		rx_packets += td->rx_stats.packets[i];
-		rx_fcs_error += td->rx_stats.fcs_error[i];
+	for (i = 0; i < ARRAY_SIZE(td->rx_stats); i++) {
+		rx_packets += td->rx_stats[i].packets;
+		rx_success += td->rx_stats[i].rx_success;
+		rx_fcs_error += td->rx_stats[i].fcs_error;
+		rx_len_mismatch += td->rx_stats[i].len_mismatch;
 	}
 
 	if (nla_put_u32(msg, MT76_TM_STATS_ATTR_TX_PENDING, td->tx_pending) ||
@@ -1034,14 +1100,15 @@ mt76_testmode_dump_stats(struct mt76_phy *phy, struct sk_buff *msg)
 	    nla_put_u32(msg, MT76_TM_STATS_ATTR_TX_DONE, td->tx_done) ||
 	    nla_put_u64_64bit(msg, MT76_TM_STATS_ATTR_RX_PACKETS, rx_packets,
 			      MT76_TM_STATS_ATTR_PAD) ||
+	    nla_put_u64_64bit(msg, MT76_TM_STATS_ATTR_RX_SUCCESS, rx_success,
+			      MT76_TM_STATS_ATTR_PAD) ||
 	    nla_put_u64_64bit(msg, MT76_TM_STATS_ATTR_RX_FCS_ERROR, rx_fcs_error,
 			      MT76_TM_STATS_ATTR_PAD) ||
-	    nla_put_u64_64bit(msg, MT76_TM_STATS_ATTR_RX_LEN_MISMATCH,
-			      td->rx_stats.len_mismatch,
+	    nla_put_u64_64bit(msg, MT76_TM_STATS_ATTR_RX_LEN_MISMATCH, rx_len_mismatch,
 			      MT76_TM_STATS_ATTR_PAD))
 		return -EMSGSIZE;
 
-	return 0;
+	return mt76_testmode_dump_last_rx_stats(phy, msg);
 }
 
 int mt76_testmode_dump(struct ieee80211_hw *hw, struct sk_buff *msg,
@@ -1095,6 +1162,7 @@ int mt76_testmode_dump(struct ieee80211_hw *hw, struct sk_buff *msg,
 		goto out;
 	}
 
+	/* the dump order follows the order of nla_put for each attribute */
 	if (tb[MT76_TM_ATTR_STATS]) {
 		err = -EINVAL;
 
diff --git a/testmode.h b/testmode.h
index 9b763cc25..fc5496af0 100644
--- a/testmode.h
+++ b/testmode.h
@@ -182,12 +182,14 @@ enum mt76_testmode_attr {
  * @MT76_TM_STATS_ATTR_TX_QUEUED: queued tx frames (u32)
  * @MT76_TM_STATS_ATTR_TX_QUEUED: completed tx frames (u32)
  *
- * @MT76_TM_STATS_ATTR_RX_PACKETS: number of rx packets (u64)
+ * @MT76_TM_STATS_ATTR_RX_PACKETS: number of rx mdrdy packets
+ *	with successfully parsed headers (u64)
  * @MT76_TM_STATS_ATTR_RX_FCS_ERROR: number of rx packets with FCS error (u64)
  * @MT76_TM_STATS_ATTR_LAST_RX: information about the last received packet
  *	see &enum mt76_testmode_rx_attr
  * @MT76_TM_STATS_ATTR_RX_LEN_MISMATCH: number of rx packets with length
  *	mismatch error (u64)
+ * @MT76_TM_STATS_ATTR_RX_SUCCESS: number of successfully rx packets (u64)
  */
 enum mt76_testmode_stats_attr {
 	MT76_TM_STATS_ATTR_UNSPEC,
@@ -201,6 +203,7 @@ enum mt76_testmode_stats_attr {
 	MT76_TM_STATS_ATTR_RX_FCS_ERROR,
 	MT76_TM_STATS_ATTR_LAST_RX,
 	MT76_TM_STATS_ATTR_RX_LEN_MISMATCH,
+	MT76_TM_STATS_ATTR_RX_SUCCESS,
 
 	/* keep last */
 	NUM_MT76_TM_STATS_ATTRS,
diff --git a/tools/fields.c b/tools/fields.c
index 8f2f364b9..e44be0e03 100644
--- a/tools/fields.c
+++ b/tools/fields.c
@@ -240,17 +240,14 @@ static void print_array(const struct tm_field *field, struct nlattr *attr)
 
 static void print_nested(const struct tm_field *field, struct nlattr *attr)
 {
-	struct nlattr **tb = alloca(field->len * sizeof(struct nlattr *));
 	const struct tm_field *fields = field->fields;
-	int i;
+	struct nlattr *cur;
+	int i, rem;
 
-	nla_parse_nested(tb, field->len - 1, attr, field->policy);
-	for (i = 0; i < field->len; i++) {
+	nla_for_each_nested(cur, attr, rem) {
 		int prefix_len = 0;
 
-		if (!tb[i])
-			continue;
-
+		i = nla_type(cur);
 		if (!fields[i].print)
 			continue;
 
@@ -263,7 +260,7 @@ static void print_nested(const struct tm_field *field, struct nlattr *attr)
 				sizeof(prefix) - prefix_len - 1);
 		}
 
-		fields[i].print(&fields[i], tb[i]);
+		fields[i].print(&fields[i], cur);
 		if (fields[i].prefix)
 			prefix[prefix_len] = 0;
 
@@ -271,20 +268,25 @@ static void print_nested(const struct tm_field *field, struct nlattr *attr)
 			printf("\n");
 	}
 
-	if (field->print_extra)
+	if (field->print_extra) {
+		struct nlattr **tb = alloca(field->len * sizeof(struct nlattr *));
+
+		nla_parse_nested(tb, field->len - 1, attr, field->policy);
 		field->print_extra(field, tb);
+	}
 }
 
 static void print_extra_stats(const struct tm_field *field, struct nlattr **tb)
 {
-	float total, failed;
+	float total, success, failed;
 
 	if (!tb[MT76_TM_STATS_ATTR_RX_PACKETS] ||
-	    !tb[MT76_TM_STATS_ATTR_RX_FCS_ERROR])
+	    !tb[MT76_TM_STATS_ATTR_RX_SUCCESS])
 		return;
 
 	total = nla_get_u64(tb[MT76_TM_STATS_ATTR_RX_PACKETS]);
-	failed = nla_get_u64(tb[MT76_TM_STATS_ATTR_RX_FCS_ERROR]);
+	success = nla_get_u64(tb[MT76_TM_STATS_ATTR_RX_SUCCESS]);
+	failed = total - success;
 
 	printf("%srx_per=%.02f%%\n", prefix, 100 * failed / total);
 }
@@ -428,6 +430,7 @@ static const struct tm_field stats_fields[NUM_MT76_TM_STATS_ATTRS] = {
 	FIELD_RO(u64, RX_PACKETS, "rx_packets"),
 	FIELD_RO(u64, RX_FCS_ERROR, "rx_fcs_error"),
 	FIELD_RO(u64, RX_LEN_MISMATCH, "rx_len_mismatch"),
+	FIELD_RO(u64, RX_SUCCESS, "rx_success"),
 	FIELD_NESTED_RO(LAST_RX, rx, "last_"),
 };
 static struct nla_policy stats_policy[NUM_MT76_TM_STATS_ATTRS] = {
@@ -437,6 +440,7 @@ static struct nla_policy stats_policy[NUM_MT76_TM_STATS_ATTRS] = {
 	[MT76_TM_STATS_ATTR_RX_PACKETS] = { .type = NLA_U64 },
 	[MT76_TM_STATS_ATTR_RX_FCS_ERROR] = { .type = NLA_U64 },
 	[MT76_TM_STATS_ATTR_RX_LEN_MISMATCH] = { .type = NLA_U64 },
+	[MT76_TM_STATS_ATTR_RX_SUCCESS] = { .type = NLA_U64 },
 };
 #undef FIELD_NAME
 
-- 
2.45.2

