From b577ba1ce4bcf24503d2fd47340f60640bff52c0 Mon Sep 17 00:00:00 2001
From: Shayne Chen <shayne.chen@mediatek.com>
Date: Fri, 29 Dec 2023 18:37:41 +0800
Subject: [PATCH 090/146] mtk: mt76: mt7996: implement ieee80211_ops for link
 debugfs

Add .link_sta_add_debugfs and .link_add_debugfs for per-link STA and BSS
info.

Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>
Signed-off-by: Benjamin Lin <benjamin-jw.lin@mediatek.com>
---
 mt7996/debugfs.c | 201 +++++++++++++++++++++++++++++++++++++++++++++++
 mt7996/mac.c     |   4 +-
 mt7996/main.c    |   2 +
 mt7996/mcu.c     |   6 +-
 mt7996/mt7996.h  |   5 ++
 5 files changed, 214 insertions(+), 4 deletions(-)

diff --git a/mt7996/debugfs.c b/mt7996/debugfs.c
index 9727f43b..7e5f2fdb 100644
--- a/mt7996/debugfs.c
+++ b/mt7996/debugfs.c
@@ -1315,4 +1315,205 @@ void mt7996_sta_add_debugfs(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	debugfs_create_file("hw-queues", 0400, dir, sta, &mt7996_queues_fops);
 }
 
+static void
+mt7996_parse_rate(struct rate_info *rate, char *buf, size_t size)
+{
+	u32 bitrate = cfg80211_calculate_bitrate(rate);
+	bool legacy = false;
+	char *pos = buf;
+	enum {
+		GI_0_4,
+		GI_0_8,
+		GI_1_6,
+		GI_3_2
+	} gi = GI_0_8;
+
+	pos += snprintf(pos, size - (pos - buf), "%u.%u Mbit/s",
+			bitrate / 10, bitrate % 10);
+
+	if (rate->flags & RATE_INFO_FLAGS_MCS) {
+		pos += snprintf(pos, size - (pos - buf), " HT");
+
+		if (rate->flags & RATE_INFO_FLAGS_SHORT_GI)
+			gi = GI_0_4;
+	} else if (rate->flags & RATE_INFO_FLAGS_VHT_MCS) {
+		pos += snprintf(pos, size - (pos - buf), " VHT");
+
+		if (rate->flags & RATE_INFO_FLAGS_SHORT_GI)
+			gi = GI_0_4;
+	} else if (rate->flags & RATE_INFO_FLAGS_HE_MCS) {
+		pos += snprintf(pos, size - (pos - buf), " HE");
+
+		if (rate->he_gi == NL80211_RATE_INFO_HE_GI_1_6)
+			gi = GI_1_6;
+		else if (rate->he_gi == NL80211_RATE_INFO_HE_GI_3_2)
+			gi = GI_3_2;
+	} else if (rate->flags & RATE_INFO_FLAGS_EHT_MCS) {
+		pos += snprintf(pos, size - (pos - buf), " EHT");
+
+		if (rate->eht_gi == NL80211_RATE_INFO_EHT_GI_1_6)
+			gi = GI_1_6;
+		else if (rate->eht_gi == NL80211_RATE_INFO_EHT_GI_3_2)
+			gi = GI_3_2;
+	} else {
+		pos += snprintf(pos, size - (pos - buf), " Legacy");
+		legacy = true;
+	}
+
+	switch (rate->bw) {
+	case RATE_INFO_BW_20:
+		pos += snprintf(pos, size - (pos - buf), " 20MHz");
+		break;
+	case RATE_INFO_BW_40:
+		pos += snprintf(pos, size - (pos - buf), " 40MHz");
+		break;
+	case RATE_INFO_BW_80:
+		pos += snprintf(pos, size - (pos - buf), " 80MHz");
+		break;
+	case RATE_INFO_BW_160:
+		pos += snprintf(pos, size - (pos - buf), " 160MHz");
+		break;
+	case RATE_INFO_BW_320:
+		pos += snprintf(pos, size - (pos - buf), " 320MHz");
+		break;
+	case RATE_INFO_BW_HE_RU:
+		if (rate->he_ru_alloc == NL80211_RATE_INFO_HE_RU_ALLOC_106) {
+			pos += snprintf(pos, size - (pos - buf), " 106-tone RU");
+			break;
+		}
+		fallthrough;
+	default:
+		pos += snprintf(pos, size - (pos - buf), " (Unknown BW)");
+	}
+
+	if (!legacy) {
+		pos += snprintf(pos, size - (pos - buf), " MCS %hhu", rate->mcs);
+		pos += snprintf(pos, size - (pos - buf), " NSS %hhu", rate->nss);
+	}
+
+	switch (gi) {
+	case GI_0_4:
+		pos += snprintf(pos, size - (pos - buf), " GI 0.4us");
+		break;
+	case GI_0_8:
+		pos += snprintf(pos, size - (pos - buf), " GI 0.8us");
+		break;
+	case GI_1_6:
+		pos += snprintf(pos, size - (pos - buf), " GI 1.6us");
+		break;
+	default:
+		pos += snprintf(pos, size - (pos - buf), " GI 3.2us");
+		break;
+	}
+}
+
+static int
+mt7996_link_sta_info_show(struct seq_file *file, void *data)
+{
+	struct ieee80211_link_sta *link_sta = file->private;
+	struct mt7996_sta *msta = (struct mt7996_sta *)link_sta->sta->drv_priv;
+	struct mt7996_link_sta *mlink;
+	struct mt76_sta_stats *stats;
+	struct mt76_wcid *wcid;
+	char buf[100];
+
+	mutex_lock(&msta->vif->dev->mt76.mutex);
+
+	mlink = mlink_dereference_protected(msta, link_sta->link_id);
+	if (!mlink) {
+		mutex_unlock(&msta->vif->dev->mt76.mutex);
+		return -EINVAL;
+	}
+	wcid = &mlink->wcid;
+	stats = &wcid->stats;
+
+	seq_printf(file, "WCID: %hu\n", wcid->idx);
+	seq_printf(file, "Link ID: %hhu\n", link_sta->link_id);
+	seq_printf(file, "Link Address: %pM\n", link_sta->addr);
+	seq_printf(file, "Status:\n");
+	seq_printf(file, "\tRSSI: %d [%hhd, %hhd, %hhd, %hhd] dBm\n",
+		   mlink->signal, mlink->chain_signal[0], mlink->chain_signal[1],
+		   mlink->chain_signal[2], mlink->chain_signal[3]);
+	seq_printf(file, "\tACK RSSI: %d [%hhd, %hhd, %hhd, %hhd] dBm\n",
+		   mlink->ack_signal, mlink->chain_ack_signal[0],
+		   mlink->chain_ack_signal[1], mlink->chain_ack_signal[2],
+		   mlink->chain_ack_signal[3]);
+	seq_printf(file, "\tACK SNR: [%hhd, %hhd, %hhd, %hhd] dBm\n",
+		   mlink->chain_ack_snr[0], mlink->chain_ack_snr[1],
+		   mlink->chain_ack_snr[2], mlink->chain_ack_snr[3]);
+	seq_printf(file, "Rate:\n");
+
+	mt7996_parse_rate(&wcid->rate, buf, sizeof(buf));
+	seq_printf(file, "\tTX: %s\n", buf);
+	mt7996_parse_rate(&wcid->rx_rate, buf, sizeof(buf));
+	seq_printf(file, "\tRX: %s\n", buf);
+
+	seq_printf(file, "Statistics:\n");
+	seq_printf(file, "\tTX:\n");
+	seq_printf(file, "\t\tBytes: %llu\n", stats->tx_bytes);
+	seq_printf(file, "\t\tMSDU Count: %u\n", stats->tx_packets);
+	seq_printf(file, "\t\tMPDU Count: %u\n", stats->tx_mpdus);
+	seq_printf(file, "\t\tMPDU Fails: %u (PER: %u.%u%%)\n", stats->tx_failed,
+		   stats->tx_mpdus ? stats->tx_failed * 1000 / stats->tx_mpdus / 10 : 0,
+		   stats->tx_mpdus ? stats->tx_failed * 1000 / stats->tx_mpdus % 10 : 0);
+	seq_printf(file, "\t\tMPDU Retries: %u\n", stats->tx_retries);
+	seq_printf(file, "\t\tAirtime: %llu (unit: 1.024 us)\n", stats->tx_airtime);
+	seq_printf(file, "\tRX:\n");
+	seq_printf(file, "\t\tBytes: %llu\n", stats->rx_bytes);
+	seq_printf(file, "\t\tMPDU Count: %u\n", stats->rx_mpdus);
+	seq_printf(file, "\t\tMPDU FCS Errors: %u (PER: %u.%u%%)\n", stats->rx_fcs_err,
+		   stats->rx_mpdus ? stats->rx_fcs_err * 1000 / stats->rx_mpdus / 10 : 0,
+		   stats->rx_mpdus ? stats->rx_fcs_err * 1000 / stats->rx_mpdus % 10 : 0);
+	seq_printf(file, "\t\tAirtime: %llu (unit: 1.024 us)\n", stats->rx_airtime);
+
+	mutex_unlock(&msta->vif->dev->mt76.mutex);
+
+	return 0;
+}
+DEFINE_SHOW_ATTRIBUTE(mt7996_link_sta_info);
+
+void mt7996_link_sta_add_debugfs(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+				 struct ieee80211_link_sta *link_sta,
+				 struct dentry *dir)
+{
+	debugfs_create_file("link_sta_info", 0400, dir, link_sta,
+			    &mt7996_link_sta_info_fops);
+}
+
+static int
+mt7996_link_info_show(struct seq_file *file, void *data)
+{
+	struct ieee80211_bss_conf *conf = file->private;
+	struct mt7996_vif *mvif = (struct mt7996_vif *)conf->vif->drv_priv;
+	struct mt7996_sta *msta = &mvif->sta;
+	struct mt7996_bss_conf *mconf;
+	struct mt7996_link_sta *mlink;
+	struct mt7996_dev *dev = mvif->dev;
+	struct rate_info *r;
+
+	mutex_lock(&dev->mt76.mutex);
+
+	mconf = mconf_dereference_protected(mvif, conf->link_id);
+	mlink = mlink_dereference_protected(msta, conf->link_id);
+	if (!mconf || !mlink) {
+		mutex_unlock(&dev->mt76.mutex);
+		return -EINVAL;
+	}
+
+	r = &mlink->wcid.rate;
+	seq_printf(file, "band mapping=%u\n", mconf->phy->mt76->band_idx);
+	seq_printf(file, "tx rate: flags=0x%x,legacy=%u,mcs=%u,nss=%u,bw=%u,he_gi=%u,he_dcm=%u,he_ru_alloc=%u,eht_gi=%u,eht_ru_alloc=%u\n",
+		   r->flags, r->legacy, r->mcs, r->nss, r->bw, r->he_gi, r->he_dcm, r->he_ru_alloc, r->eht_gi, r->eht_ru_alloc);
+
+	mutex_unlock(&dev->mt76.mutex);
+
+	return 0;
+}
+DEFINE_SHOW_ATTRIBUTE(mt7996_link_info);
+
+void mt7996_link_add_debugfs(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+			     struct ieee80211_bss_conf *link_conf, struct dentry *dir)
+{
+	debugfs_create_file("link_info", 0600, dir, link_conf, &mt7996_link_info_fops);
+}
 #endif
diff --git a/mt7996/mac.c b/mt7996/mac.c
index 003ffb0e..afdb4ee9 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -2417,10 +2417,10 @@ void mt7996_mac_work(struct work_struct *work)
 				mt7996_mcu_get_all_sta_info(mdev, UNI_ALL_STA_TXRX_RATE);
 				mt7996_mcu_get_all_sta_info(mdev, UNI_ALL_STA_TXRX_AIRTIME);
 				mt7996_mcu_get_rssi(mdev);
-				if (mtk_wed_device_active(&mdev->mmio.wed)) {
+				// if (mtk_wed_device_active(&mdev->mmio.wed)) {
 					mt7996_mcu_get_all_sta_info(mdev, UNI_ALL_STA_TXRX_ADM_STAT);
 					mt7996_mcu_get_all_sta_info(mdev, UNI_ALL_STA_TXRX_MSDU_COUNT);
-				}
+				// }
 
 				if (mt7996_mcu_wa_cmd(phy->dev, MCU_WA_PARAM_CMD(QUERY), MCU_WA_PARAM_BSS_ACQ_PKT_CNT,
 				                      BSS_ACQ_PKT_CNT_BSS_BITMAP_ALL | BSS_ACQ_PKT_CNT_READ_CLR, 0))
diff --git a/mt7996/main.c b/mt7996/main.c
index 58a9515a..029b618e 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -2758,6 +2758,8 @@ const struct ieee80211_ops mt7996_ops = {
 	CFG80211_TESTMODE_DUMP(mt76_testmode_dump)
 #ifdef CONFIG_MAC80211_DEBUGFS
 	.sta_add_debugfs = mt7996_sta_add_debugfs,
+	.link_sta_add_debugfs = mt7996_link_sta_add_debugfs,
+	// .link_add_debugfs = mt7996_link_add_debugfs,
 #endif
 	.set_radar_background = mt7996_set_radar_background,
 #ifdef CONFIG_NET_MEDIATEK_SOC_WED
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 62d49cfe..ffd4ce61 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -630,8 +630,10 @@ mt7996_mcu_rx_all_sta_info_event(struct mt7996_dev *dev, struct sk_buff *skb)
 			wcid->stats.tx_packets += tx_packets;
 			wcid->stats.rx_packets += rx_packets;
 
-			__mt7996_stat_to_netdev(mphy, wcid, 0, 0,
-						tx_packets, rx_packets);
+			if (mtk_wed_device_active(&dev->mt76.mmio.wed)) {
+				__mt7996_stat_to_netdev(mphy, wcid, 0, 0,
+							tx_packets, rx_packets);
+			}
 			break;
 		case UNI_ALL_STA_TXRX_AIRTIME:
 			wlan_idx = le16_to_cpu(res->airtime[i].wlan_idx);
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 21d8435a..0103c4fd 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -1162,6 +1162,11 @@ int mt7996_mcu_set_pp_en(struct mt7996_phy *phy, u8 mode, u16 bitmap);
 #ifdef CONFIG_MAC80211_DEBUGFS
 void mt7996_sta_add_debugfs(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			    struct ieee80211_sta *sta, struct dentry *dir);
+void mt7996_link_sta_add_debugfs(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+				 struct ieee80211_link_sta *link_sta,
+				 struct dentry *dir);
+void mt7996_link_add_debugfs(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+			     struct ieee80211_bss_conf *link_conf, struct dentry *dir);
 #endif
 int mt7996_mmio_wed_init(struct mt7996_dev *dev, void *pdev_ptr,
 			 bool hif2, int *irq);
-- 
2.45.2

