From 1575c8a486b6b55b5e6addeff23d8a054e932796 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Mon, 17 Feb 2025 15:55:52 +0800
Subject: [PATCH 2/2] mtk: mt76: mt7996: add 5T5R support for testmode RX

add 5T5R support for testmode RX (especially for kite BE7200 ifem)

mtk: mt76: mt7996: add testmode rx gain cal support

Add testmode rx gain cal support
Usage:
mt76-test phy0 set state=rx_gain_cal
mt76-test phy0 set state=rx_gain_dump
mt76-test phy0 set state=rx_gain_clean

mtk: mt76: mt7996: add testmode fast cal support

add testmode fast cal support
Usage:
mt76-test phy0 set fast_cal=none/tx_verify (perform full cal)
mt76-test phy0 set fast_cal=rx_verify (skip tx cal items)
mt76-test phy0 set fast_cal=power_cal (skip dpd cal)

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>fast cal
---
 mt76.h            |   5 +
 mt7996/eeprom.h   |  21 +++--
 mt7996/mt7996.h   |   8 +-
 mt7996/testmode.c | 231 +++++++++++++++++++++++++++++++++++++++++-----
 mt7996/testmode.h |   6 +-
 testmode.c        |   9 +-
 testmode.h        |  30 ++++++
 tools/fields.c    |  12 +++
 8 files changed, 285 insertions(+), 37 deletions(-)

diff --git a/mt76.h b/mt76.h
index cec20766..b169ad8f 100644
--- a/mt76.h
+++ b/mt76.h
@@ -883,6 +883,11 @@ struct mt76_testmode_data {
 	u8 ipi_threshold;
 	u32 ipi_period;
 	u8 ipi_reset;
+
+	u16 rx_gain_bitmap;
+	bool rx_gain_done;
+
+	u8 fast_cal;
 };
 
 enum {
diff --git a/mt7996/eeprom.h b/mt7996/eeprom.h
index e286a58b..63be9ae4 100644
--- a/mt7996/eeprom.h
+++ b/mt7996/eeprom.h
@@ -14,6 +14,7 @@ enum mt7996_eeprom_field {
 	MT_EE_MAC_ADDR =	0x004,
 	MT_EE_MAC_ADDR2 =	0x00a,
 	MT_EE_WIFI_CONF =	0x190,
+	MT_EE_DO_RX_GAIN_CAL =	0x1a1,
 	MT_EE_DO_PRE_CAL =	0x1a5,
 	MT_EE_TESTMODE_EN =	0x1af,
 	MT_EE_MAC_ADDR3 =	0x2c0,
@@ -23,6 +24,7 @@ enum mt7996_eeprom_field {
 	MT_EE_TX0_POWER_2G =	0x1300,
 	MT_EE_TX0_POWER_5G =	0x1301,
 	MT_EE_TX0_POWER_6G =	0x1310,
+	MT_EE_RX_GAIN_CAL =	0x1830,
 
 	__MT_EE_MAX =	0x1dff,
 	/* 0x1e10 ~ 0x2d644 used to save group cal data */
@@ -35,6 +37,8 @@ enum mt7996_eeprom_field {
 #define MT_EE_WIFI_CONF2_BAND_SEL		GENMASK(2, 0)
 #define MT_EE_WIFI_PA_LNA_CONFIG		GENMASK(1, 0)
 
+#define MT_EE_WIFI_CAL_RX_GAIN			GENMASK(5, 3)
+
 #define MT_EE_WIFI_CAL_GROUP_2G			BIT(0)
 #define MT_EE_WIFI_CAL_GROUP_5G			BIT(1)
 #define MT_EE_WIFI_CAL_GROUP_6G			BIT(2)
@@ -136,12 +140,17 @@ extern const struct ieee80211_channel dpd_6g_ch_list_bw320[];
 #define MT_EE_CAL_DPD_SIZE			(MT_EE_CAL_DPD_SIZE_2G + MT_EE_CAL_DPD_SIZE_5G + \
 						 MT_EE_CAL_DPD_SIZE_6G)
 
-#define RF_DPD_FLAT_CAL				BIT(28)
-#define RF_PRE_CAL				BIT(29)
-#define RF_DPD_FLAT_5G_CAL			GENMASK(29, 28)
-#define RF_DPD_FLAT_5G_MEM_CAL			(BIT(30) | BIT(28))
-#define RF_DPD_FLAT_6G_CAL			GENMASK(30, 28)
-#define RF_DPD_FLAT_6G_MEM_CAL			(BIT(31) | BIT(28))
+#define MT_EE_CAL_RX_GAIN_SIZE			748
+
+enum rf_cal_item {
+	RF_RX_GAIN_CAL = BIT(24),
+	RF_DPD_FLAT_CAL = BIT(28),
+	RF_PRE_CAL = BIT(29),
+	RF_DPD_FLAT_5G_CAL = GENMASK(29, 28),
+	RF_DPD_FLAT_5G_MEM_CAL = (BIT(30) | BIT(28)),
+	RF_DPD_FLAT_6G_CAL = GENMASK(30, 28),
+	RF_DPD_FLAT_6G_MEM_CAL = (BIT(31) | BIT(28)),
+};
 
 #define MT_EE_WIFI_CONF1_TX_PATH_BAND0		GENMASK(5, 3)
 #define MT_EE_WIFI_CONF2_TX_PATH_BAND1		GENMASK(2, 0)
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 0ddd9757..fe7d1498 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -754,10 +754,10 @@ struct mt7996_phy {
 		u32 *reg_backup;
 
 		s32 last_freq_offset;
-		u8 last_rcpi[4];
-		s8 last_rssi[4];
-		s8 last_ib_rssi[4];
-		s8 last_wb_rssi[4];
+		u8 last_rcpi[5];
+		s8 last_rssi[5];
+		s8 last_ib_rssi[5];
+		s8 last_wb_rssi[5];
 		u8 last_snr;
 
 		u8 spe_idx;
diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index 48ba2e9c..44fa2471 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -103,6 +103,20 @@ static u8 mt7996_tm_rate_mapping(u8 tx_rate_mode, enum rate_mapping_type type)
 	return rate_to_phy[tx_rate_mode][type];
 }
 
+static u8 mt7996_tm_band_mapping(enum nl80211_band band)
+{
+	static const u8 ch_band[] = {
+		[NL80211_BAND_2GHZ] = 0,
+		[NL80211_BAND_5GHZ] = 1,
+		[NL80211_BAND_6GHZ] = 2,
+	};
+
+	if (band >= NUM_NL80211_BANDS)
+		return 0;
+
+	return ch_band[band];
+}
+
 static int
 mt7996_tm_check_antenna(struct mt7996_phy *phy)
 {
@@ -263,17 +277,15 @@ void
 mt7996_tm_update_channel(struct mt7996_phy *phy)
 {
 #define CHAN_FREQ_BW_80P80_TAG		(SET_ID(CHAN_FREQ) | BIT(16))
+#define FAST_CAL_NONE			BIT(20)
+#define FAST_CAL_RX			BIT(21)
+#define FAST_CAL_POWER			BIT(22)
 	struct mt7996_dev *dev = phy->dev;
 	struct mt76_testmode_data *td = &phy->mt76->test;
 	struct cfg80211_chan_def *chandef = &phy->mt76->chandef;
 	struct ieee80211_channel *chan = chandef->chan;
 	u8 dbw, width = chandef->width, pri_sel = 0;
 	int width_mhz;
-	static const u8 ch_band[] = {
-		[NL80211_BAND_2GHZ] = 0,
-		[NL80211_BAND_5GHZ] = 1,
-		[NL80211_BAND_6GHZ] = 2,
-	};
 
 	if (!chan || !chandef) {
 		dev_info(dev->mt76.dev, "chandef not found, channel update failed!\n");
@@ -315,7 +327,27 @@ mt7996_tm_update_channel(struct mt7996_phy *phy)
 		pri_sel = td->tx_pri_sel;
 	}
 	mt7996_tm_set(dev, SET_ID(PRIMARY_CH), pri_sel);
-	mt7996_tm_set(dev, SET_ID(BAND), ch_band[chan->band]);
+	mt7996_tm_set(dev, SET_ID(BAND), mt7996_tm_band_mapping(chan->band));
+
+	if (mt76_testmode_param_present(td, MT76_TM_ATTR_FAST_CAL)) {
+		switch (td->fast_cal) {
+		case MT76_TM_FAST_CAL_TYPE_RX:
+			mt7996_tm_set(dev, SET_ID(CAL_BITMAP), FAST_CAL_RX);
+			dev_info(dev->mt76.dev, "apply RX fast cal (skip TX cal)\n");
+			break;
+		case MT76_TM_FAST_CAL_TYPE_POWER:
+			mt7996_tm_set(dev, SET_ID(CAL_BITMAP), FAST_CAL_POWER);
+			dev_info(dev->mt76.dev, "apply power fast cal (skip DPD cal)\n");
+			break;
+		case MT76_TM_FAST_CAL_TYPE_NONE:
+		case MT76_TM_FAST_CAL_TYPE_TX:
+		default:
+			/* same as not setting any cal bitmap */
+			mt7996_tm_set(dev, SET_ID(CAL_BITMAP), FAST_CAL_NONE);
+			dev_info(dev->mt76.dev, "apply full cal\n");
+			break;
+		}
+	}
 
 	/* trigger switch channel calibration */
 	mt7996_tm_set(dev, SET_ID(CHAN_FREQ), chandef->center_freq1 * 1000);
@@ -863,17 +895,166 @@ mt7996_tm_dump_precal(struct mt76_phy *mphy, struct sk_buff *msg, int flag, int
 	return 0;
 }
 
+static bool
+mt7996_tm_check_rx_gain_ch(struct mt7996_phy *phy)
+{
+	const u32 rx_gain_ch_list_2g[] = {2442};
+	const u32 rx_gain_ch_list_5g[] = {
+		5180, 5260, 5340, 5500, 5580, 5660, 5745, 5825,
+	};
+	const u32 rx_gain_ch_list_6g[] = {
+		5955, 6035, 6115, 6195, 6275, 6355, 6435, 6515,
+		6595, 6675, 6755, 6835, 6915, 6995, 7075,
+	};
+	struct cfg80211_chan_def *chandef = &phy->mt76->chandef;
+	struct mt76_testmode_data *td = &phy->mt76->test;
+	const u32 *ch_list;
+	int i, size;
+
+	if (!chandef->chan || chandef->width > NL80211_CHAN_WIDTH_20)
+		return false;
+
+	switch (chandef->chan->band) {
+	case NL80211_BAND_2GHZ:
+		ch_list = rx_gain_ch_list_2g;
+		size = ARRAY_SIZE(rx_gain_ch_list_2g);
+		break;
+	case NL80211_BAND_5GHZ:
+		ch_list = rx_gain_ch_list_5g;
+		size = ARRAY_SIZE(rx_gain_ch_list_5g);
+		break;
+	case NL80211_BAND_6GHZ:
+		ch_list = rx_gain_ch_list_6g;
+		size = ARRAY_SIZE(rx_gain_ch_list_6g);
+		break;
+	default:
+		return false;
+	}
+
+	for (i = 0; i < size; i++) {
+		if (chandef->chan->center_freq == ch_list[i]) {
+			td->rx_gain_bitmap |= BIT(i);
+			if (hweight16(td->rx_gain_bitmap) == size)
+				td->rx_gain_done = true;
+			return true;
+		}
+	}
+
+	return false;
+}
+
+static void
+mt7996_tm_reset_rx_gain(struct mt7996_phy *phy, bool all)
+{
+	struct mt7996_dev *dev = phy->dev;
+	u8 band_bitmap = 0, *eeprom = dev->mt76.eeprom.data;
+	struct mt76_testmode_data *td;
+	struct mt76_phy *mphy;
+	int i;
+
+	for (i = 0; i < __MT_MAX_BAND; i++) {
+		mphy = dev->mt76.phys[i];
+		if (!mphy || (!all && mphy != phy->mt76))
+			continue;
+
+		td = &mphy->test;
+		td->rx_gain_bitmap = 0;
+		td->rx_gain_done = false;
+		band_bitmap |= BIT(mt7996_tm_band_mapping(mphy->chandef.chan->band));
+	}
+
+	eeprom[MT_EE_DO_RX_GAIN_CAL] &= ~u8_encode_bits(band_bitmap,
+							MT_EE_WIFI_CAL_RX_GAIN);
+}
+
+static int
+mt7996_tm_rx_gain_cal(struct mt7996_phy *phy, enum mt76_testmode_state state)
+{
+	struct mt7996_dev *dev = phy->dev;
+	struct mt76_phy *mphy = phy->mt76;
+	struct cfg80211_chan_def *chandef = &mphy->chandef;
+	struct mt76_testmode_data *td = &mphy->test;
+	struct mt7996_tm_req req = {
+		.rf_test = {
+			.tag = cpu_to_le16(UNI_RF_TEST_CTRL),
+			.len = cpu_to_le16(sizeof(req.rf_test)),
+			.action = RF_ACTION_IN_RF_TEST,
+			.icap_len = RF_TEST_ICAP_LEN,
+			.op.rf.func_idx = cpu_to_le32(RF_TEST_RX_GAIN_CAL),
+			.op.rf.param.cal_param.func_data = cpu_to_le32(RF_RX_GAIN_CAL),
+			.op.rf.param.cal_param.band_idx = mphy->band_idx,
+		},
+	};
+	u8 ch_band, *eeprom = dev->mt76.eeprom.data;
+	u32 i, j, size, *cal;
+	int ret = 0;
+
+	if (!dev->flash_mode) {
+		dev_err(dev->mt76.dev, "Currently not in FLASH or BIN FILE mode, return!\n");
+		return -EOPNOTSUPP;
+	}
+
+	dev->cur_prek_offset = 0;
+	size = MT_EE_CAL_RX_GAIN_SIZE;
+
+	switch (state) {
+	case MT76_TM_STATE_RX_GAIN_CAL:
+		if (!mt7996_tm_check_rx_gain_ch(phy)) {
+			dev_err(dev->mt76.dev, "Invalid calibration channel for RX gain\n");
+			ret = -EINVAL;
+			goto fail;
+		}
+
+		mt7996_tm_set_rx_frames(phy, true);
+		ret = mt76_mcu_send_msg(&dev->mt76, MCU_WM_UNI_CMD(TESTMODE_CTRL), &req,
+					sizeof(req), false);
+		if (ret) {
+			dev_err(dev->mt76.dev,
+				"RX Gain Cal: mcu send msg failed (%d)\n",
+				ret);
+			goto fail;
+		}
+
+		wait_event_timeout(dev->mt76.mcu.wait, dev->cur_prek_offset == size, 30 * HZ);
+
+		/* disable runtime rx gain cal */
+		ch_band = mt7996_tm_band_mapping(chandef->chan->band);
+		if (td->rx_gain_done)
+			eeprom[MT_EE_DO_RX_GAIN_CAL] |= u8_encode_bits(BIT(ch_band),
+								       MT_EE_WIFI_CAL_RX_GAIN);
+		break;
+	case MT76_TM_STATE_RX_GAIN_CAL_DUMP:
+		cal = (u32 *)eeprom;
+		dev_info(dev->mt76.dev, "RX Gain Cal:\n");
+		for (i = 0; i < (size / sizeof(u32)); i += 4) {
+			j = MT_EE_RX_GAIN_CAL / sizeof(u32) + i;
+			dev_info(dev->mt76.dev, "[0x%08lx] 0x%8x 0x%8x 0x%8x 0x%8x\n",
+				 j * sizeof(u32), cal[j], cal[j + 1],
+				 cal[j + 2], cal[j + 3]);
+		}
+		return 0;
+	case MT76_TM_STATE_RX_GAIN_CAL_CLEAN:
+		memset(eeprom + MT_EE_RX_GAIN_CAL, 0, size);
+		mt7996_tm_reset_rx_gain(phy, true);
+		return 0;
+	default:
+		ret = -EINVAL;
+		goto fail;
+	}
+
+	return 0;
+
+fail:
+	mt7996_tm_reset_rx_gain(phy, false);
+	return ret;
+}
+
 static void
 mt7996_tm_re_cal_event(struct mt7996_dev *dev, struct mt7996_tm_rf_test_result *result,
 		       struct mt7996_tm_rf_test_data *data)
 {
-	u32 base, dpd_size_2g, dpd_size_5g, dpd_size_6g, cal_idx, cal_type, len = 0;
-	u8 *pre_cal;
-
-	pre_cal = dev->cal;
-	dpd_size_2g = MT_EE_CAL_DPD_SIZE_2G;
-	dpd_size_5g = MT_EE_CAL_DPD_SIZE_5G;
-	dpd_size_6g = MT_EE_CAL_DPD_SIZE_6G;
+	u32 base, cal_idx, cal_type, len = 0;
+	u8 *cal = dev->cal;
 
 	cal_idx = le32_to_cpu(data->cal_idx);
 	cal_type = le32_to_cpu(data->cal_type);
@@ -881,6 +1062,10 @@ mt7996_tm_re_cal_event(struct mt7996_dev *dev, struct mt7996_tm_rf_test_result *
 	len = len - sizeof(struct mt7996_tm_rf_test_data);
 
 	switch (cal_type) {
+	case RF_RX_GAIN_CAL:
+		cal = dev->mt76.eeprom.data;
+		base = MT_EE_RX_GAIN_CAL;
+		break;
 	case RF_PRE_CAL:
 		base = 0;
 		break;
@@ -889,20 +1074,21 @@ mt7996_tm_re_cal_event(struct mt7996_dev *dev, struct mt7996_tm_rf_test_result *
 		break;
 	case RF_DPD_FLAT_5G_CAL:
 	case RF_DPD_FLAT_5G_MEM_CAL:
-		base = MT_EE_CAL_GROUP_SIZE + dpd_size_2g;
+		base = MT_EE_CAL_GROUP_SIZE + MT_EE_CAL_DPD_SIZE_2G;
 		break;
 	case RF_DPD_FLAT_6G_CAL:
 	case RF_DPD_FLAT_6G_MEM_CAL:
-		base = MT_EE_CAL_GROUP_SIZE + dpd_size_2g + dpd_size_5g;
+		base = MT_EE_CAL_GROUP_SIZE + MT_EE_CAL_DPD_SIZE_2G +
+		       MT_EE_CAL_DPD_SIZE_5G;
 		break;
 	default:
-		dev_info(dev->mt76.dev, "Unknown calibration type!\n");
+		dev_info(dev->mt76.dev, "Unknown calibration type %x\n", cal_type);
 		return;
 	}
-	pre_cal += (base + dev->cur_prek_offset);
 
-	memcpy(pre_cal, data->cal_data, len);
+	memcpy(cal + base + dev->cur_prek_offset, data->cal_data, len);
 	dev->cur_prek_offset += len;
+	wake_up(&dev->mt76.mcu.wait);
 }
 
 void mt7996_tm_rf_test_event(struct mt7996_dev *dev, struct sk_buff *skb)
@@ -1934,6 +2120,8 @@ mt7996_tm_set_state(struct mt76_phy *mphy, enum mt76_testmode_state state)
 		return mt7996_tm_group_prek(phy, state);
 	else if (state >= MT76_TM_STATE_DPD_2G && state <= MT76_TM_STATE_DPD_CLEAN)
 		return mt7996_tm_dpd_prek(phy, state);
+	else if (state >= MT76_TM_STATE_RX_GAIN_CAL && state <= MT76_TM_STATE_RX_GAIN_CAL_CLEAN)
+		return mt7996_tm_rx_gain_cal(phy, state);
 
 	if ((state == MT76_TM_STATE_IDLE &&
 	     prev_state == MT76_TM_STATE_OFF) ||
@@ -2484,11 +2672,6 @@ mt7996_tm_set_list_mode(struct mt76_phy *mphy, int seg_idx,
 		.tag = cpu_to_le16(UNI_RF_TEST_LIST_MODE),
 		.len = cpu_to_le16(sizeof(req.seg)),
 	};
-	static const u8 ch_band[] = {
-		[NL80211_BAND_2GHZ] = 0,
-		[NL80211_BAND_5GHZ] = 1,
-		[NL80211_BAND_6GHZ] = 2,
-	};
 	static const u8 lm_ext_id[] = {
 		[MT76_TM_LM_ACT_SET_TX_SEGMENT] = 16,
 		[MT76_TM_LM_ACT_TX_START] = 17,
@@ -2507,7 +2690,7 @@ mt7996_tm_set_list_mode(struct mt76_phy *mphy, int seg_idx,
 		[LM_STATE_RX] = "rx ongoing",
 	};
 	int seg_param_num = sizeof(req.seg.tx_seg.rf) / sizeof(u32);
-	int ret, state, band = ch_band[chan->band];
+	int ret, state, band = mt7996_tm_band_mapping(chan->band);
 	struct mt7996_tm_list_event *event;
 	struct sk_buff *skb;
 	u8 cbw, dbw;
diff --git a/mt7996/testmode.h b/mt7996/testmode.h
index 2dc9760e..9d381196 100644
--- a/mt7996/testmode.h
+++ b/mt7996/testmode.h
@@ -102,7 +102,10 @@ struct mt7996_tm_event {
 	struct mt7996_tm_rf_test_result result;
 } __packed;
 
-#define RF_TEST_RE_CAL		0x01
+enum rf_test_func_idx {
+	RF_TEST_RE_CAL = 0x01,
+	RF_TEST_RX_GAIN_CAL = 0x14,
+};
 
 enum {
 	RF_ACTION_SWITCH_TO_RF_TEST,
@@ -171,6 +174,7 @@ enum {
 	RF_TEST_ID_SET_TX_PATH = 113,
 	RF_TEST_ID_SET_NSS = 114,
 	RF_TEST_ID_SET_ANT_MASK = 115,
+	RF_TEST_ID_SET_CAL_BITMAP = 125,
 	RF_TEST_ID_SET_IBF_ENABLE = 126,
 	RF_TEST_ID_SET_EBF_ENABLE = 127,
 	RF_TEST_ID_GET_TX_POWER = 136,
diff --git a/testmode.c b/testmode.c
index 0c698a48..8fa32349 100644
--- a/testmode.c
+++ b/testmode.c
@@ -42,6 +42,7 @@ const struct nla_policy mt76_tm_policy[NUM_MT76_TM_ATTRS] = {
 	[MT76_TM_ATTR_LM_CBW] = { .type = NLA_U8 },
 	[MT76_TM_ATTR_LM_STA_IDX] = { .type = NLA_U8 },
 	[MT76_TM_ATTR_LM_SEG_TIMEOUT] = { .type = NLA_U32 },
+	[MT76_TM_ATTR_FAST_CAL] = { .type = NLA_U8 },
 };
 EXPORT_SYMBOL_GPL(mt76_tm_policy);
 
@@ -872,7 +873,9 @@ int mt76_testmode_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	    mt76_tm_get_u8(tb[MT76_TM_ATTR_OFF_CH_SCAN_BW], &td->offchan_bw,
 			   NL80211_CHAN_WIDTH_20_NOHT, NL80211_CHAN_WIDTH_160) ||
 	    mt76_tm_get_u8(tb[MT76_TM_ATTR_IPI_THRESHOLD], &td->ipi_threshold, 0, 10) ||
-	    mt76_tm_get_u8(tb[MT76_TM_ATTR_IPI_RESET], &td->ipi_reset, 0, 1))
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_IPI_RESET], &td->ipi_reset, 0, 1) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_FAST_CAL], &td->fast_cal,
+			   0, MT76_TM_FAST_CAL_TYPE_MAX))
 		goto out;
 
 	if (tb[MT76_TM_ATTR_TX_LENGTH]) {
@@ -1139,7 +1142,9 @@ int mt76_testmode_dump(struct ieee80211_hw *hw, struct sk_buff *msg,
 	    (mt76_testmode_param_present(td, MT76_TM_ATTR_TX_PRI_SEL) &&
 	     nla_put_u8(msg, MT76_TM_ATTR_TX_PRI_SEL, td->tx_pri_sel)) ||
 	    (mt76_testmode_param_present(td, MT76_TM_ATTR_FREQ_OFFSET) &&
-	     nla_put_u32(msg, MT76_TM_ATTR_FREQ_OFFSET, td->freq_offset)))
+	     nla_put_u32(msg, MT76_TM_ATTR_FREQ_OFFSET, td->freq_offset)) ||
+	    (mt76_testmode_param_present(td, MT76_TM_ATTR_FAST_CAL) &&
+	     nla_put_u8(msg, MT76_TM_ATTR_FAST_CAL, td->fast_cal)))
 		goto out;
 
 	if (mt76_testmode_param_present(td, MT76_TM_ATTR_TX_POWER)) {
diff --git a/testmode.h b/testmode.h
index 7043b6d1..9b763cc2 100644
--- a/testmode.h
+++ b/testmode.h
@@ -90,6 +90,9 @@
  *
  * @MT76_TM_ATTR_RADIO_IDX: radio index used for single multi-radio wiphy (u32)
  *
+ * @MT76_TM_ATTR_FAST_CAL: perform a fast calibration for a channel switch speed boost
+ *	(u8, see &enum mt76_testmode_fast_cal_type)
+ *
  */
 enum mt76_testmode_attr {
 	MT76_TM_ATTR_UNSPEC,
@@ -165,6 +168,8 @@ enum mt76_testmode_attr {
 
 	MT76_TM_ATTR_RADIO_IDX,
 
+	MT76_TM_ATTR_FAST_CAL,
+
 	/* keep last */
 	NUM_MT76_TM_ATTRS,
 	MT76_TM_ATTR_MAX = NUM_MT76_TM_ATTRS - 1,
@@ -236,6 +241,9 @@ enum mt76_testmode_rx_attr {
  * @MT76_TM_STATE_TX_FRAMES: send a fixed number of test frames
  * @MT76_TM_STATE_RX_FRAMES: receive packets and keep statistics
  * @MT76_TM_STATE_TX_CONT: waveform tx without time gap
+ * @MT76_TM_STATE_RX_GAIN_CAL: start RX gain calibration
+ * @MT76_TM_STATE_RX_GAIN_CAL_DUMP: dump the data of RX gain calibration
+ * @MT76_TM_STATE_RX_GAIN_CAL_CLEAN: clear the data of RX gain calibration
  * @MT76_TM_STATE_ON: test mode enabled used in offload firmware
  */
 enum mt76_testmode_state {
@@ -252,6 +260,9 @@ enum mt76_testmode_state {
 	MT76_TM_STATE_DPD_6G,
 	MT76_TM_STATE_DPD_DUMP,
 	MT76_TM_STATE_DPD_CLEAN,
+	MT76_TM_STATE_RX_GAIN_CAL,
+	MT76_TM_STATE_RX_GAIN_CAL_DUMP,
+	MT76_TM_STATE_RX_GAIN_CAL_CLEAN,
 	MT76_TM_STATE_ON,
 
 	/* keep last */
@@ -400,4 +411,23 @@ enum mt76_testmode_list_act {
 	MT76_TM_LM_ACT_MAX = NUM_MT76_TM_LM_ACT - 1,
 };
 
+/**
+ * enum mt76_testmode_fast_cal_type - fast channel calibration type
+ *
+ * @MT76_TM_FAST_CAL_TYPE_NONE: perform full calibration
+ * @MT76_TM_FAST_CAL_TYPE_TX: fast calibration for TX verification
+ * @MT76_TM_FAST_CAL_TYPE_RX: fast calibration for RX verification
+ * @MT76_TM_FAST_CAL_TYPE_POWER: fast calibration for power calibration
+ */
+enum mt76_testmode_fast_cal_type {
+	MT76_TM_FAST_CAL_TYPE_NONE,
+	MT76_TM_FAST_CAL_TYPE_TX,
+	MT76_TM_FAST_CAL_TYPE_RX,
+	MT76_TM_FAST_CAL_TYPE_POWER,
+
+	/* keep last */
+	NUM_MT76_TM_FAST_CAL_TYPE,
+	MT76_TM_FAST_CAL_TYPE_MAX = NUM_MT76_TM_FAST_CAL_TYPE - 1,
+};
+
 #endif
diff --git a/tools/fields.c b/tools/fields.c
index 549c3433..8f2f364b 100644
--- a/tools/fields.c
+++ b/tools/fields.c
@@ -19,6 +19,9 @@ static const char * const testmode_state[] = {
 	[MT76_TM_STATE_DPD_6G] = "dpd_6g",
 	[MT76_TM_STATE_DPD_DUMP] = "dpd_dump",
 	[MT76_TM_STATE_DPD_CLEAN] = "dpd_clean",
+	[MT76_TM_STATE_RX_GAIN_CAL] = "rx_gain_cal",
+	[MT76_TM_STATE_RX_GAIN_CAL_DUMP] = "rx_gain_dump",
+	[MT76_TM_STATE_RX_GAIN_CAL_CLEAN] = "rx_gain_clean",
 };
 
 static const char * const testmode_tx_mode[] = {
@@ -90,6 +93,13 @@ static const char * const testmode_list_act[] = {
 	[MT76_TM_LM_ACT_DUMP_SEGMENT] = "dump_seg",
 };
 
+static const char * const testmode_fast_cal[] = {
+	[MT76_TM_FAST_CAL_TYPE_NONE] = "none",
+	[MT76_TM_FAST_CAL_TYPE_TX] = "tx_verify",
+	[MT76_TM_FAST_CAL_TYPE_RX] = "rx_verify",
+	[MT76_TM_FAST_CAL_TYPE_POWER] = "power_cal",
+};
+
 static void print_enum(const struct tm_field *field, struct nlattr *attr)
 {
 	unsigned int i = nla_get_u8(attr);
@@ -472,6 +482,7 @@ static const struct tm_field testdata_fields[NUM_MT76_TM_ATTRS] = {
 	FIELD_ENUM(LM_CBW, "lm_cbw", testmode_bw),
 	FIELD(u8, LM_STA_IDX, "lm_sta_idx"),
 	FIELD(u32, LM_SEG_TIMEOUT, "lm_seg_timeout"),
+	FIELD_ENUM(FAST_CAL, "fast_cal", testmode_fast_cal),
 	FIELD_MAC(MAC_ADDRS, "mac_addrs"),
 	FIELD_NESTED_RO(STATS, stats, "",
 			.print_extra = print_extra_stats),
@@ -520,6 +531,7 @@ static struct nla_policy testdata_policy[NUM_MT76_TM_ATTRS] = {
 	[MT76_TM_ATTR_LM_CBW] = { .type = NLA_U8 },
 	[MT76_TM_ATTR_LM_STA_IDX] = { .type = NLA_U8 },
 	[MT76_TM_ATTR_LM_SEG_TIMEOUT] = { .type = NLA_U32 },
+	[MT76_TM_ATTR_FAST_CAL] = { .type = NLA_U8 },
 };
 
 const struct tm_field msg_field = {
-- 
2.45.2

