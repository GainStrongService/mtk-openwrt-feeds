From cfd3886d75cdbb6665da9b241f8f38e54d9d7b6d Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Fri, 4 Oct 2024 17:48:48 +0800
Subject: [PATCH 237/265] mtk: mt76: mt7990: modify wtbl debug CRs for mt7990

This patch is based on the following commit:
https://gerrit.mediatek.inc/c/gateway/WiFi7/mac80211/mt76/+/9698501

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mt7996/mtk_debug.h   | 29 ++++++++++++--
 mt7996/mtk_debugfs.c | 94 +++++++++++++++++++++++++++++++-------------
 2 files changed, 91 insertions(+), 32 deletions(-)

diff --git a/mt7996/mtk_debug.h b/mt7996/mtk_debug.h
index 5e737bea..d7343045 100644
--- a/mt7996/mtk_debug.h
+++ b/mt7996/mtk_debug.h
@@ -1040,14 +1040,13 @@ enum cipher_suit {
 
 #define MT_DBG_WTBL_BASE		0x820D8000
 
-#define MT_DBG_WTBLON_TOP_BASE		0x820d4000
-#define MT_DBG_WTBLON_TOP_WDUCR_ADDR	(MT_DBG_WTBLON_TOP_BASE + 0x0370) // 4370
-#define MT_DBG_WTBLON_TOP_WDUCR_GROUP	GENMASK(4, 0)
-
 #define MT_DBG_UWTBL_TOP_BASE		0x820c4000
 #define MT_DBG_UWTBL_TOP_WDUCR_ADDR	(MT_DBG_UWTBL_TOP_BASE + 0x0104) // 4104
 #define MT_DBG_UWTBL_TOP_WDUCR_GROUP	GENMASK(5, 0)
 #define MT_DBG_UWTBL_TOP_WDUCR_TARGET	BIT(31)
+/* for 7990 */
+#define MT_DBG_UWTBL_TOP_KDUCR_ADDR	(MT_DBG_UWTBL_TOP_BASE + 0x010c) // 410c
+#define MT_DBG_UWTBL_TOP_KDUCR_GROUP	GENMASK(6, 0)
 
 #define LWTBL_IDX2BASE_ID		GENMASK(14, 8)
 #define LWTBL_IDX2BASE_DW		GENMASK(7, 2)
@@ -1066,6 +1065,10 @@ enum cipher_suit {
 #define KEYTBL_IDX2BASE(_key, _dw)	(MT_DBG_UWTBL_TOP_BASE | 0x2000 | \
 					FIELD_PREP(KEYTBL_IDX2BASE_KEY, _key) | \
 					FIELD_PREP(KEYTBL_IDX2BASE_DW, _dw))
+#define KEYTBL_IDX2BASE_KEY_7990	GENMASK(11, 6)
+#define KEYTBL_IDX2BASE_7990(_key, _dw)	(MT_DBG_UWTBL_TOP_BASE | 0x1000 | \
+					FIELD_PREP(KEYTBL_IDX2BASE_KEY_7990, _key) | \
+					FIELD_PREP(KEYTBL_IDX2BASE_DW, _dw))
 
 // UMAC WTBL
 // DW0
@@ -1169,6 +1172,10 @@ enum cipher_suit {
 #define WF_UWTBL_SEC_ADDR_MODE_ADDR                                 32
 #define WF_UWTBL_SEC_ADDR_MODE_MASK                                 0x00300000 // 21-20
 #define WF_UWTBL_SEC_ADDR_MODE_SHIFT                                20
+#define WF_UWTBL_AAD_OM_DW                                          8
+#define WF_UWTBL_AAD_OM_ADDR                                        32
+#define WF_UWTBL_AAD_OM_MASK                                        0x01000000 // 24-24
+#define WF_UWTBL_AAD_OM_SHIFT                                       24
 #define WF_UWTBL_WMM_Q_DW                                           8
 #define WF_UWTBL_WMM_Q_ADDR                                         32
 #define WF_UWTBL_WMM_Q_MASK                                         0x06000000 // 26-25
@@ -2234,6 +2241,20 @@ enum cipher_suit {
 	0x00fc0000 // 23-18
 #define WF_LWTBL_SNR_RX3_SHIFT                                      18
 
+/* for 7992 & 7990 */
+#define WF_LWTBL_SNR_RX0_MASK_7992  \
+	0x000000ff //  7- 0
+#define WF_LWTBL_SNR_RX0_SHIFT_7992                                 0
+#define WF_LWTBL_SNR_RX1_MASK_7992 \
+	0x0000ff00 // 15- 8
+#define WF_LWTBL_SNR_RX1_SHIFT_7992                                 8
+#define WF_LWTBL_SNR_RX2_MASK_7992 \
+	0x00ff0000 // 23-16
+#define WF_LWTBL_SNR_RX2_SHIFT_7992                                 16
+#define WF_LWTBL_SNR_RX3_MASK_7992 \
+	0xff000000 // 31-24
+#define WF_LWTBL_SNR_RX3_SHIFT_7992                                 24
+
 /* WTBL Group - Packet Number */
 /* DW 2 */
 #define WTBL_PN0_MASK                   BITS(0, 7)
diff --git a/mt7996/mtk_debugfs.c b/mt7996/mtk_debugfs.c
index 895db7f3..06cc9cc7 100644
--- a/mt7996/mtk_debugfs.c
+++ b/mt7996/mtk_debugfs.c
@@ -989,18 +989,25 @@ mt7996_wtbl_read_raw(struct mt7996_dev *dev, u16 idx,
 		return 0xFF;
 
 	if (type == WTBL_TYPE_LMAC) {
-		mt76_wr(dev, MT_DBG_WTBLON_TOP_WDUCR_ADDR,
-			FIELD_PREP(MT_DBG_WTBLON_TOP_WDUCR_GROUP, (idx >> 7)));
+		mt76_wr(dev, MT_WTBLON_TOP_WDUCR,
+			FIELD_PREP(MT_WTBLON_TOP_WDUCR_GROUP, (idx >> 7)));
 		src = LWTBL_IDX2BASE(idx, start_dw);
 	} else if (type == WTBL_TYPE_UMAC) {
 		mt76_wr(dev,  MT_DBG_UWTBL_TOP_WDUCR_ADDR,
 			FIELD_PREP(MT_DBG_UWTBL_TOP_WDUCR_GROUP, (idx >> 7)));
 		src = UWTBL_IDX2BASE(idx, start_dw);
 	} else if (type == WTBL_TYPE_KEY) {
-		mt76_wr(dev,  MT_DBG_UWTBL_TOP_WDUCR_ADDR,
-			MT_DBG_UWTBL_TOP_WDUCR_TARGET |
-			FIELD_PREP(MT_DBG_UWTBL_TOP_WDUCR_GROUP, (idx >> 7)));
-		src = KEYTBL_IDX2BASE(idx, start_dw);
+		if (is_mt7990(&dev->mt76)) {
+			mt76_wr(dev,  MT_DBG_UWTBL_TOP_KDUCR_ADDR,
+				FIELD_PREP(MT_DBG_UWTBL_TOP_KDUCR_GROUP, (idx >> 6)));
+			src = KEYTBL_IDX2BASE_7990(idx, start_dw);
+		} else {
+			mt76_wr(dev,  MT_DBG_UWTBL_TOP_WDUCR_ADDR,
+				MT_DBG_UWTBL_TOP_WDUCR_TARGET |
+				FIELD_PREP(MT_DBG_UWTBL_TOP_WDUCR_GROUP, (idx >> 7)));
+			src = KEYTBL_IDX2BASE(idx, start_dw);
+		}
+
 	}
 
 	while (size_dw--) {
@@ -1020,8 +1027,8 @@ mt7996_wtbl_write_raw(struct mt7996_dev *dev, u16 idx,
 	u32 addr = 0;
 
 	if (type == WTBL_TYPE_LMAC) {
-		mt76_wr(dev, MT_DBG_WTBLON_TOP_WDUCR_ADDR,
-			FIELD_PREP(MT_DBG_WTBLON_TOP_WDUCR_GROUP, (idx >> 7)));
+		mt76_wr(dev, MT_WTBLON_TOP_WDUCR,
+			FIELD_PREP(MT_WTBLON_TOP_WDUCR_GROUP, (idx >> 7)));
 		addr = LWTBL_IDX2BASE(idx, start_dw);
 	} else if (type == WTBL_TYPE_UMAC) {
 		mt76_wr(dev, MT_DBG_UWTBL_TOP_WDUCR_ADDR,
@@ -1646,7 +1653,7 @@ static void parse_fmac_lwtbl_dw14(struct seq_file *s, u8 *lwtbl)
 		== MUAR_INDEX_OWN_MAC_ADDR_BC_MC) {
 		/* LMAC WTBL DW 14 */
 		seq_printf(s, "\t\n");
-		seq_printf(s, "LWTBL DW 14\n");
+		seq_printf(s, "LWTBL DW 14_BMC\n");
 		addr = (u32 *)&(lwtbl[WF_LWTBL_CIPHER_SUIT_IGTK_DW*4]);
 		dw_value = *addr;
 
@@ -1822,10 +1829,12 @@ static void parse_fmac_lwtbl_dw31(struct seq_file *s, u8 *lwtbl)
 }
 
 static const struct berse_wtbl_parse WTBL_LMAC_DW32[] = {
-	{"OM_INFO",			WF_LWTBL_OM_INFO_MASK,			WF_LWTBL_OM_INFO_SHIFT,		false},
-	{"OM_INFO_EHT",         WF_LWTBL_OM_INFO_EHT_MASK,         WF_LWTBL_OM_INFO_EHT_SHIFT,  false},
-	{"RXD_DUP_FOR_OM_CHG",		WF_LWTBL_RXD_DUP_FOR_OM_CHG_MASK,	NO_SHIFT_DEFINE,		false},
+	{"OM_INFO",		WF_LWTBL_OM_INFO_MASK,			WF_LWTBL_OM_INFO_SHIFT,			false},
+	{"OM_INFO_EHT",		WF_LWTBL_OM_INFO_EHT_MASK,		WF_LWTBL_OM_INFO_EHT_SHIFT,		false},
+	{"RXD_DUP_FOR_OM_CHG",	WF_LWTBL_RXD_DUP_FOR_OM_CHG_MASK,	NO_SHIFT_DEFINE,			false},
 	{"RXD_DUP_WHITE_LIST",	WF_LWTBL_RXD_DUP_WHITE_LIST_MASK,	WF_LWTBL_RXD_DUP_WHITE_LIST_SHIFT,	false},
+	{"RXD_DUP_MODE",	WF_LWTBL_RXD_DUP_MODE_MASK,		WF_LWTBL_RXD_DUP_MODE_SHIFT,		false},
+	{"ACK_EN",		WF_LWTBL_ACK_EN_MASK,			NO_SHIFT_DEFINE,			true},
 	{NULL,}
 };
 
@@ -1919,7 +1928,8 @@ static void parse_fmac_lwtbl_dw34(struct seq_file *s, u8 *lwtbl)
 	}
 }
 
-static const struct berse_wtbl_parse WTBL_LMAC_DW35[] = {
+static const struct berse_wtbl_parse *WTBL_LMAC_DW35;
+static const struct berse_wtbl_parse WTBL_LMAC_DW35_7996[] = {
 	{"SNR 0",	WF_LWTBL_SNR_RX0_MASK,		WF_LWTBL_SNR_RX0_SHIFT,	false},
 	{"SNR 1",	WF_LWTBL_SNR_RX1_MASK,		WF_LWTBL_SNR_RX1_SHIFT,	false},
 	{"SNR 2",	WF_LWTBL_SNR_RX2_MASK,		WF_LWTBL_SNR_RX2_SHIFT,	false},
@@ -1927,6 +1937,14 @@ static const struct berse_wtbl_parse WTBL_LMAC_DW35[] = {
 	{NULL,}
 };
 
+static const struct berse_wtbl_parse WTBL_LMAC_DW35_7992[] = {
+	{"SNR 0",	WF_LWTBL_SNR_RX0_MASK_7992,	WF_LWTBL_SNR_RX0_SHIFT_7992,	false},
+	{"SNR 1",	WF_LWTBL_SNR_RX1_MASK_7992,	WF_LWTBL_SNR_RX1_SHIFT_7992,	false},
+	{"SNR 2",	WF_LWTBL_SNR_RX2_MASK_7992,	WF_LWTBL_SNR_RX2_SHIFT_7992,	false},
+	{"SNR 3",	WF_LWTBL_SNR_RX3_MASK_7992,	WF_LWTBL_SNR_RX3_SHIFT_7992,	true},
+	{NULL,}
+};
+
 static void parse_fmac_lwtbl_dw35(struct seq_file *s, u8 *lwtbl)
 {
 	u32 *addr = 0;
@@ -2190,16 +2208,21 @@ static void dump_key_table(
 	seq_printf(s, "\t\n");
 	seq_printf(s, "\t%s:%d\n", "keyloc0", keyloc0);
 	if (keyloc0 != INVALID_KEY_ENTRY) {
-
 		/* Don't swap below two lines, halWtblReadRaw will
 		* write new value WF_WTBLON_TOP_WDUCR_ADDR
 		*/
 		mt7996_wtbl_read_raw(dev, keyloc0,
 			WTBL_TYPE_KEY, 0, ONE_KEY_ENTRY_LEN_IN_DW, keytbl);
-		seq_printf(s, "\t\tKEY WTBL Addr: group:0x%x=0x%x addr: 0x%lx\n",
-			MT_DBG_UWTBL_TOP_WDUCR_ADDR,
-			mt76_rr(dev, MT_DBG_UWTBL_TOP_WDUCR_ADDR),
-			KEYTBL_IDX2BASE(keyloc0, 0));
+		if (is_mt7990(&dev->mt76))
+			seq_printf(s, "\t\tKEY WTBL Addr: group:0x%x=0x%x addr: 0x%lx\n",
+				MT_DBG_UWTBL_TOP_KDUCR_ADDR,
+				mt76_rr(dev, MT_DBG_UWTBL_TOP_KDUCR_ADDR),
+				KEYTBL_IDX2BASE_7990(keyloc0, 0));
+		else
+			seq_printf(s, "\t\tKEY WTBL Addr: group:0x%x=0x%x addr: 0x%lx\n",
+				MT_DBG_UWTBL_TOP_WDUCR_ADDR,
+				mt76_rr(dev, MT_DBG_UWTBL_TOP_WDUCR_ADDR),
+				KEYTBL_IDX2BASE(keyloc0, 0));
 		for (x = 0; x < ONE_KEY_ENTRY_LEN_IN_DW; x++) {
 			seq_printf(s, "\t\tDW%02d: %02x %02x %02x %02x\n",
 				x,
@@ -2217,10 +2240,16 @@ static void dump_key_table(
 		*/
 		mt7996_wtbl_read_raw(dev, keyloc1,
 			WTBL_TYPE_KEY, 0, ONE_KEY_ENTRY_LEN_IN_DW, keytbl);
-		seq_printf(s, "\t\tKEY WTBL Addr: group:0x%x=0x%x addr: 0x%lx\n",
-			MT_DBG_UWTBL_TOP_WDUCR_ADDR,
-			mt76_rr(dev, MT_DBG_UWTBL_TOP_WDUCR_ADDR),
-			KEYTBL_IDX2BASE(keyloc1, 0));
+		if (is_mt7990(&dev->mt76))
+			seq_printf(s, "\t\tKEY WTBL Addr: group:0x%x=0x%x addr: 0x%lx\n",
+				MT_DBG_UWTBL_TOP_KDUCR_ADDR,
+				mt76_rr(dev, MT_DBG_UWTBL_TOP_KDUCR_ADDR),
+				KEYTBL_IDX2BASE_7990(keyloc1, 0));
+		else
+			seq_printf(s, "\t\tKEY WTBL Addr: group:0x%x=0x%x addr: 0x%lx\n",
+				MT_DBG_UWTBL_TOP_WDUCR_ADDR,
+				mt76_rr(dev, MT_DBG_UWTBL_TOP_WDUCR_ADDR),
+				KEYTBL_IDX2BASE(keyloc1, 0));
 		for (x = 0; x < ONE_KEY_ENTRY_LEN_IN_DW; x++) {
 			seq_printf(s, "\t\tDW%02d: %02x %02x %02x %02x\n",
 				x,
@@ -2238,10 +2267,16 @@ static void dump_key_table(
 		*/
 		mt7996_wtbl_read_raw(dev, keyloc2,
 			WTBL_TYPE_KEY, 0, ONE_KEY_ENTRY_LEN_IN_DW, keytbl);
-		seq_printf(s, "\t\tKEY WTBL Addr: group:0x%x=0x%x addr: 0x%lx\n",
-			MT_DBG_UWTBL_TOP_WDUCR_ADDR,
-			mt76_rr(dev, MT_DBG_UWTBL_TOP_WDUCR_ADDR),
-			KEYTBL_IDX2BASE(keyloc2, 0));
+		if (is_mt7990(&dev->mt76))
+			seq_printf(s, "\t\tKEY WTBL Addr: group:0x%x=0x%x addr: 0x%lx\n",
+				MT_DBG_UWTBL_TOP_KDUCR_ADDR,
+				mt76_rr(dev, MT_DBG_UWTBL_TOP_KDUCR_ADDR),
+				KEYTBL_IDX2BASE_7990(keyloc2, 0));
+		else
+			seq_printf(s, "\t\tKEY WTBL Addr: group:0x%x=0x%x addr: 0x%lx\n",
+				MT_DBG_UWTBL_TOP_WDUCR_ADDR,
+				mt76_rr(dev, MT_DBG_UWTBL_TOP_WDUCR_ADDR),
+				KEYTBL_IDX2BASE(keyloc2, 0));
 		for (x = 0; x < ONE_KEY_ENTRY_LEN_IN_DW; x++) {
 			seq_printf(s, "\t\tDW%02d: %02x %02x %02x %02x\n",
 				x,
@@ -2290,6 +2325,7 @@ static const struct berse_wtbl_parse WTBL_UMAC_DW8[] = {
 	{"UWTBL_QOS",		WF_UWTBL_QOS_MASK,		NO_SHIFT_DEFINE,	false},
 	{"UWTBL_HT_VHT_HE",	WF_UWTBL_HT_MASK,		NO_SHIFT_DEFINE,	false},
 	{"UWTBL_HDRT_MODE",	WF_UWTBL_HDRT_MODE_MASK,	NO_SHIFT_DEFINE,	true},
+	{"UWTBL_AAD_OM",	WF_UWTBL_AAD_OM_MASK,		WF_UWTBL_AAD_OM_SHIFT,	true},
 	{NULL,}
 };
 
@@ -2370,8 +2406,8 @@ static int mt7996_wtbl_read(struct seq_file *s, void *data)
 				 LWTBL_LEN_IN_DW, lwtbl);
 	seq_printf(s, "Dump WTBL info of WLAN_IDX:%d\n", dev->wlan_idx);
 	seq_printf(s, "LMAC WTBL Addr: group:0x%x=0x%x addr: 0x%lx\n",
-		   MT_DBG_WTBLON_TOP_WDUCR_ADDR,
-		   mt76_rr(dev, MT_DBG_WTBLON_TOP_WDUCR_ADDR),
+		   MT_WTBLON_TOP_WDUCR,
+		   mt76_rr(dev, MT_WTBLON_TOP_WDUCR),
 		   LWTBL_IDX2BASE(dev->wlan_idx, 0));
 	for (x = 0; x < LWTBL_LEN_IN_DW; x++) {
 		seq_printf(s, "DW%02d: %02x %02x %02x %02x\n",
@@ -4560,10 +4596,12 @@ void mt7996_mtk_init_dev_debugfs(struct mt7996_dev *dev, struct dentry *dir)
 		WTBL_LMAC_DW2 = WTBL_LMAC_DW2_7996;
 		WTBL_LMAC_DW5 = WTBL_LMAC_DW5_7996;
 		WTBL_LMAC_DW9 = WTBL_LMAC_DW9_7996;
+		WTBL_LMAC_DW35 = WTBL_LMAC_DW35_7996;
 	} else {
 		WTBL_LMAC_DW2 = WTBL_LMAC_DW2_7992;
 		WTBL_LMAC_DW5 = WTBL_LMAC_DW5_7992;
 		WTBL_LMAC_DW9 = WTBL_LMAC_DW9_7992;
+		WTBL_LMAC_DW35 = WTBL_LMAC_DW35_7992;
 	}
 
 	/* amsdu */
-- 
2.45.2

