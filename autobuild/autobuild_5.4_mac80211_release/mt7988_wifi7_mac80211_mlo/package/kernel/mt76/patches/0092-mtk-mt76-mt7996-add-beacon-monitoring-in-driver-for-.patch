From e8bece32d7b1b42ce3e368d1b4f1fa44967b6636 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 20 Feb 2024 10:08:01 +0800
Subject: [PATCH 092/146] mtk: mt76: mt7996: add beacon monitoring in driver
 for mlo

Add beacon monitoring in driver since mac80211 does not
support connect monitoring if WIPHY_FLAG_SUPPORTS_MLO is set.
(IEEE80211_HW_CONNECTION_MONITOR should be set)

Add probing mechanism (send nullfunc) when beacon loss is detected.
Note that probe request is not implemented yet.
Fix beacon monitor deadlock issue between the mutex lock of
mt7996_event_callback & mt7996_beacon_mon_work

fix call trace during STA wifi down/up
remove chanctx will be called before canceling beacon mon work
Therefore, check phy->chanctx exist or not

1. Refactor beacon monitor to mld level.
2. Trigger disconnection only when all valid links are lost.
3. Add temporary resume link monitor mechanism by simply receiving beacon
from the lost link.
4. Change from cancel_delayed_work_sync to cancel_delayed_work.
The beacon work will canceled only when sta is disconnected or disabled,
so it is unnecessary to finish the work.
5. Add address sanity check before sending nullfunc.
6. Add cancel_delayed_work in more place.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mt7996/mac.c    | 217 +++++++++++++++++++++++++++++++++++++++++++++++-
 mt7996/main.c   |  62 ++++++++++++++
 mt7996/mcu.c    |   2 +-
 mt7996/mt7996.h |  13 +++
 4 files changed, 292 insertions(+), 2 deletions(-)

diff --git a/mt7996/mac.c b/mt7996/mac.c
index afdb4ee9..5c21bfaf 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -547,6 +547,32 @@ mt7996_mac_fill_rx(struct mt7996_dev *dev, enum mt76_rxq_id q,
 			 */
 			if (ieee80211_has_a4(fc) && is_mesh && status->amsdu)
 				*qos &= ~IEEE80211_QOS_CTL_A_MSDU_PRESENT;
+		} else if (ieee80211_is_beacon(fc)) {
+			struct ieee80211_hw *hw = phy->mt76->hw;
+			struct ieee80211_sta *sta;
+			struct mt7996_sta *msta;
+			unsigned int link_id = 0;
+
+			sta = ieee80211_find_sta_by_link_addrs(hw, hdr->addr2, NULL, &link_id);
+			if (!sta)
+				sta = ieee80211_find_sta_by_ifaddr(hw, hdr->addr2, NULL);
+
+			if (sta) {
+				msta = (struct mt7996_sta *)sta->drv_priv;
+				if (msta && msta->vif) {
+					msta->vif->beacon_received_time[band_idx] = jiffies;
+					/* FIXME: This is a temporary workaround.
+					 * Lost links should be resumed via TTLM or
+					 * link reconfig.
+					 */
+					if (msta->vif->lost_links & BIT(link_id)) {
+						msta->vif->lost_links &= ~BIT(link_id);
+						wiphy_info(hw->wiphy,
+							   "link %d: resume beacon monitoring\n",
+							   link_id);
+					}
+				}
+			}
 		}
 		skb_set_mac_header(skb, (unsigned char *)hdr - skb->data);
 
@@ -714,7 +740,8 @@ mt7996_mac_write_txwi_80211(struct mt7996_dev *dev, __le32 *txwi,
 	}
 
 	if (ieee80211_vif_is_mld(info->control.vif) &&
-	    (multicast || unlikely(skb->protocol == cpu_to_be16(ETH_P_PAE))))
+	    (multicast || unlikely(skb->protocol == cpu_to_be16(ETH_P_PAE)) ||
+	     info->flags & IEEE80211_TX_CTL_INJECTED))
 		txwi[5] |= cpu_to_le32(MT_TXD5_FL);
 
 	if (unlikely(ieee80211_is_nullfunc(fc)) && ieee80211_has_a4(fc) &&
@@ -1233,6 +1260,10 @@ mt7996_mac_add_txs_skb(struct mt7996_dev *dev, struct mt76_wcid *wcid,
 	if (le32_get_bits(txs_data[0], MT_TXS0_TXS_FORMAT) == 0) {
 		skb = mt76_tx_status_skb_get(mdev, wcid, pid, &list);
 		if (skb) {
+			struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
+			struct mt7996_link_sta *mlink = wcid_to_mlink(wcid);
+			struct mt7996_vif *mvif;
+
 			info = IEEE80211_SKB_CB(skb);
 			if (!(txs & MT_TXS0_ACK_ERROR_MASK))
 				info->flags |= IEEE80211_TX_STAT_ACK;
@@ -1242,6 +1273,18 @@ mt7996_mac_add_txs_skb(struct mt7996_dev *dev, struct mt76_wcid *wcid,
 				!!(info->flags & IEEE80211_TX_STAT_ACK);
 
 			info->status.rates[0].idx = -1;
+
+			/* connection monitoring */
+			if (mlink && mlink->sta)
+				mvif = mlink->sta->vif;
+			if (ieee80211_is_nullfunc(hdr->frame_control) && mvif &&
+			    mvif->probe[wcid->phy_idx] == (void *)skb &&
+			    info->flags & IEEE80211_TX_STAT_ACK) {
+				/* reset beacon monitoring */
+				mvif->probe[wcid->phy_idx] = NULL;
+				mvif->beacon_received_time[wcid->phy_idx] = jiffies;
+				mvif->probe_send_count[wcid->phy_idx] = 0;
+			}
 		}
 	}
 
@@ -2970,3 +3013,175 @@ void mt7996_scan_work(struct work_struct *work)
 
 	ieee80211_queue_delayed_work(hw, &phy->scan_work, duration);
 }
+
+static int
+mt7996_beacon_mon_send_probe(struct mt7996_phy *phy, struct mt7996_vif *mvif,
+			     struct ieee80211_bss_conf *conf, unsigned int link_id)
+{
+	struct ieee80211_vif *vif = container_of((void *)mvif, struct ieee80211_vif, drv_priv);
+	struct ieee80211_hw *hw = phy->mt76->hw;
+	struct mt7996_link_sta *mlink;
+	struct ieee80211_tx_info *info;
+	struct sk_buff *skb;
+	int ret = 0, band_idx = phy->mt76->band_idx;
+	int band;
+
+	rcu_read_lock();
+
+	mlink = rcu_dereference(mvif->sta.link[link_id]);
+	if (!mlink || mlink->wcid.phy_idx != band_idx) {
+		ret = -EINVAL;
+		goto unlock;
+	}
+
+	if (!ieee80211_hw_check(hw, REPORTS_TX_ACK_STATUS)) {
+		/* probe request is not supported yet */
+		ret = -EOPNOTSUPP;
+		goto unlock;
+	}
+
+	/* FIXME: bss conf should not be all-zero before beacon mon work is canecled */
+	if (!is_valid_ether_addr(conf->bssid) ||
+	    !is_valid_ether_addr(conf->addr)) {
+		/* invalid address */
+		ret = -EINVAL;
+		goto unlock;
+	}
+
+	skb = ieee80211_nullfunc_get(hw, vif, link_id, false);
+	if (!skb) {
+		ret = -ENOMEM;
+		goto unlock;
+	}
+
+	info = IEEE80211_SKB_CB(skb);
+	/* frame injected by driver */
+	info->flags |= (IEEE80211_TX_CTL_REQ_TX_STATUS |
+			IEEE80211_TX_CTL_INJECTED |
+			IEEE80211_TX_CTL_NO_PS_BUFFER);
+	if (ieee80211_vif_is_mld(vif))
+		info->control.flags |= u32_encode_bits(link_id, IEEE80211_TX_CTRL_MLO_LINK);
+
+	if (phy->chanctx)
+		band = phy->chanctx->chandef.chan->band;
+	else
+		band = phy->mt76->chandef.chan->band;
+
+	skb_set_queue_mapping(skb, IEEE80211_AC_VO);
+	if (!ieee80211_tx_prepare_skb(hw, vif, skb, band, NULL)) {
+		rcu_read_unlock();
+		ieee80211_free_txskb(hw, skb);
+		return -EINVAL;
+	}
+
+	local_bh_disable();
+	mt76_tx(phy->mt76, NULL, &mlink->wcid, skb);
+	local_bh_enable();
+
+	mvif->probe[band_idx] = (void *)skb;
+	mvif->probe_send_count[band_idx]++;
+	mvif->probe_send_time[band_idx] = jiffies;
+
+unlock:
+	rcu_read_unlock();
+	return ret;
+}
+
+void mt7996_beacon_mon_work(struct work_struct *work)
+{
+	struct mt7996_vif *mvif = container_of(work, struct mt7996_vif, beacon_mon_work.work);
+	struct ieee80211_vif *vif = container_of((void *)mvif, struct ieee80211_vif, drv_priv);
+	struct mt7996_dev *dev = mvif->dev;
+	struct ieee80211_hw *hw = mt76_hw(dev);
+	unsigned long next_time = ULONG_MAX, valid_links = vif->valid_links ?: BIT(0);
+	unsigned int link_id;
+	enum monitor_state {
+		MON_STATE_BEACON_MON,
+		MON_STATE_SEND_PROBE,
+		MON_STATE_LINK_LOST,
+		MON_STATE_DISCONN,
+	};
+
+	mutex_lock(&dev->mt76.mutex);
+
+	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+		struct ieee80211_bss_conf *conf;
+		struct mt7996_bss_conf *mconf;
+		struct mt7996_phy *phy;
+		unsigned long timeout, loss_duration;
+		int band_idx;
+		enum monitor_state state = MON_STATE_BEACON_MON;
+
+		conf = link_conf_dereference_protected(vif, link_id);
+		mconf = mconf_dereference_protected(mvif, link_id);
+		if (!conf || !mconf)
+			continue;
+
+		/* skip lost links */
+		if (mvif->lost_links & BIT(link_id))
+			continue;
+
+		phy = mconf->phy;
+		band_idx = phy->mt76->band_idx;
+		if (mvif->probe[band_idx]) {
+			loss_duration = msecs_to_jiffies(MT7996_MAX_PROBE_TIMEOUT);
+			timeout = mvif->probe_send_time[band_idx] + loss_duration;
+			if (time_after_eq(jiffies, timeout)) {
+				if (mvif->probe_send_count[band_idx] == MT7996_MAX_PROBE_TRIES)
+					state = MON_STATE_LINK_LOST;
+				else
+					state = MON_STATE_SEND_PROBE;
+			}
+		} else {
+			loss_duration = msecs_to_jiffies(MT7996_MAX_BEACON_LOSS *
+							 conf->beacon_int);
+			timeout = mvif->beacon_received_time[band_idx] + loss_duration;
+			if (time_after_eq(jiffies, timeout)) {
+				wiphy_info(hw->wiphy, "link %d: detect %d beacon loss\n",
+					   link_id, MT7996_MAX_BEACON_LOSS);
+				state = MON_STATE_SEND_PROBE;
+			}
+		}
+
+		switch (state) {
+		case MON_STATE_BEACON_MON:
+			break;
+		case MON_STATE_SEND_PROBE:
+			if (!mt7996_beacon_mon_send_probe(phy, mvif, conf, link_id)) {
+				timeout = MT7996_MAX_PROBE_TIMEOUT +
+					  mvif->probe_send_time[band_idx];
+				wiphy_info(hw->wiphy,
+					   "link %d: send nullfunc to AP %pM, try %d/%d\n",
+					   link_id, conf->bssid,
+					   mvif->probe_send_count[band_idx],
+					   MT7996_MAX_PROBE_TRIES);
+				break;
+			}
+			fallthrough;
+		case MON_STATE_LINK_LOST:
+			mvif->lost_links |= BIT(link_id);
+			wiphy_info(hw->wiphy,
+				   "link %d: %s to AP %pM, stop monitoring the lost link\n",
+				   link_id,
+				   state == MON_STATE_LINK_LOST ? "No ack for nullfunc frame" :
+								  "Failed to send nullfunc frame",
+				   conf->bssid);
+			mvif->probe[band_idx] = NULL;
+			mvif->probe_send_count[band_idx] = 0;
+			/* TODO: disable single link TX via TTLM/link reconfig for MLD */
+			if (mvif->lost_links != valid_links)
+				break;
+			fallthrough;
+		case MON_STATE_DISCONN:
+		default:
+			mutex_unlock(&dev->mt76.mutex);
+			wiphy_info(hw->wiphy, "all links are lost, disconnecting\n");
+			ieee80211_connection_loss(vif);
+			return;
+		}
+		next_time = min(next_time, timeout - jiffies);
+	}
+	mutex_unlock(&dev->mt76.mutex);
+
+	ieee80211_queue_delayed_work(hw, &mvif->beacon_mon_work, next_time);
+}
diff --git a/mt7996/main.c b/mt7996/main.c
index 76b5c1c9..510aba6f 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -501,6 +501,7 @@ static int mt7996_add_interface(struct ieee80211_hw *hw,
 		}
 	}
 
+	INIT_DELAYED_WORK(&mvif->beacon_mon_work, mt7996_beacon_mon_work);
 	mvif->dev = dev;
 	mvif->sta.vif = mvif;
 	/* TODO: temporaily set this to prevent some crashes */
@@ -546,6 +547,8 @@ static void mt7996_remove_interface(struct ieee80211_hw *hw,
 	ieee80211_iterate_active_interfaces_mtx(hw, 0, mt7996_remove_iter,
 						&rdata);
 
+	cancel_delayed_work(&mvif->beacon_mon_work);
+
 	mutex_lock(&dev->mt76.mutex);
 
 	conf = link_conf_dereference_protected(vif, 0);
@@ -1241,6 +1244,9 @@ mt7996_mac_sta_remove_links(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
 	unsigned int link_id;
 
+	if (!ieee80211_vif_is_mld(vif) || rem == sta->valid_links)
+		cancel_delayed_work(&mvif->beacon_mon_work);
+
 	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
 		struct mt7996_bss_conf *mconf =
 			mconf_dereference_protected(mvif, link_id);
@@ -2733,6 +2739,61 @@ out:
 	return ret;
 }
 
+static void
+mt7996_event_callback(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+		      const struct ieee80211_event *event)
+{
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	int i;
+
+	switch (event->type) {
+	case MLME_EVENT:
+		if (event->u.mlme.data == ASSOC_EVENT &&
+		    event->u.mlme.status == MLME_SUCCESS) {
+			struct ieee80211_bss_conf *conf;
+			struct mt7996_bss_conf *mconf;
+			struct mt7996_phy *phy;
+			unsigned long cur, valid_links = vif->valid_links ?: BIT(0);
+			unsigned int link_id;
+			int next_time = INT_MAX;
+
+			mutex_lock(&dev->mt76.mutex);
+			cur = jiffies;
+			for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+				conf = link_conf_dereference_protected(vif, link_id);
+				mconf = mconf_dereference_protected(mvif, link_id);
+
+				if (!conf || !mconf)
+					continue;
+
+				phy = mconf->phy;
+				mvif->beacon_received_time[phy->mt76->band_idx] = cur;
+				next_time = min(next_time,
+						MT7996_MAX_BEACON_LOSS *
+						conf->beacon_int);
+			}
+
+			ieee80211_queue_delayed_work(hw, &mvif->beacon_mon_work,
+						     msecs_to_jiffies(next_time));
+			mutex_unlock(&dev->mt76.mutex);
+			break;
+		}
+
+		mutex_lock(&dev->mt76.mutex);
+		memset(mvif->probe_send_count, 0, sizeof(mvif->probe_send_count));
+		for (i = 0; i < __MT_MAX_BAND; i++)
+			mvif->probe[i] = NULL;
+		mvif->lost_links = 0;
+		mutex_unlock(&dev->mt76.mutex);
+
+		cancel_delayed_work(&mvif->beacon_mon_work);
+		break;
+	default:
+		break;
+	}
+}
+
 const struct ieee80211_ops mt7996_ops = {
 	.add_chanctx = ieee80211_emulate_add_chanctx,
 	.remove_chanctx = ieee80211_emulate_remove_chanctx,
@@ -2790,6 +2851,7 @@ const struct ieee80211_ops mt7996_ops = {
 	.net_fill_forward_path = mt7996_net_fill_forward_path,
 	.net_setup_tc = mt76_wed_net_setup_tc,
 #endif
+	.event_callback = mt7996_event_callback,
 	.add_chanctx = mt7996_add_chanctx,
 	.remove_chanctx = mt7996_remove_chanctx,
 	.change_chanctx = mt7996_change_chanctx,
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index b6454ede..86d65aab 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -2985,7 +2985,7 @@ int mt7996_mcu_beacon_inband_discov(struct mt7996_dev *dev,
 #define OFFLOAD_TX_MODE_SU	BIT(0)
 #define OFFLOAD_TX_MODE_MU	BIT(1)
 	struct ieee80211_vif *vif = conf->vif;
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct ieee80211_hw *hw = mt76_hw(dev);
 	struct mt7996_phy *phy = mconf->phy;
 	struct cfg80211_chan_def *chandef = &mconf->phy->mt76->chandef;
 	enum nl80211_band band = chandef->chan->band;
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 0103c4fd..a93bd891 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -144,6 +144,10 @@
 
 #define to_rssi(field, rcpi)	((FIELD_GET(field, rcpi) - 220) / 2)
 
+#define MT7996_MAX_BEACON_LOSS		20
+#define MT7996_MAX_PROBE_TIMEOUT	500
+#define MT7996_MAX_PROBE_TRIES		2
+
 struct mt7996_vif;
 struct mt7996_sta;
 struct mt7996_dfs_pulse;
@@ -372,6 +376,14 @@ struct mt7996_vif {
 	u8 mld_remap_id;
 
 	u8 band_to_link[__MT_MAX_BAND];
+
+	/* for beacon monitoring */
+	struct delayed_work beacon_mon_work;
+	unsigned long beacon_received_time[__MT_MAX_BAND];
+	u16 lost_links;
+	void *probe[__MT_MAX_BAND];
+	unsigned long probe_send_time[__MT_MAX_BAND];
+	int probe_send_count[__MT_MAX_BAND];
 };
 
 /* crash-dump */
@@ -1137,6 +1149,7 @@ bool mt7996_rx_check(struct mt76_dev *mdev, void *data, int len);
 void mt7996_stats_work(struct work_struct *work);
 void mt7996_scan_work(struct work_struct *work);
 void mt7996_scan_complete(struct mt7996_phy *phy, bool aborted);
+void mt7996_beacon_mon_work(struct work_struct *work);
 int mt76_dfs_start_rdd(struct mt7996_dev *dev, bool force);
 int mt7996_dfs_init_radar_detector(struct mt7996_phy *phy);
 void mt7996_set_stream_he_eht_caps(struct mt7996_phy *phy);
-- 
2.45.2

