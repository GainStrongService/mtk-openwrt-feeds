From cc00933a4cef986e7bd4aabbdd58d0e3dc19149e Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Thu, 16 May 2024 15:59:30 +0800
Subject: [PATCH 086/149] mtk: hostapd: add support for channel switch

For extender channel switch, a 'band_idx' is necessary so that
Extender STA can tell Extender AP exactly which band is doing
a channel switch.

The original flow fails on parsing a 0 band_idx. Updated flow can
avoid the problem and also a default 'band_idx' is assigned for an
error parsing.

Another error handling is also added for the case that the iface with
target 'band_idx' is not found.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 src/ap/ucode.c         | 20 +++++++++++++++++++-
 wpa_supplicant/ucode.c | 31 ++++++++++++++++++++++++++++---
 2 files changed, 47 insertions(+), 4 deletions(-)

diff --git a/src/ap/ucode.c b/src/ap/ucode.c
index 1c9275ce2..e8d163943 100644
--- a/src/ap/ucode.c
+++ b/src/ap/ucode.c
@@ -698,7 +698,7 @@ uc_hostapd_iface_switch_channel(uc_vm_t *vm, size_t nargs)
 	struct hostapd_config *conf;
 	struct csa_settings csa = {};
 	uint64_t intval;
-	int i, ret = 0;
+	int i, ret = 0, band_idx;
 
 	wpa_printf(MSG_INFO, "ucode: mtk: channel switch for %s\n", iface->phy);
 	if (!iface || ucv_type(info) != UC_OBJECT)
@@ -732,6 +732,9 @@ uc_hostapd_iface_switch_channel(uc_vm_t *vm, size_t nargs)
 	if ((intval = ucv_int64_get(ucv_object_get(info, "center_freq2", NULL))) && !errno)
 		csa.freq_params.center_freq2 = intval;
 
+	intval = ucv_int64_get(ucv_object_get(info, "band_idx", NULL));
+	band_idx = errno ? iface->conf->band_idx : intval;
+
 	wpa_printf(MSG_INFO, "ucode: mtk: switch channel information:\n");
 	wpa_printf(MSG_INFO, "    * freq is %d\n", csa.freq_params.freq);
 	wpa_printf(MSG_INFO, "    * bandwidth is %d\n",
@@ -742,6 +745,21 @@ uc_hostapd_iface_switch_channel(uc_vm_t *vm, size_t nargs)
 			csa.freq_params.center_freq1);
 	wpa_printf(MSG_INFO, "    * center_freq2 is %d\n",
 			csa.freq_params.center_freq2);
+	wpa_printf(MSG_INFO, "    * band_idx is %d\n",
+			band_idx);
+
+#ifdef CONFIG_IEEE80211BE
+	for (i = 0; i < iface->interfaces->count; i++) {
+		if (band_idx == iface->interfaces->iface[i]->conf->band_idx) {
+			iface = iface->interfaces->iface[i];
+			wpa_printf(MSG_INFO, "ucode: mtk: MLD: switch to iface with band_idx %d \n", band_idx);
+			break;
+		}
+	}
+
+	if (band_idx != iface->bss[0]->iconf->band_idx)
+		return NULL;
+#endif /* CONFIG_IEEE80211BE */
 
 	for (i = 0; i < iface->num_bss; i++) {
 		ret = hostapd_switch_channel(iface->bss[i], &csa);
diff --git a/wpa_supplicant/ucode.c b/wpa_supplicant/ucode.c
index ac0639a90..050bed6ae 100644
--- a/wpa_supplicant/ucode.c
+++ b/wpa_supplicant/ucode.c
@@ -99,9 +99,10 @@ void wpas_ucode_event(struct wpa_supplicant *wpa_s, int event, union wpa_event_d
 	const char *state;
 	uc_value_t *val;
 	enum oper_chan_width ch_width;
-	int center_freq1, bw320_offset = 1;
+	int control_freq, center_freq1, bw320_offset = 1, band_idx;
 
-	if (event != EVENT_CH_SWITCH_STARTED)
+	if (event != EVENT_CH_SWITCH_STARTED &&
+	    event != EVENT_LINK_CH_SWITCH_STARTED)
 		return;
 
 	val = wpa_ucode_registry_get(iface_registry, wpa_s->ucode.idx);
@@ -117,7 +118,13 @@ void wpas_ucode_event(struct wpa_supplicant *wpa_s, int event, union wpa_event_d
 	val = ucv_object_new(vm);
 	uc_value_push(ucv_get(val));
 
-	if (event == EVENT_CH_SWITCH_STARTED) {
+	if (event == EVENT_CH_SWITCH_STARTED ||
+	    event == EVENT_LINK_CH_SWITCH_STARTED) {
+		enum hostapd_hw_mode hw_mode;
+		int is_24ghz;
+		u8 channel;
+
+		control_freq = data->ch_switch.freq;
 		center_freq1 = data->ch_switch.cf1;
 
 		switch (data->ch_switch.ch_width) {
@@ -147,6 +154,23 @@ void wpas_ucode_event(struct wpa_supplicant *wpa_s, int event, union wpa_event_d
 		     center_freq1 == 6905)
 			bw320_offset = 2;
 
+		hw_mode = ieee80211_freq_to_chan(control_freq, &channel);
+		is_24ghz = hw_mode == HOSTAPD_MODE_IEEE80211G ||
+			hw_mode == HOSTAPD_MODE_IEEE80211B;
+		/*
+		 * Assume that the mapping between band and band_idx is
+		 * 2 GHz band: band_idx 0
+		 * 5 GHz band: band_idx 1
+		 * 6 GHz band: band_idx 2
+		 * */
+		if (is_24ghz)
+			band_idx = 0;
+		else if (IS_5GHZ(control_freq))
+			band_idx = 1;
+		else if (is_6ghz_freq(control_freq))
+			band_idx = 2;
+
+
 		ucv_object_add(val, "csa_count", ucv_int64_new(data->ch_switch.count));
 		ucv_object_add(val, "frequency", ucv_int64_new(data->ch_switch.freq));
 		ucv_object_add(val, "sec_chan_offset", ucv_int64_new(data->ch_switch.ch_offset));
@@ -154,6 +178,7 @@ void wpas_ucode_event(struct wpa_supplicant *wpa_s, int event, union wpa_event_d
 		ucv_object_add(val, "center_freq2", ucv_int64_new(data->ch_switch.cf2));
 		ucv_object_add(val, "ch_width", ucv_int64_new(ch_width));
 		ucv_object_add(val, "bw320_offset", ucv_int64_new(bw320_offset));
+		ucv_object_add(val, "band_idx", ucv_int64_new(band_idx));
 	}
 
 	ucv_put(wpa_ucode_call(4));
-- 
2.45.2

