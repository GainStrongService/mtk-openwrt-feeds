From 8219d6c56fcb0d83a27ac87488939d6251b8f1d5 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Thu, 17 Oct 2024 15:50:35 +0800
Subject: [PATCH 142/149] mtk: hostapd: add support for removing AP MLD

Add the support for removing AP MLD by a new hostapd_cli command:
$ hostapd_cli -i global raw REMOVE_MLD <ifname>

The removal of an AP MLD involves removing affiliated links one by
one, as the way we remove the BSS, and finally cleaup the hostapd_mld.
If one link removal fails, the process still continues with the
next link.

Also note that the last AP MLD cannot be removed until there is no
remaining legacy BSS. It is because only one wpa_driver_nl80211_data
will be created if AP MLDs and legacy BSSes are setup on each band,
but after all MLD APs are removed, there should be one
wpa_driver_nl80211_data on each band for the legacy BSSes to operate
normally. Otherwise, hostapd might crash somewhere.

To prevent the hostapd crash, we have the limitation on the REMOVE_MLD
operation:
all legacy BSSes should be removed first, then the last AP MLD can be
removed.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 hostapd/ctrl_iface.c | 14 +++++++
 src/ap/hostapd.c     | 93 ++++++++++++++++++++++++++++++++++++++++++++
 src/ap/hostapd.h     |  1 +
 3 files changed, 108 insertions(+)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 70588f238..6c63eb207 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -7181,6 +7181,17 @@ static int hostapd_ctrl_bss_remove(struct hapd_interfaces *interfaces,
 }
 
 
+static int hostapd_ctrl_mld_remove(struct hapd_interfaces *interfaces,
+				   char *buf)
+{
+	if (hostapd_remove_mld(interfaces, buf) < 0) {
+		wpa_printf(MSG_ERROR, "Removing AP MLD %s failed", buf);
+		return -1;
+	}
+	return 0;
+}
+
+
 static int hostapd_ctrl_iface_remove(struct hapd_interfaces *interfaces,
 				     char *buf)
 {
@@ -7601,6 +7612,9 @@ static void hostapd_global_ctrl_iface_receive(int sock, void *eloop_ctx,
 	} else if (os_strncmp(buf, "REMOVE_BSS ", 11) == 0) {
 		if (hostapd_ctrl_bss_remove(interfaces, buf + 11) < 0)
 			reply_len = -1;
+	} else if (os_strncmp(buf, "REMOVE_MLD ", 11) == 0) {
+		if (hostapd_ctrl_mld_remove(interfaces, buf + 11) < 0)
+			reply_len = -1;
 	} else if (os_strcmp(buf, "ATTACH") == 0) {
 		if (hostapd_global_ctrl_iface_attach(interfaces, &from,
 						     fromlen, NULL))
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 6cdaaeb26..c34fb0f88 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -4332,6 +4332,99 @@ int hostapd_remove_iface(struct hapd_interfaces *interfaces, char *buf)
 }
 
 
+static int hostapd_remove_mld_link_by_idx(struct hostapd_iface *iface, int idx)
+{
+	size_t j;
+	int ret;
+
+	if (iface->num_bss == 1) {
+		hostapd_remove_iface(iface->interfaces, iface->phy);
+		return 0;
+	}
+
+	if (idx == 0) {
+		for (j = 1; j < iface->num_bss; j++) {
+			if (iface->bss[j]->conf->mld_ap)
+				break;
+		}
+
+		if (j == iface->num_bss)
+			return -1;
+
+		ret = hostapd_move_bss_to_first(iface, j);
+		if (ret) {
+			wpa_printf(MSG_ERROR, "Interface switch failed");
+			return ret;
+		}
+
+		idx = j;
+	}
+
+	return hostapd_remove_bss_by_idx(iface, idx);
+}
+
+int hostapd_remove_mld(struct hapd_interfaces *interfaces, char *buf)
+{
+	struct hostapd_iface *iface;
+	struct hostapd_data *first_hapd;
+	struct hostapd_mld *mld = NULL;
+	int ret, i, j, num_mld, first_hapd_idx;
+
+	for (i = 0; i < interfaces->mld_count; i++) {
+		if (interfaces->mld[i] &&
+		    os_strcmp(interfaces->mld[i]->name, buf) == 0) {
+			mld = interfaces->mld[i];
+			break;
+		}
+	}
+
+	if (!mld) {
+		wpa_printf(MSG_ERROR, "MLD not found");
+		return -1;
+	}
+
+	for (i = 0; i < interfaces->count; i++) {
+		iface = interfaces->iface[i];
+		if (!iface)
+			continue;
+
+		num_mld = 0;
+		for (j = 0; j < iface->num_bss; j++) {
+			if (hostapd_is_mld_ap(iface->bss[j]))
+				num_mld++;
+		}
+
+		if (num_mld == 1 && iface->num_bss > 1) {
+			wpa_printf(MSG_ERROR,
+				   "Cannot remove the last AP MLD while there are remaining legacy BSSes");
+			return -1;
+		}
+	}
+
+	for (i = interfaces->count - 1; i >= 0; i--) {
+		iface = interfaces->iface[i];
+		if (!iface)
+			continue;
+
+		for (j = 0; j < iface->num_bss; j++) {
+			if (os_strcmp(iface->bss[j]->conf->iface, mld->name) == 0) {
+				if (hostapd_mld_is_first_bss(iface->bss[j])) {
+					first_hapd = iface->bss[j];
+					first_hapd_idx = j;
+					break;
+				}
+
+				hostapd_remove_mld_link_by_idx(iface, j);
+			}
+		}
+	}
+
+	hostapd_remove_mld_link_by_idx(first_hapd->iface, first_hapd_idx);
+	hostapd_cleanup_unused_mlds(interfaces);
+	return 0;
+}
+
+
 /**
  * hostapd_new_assoc_sta - Notify that a new station associated with the AP
  * @hapd: Pointer to BSS data
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 10f3c68eb..f746aec14 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -946,6 +946,7 @@ void hostapd_cleanup_iface_partial(struct hostapd_iface *iface);
 int hostapd_add_iface(struct hapd_interfaces *ifaces, char *buf);
 int hostapd_remove_bss(struct hapd_interfaces *ifaces, char *buf);
 int hostapd_remove_iface(struct hapd_interfaces *ifaces, char *buf);
+int hostapd_remove_mld(struct hapd_interfaces *ifaces, char *buf);
 void hostapd_channel_list_updated(struct hostapd_iface *iface, int initiator);
 void hostapd_set_state(struct hostapd_iface *iface, enum hostapd_iface_state s);
 const char * hostapd_state_text(enum hostapd_iface_state s);
-- 
2.45.2

