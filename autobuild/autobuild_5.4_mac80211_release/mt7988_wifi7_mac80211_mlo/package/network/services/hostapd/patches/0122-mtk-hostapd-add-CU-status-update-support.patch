From 552eec036489a6da8d3fd8b9267512d24fa4e106 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Mon, 29 Jul 2024 10:09:42 +0800
Subject: [PATCH 122/149] mtk: hostapd: add CU status update support

Update the CUF status when a CU event notification is sent by kernel
Also, refactor the CU flag mechanism to support different dtim period
in different bss.
For example, if Link 0 has a DTIM period of 100, while Links 1 & 2 have
a DTIM period of 2, the CU flag of link 0 should only be cleared after
the DTIM count of its beacon reaches 0, which may occur much later than
when links 1 and 2 clear their CU flags.
Therefore, the BSS should only consider its own CU flag rather than the
partner links' CU flag when filling its own capabilities.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 hostapd/ctrl_iface.c               |  7 ----
 src/ap/beacon.c                    | 35 ++++++++++++--------
 src/ap/dfs.c                       |  7 ----
 src/ap/drv_callbacks.c             | 52 ++++++++++++++++++++++++++----
 src/ap/hostapd.c                   |  8 +----
 src/ap/ieee802_11.c                | 10 ++----
 src/ap/ucode.c                     |  3 --
 src/drivers/driver.h               | 18 +++++++++++
 src/drivers/driver_nl80211_event.c | 49 ++++++++++++++++++++++++++++
 src/drivers/nl80211_copy.h         | 27 ++++++++++++++++
 10 files changed, 164 insertions(+), 52 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index fad27ec0f..d118e3a7c 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2981,13 +2981,6 @@ static int hostapd_ctrl_iface_chan_switch(struct hostapd_iface *iface,
 #ifdef CONFIG_IEEE80211BE
 		if (iface->bss[i]->conf->mld_ap)
 			hostapd_update_aff_link_beacon(iface->bss[i], settings.cs_count);
-
-		/*
-		 * Currently, no FW notification event for clearing CU flag after DTIM period.
-		 * Also, another CU or set beacon is not allowed during CSA period.
-		 * Therefore, just clear it manually here for workaround.
-		 */
-		iface->bss[i]->eht_mld_bss_critical_update = 0;
 #endif /* CONFIG_IEEE80211BE */
 	}
 
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index d7fcbb728..892ebfeb7 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -3317,7 +3317,6 @@ static void hostapd_gen_per_sta_profiles(struct hostapd_data *hapd)
 int ieee802_11_set_beacon(struct hostapd_data *hapd)
 {
 	struct hostapd_iface *iface = hapd->iface;
-	struct hostapd_data *h;
 	int ret, link_id;
 	size_t i, j;
 	bool is_6g, hapd_mld = false;
@@ -3372,16 +3371,9 @@ int ieee802_11_set_beacon(struct hostapd_data *hapd)
 	for_each_mld_link(link_bss, hapd) {
 		hostapd_gen_per_sta_profiles(link_bss);
 
-		/* clear critical update flag for UPDATE_SINGLE type & link adding,
-		 * for other types, we should get some notified events from driver
-		 */
-		if (h->eht_mld_bss_critical_update == BSS_CRIT_UPDATE_SINGLE)
-			h->eht_mld_bss_critical_update = 0;
-		if (h->eht_mld_bss_critical_update == BSS_CRIT_UPDATE_FLAG &&
-		    (h->mld->link_reconf_in_progress & BIT(h->mld_link_id))) {
-			h->mld->link_reconf_in_progress &= ~BIT(h->mld_link_id);
-			h->eht_mld_bss_critical_update = 0;
-		}
+		if (link_bss->eht_mld_bss_critical_update == BSS_CRIT_UPDATE_FLAG &&
+		    (link_bss->mld->link_reconf_in_progress & BIT(link_bss->mld_link_id)))
+			link_bss->mld->link_reconf_in_progress &= ~BIT(link_bss->mld_link_id);
 	}
 #endif /* CONFIG_IEEE80211BE */
 
@@ -3423,6 +3415,8 @@ int ieee802_11_update_beacons(struct hostapd_iface *iface)
 int ieee802_11_set_bss_critical_update(struct hostapd_data *hapd,
 				       enum bss_crit_update_event event)
 {
+	struct hostapd_data *h;
+
 	if (!hapd->conf->mld_ap)
 		return 0;
 
@@ -3441,7 +3435,7 @@ int ieee802_11_set_bss_critical_update(struct hostapd_data *hapd,
 	case BSS_CRIT_UPDATE_EVENT_TPE:
 		hapd->eht_mld_bss_param_change += 1;
 		hapd->eht_mld_bss_critical_update = BSS_CRIT_UPDATE_ALL;
-		return 0;
+		break;
 	case BSS_CRIT_UPDATE_EVENT_EDCA:
 	case BSS_CRIT_UPDATE_EVENT_DSSS:
 	case BSS_CRIT_UPDATE_EVENT_HT_OPERATION:
@@ -3453,16 +3447,29 @@ int ieee802_11_set_bss_critical_update(struct hostapd_data *hapd,
 	case BSS_CRIT_UPDATE_EVENT_EHT_OPERATION:
 		hapd->eht_mld_bss_param_change += 1;
 		hapd->eht_mld_bss_critical_update = BSS_CRIT_UPDATE_SINGLE;
-		return 0;
+		break;
 	case BSS_CRIT_UPDATE_EVENT_RECONFIG:
-	case BSS_CRIT_UPDATE_EVENT_ADD_LINK:
 	case BSS_CRIT_UPDATE_EVENT_ATTLM:
+		hapd->eht_mld_bss_critical_update = BSS_CRIT_UPDATE_FLAG;
+		break;
+	case BSS_CRIT_UPDATE_EVENT_ADD_LINK:
+		/* only set the CU flag for the links in link_reconf_in_progress */
 		hapd->eht_mld_bss_critical_update = BSS_CRIT_UPDATE_FLAG;
 		return 0;
 	default:
 		hapd->eht_mld_bss_critical_update = BSS_CRIT_UPDATE_NONE;
 		return -1;
 	}
+
+	/* only set the CU flag for the non-CU links */
+	for_each_mld_link(h, hapd) {
+		if (h == hapd)
+			continue;
+
+		h->eht_mld_bss_critical_update = BSS_CRIT_UPDATE_FLAG;
+	}
+
+	return 0;
 }
 
 #endif /* CONFIG_NATIVE_WINDOWS */
diff --git a/src/ap/dfs.c b/src/ap/dfs.c
index 9dd63b22e..96f6e7c85 100644
--- a/src/ap/dfs.c
+++ b/src/ap/dfs.c
@@ -1146,13 +1146,6 @@ static int hostapd_dfs_request_channel_switch(struct hostapd_iface *iface,
 #ifdef CONFIG_IEEE80211BE
 		if (iface->bss[i]->conf->mld_ap)
 			hostapd_update_aff_link_beacon(iface->bss[i], csa_settings.cs_count);
-
-		/*
-		 * Currently, no FW notification event for clearing CU flag after DTIM period.
-		 * Also, another CU or set beacon is not allowed during CSA period.
-		 * Therefore, just clear it manually here for workaround.
-		 */
-		iface->bss[i]->eht_mld_bss_critical_update = 0;
 #endif /* CONFIG_IEEE80211BE */
 	}
 
diff --git a/src/ap/drv_callbacks.c b/src/ap/drv_callbacks.c
index 5dc680a0b..e25b90da8 100644
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -1482,7 +1482,44 @@ void hostapd_event_attlm(struct hostapd_data *hapd, struct attlm_event *attlm_ev
 	}
 
 	ieee802_11_set_beacon(hapd);
-	hapd->eht_mld_bss_critical_update = 0;
+}
+
+
+static void hostapd_event_update_crit_update_flag(struct hostapd_data *hapd, u8 flag)
+{
+	const char *type;
+
+	if (!hapd->conf->mld_ap || !hapd->mld)
+		return;
+
+	switch (flag) {
+	case CRIT_UPDATE_NONE:
+		hapd->eht_mld_bss_critical_update = 0;
+		type = "UPDATE_NONE";
+		break;
+	case CRIT_UPDATE_SINGLE:
+		hapd->eht_mld_bss_critical_update = BSS_CRIT_UPDATE_SINGLE;
+		hapd->eht_mld_bss_param_change += 1;
+		type = "UPDATE_SINGLE";
+		break;
+	case CRIT_UPDATE_ALL:
+		hapd->eht_mld_bss_critical_update = BSS_CRIT_UPDATE_ALL;
+		hapd->eht_mld_bss_param_change += 1;
+		type = "UPDATE_ALL";
+		break;
+	case CRIT_UPDATE_FLAG:
+		hapd->eht_mld_bss_critical_update = BSS_CRIT_UPDATE_FLAG;
+		type = "UPDATE_FLAG";
+		break;
+	default:
+		wpa_printf(MSG_DEBUG, "Unknown critical update type");
+		return;
+	}
+
+	wpa_printf(MSG_DEBUG,
+		   "MLD: set critical update flag to %s (bpcc=%d) for %s link %d",
+		   type, hapd->eht_mld_bss_param_change, hapd->mld->name,
+		   hapd->mld_link_id);
 }
 #endif /* CONFIG_IEEE80211BE */
 
@@ -2684,11 +2721,6 @@ static void hostapd_event_pp_bitmap_update(struct hostapd_data *hapd,
 		if (iface->bss[i]->conf->mld_ap)
 			hostapd_update_aff_link_beacon(iface->bss[i],
 						       csa_settings.cs_count);
-
-		/* FIXME:
-		 * CU flag should be cleared when receiving DTIM event from FW
-		 */
-		iface->bss[i]->eht_mld_bss_critical_update = 0;
 #endif /* CONFIG_IEEE80211BE */
 	}
 }
@@ -3080,6 +3112,14 @@ void hostapd_wpa_event(void *ctx, enum wpa_event_type event,
 	case EVENT_LINK_RECONFIG:
 		hostapd_link_remove_cb(hapd, data->reconfig_info.removed_links);
 		break;
+	case EVENT_CRIT_UPDATE:
+		if (!data)
+			break;
+		hapd = switch_link_hapd(hapd, data->crit_update_info.link_id);
+#ifdef CONFIG_IEEE80211BE
+		hostapd_event_update_crit_update_flag(hapd, data->crit_update_info.flag);
+#endif /* CONFIG_IEEE80211BE */
+		break;
 #endif /* CONFIG_IEEE80211AX */
 #ifdef CONFIG_IEEE80211BE
 	case EVENT_MLD_INTERFACE_FREED:
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index cd21aad92..321d03434 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -479,7 +479,6 @@ void hostapd_link_remove_cb(struct hostapd_data *hapd, u16 removed_links)
 		if (!(BIT(link->mld_link_id) & removed_links))
 			continue;
 
-		link->eht_mld_bss_critical_update = 0;
 		eloop_register_timeout(0, 0,
 				       hostapd_link_remove_timeout_handler,
 				       link, NULL);
@@ -4636,9 +4635,6 @@ static int hostapd_fill_csa_settings(struct hostapd_data *hapd,
 		return ret;
 	}
 
-	/* Change back to the final BPCC and CU flag */
-	ieee802_11_set_bss_critical_update(hapd, BSS_CRIT_UPDATE_EVENT_EHT_OPERATION);
-
 	settings->counter_offset_beacon[0] = hapd->cs_c_off_beacon;
 	settings->counter_offset_presp[0] = hapd->cs_c_off_proberesp;
 	settings->counter_offset_beacon[1] = hapd->cs_c_off_ecsa_beacon;
@@ -4772,6 +4768,7 @@ int hostapd_update_aff_link_beacon(struct hostapd_data *hapd, u8 cs_count)
 					mode ? &mode->eht_capab[IEEE80211_MODE_AP] : NULL,
 					hostapd_get_punct_bitmap(h));
 		hapd->cs_freq_params.channel = 0;
+		ieee802_11_set_bss_critical_update(hapd, BSS_CRIT_UPDATE_EVENT_EHT_OPERATION);
 		ret = hostapd_build_beacon_data(h, &settings.beacon_after);
 		hostapd_change_config_freq(hapd, hapd->iconf,
 					   &old_freq, NULL);
@@ -4788,9 +4785,6 @@ int hostapd_update_aff_link_beacon(struct hostapd_data *hapd, u8 cs_count)
 			return ret;
 		}
 
-		/* Change back to the final BPCC and CU flag */
-		ieee802_11_set_bss_critical_update(hapd, BSS_CRIT_UPDATE_EVENT_EHT_OPERATION);
-
 		settings.counter_offset_sta_prof[cs_link_id][0] =
 						h->cs_c_off_sta_prof[cs_link_id];
 		settings.counter_offset_sta_prof[cs_link_id][1] =
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 117bf587e..b29d4d983 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -348,14 +348,8 @@ u16 hostapd_own_capab_info(struct hostapd_data *hapd)
 	}
 
 #ifdef CONFIG_IEEE80211BE
-	if (hapd->conf->mld_ap) {
-		for_each_mld_link(h, hapd) {
-			if (h->eht_mld_bss_critical_update) {
-				capab |= WLAN_CAPABILITY_PBCC;
-				break;
-			}
-		}
-	}
+	if (hapd->conf->mld_ap && hapd->eht_mld_bss_critical_update)
+		capab |= WLAN_CAPABILITY_PBCC;
 #endif /* CONFIG_IEEE80211BE */
 
 
diff --git a/src/ap/ucode.c b/src/ap/ucode.c
index c413c88fa..23437bc79 100644
--- a/src/ap/ucode.c
+++ b/src/ap/ucode.c
@@ -770,9 +770,6 @@ uc_hostapd_iface_switch_channel(uc_vm_t *vm, size_t nargs)
 
 		if (iface->bss[i]->conf->mld_ap)
 			hostapd_update_aff_link_beacon(iface->bss[i], csa.cs_count);
-
-		/* FIXME: remove this line after CU event merged */
-		iface->bss[i]->eht_mld_bss_critical_update = 0;
 	}
 
 	return ucv_boolean_new(!ret);
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 146a3c144..4d9733450 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -6285,6 +6285,11 @@ enum wpa_event_type {
 	 * has been applied and a channel switch should be triggered.
 	 */
 	EVENT_PP_BITMAP_UPDATE,
+
+	/**
+	 * EVENT_CRIT_UPDATE - Notification of the status of a critical update event
+	 */
+	EVENT_CRIT_UPDATE,
 };
 
 
@@ -7298,6 +7303,19 @@ union wpa_event_data {
 	struct reconfig_info {
 		u16 removed_links;
 	} reconfig_info;
+
+	/**
+	 * struct crit_update_info - Data for EVENT_CRIT_UPDATE
+	 */
+	struct crit_update_info {
+		int link_id;
+		enum {
+			CRIT_UPDATE_NONE,
+			CRIT_UPDATE_SINGLE,
+			CRIT_UPDATE_ALL,
+			CRIT_UPDATE_FLAG,
+		} flag;
+	} crit_update_info;
 };
 
 /**
diff --git a/src/drivers/driver_nl80211_event.c b/src/drivers/driver_nl80211_event.c
index 8bc2a3119..ef2537cde 100644
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -190,6 +190,7 @@ static const char * nl80211_command_to_string(enum nl80211_commands cmd)
 	C2S(NL80211_CMD_SET_TID_TO_LINK_MAPPING)
 	C2S(NL80211_CMD_ATTLM_EVENT)
 	C2S(NL80211_CMD_SET_ATTLM)
+	C2S(NL80211_CMD_NOTIFY_CRIT_UPDATE)
 	C2S(__NL80211_CMD_AFTER_LAST)
 	}
 #undef C2S
@@ -4117,6 +4118,51 @@ static void nl80211_links_removed(struct wpa_driver_nl80211_data *drv,
 }
 
 
+static void nl80211_notify_crit_update(struct wpa_driver_nl80211_data *drv,
+				       struct nlattr **tb)
+{
+	struct i802_bss *bss;
+	union wpa_event_data data;
+	enum nl80211_crit_update_event event_type;
+	int ifidx;
+
+	if (!tb[NL80211_ATTR_IFINDEX] || !tb[NL80211_ATTR_MLO_LINK_ID] ||
+	    !tb[NL80211_ATTR_CRTI_UPDATE_EVENT])
+		return;
+
+	ifidx = nla_get_u32(tb[NL80211_ATTR_IFINDEX]);
+	bss = get_bss_ifindex(drv, ifidx);
+	if (!bss) {
+		wpa_printf(MSG_ERROR,
+			   "nl80211: Unknown ifindex (%d) for critical update event, ignoring",
+			   ifidx);
+		return;
+	}
+
+	data.crit_update_info.link_id = nla_get_u8(tb[NL80211_ATTR_MLO_LINK_ID]);
+	event_type = nla_get_u8(tb[NL80211_ATTR_CRTI_UPDATE_EVENT]);
+	switch (event_type) {
+	case NL80211_CRIT_UPDATE_NONE:
+		data.crit_update_info.flag = CRIT_UPDATE_NONE;
+		break;
+	case NL80211_CRIT_UPDATE_SINGLE:
+		data.crit_update_info.flag = CRIT_UPDATE_SINGLE;
+		break;
+	case NL80211_CRIT_UPDATE_ALL:
+		data.crit_update_info.flag = CRIT_UPDATE_ALL;
+		break;
+	case NL80211_CRIT_UPDATE_FLAG:
+		data.crit_update_info.flag = CRIT_UPDATE_FLAG;
+		break;
+	default:
+		wpa_printf(MSG_DEBUG,
+			   "nl80211: Unknown critical update event");
+		return;
+	}
+	wpa_supplicant_event(bss->ctx, EVENT_CRIT_UPDATE, &data);
+}
+
+
 static void do_process_drv_event(struct i802_bss *bss, int cmd,
 				 struct nlattr **tb)
 {
@@ -4388,6 +4434,9 @@ static void do_process_drv_event(struct i802_bss *bss, int cmd,
 	case NL80211_CMD_LINKS_REMOVED:
 		nl80211_links_removed(drv, tb);
 		break;
+	case NL80211_CMD_NOTIFY_CRIT_UPDATE:
+		nl80211_notify_crit_update(drv, tb);
+		break;
 	default:
 		wpa_dbg(drv->ctx, MSG_DEBUG, "nl80211: Ignored unknown event "
 			"(cmd=%d)", cmd);
diff --git a/src/drivers/nl80211_copy.h b/src/drivers/nl80211_copy.h
index 8ddddf411..b8d3aca30 100644
--- a/src/drivers/nl80211_copy.h
+++ b/src/drivers/nl80211_copy.h
@@ -1329,6 +1329,9 @@
  *      %NL80211_ATTR_MLO_TTLM_ULINK attributes are used to specify the
  *      TID to Link mapping for downlink/uplink traffic.
  *
+ * @NL80211_CMD_NOTIFY_CRIT_UPDATE: Notify the userspace that the status of a
+ *	critical update event was changed.
+ *
  * @NL80211_CMD_MAX: highest used command number
  * @__NL80211_CMD_AFTER_LAST: internal use
  */
@@ -1591,6 +1594,7 @@ enum nl80211_commands {
 	/* MTK internal */
 	NL80211_CMD_ATTLM_EVENT,
 	NL80211_CMD_SET_ATTLM,
+	NL80211_CMD_NOTIFY_CRIT_UPDATE,
 
 	/* used to define NL80211_CMD_MAX below */
 	__NL80211_CMD_AFTER_LAST,
@@ -3459,6 +3463,8 @@ enum nl80211_attrs {
 	NL80211_ATTR_MLO_ATTLM_EVENT,
 	NL80211_ATTR_MLO_ATTLM_SWITCH_TIME_TSF_TU,
 
+	NL80211_ATTR_CRTI_UPDATE_EVENT,
+
 	__NL80211_ATTR_AFTER_LAST,
 	NUM_NL80211_ATTR = __NL80211_ATTR_AFTER_LAST,
 	NL80211_ATTR_MAX = __NL80211_ATTR_AFTER_LAST - 1
@@ -8144,4 +8150,25 @@ enum nl80211_attlm_event {
 	NL80211_ATTLM_END,
 };
 
+/**
+ * enum nl80211_crit_update_event - type of critical update event
+ *
+ * Type of event to be used with NL80211_ATTR_CRTI_UPDATE_EVENT to inform userspace
+ * about the status of the current critical update flag.
+ *
+ * @NL80211_CRIT_UPDATE_NONE: clear the critical update flag.
+ * @NL80211_CRIT_UPDATE_SINGLE: update the BPCC of a single BSS and
+ *	set the critical update flag of the BSS.
+ * @NL80211_CRIT_UPDATE_ALL: update the BPCC of all the BSSes and
+ *	set the critical update flag of all the BSSes.
+ * @NL80211_CRIT_UPDATE_FLAG: set the critical update flag without updating BPCC.
+ */
+
+enum nl80211_crit_update_event {
+	NL80211_CRIT_UPDATE_NONE,
+	NL80211_CRIT_UPDATE_SINGLE,
+	NL80211_CRIT_UPDATE_ALL,
+	NL80211_CRIT_UPDATE_FLAG
+};
+
 #endif /* __LINUX_NL80211_H */
-- 
2.45.2

