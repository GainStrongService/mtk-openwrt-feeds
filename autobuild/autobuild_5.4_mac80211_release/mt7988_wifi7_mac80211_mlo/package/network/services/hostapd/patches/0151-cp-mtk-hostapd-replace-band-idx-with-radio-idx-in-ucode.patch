From 2e3a67b8cb8871b0986e1254b46746eb44afbde4 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Thu, 19 Dec 2024 11:57:41 +0800
Subject: [PATCH 2/3] mtk: hostapd: replace band idx with radio idx in ucode

Replace band idx with radio idx in ucode.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 src/ap/ucode.c            | 65 ++++++++++++++++++++++-----------------
 src/utils/ucode.c         |  6 ++--
 wpa_supplicant/driver_i.h | 11 +++++++
 wpa_supplicant/ucode.c    | 65 +++++++++++++++++----------------------
 4 files changed, 79 insertions(+), 68 deletions(-)

diff --git a/src/ap/ucode.c b/src/ap/ucode.c
index b7efe35cb..b08d1a7da 100644
--- a/src/ap/ucode.c
+++ b/src/ap/ucode.c
@@ -502,7 +502,7 @@ uc_hostapd_iface_stop(uc_vm_t *vm, size_t nargs)
 		return NULL;
 
 	wpa_printf(MSG_INFO, "ucode: mtk: stop iface for %s in state %s\n",
-			iface->phy, hostapd_state_text(iface->state));
+		   iface->phy, hostapd_state_text(iface->state));
 
 	if (iface->state != HAPD_IFACE_ENABLED)
 		uc_hostapd_disable_iface(iface);
@@ -554,10 +554,10 @@ uc_hostapd_iface_start(uc_vm_t *vm, size_t nargs)
 	struct hostapd_config *conf;
 	bool changed = false;
 	uint64_t intval;
-	int i, band_idx;
+	int i, radio_idx;
 
 	wpa_printf(MSG_INFO, "ucode: mtk: start iface for %s in state %s\n",
-			iface->phy, hostapd_state_text(iface->state));
+		   iface->phy, hostapd_state_text(iface->state));
 
 	if (!iface)
 		return NULL;
@@ -570,21 +570,26 @@ uc_hostapd_iface_start(uc_vm_t *vm, size_t nargs)
 	if (ucv_type(info) != UC_OBJECT)
 		return NULL;
 
-	intval = ucv_int64_get(ucv_object_get(info, "band_idx", NULL));
-	band_idx = errno ? iface->conf->band_idx : intval;
+	intval = ucv_int64_get(ucv_object_get(info, "radio_idx", NULL));
+	radio_idx = intval;
+	if (errno)
+		radio_idx = iface->current_hw_info ? iface->current_hw_info->hw_idx : 0;
 
 #ifdef CONFIG_IEEE80211BE
 	if (hostapd_is_mld_ap(iface->bss[0])) {
 		for_each_mld_link(tmp_hapd, iface->bss[0]) {
-			if (band_idx == tmp_hapd->iconf->band_idx) {
-				wpa_printf(MSG_INFO, "ucode: mtk: MLD: switch to iface with band_idx %d \n", band_idx);
+			if (tmp_hapd->iface->current_hw_info &&
+			    radio_idx == tmp_hapd->iface->current_hw_info->hw_idx) {
+				wpa_printf(MSG_INFO,
+					   "ucode: mtk: MLD: switch to iface with radio_idx %d\n",
+					   radio_idx);
 				iface = tmp_hapd->iface;
 				break;
 			}
 		}
 	}
 
-	if (band_idx != iface->bss[0]->iconf->band_idx)
+	if (iface->current_hw_info && radio_idx != iface->current_hw_info->hw_idx)
 		return NULL;
 #endif /* CONFIG_IEEE80211BE */
 
@@ -665,14 +670,13 @@ out:
 	wpa_printf(MSG_INFO, "ucode: mtk: updated channel information:\n");
 	wpa_printf(MSG_INFO, "    * channel: %d\n", conf->channel);
 	wpa_printf(MSG_INFO, "    * op_class: %d\n", conf->op_class);
-	wpa_printf(MSG_INFO, "    * secondary channel: %d\n",
-			conf->secondary_channel);
+	wpa_printf(MSG_INFO, "    * secondary channel: %d\n", conf->secondary_channel);
 	wpa_printf(MSG_INFO, "    * seg0: %d\n",
-			hostapd_get_oper_centr_freq_seg0_idx(conf));
+		   hostapd_get_oper_centr_freq_seg0_idx(conf));
 	wpa_printf(MSG_INFO, "    * seg1: %d\n",
-			hostapd_get_oper_centr_freq_seg1_idx(conf));
+		   hostapd_get_oper_centr_freq_seg1_idx(conf));
 	wpa_printf(MSG_INFO, "    * oper_chwidth: %d\n",
-			hostapd_get_oper_chwidth(conf));
+		   hostapd_get_oper_chwidth(conf));
 
 	for (i = 0; i < iface->num_bss; i++) {
 		struct hostapd_data *hapd = iface->bss[i];
@@ -707,7 +711,7 @@ uc_hostapd_iface_switch_channel(uc_vm_t *vm, size_t nargs)
 	struct hostapd_config *conf;
 	struct csa_settings csa = {};
 	uint64_t intval;
-	int i, ret = 0, band_idx;
+	int i, ret = 0, radio_idx;
 
 	wpa_printf(MSG_INFO, "ucode: mtk: channel switch for %s\n", iface->phy);
 	if (!iface || ucv_type(info) != UC_OBJECT)
@@ -743,34 +747,39 @@ uc_hostapd_iface_switch_channel(uc_vm_t *vm, size_t nargs)
 	if ((intval = ucv_int64_get(ucv_object_get(info, "punct_bitmap", NULL))) && !errno)
 		csa.freq_params.punct_bitmap = intval;
 
-	intval = ucv_int64_get(ucv_object_get(info, "band_idx", NULL));
-	band_idx = errno ? iface->conf->band_idx : intval;
+	intval = ucv_int64_get(ucv_object_get(info, "radio_idx", NULL));
+	radio_idx = intval;
+	if (errno)
+		radio_idx = iface->current_hw_info ? iface->current_hw_info->hw_idx : 0;
 
 	wpa_printf(MSG_INFO, "ucode: mtk: switch channel information:\n");
 	wpa_printf(MSG_INFO, "    * freq is %d\n", csa.freq_params.freq);
-	wpa_printf(MSG_INFO, "    * bandwidth is %d\n",
-			csa.freq_params.bandwidth);
+	wpa_printf(MSG_INFO, "    * bandwidth is %d\n", csa.freq_params.bandwidth);
 	wpa_printf(MSG_INFO, "    * sec_chan_offset is %d\n",
-			csa.freq_params.sec_channel_offset);
+		   csa.freq_params.sec_channel_offset);
 	wpa_printf(MSG_INFO, "    * center_freq1 is %d\n",
-			csa.freq_params.center_freq1);
+		   csa.freq_params.center_freq1);
 	wpa_printf(MSG_INFO, "    * center_freq2 is %d\n",
-			csa.freq_params.center_freq2);
+		   csa.freq_params.center_freq2);
 	wpa_printf(MSG_INFO, "    * punct_bitmap is %d\n",
-			csa.freq_params.punct_bitmap);
-	wpa_printf(MSG_INFO, "    * band_idx is %d\n",
-			band_idx);
+		   csa.freq_params.punct_bitmap);
+	wpa_printf(MSG_INFO, "    * radio_idx is %d\n", radio_idx);
 
 #ifdef CONFIG_IEEE80211BE
 	for (i = 0; i < iface->interfaces->count; i++) {
-		if (band_idx == iface->interfaces->iface[i]->conf->band_idx) {
-			iface = iface->interfaces->iface[i];
-			wpa_printf(MSG_INFO, "ucode: mtk: MLD: switch to iface with band_idx %d \n", band_idx);
+		struct hostapd_iface *tmp_iface = iface->interfaces->iface[i];
+
+		if (tmp_iface->current_hw_info &&
+		    radio_idx == tmp_iface->current_hw_info->hw_idx) {
+			wpa_printf(MSG_INFO,
+				   "ucode: mtk: MLD: switch to iface with radio_idx %d\n",
+				   radio_idx);
+			iface = tmp_iface;
 			break;
 		}
 	}
 
-	if (band_idx != iface->bss[0]->iconf->band_idx)
+	if (iface->current_hw_info && radio_idx != iface->current_hw_info->hw_idx)
 		return NULL;
 #endif /* CONFIG_IEEE80211BE */
 
diff --git a/src/utils/ucode.c b/src/utils/ucode.c
index 27aca7f92..187a9cb53 100644
--- a/src/utils/ucode.c
+++ b/src/utils/ucode.c
@@ -111,7 +111,7 @@ uc_value_t *uc_wpa_freq_info(uc_vm_t *vm, size_t nargs)
 	uc_value_t *sec = uc_fn_arg(1);
 	int width = ucv_uint64_get(uc_fn_arg(2));
 	int punct_bitmap = ucv_uint64_get(uc_fn_arg(5));
-	int bw320_offset = 1, band_idx;
+	int bw320_offset = 1, radio_idx;
 	int freq_val, center_idx, center_ofs;
 	enum oper_chan_width chanwidth;
 	enum hostapd_hw_mode hw_mode;
@@ -124,7 +124,7 @@ uc_value_t *uc_wpa_freq_info(uc_vm_t *vm, size_t nargs)
 		return NULL;
 
 	freq_val = ucv_int64_get(freq);
-	band_idx = ucv_int64_get(uc_fn_arg(4));
+	radio_idx = ucv_int64_get(uc_fn_arg(4));
 	if (ucv_type(sec) == UC_INTEGER)
 		sec_channel = ucv_int64_get(sec);
 	else if (sec)
@@ -185,7 +185,7 @@ uc_value_t *uc_wpa_freq_info(uc_vm_t *vm, size_t nargs)
 	ucv_object_add(ret, "sec_channel", ucv_int64_new(sec_channel));
 	ucv_object_add(ret, "frequency", ucv_int64_new(freq_val));
 	ucv_object_add(ret, "oper_chwidth", ucv_int64_new(chanwidth));
-	ucv_object_add(ret, "band_idx", ucv_int64_new(band_idx));
+	ucv_object_add(ret, "radio_idx", ucv_int64_new(radio_idx));
 	ucv_object_add(ret, "punct_bitmap", ucv_int64_new(punct_bitmap));
 
 	if (chanwidth == CONF_OPER_CHWIDTH_USE_HT) {
diff --git a/wpa_supplicant/driver_i.h b/wpa_supplicant/driver_i.h
index 8183a3ce5..ec33abdf9 100644
--- a/wpa_supplicant/driver_i.h
+++ b/wpa_supplicant/driver_i.h
@@ -1261,4 +1261,15 @@ wpas_drv_nan_cancel_subscribe(struct wpa_supplicant *wpa_s, int subscribe_id)
 						   subscribe_id);
 }
 
+static inline struct hostapd_multi_hw_info *
+wpas_drv_get_multi_hw_info(struct wpa_supplicant *wpa_s,
+			   unsigned int *num_multi_hws)
+{
+	if (!wpa_s->driver->get_multi_hw_info)
+		return NULL;
+
+	return wpa_s->driver->get_multi_hw_info(wpa_s->drv_priv,
+						num_multi_hws);
+}
+
 #endif /* DRIVER_I_H */
diff --git a/wpa_supplicant/ucode.c b/wpa_supplicant/ucode.c
index 813514ea6..d98cb8564 100644
--- a/wpa_supplicant/ucode.c
+++ b/wpa_supplicant/ucode.c
@@ -15,6 +15,27 @@ static uc_resource_type_t *global_type, *iface_type;
 static uc_value_t *global, *iface_registry;
 static uc_vm_t *vm;
 
+static int
+wpas_ucode_get_radio_idx(struct wpa_supplicant *wpa_s, int freq)
+{
+	struct hostapd_multi_hw_info *multi_hw_info, *hw_info;
+	unsigned int num_multi_hws;
+	int i;
+
+	multi_hw_info = wpas_drv_get_multi_hw_info(wpa_s, &num_multi_hws);
+	if (!multi_hw_info)
+		return 0;
+
+	for (i = 0; i < num_multi_hws; i++) {
+		hw_info = &multi_hw_info[i];
+
+		if (hw_info->start_freq <= freq && hw_info->end_freq >= freq)
+			return hw_info->hw_idx;
+	}
+
+	return 0;
+}
+
 static uc_value_t *
 wpas_ucode_iface_get_uval(struct wpa_supplicant *wpa_s)
 {
@@ -99,7 +120,7 @@ void wpas_ucode_event(struct wpa_supplicant *wpa_s, int event, union wpa_event_d
 	const char *state;
 	uc_value_t *val;
 	enum oper_chan_width oper_chwidth;
-	int control_freq, center_freq1, bw320_offset = 1, band_idx;
+	int control_freq, center_freq1, bw320_offset = 1, radio_idx;
 
 	if (event != EVENT_CH_SWITCH_STARTED &&
 	    event != EVENT_LINK_CH_SWITCH_STARTED)
@@ -120,10 +141,6 @@ void wpas_ucode_event(struct wpa_supplicant *wpa_s, int event, union wpa_event_d
 
 	if (event == EVENT_CH_SWITCH_STARTED ||
 	    event == EVENT_LINK_CH_SWITCH_STARTED) {
-		enum hostapd_hw_mode hw_mode;
-		int is_24ghz;
-		u8 channel;
-
 		if (wpa_s->wpa_state < WPA_COMPLETED) {
 			wpa_printf(MSG_INFO,
 				   "ucode: mtk: receive channel switch event"
@@ -162,22 +179,7 @@ void wpas_ucode_event(struct wpa_supplicant *wpa_s, int event, union wpa_event_d
 		     center_freq1 == 6905)
 			bw320_offset = 2;
 
-		hw_mode = ieee80211_freq_to_chan(control_freq, &channel);
-		is_24ghz = hw_mode == HOSTAPD_MODE_IEEE80211G ||
-			hw_mode == HOSTAPD_MODE_IEEE80211B;
-		/*
-		 * Assume that the mapping between band and band_idx is
-		 * 2 GHz band: band_idx 0
-		 * 5 GHz band: band_idx 1
-		 * 6 GHz band: band_idx 2
-		 * */
-		if (is_24ghz)
-			band_idx = 0;
-		else if (IS_5GHZ(control_freq))
-			band_idx = 1;
-		else if (is_6ghz_freq(control_freq))
-			band_idx = 2;
-
+		radio_idx = wpas_ucode_get_radio_idx(wpa_s, control_freq);
 
 		ucv_object_add(val, "csa_count", ucv_int64_new(data->ch_switch.count));
 		ucv_object_add(val, "frequency", ucv_int64_new(data->ch_switch.freq));
@@ -187,7 +189,7 @@ void wpas_ucode_event(struct wpa_supplicant *wpa_s, int event, union wpa_event_d
 		ucv_object_add(val, "ch_width", ucv_int64_new(oper_chwidth));
 		ucv_object_add(val, "bw320_offset", ucv_int64_new(bw320_offset));
 		ucv_object_add(val, "punct_bitmap", ucv_int64_new(data->ch_switch.punct_bitmap));
-		ucv_object_add(val, "band_idx", ucv_int64_new(band_idx));
+		ucv_object_add(val, "radio_idx", ucv_int64_new(radio_idx));
 	}
 
 	ucv_put(wpa_ucode_call(4));
@@ -285,7 +287,7 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t nargs)
 	u8 op_class, channel;
 	enum chan_width chwidth;
 	enum oper_chan_width oper_chwidth = CONF_OPER_CHWIDTH_USE_HT;
-	int center_freq1, bw320_offset = 1, is_24ghz, band_idx;
+	int center_freq1, bw320_offset = 1, is_24ghz, radio_idx;
 	enum hostapd_hw_mode hw_mode;
 	int link_id = ucv_int64_get(link_obj);
 	u32 freq;
@@ -305,19 +307,8 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t nargs)
 
 		hw_mode = ieee80211_freq_to_chan(bss->freq, &channel);
 		is_24ghz = hw_mode == HOSTAPD_MODE_IEEE80211G ||
-			hw_mode == HOSTAPD_MODE_IEEE80211B;
-		/*
-		 * Assume that the mapping between band and band_idx is
-		 * 2 GHz band: band_idx 0
-		 * 5 GHz band: band_idx 1
-		 * 6 GHz band: band_idx 2
-		 * */
-		if (is_24ghz)
-			band_idx = 0;
-		else if (IS_5GHZ(bss->freq))
-			band_idx = 1;
-		else if (is_6ghz_freq(bss->freq))
-			band_idx = 2;
+			   hw_mode == HOSTAPD_MODE_IEEE80211B;
+		radio_idx = wpas_ucode_get_radio_idx(wpa_s, bss->freq);
 
 		if (wpa_s->valid_links) {
 			freq = wpa_s->links[link_id].freq;
@@ -354,7 +345,7 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t nargs)
 		ucv_object_add(ret, "frequency", ucv_int64_new(freq));
 		ucv_object_add(ret, "ch_width", ucv_int64_new(oper_chwidth));
 		ucv_object_add(ret, "bw320_offset", ucv_int64_new(bw320_offset));
-		ucv_object_add(ret, "band_idx", ucv_int64_new(band_idx));
+		ucv_object_add(ret, "radio_idx", ucv_int64_new(radio_idx));
 		ucv_object_add(ret, "punct_bitmap", ucv_int64_new(punct_bitmap));
 	}
 
-- 
2.45.2

