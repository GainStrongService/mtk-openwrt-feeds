From 4699615a71c52c5d4034580de564ca4a89ddef79 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Wed, 18 Dec 2024 22:40:07 +0800
Subject: [PATCH 1/3] mtk: hostapd: change vendor cmd band idx into radio idx

The purpose of this patch is to remove band idx from hostapd.
Regarding the issue of whether we should use radio_idx or
link_id (such as rfeature/wireless ctrl) for per-band
vendor commands, this can be further discussed.
Both of them work, but in my opinion, radio idx is less misleading
and simpler.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 hostapd/ctrl_iface.c         | 101 +++++++----------------------------
 hostapd/ctrl_iface.h         |   2 -
 src/ap/ap_drv_ops.c          |  32 +++++++++--
 src/common/mtk_vendor.h      |   4 +-
 src/drivers/driver.h         |  12 ++---
 src/drivers/driver_nl80211.c |  58 ++++++++++++++++----
 6 files changed, 104 insertions(+), 105 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 47fba39d4..717edf508 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -4599,30 +4599,6 @@ hostapd_ctrl_iface_set_mu(struct hostapd_data *hapd, char *cmd,
 		if (cnt < 1 || val[0] > 15)
 			goto para_fail;
 
-		if (hostapd_is_mld_ap(hapd)) {
-			u8 band_idx;
-
-			if (cnt != 2)
-				goto para_fail;
-
-			band_idx = val[1];
-
-			for (i = 0; i < hapd->iface->interfaces->count; i++) {
-				struct hostapd_iface *iface;
-
-				iface = hapd->iface->interfaces->iface[i];
-				if (!iface || !iface->conf)
-					continue;
-
-				if (iface->conf->band_idx == band_idx) {
-					hapd = iface->bss[0];
-					break;
-				}
-			}
-			if (hapd->iface->conf->band_idx != band_idx)
-				goto para_fail;
-		}
-
 		hapd->iconf->mu_onoff = val[0];
 		os_free(val);
 		if (hostapd_drv_mu_ctrl(hapd, MU_CTRL_ONOFF) != 0)
@@ -4640,7 +4616,6 @@ hostapd_ctrl_iface_set_mu(struct hostapd_data *hapd, char *cmd,
 	comm = &muru->comm;
 
 	if (os_strncmp(config, "update", 6) == 0) {
-		// [ToDo] "update" needs to support band_idx argument
 		ret = hostapd_drv_mu_ctrl(hapd, MU_CTRL_UPDATE);
 
 		os_free(hapd->iconf->muru_config);
@@ -4792,48 +4767,33 @@ fail:
 }
 
 static int
-hostapd_ctrl_iface_get_mu(struct hostapd_data *hapd, char *input, char *buf,
-			  size_t buflen)
+hostapd_ctrl_iface_get_mu(struct hostapd_data *hapd, char *buf, size_t buflen)
 {
-	u8 mu_onoff;
+	u8 mu_onoff, radio_idx = 0;
 	char *pos, *end;
+	int ret;
 
 	pos = buf;
 	end = buf + buflen;
 
-	if (hostapd_is_mld_ap(hapd)) {
-		u8 band_idx, i;
-
-		band_idx = (u8)atoi(input);
-
-		for (i = 0; i < hapd->iface->interfaces->count; i++) {
-			struct hostapd_iface *iface;
-
-			iface = hapd->iface->interfaces->iface[i];
-			if (!iface || !iface->conf)
-				continue;
-
-			if (iface->conf->band_idx == band_idx) {
-				hapd = iface->bss[0];
-				break;
-			}
-		}
-		if (hapd->iface->conf->band_idx != band_idx)
-			return os_snprintf(pos, end - pos, "Invalid band idx to get_mu\n");
-	}
-
 	if (hapd->iface->state != HAPD_IFACE_ENABLED)
-		return os_snprintf(pos, end - pos, "Not allowed to get_mu when current state is %s\n",
+		return os_snprintf(pos, end - pos,
+				   "Not allowed to get_mu when current state is %s\n",
 				   hostapd_state_text(hapd->iface->state));
 
-	if (hostapd_drv_mu_dump(hapd, &mu_onoff) == 0) {
-		hapd->iconf->mu_onoff = mu_onoff;
-		return os_snprintf(pos, end - pos, "Band idx %u: UL MU-MIMO: %d, DL MU-MIMO: %d, UL OFDMA: %d, DL OFDMA: %d\n",
-			hapd->iconf->band_idx, !!(mu_onoff&BIT(3)), !!(mu_onoff&BIT(2)), !!(mu_onoff&BIT(1)), !!(mu_onoff&BIT(0)));
-	} else {
+	if (hostapd_drv_mu_dump(hapd, &mu_onoff)) {
 		wpa_printf(MSG_INFO, "ctrl iface failed to call");
 		return -1;
 	}
+
+	hapd->iconf->mu_onoff = mu_onoff;
+	if (hapd->iface->current_hw_info)
+		radio_idx = hapd->iface->current_hw_info->hw_idx;
+	ret = os_snprintf(pos, end - pos,
+			  "Radio %u: UL MU-MIMO: %d, DL MU-MIMO: %d, UL OFDMA: %d, DL OFDMA: %d\n",
+			  radio_idx, !!(mu_onoff & BIT(3)), !!(mu_onoff & BIT(2)),
+			  !!(mu_onoff & BIT(1)), !!(mu_onoff & BIT(0)));
+	return ret;
 }
 
 
@@ -5277,27 +5237,6 @@ hostapd_ctrl_iface_set_background_radar_mode(struct hostapd_data *hapd, char *cm
 	return os_snprintf(buf, buflen, "OK\n");
 }
 
-struct hostapd_data *
-hostapd_get_hapd_by_band_idx(struct hostapd_data *hapd, u8 band_idx)
-{
-	struct hostapd_data *link;
-
-	if (!hostapd_is_mld_ap(hapd))
-		return hapd;
-
-	for_each_mld_link(link, hapd) {
-		if (link->iconf->band_idx == band_idx)
-			break;
-	}
-
-	if (!link || link->iconf->band_idx != band_idx) {
-		wpa_printf(MSG_ERROR, "Invalid band idx %d\n", band_idx);
-		return NULL;
-	}
-
-	return link;
-}
-
 static int
 hostapd_ctrl_iface_set_pp(struct hostapd_data *hapd, char *cmd, char *buf,
 			  size_t buflen)
@@ -5382,7 +5321,7 @@ hostapd_ctrl_iface_set_eml_resp(struct hostapd_data *hapd, char *value,
 	for_each_mld_link(link, hapd) {
 		link->iconf->eml_resp = val[0];
 		wpa_printf(MSG_ERROR, "Link:%d, Response EML:%d\n",
-			   link->iconf->band_idx, link->iconf->eml_resp);
+			   link->mld_link_id, link->iconf->eml_resp);
 	}
 
 	os_free(val);
@@ -5398,7 +5337,7 @@ fail:
 
 static int
 hostapd_ctrl_iface_set_csi(struct hostapd_data *hapd, char *cmd,
-					char *buf, size_t buflen)
+			   char *buf, size_t buflen)
 {
 	char *tmp;
 	u8 sta_mac[ETH_ALEN] = {0};
@@ -5534,7 +5473,7 @@ static int mt76_csi_to_json(char *fname, struct csi_resp_data *resp_buf)
 
 static int
 hostapd_ctrl_iface_dump_csi(struct hostapd_data *hapd, char *cmd,
-				char *buf, size_t buflen)
+			    char *buf, size_t buflen)
 {
 	char *tmp, *fname;
 	int data_cnt = 0, ret = 0;
@@ -6287,7 +6226,7 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "SET_MU ", 7) == 0) {
 		reply_len = hostapd_ctrl_iface_set_mu(hapd, buf + 7, reply, reply_size);
 	} else if (os_strncmp(buf, "GET_MU ", 7) == 0) {
-		reply_len = hostapd_ctrl_iface_get_mu(hapd, buf + 7, reply, reply_size);
+		reply_len = hostapd_ctrl_iface_get_mu(hapd, reply, reply_size);
 	} else if (os_strncmp(buf, "GET_IBF", 7) == 0) {
 		reply_len = hostapd_ctrl_iface_get_ibf(hapd, reply, reply_size);
 	} else if (os_strncmp(buf, "DFS_DETECT_MODE ", 16) == 0) {
@@ -6333,7 +6272,7 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 							      reply_size);
 	} else if (os_strncmp(buf, "SET_CSI ", 7) == 0) {
 		reply_len = hostapd_ctrl_iface_set_csi(hapd, buf + 8,
-							reply, reply_size);
+						       reply, reply_size);
 	} else if (os_strncmp(buf, "DUMP_CSI ", 8) == 0) {
 		reply_len = hostapd_ctrl_iface_dump_csi(hapd, buf + 9,
 							reply, reply_size);
diff --git a/hostapd/ctrl_iface.h b/hostapd/ctrl_iface.h
index 237b628f5..06a848394 100644
--- a/hostapd/ctrl_iface.h
+++ b/hostapd/ctrl_iface.h
@@ -37,6 +37,4 @@ hostapd_global_ctrl_iface_deinit(struct hapd_interfaces *interface)
 {
 }
 #endif /* CONFIG_NO_CTRL_IFACE */
-struct hostapd_data *
-hostapd_get_hapd_by_band_idx(struct hostapd_data *hapd, u8 band_idx);
 #endif /* CTRL_IFACE_H */
diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index 05ab924a5..f938cf5cd 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -1387,16 +1387,28 @@ int hostapd_drv_get_edcca(struct hostapd_data *hapd, const u8 mode, u8 *value)
 
 int hostapd_drv_mu_ctrl(struct hostapd_data *hapd, u8 mode)
 {
+	s8 link_id = -1;
+
 	if (!hapd->driver || !hapd->driver->mu_ctrl)
 		return 0;
-	return hapd->driver->mu_ctrl(hapd->drv_priv, mode, hapd->iconf);
+
+	if (hapd->conf->mld_ap)
+		link_id = hapd->mld_link_id;
+
+	return hapd->driver->mu_ctrl(hapd->drv_priv, mode, link_id);
 }
 
 int hostapd_drv_mu_dump(struct hostapd_data *hapd, u8 *mu_onoff)
 {
+	s8 link_id = -1;
+
 	if (!hapd->driver || !hapd->driver->mu_dump)
 		return 0;
-	return hapd->driver->mu_dump(hapd->drv_priv, mu_onoff, hapd->iconf->band_idx);
+
+	if (hapd->conf->mld_ap)
+		link_id = hapd->mld_link_id;
+
+	return hapd->driver->mu_dump(hapd->drv_priv, mu_onoff, link_id);
 }
 
 int hostapd_drv_three_wire_ctrl(struct hostapd_data *hapd)
@@ -1601,16 +1613,28 @@ int hostapd_drv_set_eml_omn(struct hostapd_data *hapd, u8 *mac,
 
 int hostapd_drv_csi_set(struct hostapd_data *hapd, u8 mode, u8 cfg, u8 v1, u32 v2, u8 *mac)
 {
+	s8 link_id = -1;
+
 	if (!hapd->driver || !hapd->driver->csi_set)
 		return 0;
-	return hapd->driver->csi_set(hapd->drv_priv, hapd->iconf->band_idx, mode, cfg, v1, v2, mac);
+
+	if (hapd->conf->mld_ap)
+		link_id = hapd->mld_link_id;
+
+	return hapd->driver->csi_set(hapd->drv_priv, link_id, mode, cfg, v1, v2, mac);
 }
 
 int hostapd_drv_csi_dump(struct hostapd_data *hapd, void *dump_buf)
 {
+	s8 link_id = -1;
+
 	if (!hapd->driver || !hapd->driver->csi_dump)
 		return 0;
-	return hapd->driver->csi_dump(hapd->drv_priv, hapd->iconf->band_idx, dump_buf);
+
+	if (hapd->conf->mld_ap)
+		link_id = hapd->mld_link_id;
+
+	return hapd->driver->csi_dump(hapd->drv_priv, link_id, dump_buf);
 }
 
 #ifdef CONFIG_IEEE80211BE
diff --git a/src/common/mtk_vendor.h b/src/common/mtk_vendor.h
index 4b900162b..057048337 100644
--- a/src/common/mtk_vendor.h
+++ b/src/common/mtk_vendor.h
@@ -85,7 +85,7 @@ enum mtk_vendor_attr_csi_ctrl {
 
 	MTK_VENDOR_ATTR_CSI_CTRL_DATA,
 
-        MTK_VENDOR_ATTR_CSI_CTRL_BAND_IDX,
+	MTK_VENDOR_ATTR_CSI_CTRL_RADIO_IDX,
 
 	/* keep last */
 	NUM_MTK_VENDOR_ATTRS_CSI_CTRL,
@@ -221,7 +221,7 @@ enum mtk_vendor_attr_mu_ctrl {
 	 * above data structure.
 	 */
 	MTK_VENDOR_ATTR_MU_CTRL_STRUCT,
-	MTK_VENDOR_ATTR_MU_CTRL_BAND_IDX,
+	MTK_VENDOR_ATTR_MU_CTRL_RADIO_IDX,
 
 	/* keep last */
 	NUM_MTK_VENDOR_ATTRS_MU_CTRL,
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 109155f45..ad30ae12d 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -5460,8 +5460,8 @@ struct wpa_driver_ops {
 	 * @priv: Private driver interface data
 	 *
 	 */
-	 int (*mu_ctrl)(void *priv, u8 mode, void *config);
-	 int (*mu_dump)(void *priv, u8 *mu_onoff, u8 band_idx);
+	 int (*mu_ctrl)(void *priv, u8 mode, s8 link_id);
+	 int (*mu_dump)(void *priv, u8 *mu_onoff, s8 link_id);
 
 	/**
 	 * beacon_ctrl - ctrl on off for beacon
@@ -5588,21 +5588,21 @@ struct wpa_driver_ops {
 	/**
 	 * csi_set - Set csi related mode and parameter
 	 * @priv: Private driver interface data
-	 * @band_idx: band idx
+	 * @link_id: MLD link id. -1 if this is an non-MLD AP
 	 * @mode: Csi mode parameter
 	 * @cfg: Csi config parameter
 	 * @v1: Value1
 	 * @v2: Value2
 	 * @mac: Station mac for station filter
 	 */
-	int (*csi_set)(void *priv, u8 band_idx, u8 mode, u8 cfg, u8 v1, u32 v2, u8 *mac);
+	int (*csi_set)(void *priv, s8 link_id, u8 mode, u8 cfg, u8 v1, u32 v2, u8 *mac);
 	/**
 	* csi_dump - Dump csi data to json file
 	* @priv: Private driver interface data
-	* @band_idx: band idx
+	* @link_id: MLD link id. -1 if this is an non-MLD AP
 	* @dump_buf: Dump_struct that store csi data and related info
 	*/
-	int (*csi_dump)(void *priv, u8 band_idx, void *dump_buf);
+	int (*csi_dump)(void *priv, s8 link_id, void *dump_buf);
 	/**
 	* txpower_ctrl - ctrl txpower operation
 	* @priv: Private driver interface data
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 5d08d6f1b..09ba530de 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -173,7 +173,7 @@ pp_ctrl_policy[NUM_MTK_VENDOR_ATTRS_PP_CTRL] = {
 };
 
 static struct nla_policy csi_ctrl_policy[NUM_MTK_VENDOR_ATTRS_CSI_CTRL] = {
-	[MTK_VENDOR_ATTR_CSI_CTRL_BAND_IDX] = { .type = NLA_U8 },
+	[MTK_VENDOR_ATTR_CSI_CTRL_RADIO_IDX] = { .type = NLA_U8 },
 	[MTK_VENDOR_ATTR_CSI_CTRL_CFG] = { .type = NLA_NESTED },
 	[MTK_VENDOR_ATTR_CSI_CTRL_CFG_MODE] = { .type = NLA_U8 },
 	[MTK_VENDOR_ATTR_CSI_CTRL_CFG_TYPE] = { .type = NLA_U8 },
@@ -14689,14 +14689,17 @@ fail:
 
 
 #ifdef CONFIG_IEEE80211AX
-static int nl80211_mu_ctrl(void *priv, u8 mode, void *config)
+static int nl80211_mu_ctrl(void *priv, u8 mode, s8 link_id)
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct i802_link *link = nl80211_get_link(bss, link_id);
+	struct hostapd_data *hapd = bss->ctx;
+	struct hostapd_config *cfg;
 	struct nl_msg *msg;
 	struct nlattr *data;
-	struct hostapd_config *cfg = config;
 	int ret = -ENOBUFS;
+	u8 radio_idx = 0;
 
 	if (!drv->mtk_mu_vendor_cmd_avail) {
 		wpa_printf(MSG_INFO,
@@ -14704,6 +14707,11 @@ static int nl80211_mu_ctrl(void *priv, u8 mode, void *config)
 		return 0;
 	}
 
+	if (link && link->ctx)
+		hapd = link->ctx;
+
+	cfg = hapd->iconf;
+
 	if (!(msg = nl80211_bss_msg(bss, 0, NL80211_CMD_VENDOR)) ||
 		nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_MTK) ||
 		nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD, MTK_NL80211_VENDOR_SUBCMD_MU_CTRL) ||
@@ -14712,8 +14720,11 @@ static int nl80211_mu_ctrl(void *priv, u8 mode, void *config)
 
 	switch (mode) {
 	case MU_CTRL_ONOFF:
+		if (hapd->iface->current_hw_info)
+			radio_idx = hapd->iface->current_hw_info->hw_idx;
+
 		if (nla_put_u8(msg, MTK_VENDOR_ATTR_MU_CTRL_ONOFF, cfg->mu_onoff) ||
-		    nla_put_u8(msg, MTK_VENDOR_ATTR_MU_CTRL_BAND_IDX, cfg->band_idx))
+		    nla_put_u8(msg, MTK_VENDOR_ATTR_MU_CTRL_RADIO_IDX, radio_idx))
 			goto fail;
 		break;
 	case MU_CTRL_UPDATE:
@@ -14777,13 +14788,16 @@ static int mu_dump_handler(struct nl_msg *msg, void *arg)
 	return 0;
 }
 
-static int nl80211_mu_dump(void *priv, u8 *mu_onoff, u8 band_idx)
+static int nl80211_mu_dump(void *priv, u8 *mu_onoff, s8 link_id)
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct i802_link *link = nl80211_get_link(bss, link_id);
+	struct hostapd_data *hapd = bss->ctx;
 	struct nl_msg *msg;
 	struct nlattr *attr;
 	int ret;
+	u8 radio_idx = 0;
 
 	if (!drv->mtk_mu_vendor_cmd_avail) {
 		wpa_printf(MSG_INFO,
@@ -14791,11 +14805,17 @@ static int nl80211_mu_dump(void *priv, u8 *mu_onoff, u8 band_idx)
 		return 0;
 	}
 
+	if (link && link->ctx)
+		hapd = link->ctx;
+
+	if (hapd->iface->current_hw_info)
+		radio_idx = hapd->iface->current_hw_info->hw_idx;
+
 	if (!(msg = nl80211_bss_msg(bss, NLM_F_DUMP, NL80211_CMD_VENDOR)) ||
 		nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_MTK) ||
 		nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD, MTK_NL80211_VENDOR_SUBCMD_MU_CTRL) ||
 		!(attr = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA)) ||
-		nla_put_u8(msg, MTK_VENDOR_ATTR_MU_CTRL_BAND_IDX, band_idx)) {
+		nla_put_u8(msg, MTK_VENDOR_ATTR_MU_CTRL_RADIO_IDX, radio_idx)) {
 		nlmsg_free(msg);
 		return -ENOBUFS;
 	}
@@ -15996,14 +16016,17 @@ fail:
 #endif
 
 static int
-nl80211_csi_set(void *priv, u8 band_idx, u8 mode, u8 cfg, u8 v1, u32 v2, u8 *mac)
+nl80211_csi_set(void *priv, s8 link_id, u8 mode, u8 cfg, u8 v1, u32 v2, u8 *mac)
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct i802_link *link = nl80211_get_link(bss, link_id);
+	struct hostapd_data *hapd = bss->ctx;
 	struct nl_msg *msg;
 	struct nlattr *data;
 	void *tb1, *tb2;
 	int ret, i;
+	u8 radio_idx = 0;
 
 	if (!drv->mtk_csi_vendor_cmd_avail) {
 		wpa_printf(MSG_ERROR,
@@ -16011,6 +16034,12 @@ nl80211_csi_set(void *priv, u8 band_idx, u8 mode, u8 cfg, u8 v1, u32 v2, u8 *mac
 		return 0;
 	}
 
+	if (link && link->ctx)
+		hapd = link->ctx;
+
+	if (hapd->iface->current_hw_info)
+		radio_idx = hapd->iface->current_hw_info->hw_idx;
+
 	msg = nl80211_bss_msg(bss, 0, NL80211_CMD_VENDOR);
 	if (!msg)
 		goto fail;
@@ -16024,7 +16053,7 @@ nl80211_csi_set(void *priv, u8 band_idx, u8 mode, u8 cfg, u8 v1, u32 v2, u8 *mac
 	if (!data)
 		goto fail;
 
-	nla_put_u8(msg, MTK_VENDOR_ATTR_CSI_CTRL_BAND_IDX, band_idx);
+	nla_put_u8(msg, MTK_VENDOR_ATTR_CSI_CTRL_RADIO_IDX, radio_idx);
 
 	tb1 = nla_nest_start(msg, MTK_VENDOR_ATTR_CSI_CTRL_CFG | NLA_F_NESTED);
 	if (!tb1)
@@ -16150,15 +16179,18 @@ mt76_csi_dump_cb(struct nl_msg *msg, void *arg)
 }
 
 static int
-nl80211_csi_dump(void *priv, u8 band_idx, void *dump_buf)
+nl80211_csi_dump(void *priv, s8 link_id, void *dump_buf)
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct i802_link *link = nl80211_get_link(bss, link_id);
+	struct hostapd_data *hapd = bss->ctx;
 	struct nl_msg *msg;
 	struct nlattr *data;
 	int ret;
 	struct csi_resp_data *csi_resp;
 	u16 pkt_num, i;
+	u8 radio_idx = 0;
 
 	if (!drv->mtk_csi_vendor_cmd_avail) {
 		wpa_printf(MSG_INFO,
@@ -16166,6 +16198,12 @@ nl80211_csi_dump(void *priv, u8 band_idx, void *dump_buf)
 		return 0;
 	}
 
+	if (link && link->ctx)
+		hapd = link->ctx;
+
+	if (hapd->iface->current_hw_info)
+		radio_idx = hapd->iface->current_hw_info->hw_idx;
+
 	csi_resp = (struct csi_resp_data *)dump_buf;
 	pkt_num =  csi_resp->usr_need_cnt;
 
@@ -16187,7 +16225,7 @@ nl80211_csi_dump(void *priv, u8 band_idx, void *dump_buf)
 		if (!data)
 			goto fail;
 
-		nla_put_u8(msg, MTK_VENDOR_ATTR_CSI_CTRL_BAND_IDX, band_idx);
+		nla_put_u8(msg, MTK_VENDOR_ATTR_CSI_CTRL_RADIO_IDX, radio_idx);
 		nla_put_u16(msg, MTK_VENDOR_ATTR_CSI_CTRL_DUMP_NUM, CSI_DUMP_PER_NUM);
 
 		nla_nest_end(msg, data);
-- 
2.45.2

