From 402602da208f353c02998acb7fe67c5a69883f05 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Mon, 21 Oct 2024 13:53:53 +0800
Subject: [PATCH 143/149] mtk: hostapd: refactor upstream's enable/disable MLD
 operations

Refactor the upstream's enable/disable MLD operations. It can be
triggered by hostapd_cli
$ hostapd_cli -i <ifname> enable_mld
$ hostapd_cli -i <ifname> disable_mld

The enable/disable operations are realized by enabling/disabling
each affiliated links.

Note that if one link enabling fails, the entire MLD enabling operation
is regarded as failure and therefore all links are then disabled. On the
other hand, if one link disabling fails, the process continues with next
link.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 hostapd/ctrl_iface.c | 75 ++++++++------------------------------
 src/ap/hostapd.c     | 85 ++++++++++++++++++++++++++++++++++++++++++++
 src/ap/hostapd.h     |  2 ++
 3 files changed, 102 insertions(+), 60 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 6c63eb207..47fba39d4 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -3893,77 +3893,32 @@ static int hostapd_ctrl_iface_driver_cmd(struct hostapd_data *hapd, char *cmd,
 
 
 #ifdef CONFIG_IEEE80211BE
-
-static int hostapd_ctrl_iface_enable_mld(struct hostapd_iface *iface)
+static int hostapd_ctrl_iface_enable_mld(struct hostapd_data *hapd)
 {
-	unsigned int i;
-
-	if (!iface || !iface->bss[0]->conf->mld_ap) {
-		wpa_printf(MSG_ERROR,
-			   "Trying to enable AP MLD on an interface that is not affiliated with an AP MLD");
+	if (!hostapd_is_mld_ap(hapd)) {
+		wpa_printf(MSG_ERROR, "Cannot enable leagacy BSS");
 		return -1;
 	}
 
-	for (i = 0; i < iface->interfaces->count; ++i) {
-		struct hostapd_iface *h_iface = iface->interfaces->iface[i];
-		struct hostapd_data *h_hapd = h_iface->bss[0];
-
-		if (!hostapd_is_ml_partner(h_hapd, iface->bss[0]))
-			continue;
-
-		if (hostapd_enable_iface(h_iface)) {
-			wpa_printf(MSG_ERROR, "Enabling of AP MLD failed");
-			return -1;
-		}
+	if (hostapd_enable_mld(hapd) < 0) {
+		wpa_printf(MSG_ERROR, "Enabling of MLD failed");
+		return -1;
 	}
-	return 0;
-}
-
-
-static void hostapd_disable_iface_bss(struct hostapd_iface *iface)
-{
-	unsigned int i;
 
-	for (i = 0; i < iface->num_bss; i++)
-		hostapd_bss_deinit_no_free(iface->bss[i]);
+	return 0;
 }
 
 
-static int hostapd_ctrl_iface_disable_mld(struct hostapd_iface *iface)
+static int hostapd_ctrl_iface_disable_mld(struct hostapd_data *hapd)
 {
-	unsigned int i;
-
-	if (!iface || !iface->bss[0]->conf->mld_ap) {
-		wpa_printf(MSG_ERROR,
-			   "Trying to disable AP MLD on an interface that is not affiliated with an AP MLD.");
+	if (!hostapd_is_mld_ap(hapd)) {
+		wpa_printf(MSG_ERROR, "Cannot disable legacy BSS");
 		return -1;
 	}
 
-	/* First, disable BSSs before stopping beaconing and doing driver
-	 * deinit so that the broadcast Deauthentication frames go out. */
-
-	for (i = 0; i < iface->interfaces->count; ++i) {
-		struct hostapd_iface *h_iface = iface->interfaces->iface[i];
-		struct hostapd_data *h_hapd = h_iface->bss[0];
-
-		if (!hostapd_is_ml_partner(h_hapd, iface->bss[0]))
-			continue;
-
-		hostapd_disable_iface_bss(iface);
-	}
-
-	/* Then, fully disable interfaces */
-	for (i = 0; i < iface->interfaces->count; ++i) {
-		struct hostapd_iface *h_iface = iface->interfaces->iface[i];
-		struct hostapd_data *h_hapd = h_iface->bss[0];
-
-		if (!hostapd_is_ml_partner(h_hapd, iface->bss[0]))
-			continue;
-
-		if (hostapd_disable_iface(h_iface)) {
-			wpa_printf(MSG_ERROR, "Disabling AP MLD failed");
-			return -1;
-		}
+	if (hostapd_disable_mld(hapd) < 0) {
+		wpa_printf(MSG_ERROR, "Disabling of MLD failed");
+		return -1;
 	}
 
 	return 0;
@@ -6303,10 +6258,10 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 #endif /* ANDROID */
 #ifdef CONFIG_IEEE80211BE
 	} else if (os_strcmp(buf, "ENABLE_MLD") == 0) {
-		if (hostapd_ctrl_iface_enable_mld(hapd->iface))
+		if (hostapd_ctrl_iface_enable_mld(hapd))
 			reply_len = -1;
 	} else if (os_strcmp(buf, "DISABLE_MLD") == 0) {
-		if (hostapd_ctrl_iface_disable_mld(hapd->iface))
+		if (hostapd_ctrl_iface_disable_mld(hapd))
 			reply_len = -1;
 #ifdef CONFIG_TESTING_OPTIONS
 	} else if (os_strncmp(buf, "LINK_REMOVE ", 12) == 0) {
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index c34fb0f88..ffb36a006 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -3779,6 +3779,47 @@ int hostapd_enable_bss(struct hostapd_data *hapd)
 }
 
 
+#ifdef CONFIG_IEEE80211BE
+int hostapd_enable_mld(struct hostapd_data *hapd)
+{
+	struct hostapd_mld *mld;
+	struct hostapd_data *h;
+	int ret = 0;
+
+	if (!hapd || !hostapd_is_mld_ap(hapd)) {
+		wpa_printf(MSG_ERROR,
+			   "Trying to enable AP MLD on an interface that is not affiliated with an AP MLD");
+		return -1;
+	}
+
+	mld = hapd->mld;
+	if (!mld) {
+		wpa_printf(MSG_ERROR, "No AP MLD information found");
+		return -1;
+	}
+
+	if (mld->started) {
+		wpa_printf(MSG_DEBUG, "AP MLD is already enabled");
+		return 0;
+	}
+
+	mld->started = true;
+	for_each_mld_link(h, hapd) {
+		ret = hostapd_enable_bss(h);
+
+		if (ret) {
+			wpa_printf(MSG_ERROR, "Enabling link id %d fails",
+				   h->mld_link_id);
+			hostapd_disable_mld(hapd);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+#endif /* CONFIG_IEEE80211BE */
+
+
 int hostapd_disable_iface(struct hostapd_iface *hapd_iface)
 {
 	size_t j;
@@ -3856,6 +3897,50 @@ int hostapd_disable_bss(struct hostapd_data *hapd)
 }
 
 
+#ifdef CONFIG_IEEE80211BE
+int hostapd_disable_mld(struct hostapd_data *hapd)
+{
+	struct hapd_interfaces *interfaces;
+	struct hostapd_mld *mld;
+	struct hostapd_data *h;
+	int remain_mld = 0, i;
+
+	if (!hostapd_is_mld_ap(hapd)) {
+		wpa_printf(MSG_ERROR,
+			   "Trying to disable AP MLD on an interface that is not affiliated with an AP MLD.");
+		return -1;
+	}
+
+	mld = hapd->mld;
+	if (!mld) {
+		wpa_printf(MSG_ERROR, "No AP MLD information found");
+		return -1;
+	}
+
+	if (!mld->started) {
+		wpa_printf(MSG_DEBUG, "AP MLD is already disabled");
+		return 0;
+	}
+
+	interfaces = hapd->iface->interfaces;
+	for (i = 0; i < interfaces->mld_count; i++)
+		remain_mld += interfaces->mld[i]->started ? 1 : 0;
+
+	if (remain_mld == 1) {
+		wpa_printf(MSG_ERROR, "Cannot disable last AP MLD");
+		return -1;
+	}
+
+	for_each_mld_link(h, hapd)
+		hostapd_disable_bss(h);
+
+	mld->started = false;
+
+	return 0;
+}
+#endif /* CONFIG_IEEE80211BE */
+
+
 static struct hostapd_iface *
 hostapd_iface_alloc(struct hapd_interfaces *interfaces)
 {
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index f746aec14..d7dabb027 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -1043,6 +1043,8 @@ void hostapd_event_attlm(struct hostapd_data *hapd, struct attlm_event *attlm_ev
 void hostapd_event_tsf_offset(struct hostapd_data *hapd, s64 *tsf_offset);
 bool hostapd_mld_is_first_bss(struct hostapd_data *hapd);
 void hostapd_mld_interface_freed(struct hostapd_data *hapd);
+int hostapd_enable_mld(struct hostapd_data *hapd);
+int hostapd_disable_mld(struct hostapd_data *hapd);
 
 #define for_each_mld_link(partner, self) \
 	dl_list_for_each(partner, &self->mld->links, struct hostapd_data, link)
-- 
2.45.2

