diff --git a/drivers/net/phy/aquantia/aquantia.h b/drivers/net/phy/aquantia/aquantia.h
index 5b2d4a1..9d1cee1 100644
--- a/drivers/net/phy/aquantia/aquantia.h
+++ b/drivers/net/phy/aquantia/aquantia.h
@@ -68,7 +68,7 @@
 #define VEND1_GLOBAL_LED_PROV_LINK100		BIT(5)
 #define VEND1_GLOBAL_LED_PROV_RX_ACT		BIT(3)
 #define VEND1_GLOBAL_LED_PROV_TX_ACT		BIT(2)
-#define VEND1_GLOBAL_LED_PROV_ACT_STRETCH	GENMASK(0, 1)
+#define VEND1_GLOBAL_LED_PROV_ACT_STRETCH	GENMASK(1, 0)
 
 #define VEND1_GLOBAL_LED_PROV_LINK_MASK		(VEND1_GLOBAL_LED_PROV_LINK100 | \
 						 VEND1_GLOBAL_LED_PROV_LINK1000 | \
diff --git a/drivers/net/phy/aquantia/aquantia_leds.c b/drivers/net/phy/aquantia/aquantia_leds.c
index 00ad231..67fd80c 100644
--- a/drivers/net/phy/aquantia/aquantia_leds.c
+++ b/drivers/net/phy/aquantia/aquantia_leds.c
@@ -110,11 +110,15 @@ int aqr_phy_led_hw_control_set(struct phy_device *phydev, u8 index,
 	if (rules & BIT(TRIGGER_NETDEV_TX))
 		val |= VEND1_GLOBAL_LED_PROV_TX_ACT;
 
+	/* Stretch activity by 100ms */
+	val |= VEND1_GLOBAL_LED_PROV_ACT_STRETCH;
+
 	return phy_modify_mmd(phydev, MDIO_MMD_VEND1, AQR_LED_PROV(index),
 			      VEND1_GLOBAL_LED_PROV_LINK_MASK |
 			      VEND1_GLOBAL_LED_PROV_FORCE_ON |
 			      VEND1_GLOBAL_LED_PROV_RX_ACT |
-			      VEND1_GLOBAL_LED_PROV_TX_ACT, val);
+			      VEND1_GLOBAL_LED_PROV_TX_ACT |
+			      VEND1_GLOBAL_LED_PROV_ACT_STRETCH, val);
 }
 
 int aqr_phy_led_active_low_set(struct phy_device *phydev, int index, bool enable)
diff --git a/drivers/net/phy/aquantia/aquantia_main.c b/drivers/net/phy/aquantia/aquantia_main.c
index a9ad522..811dc13 100644
--- a/drivers/net/phy/aquantia/aquantia_main.c
+++ b/drivers/net/phy/aquantia/aquantia_main.c
@@ -33,6 +33,7 @@
 #define PHY_ID_AQR813	0x31c31cb2
 #define PHY_ID_AQR112C	0x03a1b790
 #define PHY_ID_AQR112R	0x31c31d12
+#define PHY_ID_CUX3410	0x31c31dd3
 
 #define MDIO_PHYXS_VEND_IF_STATUS		0xe812
 #define MDIO_PHYXS_VEND_IF_STATUS_TYPE_MASK	GENMASK(7, 3)
@@ -178,6 +179,31 @@ static void aqr107_get_stats(struct phy_device *phydev,
 	}
 }
 
+int aqr107_config_led(struct phy_device *phydev)
+{
+	int err;
+
+	/* LED0 */
+	err = aqr_phy_led_hw_control_set(phydev, 0,
+					 BIT(TRIGGER_NETDEV_LINK_10000));
+	if (err < 0)
+		return err;
+
+	/* LED1 */
+	err = aqr_phy_led_hw_control_set(phydev, 1,
+					 BIT(TRIGGER_NETDEV_LINK_100) |
+					 BIT(TRIGGER_NETDEV_LINK_1000) |
+					 BIT(TRIGGER_NETDEV_LINK_2500) |
+					 BIT(TRIGGER_NETDEV_LINK_5000));
+	if (err < 0)
+		return err;
+
+	/* LED2 */
+	return aqr_phy_led_hw_control_set(phydev, 2,
+					 BIT(TRIGGER_NETDEV_TX) |
+					 BIT(TRIGGER_NETDEV_RX));
+}
+
 static int aqr_config_aneg(struct phy_device *phydev)
 {
 	bool changed = false;
@@ -631,6 +657,7 @@ static int aqr107_config_init(struct phy_device *phydev)
 		if (ret)
 			return ret;
 	}
+	mdelay(250);
 
 	ret = phy_clear_bits_mmd(phydev, MDIO_MMD_PMAPMD, MDIO_PMA_TXDIS,
 				 MDIO_PMD_TXDIS_GLOBAL);
@@ -645,6 +672,10 @@ static int aqr107_config_init(struct phy_device *phydev)
 	if (ret)
 		return ret;
 
+	ret = aqr107_config_led(phydev);
+	if (ret)
+		return ret;
+
 	ret = aqr107_config_mdi(phydev);
 	if (ret)
 		return ret;
@@ -1091,6 +1122,30 @@ static struct phy_driver aqr_driver[] = {
 	.get_strings	= aqr107_get_strings,
 	.get_stats	= aqr107_get_stats,
 },
+{
+	PHY_ID_MATCH_MODEL(PHY_ID_CUX3410),
+	.name		= "Aquantia CUX3410",
+	.probe		= aqr107_probe,
+	.get_rate_matching = aqr107_get_rate_matching,
+	.config_init	= aqr107_config_init,
+	.config_aneg	= aqr_config_aneg,
+	.config_intr	= aqr_config_intr,
+	.handle_interrupt	= aqr_handle_interrupt,
+	.read_status	= aqr107_read_status,
+	.get_tunable	= aqr107_get_tunable,
+	.set_tunable	= aqr107_set_tunable,
+	.suspend	= aqr107_suspend,
+	.resume		= aqr107_resume,
+	.get_sset_count = aqr107_get_sset_count,
+	.get_strings	= aqr107_get_strings,
+	.get_stats	= aqr107_get_stats,
+	.link_change_notify = aqr107_link_change_notify,
+	.led_brightness_set = aqr_phy_led_brightness_set,
+	.led_hw_is_supported = aqr_phy_led_hw_is_supported,
+	.led_hw_control_set = aqr_phy_led_hw_control_set,
+	.led_hw_control_get = aqr_phy_led_hw_control_get,
+	.led_polarity_set = aqr_phy_led_polarity_set,
+},
 };
 
 module_phy_driver(aqr_driver);
@@ -1113,6 +1168,7 @@ static struct mdio_device_id __maybe_unused aqr_tbl[] = {
 	{ PHY_ID_MATCH_MODEL(PHY_ID_AQR813) },
 	{ PHY_ID_MATCH_MODEL(PHY_ID_AQR112C) },
 	{ PHY_ID_MATCH_MODEL(PHY_ID_AQR112R) },
+	{ PHY_ID_MATCH_MODEL(PHY_ID_CUX3410) },
 	{ }
 };
 
