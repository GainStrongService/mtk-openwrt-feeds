From 13a42143a2248f038f1f31d4a15e0846c49ec45c Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Thu, 13 Mar 2025 14:09:42 +0800
Subject: [PATCH] net: ethernet: mtk_eth_soc: add EEE support for GMAC

Add EEE support for the GMAC.
  - Enable EEE with 1us TX LPI
    ethtool --set-eee eth1 eee on tx-lpi on tx-timer 1
  - Disable EEE
    ethtool --set-eee eth1 eee off
  - Dump EEE information
    ethtool --show-eee eth1

Without this patch, the users are unable to utilize ethtool for the
enabling MAC/PHY EEE capability.
---
 drivers/net/ethernet/mediatek/mtk_eth_soc.c | 83 +++++++++++++++++++++
 drivers/net/ethernet/mediatek/mtk_eth_soc.h | 12 +++
 2 files changed, 95 insertions(+)

diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.c b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
index 4cab507..1ed34e1 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -914,6 +914,41 @@ static void mtk_set_queue_speed(struct mtk_eth *eth, unsigned int idx,
 	mtk_w32(eth, val, soc->reg_map->qdma.qtx_sch + ofs);
 }
 
+static void mtk_gdm_mac_setup_eee(struct mtk_mac *mac, bool enable)
+{
+	struct mtk_eth *eth = mac->hw;
+	u32 mcr, mcr_cur;
+	u32 val;
+
+	mac->tx_lpi_enabled = enable;
+
+	mcr = mcr_cur = mtk_r32(eth, MTK_MAC_MCR(mac->id));
+	mcr &= ~(MAC_MCR_FORCE_EEE100 | MAC_MCR_FORCE_EEE1000);
+
+	if (enable) {
+		val = FIELD_PREP(MAC_EEE_WAKEUP_TIME_1000, 19) |
+		      FIELD_PREP(MAC_EEE_WAKEUP_TIME_100, 33) |
+		      FIELD_PREP(MAC_EEE_LPI_TXIDLE_THD,
+				 DIV_ROUND_UP(mac->tx_lpi_timer, 1000)) |
+		      FIELD_PREP(MAC_EEE_RESV0, 14);
+		mtk_w32(eth, val, MTK_MAC_EEE(mac->id));
+
+		switch (mac->speed) {
+		case SPEED_1000:
+			mcr |= MAC_MCR_FORCE_EEE1000;
+			break;
+		case SPEED_100:
+			mcr |= MAC_MCR_FORCE_EEE100;
+			break;
+		};
+	} else
+		mtk_w32(eth, 0x00000002, MTK_MAC_EEE(mac->id));
+
+	/* Only update control register when needed! */
+	if (mcr != mcr_cur)
+		mtk_w32(eth, mcr, MTK_MAC_MCR(mac->id));
+}
+
 static void mtk_gdm_mac_link_up(struct mtk_mac *mac,
 				struct phy_device *phy,
 				unsigned int mode, phy_interface_t interface,
@@ -950,6 +985,9 @@ static void mtk_gdm_mac_link_up(struct mtk_mac *mac,
 
 	mcr |= MAC_MCR_TX_EN | MAC_MCR_RX_EN | MAC_MCR_FORCE_LINK;
 	mtk_w32(mac->hw, mcr, MTK_MAC_MCR(mac->id));
+
+	if (mode == MLO_AN_PHY && phy)
+		mtk_gdm_mac_setup_eee(mac, phy_init_eee(phy, false) >= 0);
 }
 
 static void mtk_xgdm_mac_link_up(struct mtk_mac *mac,
@@ -5329,6 +5367,47 @@ static int mtk_set_rxfh(struct net_device *dev, const u32 *indir,
 	return 0;
 }
 
+static int mtk_get_eee(struct net_device *dev, struct ethtool_eee *eee)
+{
+	struct mtk_mac *mac = netdev_priv(dev);
+	u32 reg;
+	int ret;
+
+	ret = phylink_ethtool_get_eee(mac->phylink, eee);
+	if (ret)
+		return ret;
+
+	if (!mtk_interface_mode_is_xgmii(mac->interface)) {
+		reg = mtk_r32(mac->hw, MTK_MAC_EEE(mac->id));
+
+		eee->tx_lpi_enabled = mac->tx_lpi_enabled;
+		eee->tx_lpi_timer = FIELD_GET(MAC_EEE_LPI_TXIDLE_THD, reg) * 1000;
+	}
+
+	return 0;
+}
+
+static int mtk_set_eee(struct net_device *dev, struct ethtool_eee *eee)
+{
+	struct mtk_mac *mac = netdev_priv(dev);
+	int ret;
+
+	return phylink_ethtool_set_eee(mac->phylink, eee);
+	if (ret)
+		return ret;
+
+	if (!mtk_interface_mode_is_xgmii(mac->interface)) {
+		if (eee->tx_lpi_enabled && eee->tx_lpi_timer > 255)
+			return -EINVAL;
+
+		mac->tx_lpi_timer = eee->tx_lpi_timer * 1000;
+
+		mtk_gdm_mac_setup_eee(mac, eee->eee_enabled && eee->tx_lpi_timer);
+	}
+
+	return 0;
+}
+
 static u16 mtk_select_queue(struct net_device *dev, struct sk_buff *skb,
 			    struct net_device *sb_dev)
 {
@@ -5365,6 +5444,8 @@ static const struct ethtool_ops mtk_ethtool_ops = {
 	.get_rxfh_indir_size	= mtk_get_rxfh_indir_size,
 	.get_rxfh		= mtk_get_rxfh,
 	.set_rxfh		= mtk_set_rxfh,
+	.get_eee		= mtk_get_eee,
+	.set_eee		= mtk_set_eee,
 };
 
 static const struct net_device_ops mtk_netdev_ops = {
@@ -5632,6 +5713,8 @@ static int mtk_add_mac(struct mtk_eth *eth, struct device_node *np)
 	mac->interface = PHY_INTERFACE_MODE_NA;
 	mac->speed = SPEED_UNKNOWN;
 
+	mac->tx_lpi_timer = 1000;
+
 	mac->phylink_config.dev = &eth->netdev[id]->dev;
 	mac->phylink_config.type = PHYLINK_NETDEV;
 	mac->phylink_config.mac_capabilities = MAC_ASYM_PAUSE | MAC_SYM_PAUSE |
diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.h b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
index 2c536d7..434b424 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.h
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
@@ -547,6 +547,8 @@
 #define MAC_MCR_RX_FIFO_CLR_DIS	BIT(12)
 #define MAC_MCR_BACKOFF_EN	BIT(9)
 #define MAC_MCR_BACKPR_EN	BIT(8)
+#define MAC_MCR_FORCE_EEE1000	BIT(7)
+#define MAC_MCR_FORCE_EEE100	BIT(6)
 #define MAC_MCR_FORCE_RX_FC	BIT(5)
 #define MAC_MCR_FORCE_TX_FC	BIT(4)
 #define MAC_MCR_SPEED_1000	BIT(3)
@@ -555,6 +557,14 @@
 #define MAC_MCR_FORCE_LINK	BIT(0)
 #define MAC_MCR_FORCE_LINK_DOWN	(MAC_MCR_FORCE_MODE)
 
+/* Mac EEE control registers */
+#define MTK_MAC_EEE(x)		(0x10104 + (x * 0x100))
+#define MAC_EEE_WAKEUP_TIME_1000	GENMASK(31, 24)
+#define MAC_EEE_WAKEUP_TIME_100	GENMASK(23, 16)
+#define MAC_EEE_LPI_TXIDLE_THD	GENMASK(15, 8)
+#define MAC_EEE_RESV0		GENMASK(7, 4)
+#define MAC_EEE_LPI_MODE	BIT(0)
+
 /* Mac status registers */
 #define MTK_MAC_MSR(x)		(0x10108 + (x * 0x100))
 #define MAC_MSR_EEE1G		BIT(7)
@@ -1603,6 +1613,8 @@ struct mtk_mac {
 	__be32				hwlro_ip[MTK_MAX_LRO_IP_CNT];
 	int				hwlro_ip_cnt;
 	unsigned int			syscfg0;
+	bool				tx_lpi_enabled;
+	u32				tx_lpi_timer;
 	struct notifier_block		device_notifier;
 };
 
-- 
2.45.2

