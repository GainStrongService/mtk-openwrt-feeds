diff --git a/arch/arm64/boot/dts/mediatek/mt7987-netsys.dtsi b/arch/arm64/boot/dts/mediatek/mt7987-netsys.dtsi
index 163361f..22fadf7 100644
--- a/arch/arm64/boot/dts/mediatek/mt7987-netsys.dtsi
+++ b/arch/arm64/boot/dts/mediatek/mt7987-netsys.dtsi
@@ -122,7 +122,7 @@ &hnat {
 	mtketh-wan = "eth1";
 	mtketh-lan = "lan";
 	mtketh-max-gmac = <2>;
-	mtketh-ppe-num = <1>;
+	mtketh-ppe-num = <2>;
 	status = "okay";
 };
 
diff --git a/arch/arm64/boot/dts/mediatek/mt7988a-rfb.dts b/arch/arm64/boot/dts/mediatek/mt7988a-rfb.dts
index f5bf6df..9849025 100644
--- a/arch/arm64/boot/dts/mediatek/mt7988a-rfb.dts
+++ b/arch/arm64/boot/dts/mediatek/mt7988a-rfb.dts
@@ -144,6 +144,15 @@ &gsw_port3 {
 	label = "lan3";
 };
 
+&hnat {
+	mtketh-wan = "eth1";
+	mtketh-lan = "lan";
+	mtketh-lan2 = "eth2";
+	mtketh-max-gmac = <3>;
+	mtketh-ppe-num = <3>;
+	status = "okay";
+};
+
 &i2c0 {
 	pinctrl-names = "default";
 	pinctrl-0 = <&i2c0_pins>;
diff --git a/arch/arm64/boot/dts/mediatek/mt7988a.dtsi b/arch/arm64/boot/dts/mediatek/mt7988a.dtsi
index 9fa657e..105ab8f 100644
--- a/arch/arm64/boot/dts/mediatek/mt7988a.dtsi
+++ b/arch/arm64/boot/dts/mediatek/mt7988a.dtsi
@@ -1235,6 +1235,14 @@ i2p5gbe_led1: i2p5gbe-led1@1 {
 			};
 		};
 
+		hnat: hnat@15000000 {
+			compatible = "mediatek,mtk-hnat_v5";
+			reg = <0 0x15100000 0 0x80000>;
+			resets = <&ethsys 0>;
+			reset-names = "mtketh";
+			status = "disabled";
+		};
+
 		wo_ccif0: syscon@151a5000 {
 			compatible = "mediatek,mt7988-wo-ccif", "syscon";
 			reg = <0 0x151a5000 0 0x1000>;
diff --git a/drivers/net/ethernet/mediatek/Kconfig b/drivers/net/ethernet/mediatek/Kconfig
index d974316..1589b36 100644
--- a/drivers/net/ethernet/mediatek/Kconfig
+++ b/drivers/net/ethernet/mediatek/Kconfig
@@ -40,4 +40,28 @@ config NET_MEDIATEK_STAR_EMAC
 	  This driver supports the ethernet MAC IP first used on
 	  MediaTek MT85** SoCs.
 
+config MEDIATEK_NETSYS_V2
+	tristate "MediaTek Ethernet NETSYS V2 support"
+	depends on ARCH_MEDIATEK && NET_MEDIATEK_SOC
+	help
+	  This options enable MTK Ethernet NETSYS V2 support
+
+config MEDIATEK_NETSYS_V3
+	tristate "MediaTek Ethernet NETSYS V3 support"
+	depends on ARCH_MEDIATEK && NET_MEDIATEK_SOC
+	help
+	  This options enable MTK Ethernet NETSYS V3 support for
+	  XGMAC and USXGMII.
+
+	  If you have a network system belong to this class, say Y.
+	  If unsure, say N.
+
+config NET_MEDIATEK_HNAT
+	tristate "MediaTek HW NAT support"
+	depends on NET_MEDIATEK_SOC && NF_CONNTRACK && IP_NF_NAT
+	help
+	  This driver supports the hardward Network Address Translation
+	  in the MediaTek MT7988/MT7986/MT2701/MT7622/MT7629/MT7621 chipset
+	  family.
+
 endif #NET_VENDOR_MEDIATEK
diff --git a/drivers/net/ethernet/mediatek/Makefile b/drivers/net/ethernet/mediatek/Makefile
index 24f7d04..b5ff6a3 100644
--- a/drivers/net/ethernet/mediatek/Makefile
+++ b/drivers/net/ethernet/mediatek/Makefile
@@ -11,4 +11,5 @@ mtk_eth-$(CONFIG_NET_MEDIATEK_SOC_WED) += mtk_wed_debugfs.o
 endif
 obj-$(CONFIG_NET_MEDIATEK_SOC_WED) += mtk_wed_ops.o
 obj-$(CONFIG_NET_MEDIATEK_STAR_EMAC) += mtk_star_emac.o
+obj-$(CONFIG_NET_MEDIATEK_HNAT) += mtk_hnat/
 obj-$(CONFIG_NET_AIROHA) += airoha_eth.o
diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.c b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
index 35a3998..7815722 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -39,6 +39,10 @@
 #include "mtk_eth_dbg.h"
 #include "mtk_wed.h"
 
+#if defined(CONFIG_NET_MEDIATEK_HNAT) || defined(CONFIG_NET_MEDIATEK_HNAT_MODULE)
+#include "mtk_hnat/nf_hnat_mtk.h"
+#endif
+
 static int mtk_msg_level = -1;
 module_param_named(msg_level, mtk_msg_level, int, 0);
 MODULE_PARM_DESC(msg_level, "Message level (-1=defaults,0=none,...,16=all)");
@@ -2730,6 +2734,30 @@ static int mtk_poll_rx(struct napi_struct *napi, int budget,
 
 			skb_reserve(skb, NET_SKB_PAD + NET_IP_ALIGN);
 			skb_put(skb, pktlen);
+
+#if defined(CONFIG_NET_MEDIATEK_HNAT) || defined(CONFIG_NET_MEDIATEK_HNAT_MODULE)
+			if (mtk_is_netsys_v3_or_greater(eth))
+				*(u32 *)(skb->head) = trxd.rxd5;
+			else
+				*(u32 *)(skb->head) = trxd.rxd4;
+
+			skb_hnat_alg(skb) = 0;
+			skb_hnat_filled(skb) = 0;
+			skb_hnat_magic_tag(skb) = HNAT_MAGIC_TAG;
+			skb_hnat_set_tops(skb, 0);
+			skb_hnat_set_is_decap(skb, 0);
+			skb_hnat_set_is_decrypt(skb, (skb_hnat_cdrt(skb) ? 1 : 0));
+
+			if (skb_hnat_reason(skb) == HIT_BIND_FORCE_TO_CPU) {
+				trace_printk("[%s] reason=0x%x(force to CPU) from WAN to Ext\n",
+					     __func__, skb_hnat_reason(skb));
+				skb->pkt_type = PACKET_HOST;
+			}
+
+			trace_printk("[%s] rxd:(entry=%x,sport=%x,reason=%x,alg=%x\n",
+				     __func__, skb_hnat_entry(skb), skb_hnat_sport(skb),
+				     skb_hnat_reason(skb), skb_hnat_alg(skb));
+#endif
 		}
 
 		skb->dev = netdev;
@@ -2769,8 +2797,10 @@ static int mtk_poll_rx(struct napi_struct *napi, int budget,
 				skb_dst_set_noref(skb, &eth->dsa_meta[port]->dst);
 		}
 
+#if !defined(CONFIG_NET_MEDIATEK_HNAT) && !defined(CONFIG_NET_MEDIATEK_HNAT_MODULE)
 		if (reason == MTK_PPE_CPU_REASON_HIT_UNBIND_RATE_REACHED)
 			mtk_ppe_check_skb(eth->ppe[ppe_idx], skb, hash);
+#endif
 
 		if (eth->hwlro && eth->debugfs->hwlro_stats.ebl &&
 		    IS_HW_LRO_RING(ring->ring_no)) {
@@ -4378,8 +4408,10 @@ static int mtk_open(struct net_device *dev)
 			return err;
 		}
 
+#if !defined(CONFIG_NET_MEDIATEK_HNAT) && !defined(CONFIG_NET_MEDIATEK_HNAT_MODULE)
 		for (i = 0; i < ARRAY_SIZE(eth->ppe); i++)
 			mtk_ppe_start(eth->ppe[i]);
+#endif
 
 		for (i = 0; i < MTK_MAX_DEVS; i++) {
 			if (!eth->netdev[i])
@@ -4533,8 +4565,10 @@ static int mtk_stop(struct net_device *dev)
 
 	mtk_dma_free(eth);
 
+#if !defined(CONFIG_NET_MEDIATEK_HNAT) && !defined(CONFIG_NET_MEDIATEK_HNAT_MODULE)
 	for (i = 0; i < ARRAY_SIZE(eth->ppe); i++)
 		mtk_ppe_stop(eth->ppe[i]);
+#endif
 
 	return 0;
 }
@@ -6897,6 +6931,7 @@ static int mtk_probe(struct platform_device *pdev)
 		};
 	}
 
+#if !defined(CONFIG_NET_MEDIATEK_HNAT) && !defined(CONFIG_NET_MEDIATEK_HNAT_MODULE)
 	if (eth->soc->offload_version) {
 		u8 ppe_num = eth->soc->ppe_num;
 
@@ -6917,6 +6952,7 @@ static int mtk_probe(struct platform_device *pdev)
 				goto err_deinit_ppe;
 		}
 	}
+#endif
 
 	mtk_eth_debugfs_init(eth);
 
@@ -6972,7 +7008,9 @@ static int mtk_probe(struct platform_device *pdev)
 	free_netdev(eth->dummy_dev);
 err_deinit_ppe:
 	mtk_napi_del(eth);
+#if !defined(CONFIG_NET_MEDIATEK_HNAT) && !defined(CONFIG_NET_MEDIATEK_HNAT_MODULE)
 	mtk_ppe_deinit(eth);
+#endif
 	mtk_release_all_muxes(eth);
 	mtk_mdio_cleanup(eth);
 err_free_dev:
