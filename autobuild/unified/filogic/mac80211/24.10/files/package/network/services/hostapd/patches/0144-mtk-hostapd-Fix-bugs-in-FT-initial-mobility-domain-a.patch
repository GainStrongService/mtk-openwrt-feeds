From 19d1744a4e8e4cf734cf14092e302aafd43a3cc4 Mon Sep 17 00:00:00 2001
From: Allen Ye <allen.ye@mediatek.com>
Date: Thu, 31 Oct 2024 14:28:05 +0800
Subject: [PATCH 144/149] mtk: hostapd: Fix bugs in FT initial mobility domain
 association

1. Fix generating PTK by using mld addr.
2. Add FT PMKR1 support for MLO KDEs in auth.
3. Add MDie in MLO KDEs in auth.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>
---
 src/ap/wpa_auth.c    | 60 +++++++++++++++++++++++++++++++++-----------
 src/ap/wpa_auth.h    |  2 ++
 src/ap/wpa_auth_ft.c | 12 ++++-----
 3 files changed, 53 insertions(+), 21 deletions(-)

diff --git a/src/ap/wpa_auth.c b/src/ap/wpa_auth.c
index 522612e12..3c7b1aa0c 100644
--- a/src/ap/wpa_auth.c
+++ b/src/ap/wpa_auth.c
@@ -86,7 +86,7 @@ static const int dot11RSNAConfigPMKReauthThreshold = 70;
 static const int dot11RSNAConfigSATimeout = 60;
 
 
-static const u8 * wpa_auth_get_aa(const struct wpa_state_machine *sm)
+const u8 * wpa_auth_get_aa(const struct wpa_state_machine *sm)
 {
 #ifdef CONFIG_IEEE80211BE
 	if (sm->mld_assoc_link_id >= 0)
@@ -96,7 +96,7 @@ static const u8 * wpa_auth_get_aa(const struct wpa_state_machine *sm)
 }
 
 
-static const u8 * wpa_auth_get_spa(const struct wpa_state_machine *sm)
+const u8 * wpa_auth_get_spa(const struct wpa_state_machine *sm)
 {
 #ifdef CONFIG_IEEE80211BE
 	if (sm->mld_assoc_link_id >= 0)
@@ -4554,6 +4554,7 @@ static u8 * wpa_auth_ml_kdes(struct wpa_state_machine *sm, u8 *pos)
 	for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
 		struct wpa_authenticator *wpa_auth;
 		const u8 *rsne, *rsnxe, *rsnoe, *rsno2e, *rsnxoe;
+		u8 *mlo_link_len_pos;
 		size_t rsne_len, rsnxe_len, rsnoe_len, rsno2e_len, rsnxoe_len;
 		size_t kde_len;
 
@@ -4582,6 +4583,7 @@ static u8 * wpa_auth_ml_kdes(struct wpa_state_machine *sm, u8 *pos)
 
 		/* MLO Link KDE */
 		*pos++ = WLAN_EID_VENDOR_SPECIFIC;
+		mlo_link_len_pos = pos;
 		*pos++ = RSN_SELECTOR_LEN + 1 + ETH_ALEN +
 			rsne_len + rsnxe_len;
 
@@ -4602,6 +4604,24 @@ static u8 * wpa_auth_ml_kdes(struct wpa_state_machine *sm, u8 *pos)
 		if (rsne_len) {
 			os_memcpy(pos, rsne, rsne_len);
 			pos += rsne_len;
+#ifdef CONFIG_IEEE80211R_AP
+			if (wpa_key_mgmt_ft(sm->wpa_key_mgmt)) {
+				int res;
+
+				pos -= rsne_len;
+				res = wpa_insert_pmkid(pos, &rsne_len, sm->pmk_r1_name,
+						       true);
+				if (res < 0) {
+					wpa_printf(MSG_ERROR,
+						   "FT: Failed to insert PMKR1Name into"
+						   " RSN IE in EAPOL-Key data");
+					return NULL;
+				}
+				*mlo_link_len_pos = RSN_SELECTOR_LEN + 1 + ETH_ALEN +
+					rsne_len + rsnxe_len;
+				pos += rsne_len;
+			}
+#endif /* CONFIG_IEEE80211R_AP */
 		}
 
 		if (rsnxe_len) {
@@ -4887,23 +4907,24 @@ SM_STATE(WPA_PTK, PTKINITNEGOTIATING)
 	if (!is_mld) {
 		os_memcpy(pos, wpa_ie, wpa_ie_len);
 		pos += wpa_ie_len;
-	}
 #ifdef CONFIG_IEEE80211R_AP
-	if (wpa_key_mgmt_ft(sm->wpa_key_mgmt)) {
-		int res;
-		size_t elen;
+		if (wpa_key_mgmt_ft(sm->wpa_key_mgmt)) {
+			int res;
+			size_t elen;
 
-		elen = pos - kde;
-		res = wpa_insert_pmkid(kde, &elen, sm->pmk_r1_name, true);
-		if (res < 0) {
-			wpa_printf(MSG_ERROR,
-				   "FT: Failed to insert PMKR1Name into RSN IE in EAPOL-Key data");
-			goto done;
+			elen = pos - kde;
+			res = wpa_insert_pmkid(kde, &elen, sm->pmk_r1_name, true);
+			if (res < 0) {
+				wpa_printf(MSG_ERROR,
+					   "FT: Failed to insert PMKR1Name into RSN IE"
+					   " in EAPOL-Key data");
+				goto done;
+			}
+			pos -= wpa_ie_len;
+			pos += elen;
 		}
-		pos -= wpa_ie_len;
-		pos += elen;
-	}
 #endif /* CONFIG_IEEE80211R_AP */
+	}
 	hdr[1] = 0;
 
 	if (sm->use_ext_key_id) {
@@ -4958,6 +4979,15 @@ SM_STATE(WPA_PTK, PTKINITNEGOTIATING)
 		*pos++ = WLAN_TIMEOUT_KEY_LIFETIME;
 		WPA_PUT_LE32(pos, conf->r0_key_lifetime);
 		pos += 4;
+
+		/* Add MDE back in MLD's case */
+		if (is_mld) {
+			res = wpa_write_mdie(&sm->wpa_auth->conf, pos,
+					     kde + kde_len - pos);
+			if (res < 0)
+				goto done;
+			pos += res;
+		}
 	}
 #endif /* CONFIG_IEEE80211R_AP */
 #ifdef CONFIG_P2P
diff --git a/src/ap/wpa_auth.h b/src/ap/wpa_auth.h
index 78cead772..74820943e 100644
--- a/src/ap/wpa_auth.h
+++ b/src/ap/wpa_auth.h
@@ -685,5 +685,7 @@ void wpa_release_link_auth_ref(struct wpa_state_machine *sm,
 
 void switch_setup_wpa_auth(struct wpa_state_machine *sm,
 			   struct wpa_authenticator *wpa_auth);
+const u8 * wpa_auth_get_aa(const struct wpa_state_machine *sm);
+const u8 * wpa_auth_get_spa(const struct wpa_state_machine *sm);
 
 #endif /* WPA_AUTH_H */
diff --git a/src/ap/wpa_auth_ft.c b/src/ap/wpa_auth_ft.c
index de16c314d..56b755a4a 100644
--- a/src/ap/wpa_auth_ft.c
+++ b/src/ap/wpa_auth_ft.c
@@ -2151,17 +2151,17 @@ int wpa_auth_derive_ptk_ft(struct wpa_state_machine *sm, struct wpa_ptk *ptk,
 	}
 
 	if (wpa_derive_pmk_r0(mpmk, mpmk_len, ssid, ssid_len, mdid,
-			      r0kh, r0kh_len, sm->addr,
+			      r0kh, r0kh_len, wpa_auth_get_spa(sm),
 			      pmk_r0, pmk_r0_name,
 			      sm->wpa_key_mgmt) < 0 ||
-	    wpa_derive_pmk_r1(pmk_r0, pmk_r0_len, pmk_r0_name, r1kh, sm->addr,
-			      pmk_r1, sm->pmk_r1_name) < 0)
+	    wpa_derive_pmk_r1(pmk_r0, pmk_r0_len, pmk_r0_name, r1kh,
+			      wpa_auth_get_spa(sm), pmk_r1, sm->pmk_r1_name) < 0)
 		return -1;
 
 	return wpa_pmk_r1_to_ptk(pmk_r1, pmk_r1_len, sm->SNonce, sm->ANonce,
-				 sm->addr, sm->wpa_auth->addr, sm->pmk_r1_name,
-				 ptk, ptk_name, sm->wpa_key_mgmt, sm->pairwise,
-				 kdk_len);
+				 wpa_auth_get_spa(sm), wpa_auth_get_aa(sm),
+				 sm->pmk_r1_name, ptk, ptk_name,
+				 sm->wpa_key_mgmt, sm->pairwise, kdk_len);
 }
 
 
-- 
2.45.2

