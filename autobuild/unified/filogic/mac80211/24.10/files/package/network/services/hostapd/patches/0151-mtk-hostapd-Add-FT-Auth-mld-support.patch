From ae393eea55f9035be7a125b6a12f734f5ff8ca78 Mon Sep 17 00:00:00 2001
From: Allen Ye <allen.ye@mediatek.com>
Date: Thu, 16 Jan 2025 17:46:36 +0800
Subject: [PATCH 151/206] mtk: hostapd: Add FT-Auth mld support

Add basic mle in FT response and handle mld address of sta.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>

Add support FTA handle FT auth algo
STA will use FT auth type when doing FTA roaming and the length of fixed
fields is always 6. The format id defined in 802.11REVme_D3.0 Table 9-69.

Fix process ft auth can't get correct mle make AP use link address to
derive PTK.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>

Add rsnxe in FT auth response. According to WPA3-FT 8.5.X wfa requires
roaming target ap should bring rsnxe with H2E information in FT auth response.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>
---
 src/ap/hostapd.c        |  5 +++
 src/ap/ieee802_11_eht.c |  5 ++-
 src/ap/wpa_auth_ft.c    | 84 +++++++++++++++++++++++++++++++++++------
 src/ap/wpa_auth_glue.c  |  6 ++-
 src/common/wpa_common.c |  3 ++
 src/common/wpa_common.h |  1 +
 6 files changed, 90 insertions(+), 14 deletions(-)

diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 237c4f7cc..4d0de3ced 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -1618,6 +1618,11 @@ setup_mld:
 			hapd->iconf->ieee80211ax;
 
 #ifdef CONFIG_IEEE80211R_AP
+#ifdef CONFIG_IEEE80211BE
+	if (hapd->conf->mld_ap && is_zero_ether_addr(conf->r1_key_holder))
+		os_memcpy(conf->r1_key_holder, hapd->mld->mld_addr, ETH_ALEN);
+	else
+#endif /* CONFIG_IEEE80211BE */
 	if (is_zero_ether_addr(conf->r1_key_holder))
 		os_memcpy(conf->r1_key_holder, hapd->own_addr, ETH_ALEN);
 #endif /* CONFIG_IEEE80211R_AP */
diff --git a/src/ap/ieee802_11_eht.c b/src/ap/ieee802_11_eht.c
index 4d068edf2..ab1652b52 100644
--- a/src/ap/ieee802_11_eht.c
+++ b/src/ap/ieee802_11_eht.c
@@ -1186,8 +1186,11 @@ static const u8 * auth_skip_fixed_fields(struct hostapd_data *hapd,
 
 		return pos;
 #endif /* CONFIG_SAE */
-	/* TODO: Support additional algorithms that can be used for MLO */
 	case WLAN_AUTH_FT:
+		if (auth_transaction > 4)
+			break;
+		return pos;
+	/* TODO: Support additional algorithms that can be used for MLO */
 	case WLAN_AUTH_FILS_SK:
 	case WLAN_AUTH_FILS_SK_PFS:
 	case WLAN_AUTH_FILS_PK:
diff --git a/src/ap/wpa_auth_ft.c b/src/ap/wpa_auth_ft.c
index f59ea74be..209e2507a 100644
--- a/src/ap/wpa_auth_ft.c
+++ b/src/ap/wpa_auth_ft.c
@@ -28,6 +28,7 @@
 #include "wpa_auth.h"
 #include "wpa_auth_i.h"
 #include "pmksa_cache_auth.h"
+#include "hostapd.h"
 
 
 #ifdef CONFIG_IEEE80211R_AP
@@ -3152,9 +3153,11 @@ static int wpa_ft_local_derive_pmk_r1(struct wpa_authenticator *wpa_auth,
 }
 
 
+#define BASIC_MLE_LEN 10
 static int wpa_ft_process_auth_req(struct wpa_state_machine *sm,
 				   const u8 *ies, size_t ies_len,
-				   u8 **resp_ies, size_t *resp_ies_len)
+				   u8 **resp_ies, size_t *resp_ies_len,
+				   int link_id)
 {
 	struct rsn_mdie *mdie;
 	u8 pmk_r1[PMK_LEN_MAX], pmk_r1_name[WPA_PMK_NAME_LEN];
@@ -3221,6 +3224,11 @@ static int wpa_ft_process_auth_req(struct wpa_state_machine *sm,
 	if (wpa_ft_set_key_mgmt(sm, &parse) < 0)
 		goto out;
 
+#ifdef CONFIG_IEEE80211BE
+	sm->mld_assoc_link_id = -1;
+	if (parse.basic_ml && link_id >= 0)
+		sm->mld_assoc_link_id = link_id;
+#endif
 	wpa_hexdump(MSG_DEBUG, "FT: Requested PMKR0Name",
 		    parse.rsn_pmkid, WPA_PMK_NAME_LEN);
 
@@ -3357,8 +3365,8 @@ pmk_r1_derived:
 		kdk_len = 0;
 
 	if (wpa_pmk_r1_to_ptk(pmk_r1, pmk_r1_len, sm->SNonce, sm->ANonce,
-			      sm->addr, sm->wpa_auth->addr, pmk_r1_name,
-			      &sm->PTK, ptk_name, parse.key_mgmt,
+			      sm->addr, wpa_auth_get_aa(sm),
+			      pmk_r1_name, &sm->PTK, ptk_name, parse.key_mgmt,
 			      pairwise, kdk_len) < 0)
 		goto out;
 
@@ -3391,6 +3399,10 @@ pmk_r1_derived:
 
 	buflen = 2 + sizeof(struct rsn_mdie) + 2 + sizeof(struct rsn_ftie) +
 		2 + FT_R1KH_ID_LEN + 200;
+#ifdef CONFIG_IEEE80211BE
+	if (sm->mld_assoc_link_id >= 0)
+		buflen += 2 + BASIC_MLE_LEN;
+#endif
 	*resp_ies = os_zalloc(buflen);
 	if (*resp_ies == NULL)
 		goto fail;
@@ -3416,6 +3428,30 @@ pmk_r1_derived:
 		goto fail;
 	pos += ret;
 
+	/* RSNXE is not needed in the 2nd msg of FT authentication sequence
+	 * but since WPA3 T/C 8.5 would check H2E cap, we added it to pass the item */
+	ret = wpa_write_rsnxe(conf, pos, end - pos);
+	if (ret < 0)
+		goto fail;
+	pos += ret;
+
+#ifdef CONFIG_IEEE80211BE
+	if (sm->mld_assoc_link_id >= 0) {
+		*pos++ = WLAN_EID_EXTENSION;
+		*pos++ = BASIC_MLE_LEN;
+		*pos++ = WLAN_EID_EXT_MULTI_LINK;
+
+		/* Basic Multi-Link element Control field */
+		*pos++ = 0x0;
+		*pos++ = 0x0;
+
+		/* Common Info */
+		*pos++ = 0x7; /* length = Length field + MLD MAC address */
+		os_memcpy(pos, sm->wpa_auth->mld_addr, ETH_ALEN);
+		pos += ETH_ALEN;
+	}
+#endif
+
 	*resp_ies_len = pos - *resp_ies;
 
 	retval = WLAN_STATUS_SUCCESS;
@@ -3440,6 +3476,8 @@ void wpa_ft_process_auth(struct wpa_state_machine *sm,
 	u8 *resp_ies;
 	size_t resp_ies_len;
 	int res;
+	struct hostapd_data *hapd = ctx;
+	int link_id = -1;
 
 	if (sm == NULL) {
 		wpa_printf(MSG_DEBUG, "FT: Received authentication frame, but "
@@ -3455,8 +3493,12 @@ void wpa_ft_process_auth(struct wpa_state_machine *sm,
 	sm->ft_pending_cb_ctx = ctx;
 	sm->ft_pending_auth_transaction = auth_transaction;
 	sm->ft_pending_pull_left_retries = sm->wpa_auth->conf.rkh_pull_retries;
+#ifdef CONFIG_IEEE80211BE
+	if (hapd->conf->mld_ap)
+		link_id = hapd->mld_link_id;
+#endif
 	res = wpa_ft_process_auth_req(sm, ies, ies_len, &resp_ies,
-				      &resp_ies_len);
+				      &resp_ies_len, link_id);
 	if (res < 0) {
 		wpa_printf(MSG_DEBUG, "FT: Callback postponed until response is available");
 		return;
@@ -3632,7 +3674,7 @@ int wpa_ft_validate_reassoc(struct wpa_state_machine *sm, const u8 *ies,
 		kck_len = sm->PTK.kck_len;
 	}
 	if (wpa_ft_mic(sm->wpa_key_mgmt, kck, kck_len,
-		       sm->addr, sm->wpa_auth->addr, 5,
+		       wpa_auth_get_spa(sm), wpa_auth_get_aa(sm), 5,
 		       parse.mdie - 2, parse.mdie_len + 2,
 		       parse.ftie - 2, parse.ftie_len + 2,
 		       parse.rsn - 2, parse.rsn_len + 2,
@@ -3818,6 +3860,7 @@ static int wpa_ft_rrb_rx_request(struct wpa_authenticator *wpa_auth,
 	u8 *resp_ies;
 	size_t resp_ies_len;
 	int res;
+	int link_id = -1;
 
 	sm = wpa_ft_add_sta(wpa_auth, sta_addr);
 	if (sm == NULL) {
@@ -3828,12 +3871,16 @@ static int wpa_ft_rrb_rx_request(struct wpa_authenticator *wpa_auth,
 
 	wpa_hexdump(MSG_MSGDUMP, "FT: RRB Request Frame body", body, len);
 
+#ifdef CONFIG_IEEE80211BE
+	if (wpa_auth->is_ml)
+		link_id = wpa_auth->link_id;
+#endif
 	sm->ft_pending_cb = wpa_ft_rrb_rx_request_cb;
 	sm->ft_pending_cb_ctx = sm;
 	os_memcpy(sm->ft_pending_current_ap, current_ap, ETH_ALEN);
 	sm->ft_pending_pull_left_retries = sm->wpa_auth->conf.rkh_pull_retries;
 	res = wpa_ft_process_auth_req(sm, body, len, &resp_ies,
-				      &resp_ies_len);
+				      &resp_ies_len, link_id);
 	if (res < 0) {
 		wpa_printf(MSG_DEBUG, "FT: No immediate response available - wait for pull response");
 		return 0;
@@ -3855,7 +3902,7 @@ static int wpa_ft_send_rrb_auth_resp(struct wpa_state_machine *sm,
 	struct wpa_authenticator *wpa_auth = sm->wpa_auth;
 	size_t rlen;
 	struct ft_rrb_frame *frame;
-	u8 *pos;
+	u8 *pos, target_addr[ETH_ALEN];
 
 	wpa_printf(MSG_DEBUG, "FT: RRB authentication response: STA=" MACSTR
 		   " CurrentAP=" MACSTR " status=%u (%s)",
@@ -3877,13 +3924,19 @@ static int wpa_ft_send_rrb_auth_resp(struct wpa_state_machine *sm,
 	frame->frame_type = RSN_REMOTE_FRAME_TYPE_FT_RRB;
 	frame->packet_type = FT_PACKET_RESPONSE;
 	frame->action_length = host_to_le16(rlen);
-	os_memcpy(frame->ap_address, wpa_auth->addr, ETH_ALEN);
+#ifdef CONFIG_IEEE80211BE
+	if (wpa_auth->is_ml)
+		os_memcpy(target_addr, wpa_auth->mld_addr, ETH_ALEN);
+	else
+#endif
+		os_memcpy(target_addr, wpa_auth->addr, ETH_ALEN);
+	os_memcpy(frame->ap_address, target_addr, ETH_ALEN);
 	pos = (u8 *) (frame + 1);
 	*pos++ = WLAN_ACTION_FT;
 	*pos++ = 2; /* Action: Response */
 	os_memcpy(pos, sta_addr, ETH_ALEN);
 	pos += ETH_ALEN;
-	os_memcpy(pos, wpa_auth->addr, ETH_ALEN);
+	os_memcpy(pos, target_addr, ETH_ALEN);
 	pos += ETH_ALEN;
 	WPA_PUT_LE16(pos, status);
 	pos += 2;
@@ -4307,13 +4360,18 @@ static void ft_finish_pull(struct wpa_state_machine *sm)
 	u8 *resp_ies;
 	size_t resp_ies_len;
 	u16 status;
+	int link_id = -1;
 
 	if (!sm->ft_pending_cb || !sm->ft_pending_req_ies)
 		return;
 
+#ifdef CONFIG_IEEE80211BE
+	link_id = sm->mld_assoc_link_id;
+#endif
+
 	res = wpa_ft_process_auth_req(sm, wpabuf_head(sm->ft_pending_req_ies),
 				      wpabuf_len(sm->ft_pending_req_ies),
-				      &resp_ies, &resp_ies_len);
+				      &resp_ies, &resp_ies_len, link_id);
 	if (res < 0) {
 		/* this loop is broken by ft_pending_pull_left_retries */
 		wpa_printf(MSG_DEBUG,
@@ -4794,7 +4852,11 @@ int wpa_ft_rrb_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 			return -1;
 		}
 
-		if (!ether_addr_equal(target_ap_addr, wpa_auth->addr)) {
+		if (!ether_addr_equal(target_ap_addr, wpa_auth->addr)
+#ifdef CONFIG_IEEE80211BE
+		     && !ether_addr_equal(target_ap_addr, wpa_auth->mld_addr)
+#endif
+		     ) {
 			wpa_printf(MSG_DEBUG, "FT: Target AP address in the "
 				   "RRB Request does not match with own "
 				   "address");
diff --git a/src/ap/wpa_auth_glue.c b/src/ap/wpa_auth_glue.c
index eb1b17624..29dcc8ae8 100644
--- a/src/ap/wpa_auth_glue.c
+++ b/src/ap/wpa_auth_glue.c
@@ -1471,7 +1471,8 @@ static void hostapd_rrb_receive(void *ctx, const u8 *src_addr, const u8 *buf,
 	wpa_printf(MSG_DEBUG, "FT: RRB received packet " MACSTR " -> "
 		   MACSTR, MAC2STR(ethhdr->h_source), MAC2STR(ethhdr->h_dest));
 	if (!is_multicast_ether_addr(ethhdr->h_dest) &&
-	    !ether_addr_equal(hapd->own_addr, ethhdr->h_dest))
+	    !ether_addr_equal(hapd->own_addr, ethhdr->h_dest) &&
+	    !(hapd->mld && ether_addr_equal(hapd->mld->mld_addr, ethhdr->h_dest)))
 		return;
 	wpa_ft_rrb_rx(hapd->wpa_auth, ethhdr->h_source, buf + sizeof(*ethhdr),
 		      len - sizeof(*ethhdr));
@@ -1487,7 +1488,8 @@ static void hostapd_rrb_oui_receive(void *ctx, const u8 *src_addr,
 	wpa_printf(MSG_DEBUG, "FT: RRB received packet " MACSTR " -> "
 		   MACSTR, MAC2STR(src_addr), MAC2STR(dst_addr));
 	if (!is_multicast_ether_addr(dst_addr) &&
-	    !ether_addr_equal(hapd->own_addr, dst_addr))
+	    !ether_addr_equal(hapd->own_addr, dst_addr) &&
+	    !(hapd->mld && ether_addr_equal(hapd->mld->mld_addr, dst_addr)))
 		return;
 	wpa_ft_rrb_oui_rx(hapd->wpa_auth, src_addr, dst_addr, oui_suffix, buf,
 			  len);
diff --git a/src/common/wpa_common.c b/src/common/wpa_common.c
index e5e99b95d..f4e7bb7f3 100644
--- a/src/common/wpa_common.c
+++ b/src/common/wpa_common.c
@@ -1335,6 +1335,9 @@ int wpa_ft_parse_ies(const u8 *ies, size_t ies_len, struct wpa_ft_ies *parse,
 		parse->ftie_len = fte_len;
 	}
 
+	if (elems.basic_mle)
+		parse->basic_ml = elems.basic_mle;
+
 	if (prot_ie_count == 0)
 		return 0; /* no MIC */
 
diff --git a/src/common/wpa_common.h b/src/common/wpa_common.h
index d2c326c43..6fa894a47 100644
--- a/src/common/wpa_common.h
+++ b/src/common/wpa_common.h
@@ -610,6 +610,7 @@ struct wpa_ft_ies {
 	u16 valid_mlo_bigtks; /* bitmap of valid link BIGTK subelements */
 	const u8 *mlo_bigtk[MAX_NUM_MLD_LINKS];
 	size_t mlo_bigtk_len[MAX_NUM_MLD_LINKS];
+	const u8 *basic_ml;
 
 	struct wpabuf *fte_buf;
 };
-- 
2.45.2

