From e817c9551127801ebdc6a8afd20df6e3c463d357 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 15 Jul 2025 17:27:43 +0800
Subject: [PATCH 219/236] mtk: hostapd: fix cca & csa collision issue

When a CCA is triggered during CSA finalization, there is a slim chance
that the CCA beacon will contain CSA IE due to the following sequence of
events.
1. CSA finalization is in progress while a CCA request is triggered
in hostapd.
2. The CCA beacon is built with CSA IE included, since CSA is in progress.
3. CSA finalization completes in kernel, and the CSA finish event is ready to be
sent to hostapd.
4. The CCA request is sent to the kernel and processed without being blocked, as the
csa_active flag is being reset in step 3.

Therefore, delay the CCA request when CSA is in progress.
A similar issue can occur when CSA is triggered during the CCA
finalization.
In this case, simply clean up the CCA parameter, as the CCA will be aborted
by kernel when CSA starts.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 src/ap/hostapd.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 0e1a03512..070edbb98 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -5491,6 +5491,13 @@ static void hostapd_switch_color_timeout_handler(void *eloop_data,
 	unsigned int b;
 	int i, r;
 
+	/* If CSA is in progress, delay the color change */
+	if (hapd->csa_in_progress) {
+		eloop_register_timeout(5, 0, hostapd_switch_color_timeout_handler,
+				       hapd, NULL);
+		return;
+	}
+
 	 /* CCA can be triggered once the handler constantly receives
 	  * color collision events to for at least
 	  * DOT11BSS_COLOR_COLLISION_AP_PERIOD (50 s by default). */
-- 
2.45.2

