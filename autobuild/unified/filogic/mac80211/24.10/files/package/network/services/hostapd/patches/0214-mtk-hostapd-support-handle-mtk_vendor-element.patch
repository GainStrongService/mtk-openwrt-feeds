From 1f8cd00b89868aebaa33f95be4bf27e7aec4bd21 Mon Sep 17 00:00:00 2001
From: Howard Hsu <howard-yh.hsu@mediatek.com>
Date: Mon, 23 Jun 2025 17:12:39 +0800
Subject: [PATCH 214/236] mtk: hostapd: support handle mtk_vendor element

For mtk eco-system feature, the ap needs to first identify whether the
peer station is an MTK station. The MTK station indicates itself by
including and MTK vendor element in its assoc req. Therefore, the ap
needs to recognize the MTK vendor IE and inform the mac80211 layer that
the peer station is an MTK station.

Signed-off-by: Howard Hsu <howard-yh.hsu@mediatek.com>
---
 src/ap/ap_drv_ops.c            |  3 ++-
 src/ap/ap_drv_ops.h            |  2 +-
 src/ap/apup.c                  |  4 ++--
 src/ap/ieee802_11.c            | 15 +++++++++++++--
 src/ap/sta_info.c              |  2 +-
 src/ap/sta_info.h              |  1 +
 src/common/ieee802_11_common.c | 17 +++++++++++++++++
 src/common/ieee802_11_common.h |  2 ++
 src/common/mtk_vendor.h        |  5 +++++
 src/drivers/driver.h           |  1 +
 src/drivers/driver_nl80211.c   |  7 +++++++
 src/drivers/nl80211_copy.h     |  2 ++
 12 files changed, 54 insertions(+), 7 deletions(-)

diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index 19bd9d91c..66fb6d25d 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -511,7 +511,7 @@ int hostapd_sta_add(struct hostapd_data *hapd,
 		    const struct ieee80211_he_6ghz_band_cap *he_6ghz_capab,
 		    u32 flags, u8 qosinfo, u8 vht_opmode, int supp_p2p_ps,
 		    int set, const u8 *link_addr, bool mld_link_sta,
-		    u16 eml_cap)
+		    u16 eml_cap, bool mtk_sta)
 {
 	struct hostapd_sta_add_params params;
 
@@ -541,6 +541,7 @@ int hostapd_sta_add(struct hostapd_data *hapd,
 	params.support_p2p_ps = supp_p2p_ps;
 	params.set = set;
 	params.mld_link_id = -1;
+	params.mtk_sta = mtk_sta;
 
 #ifdef CONFIG_IEEE80211BE
 	/*
diff --git a/src/ap/ap_drv_ops.h b/src/ap/ap_drv_ops.h
index 795b36f17..53320d38b 100644
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -54,7 +54,7 @@ int hostapd_sta_add(struct hostapd_data *hapd,
 		    const struct ieee80211_he_6ghz_band_cap *he_6ghz_capab,
 		    u32 flags, u8 qosinfo, u8 vht_opmode, int supp_p2p_ps,
 		    int set, const u8 *link_addr, bool mld_link_sta,
-		    u16 eml_cap);
+		    u16 eml_cap, bool mtk_sta);
 int hostapd_set_privacy(struct hostapd_data *hapd, int enabled);
 int hostapd_set_generic_elem(struct hostapd_data *hapd, const u8 *elem,
 			     size_t elem_len);
diff --git a/src/ap/apup.c b/src/ap/apup.c
index cb0264e9e..6680157af 100644
--- a/src/ap/apup.c
+++ b/src/ap/apup.c
@@ -67,7 +67,7 @@ void apup_process_beacon(struct hostapd_data *hapd,
 	            NULL, 0, 0, NULL, NULL, NULL, 0, NULL, 0, NULL,
 	            sta_ret->flags, 0, 0, 0,
 	            0, // 0 add, 1 set
-	            mld_link_addr, mld_link_sta, 0);
+	            mld_link_addr, mld_link_sta, 0, false);
 
 	sta_ret->flags |= WLAN_STA_AUTH;
 	wpa_auth_sm_event(sta_ret->wpa_sm, WPA_AUTH);
@@ -141,7 +141,7 @@ void apup_process_beacon(struct hostapd_data *hapd,
 	            sta_ret->vht_opmode,
 	            0, // int supp_p2p_ps
 	            1, // 0 add, 1 set
-	            mld_link_addr, mld_link_sta, 0);
+	            mld_link_addr, mld_link_sta, 0, false);
 
 	ap_sta_set_authorized(hapd, sta_ret, 1);
 	hostapd_set_sta_flags(hapd, sta_ret);
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index bc5158822..8ba6dd1e1 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -3838,6 +3838,15 @@ static void check_mscs_desc_elem(struct hostapd_data *hapd, struct sta_info *sta
 	sta->mscs_assoc_included = 1;
 }
 
+static void check_mtk_vendor_elem(struct hostapd_data *hapd, struct sta_info *sta,
+				  struct ieee802_11_elems *elems)
+{
+	if (!sta || !elems->vendor_mtk)
+		return;
+
+	sta->mtk_sta = 1;
+}
+
 static u16 check_multi_ap(struct hostapd_data *hapd, struct sta_info *sta,
 			  const u8 *multi_ap_ie, size_t multi_ap_len)
 {
@@ -4454,6 +4463,7 @@ static int __check_assoc_ies(struct hostapd_data *hapd, struct sta_info *sta,
 		}
 	}
 #endif /* CONFIG_IEEE80211BE */
+	check_mtk_vendor_elem(hapd, sta, elems);
 
 #ifdef CONFIG_P2P
 	if (elems->p2p && ies && ies_len) {
@@ -5317,7 +5327,7 @@ static int add_associated_sta(struct hostapd_data *hapd,
 			    sta->he_6ghz_capab,
 			    sta->flags | WLAN_STA_ASSOC, sta->qosinfo,
 			    sta->vht_opmode, sta->p2p_ie ? 1 : 0,
-			    set, mld_link_addr, mld_link_sta, eml_cap)) {
+			    set, mld_link_addr, mld_link_sta, eml_cap, sta->mtk_sta)) {
 		hostapd_logger(hapd, sta->addr,
 			       HOSTAPD_MODULE_IEEE80211, HOSTAPD_LEVEL_NOTICE,
 			       "Could not %s STA to kernel driver",
@@ -6013,7 +6023,8 @@ static void handle_assoc(struct hostapd_data *hapd,
 					    0, NULL, NULL, NULL, 0, NULL, 0, NULL,
 					    sta->flags, 0, 0, 0, 0,
 					    sta->setup_link_addr, false,
-					    sta->mld_info.common_info.eml_capa)) {
+					    sta->mld_info.common_info.eml_capa,
+					    sta->mtk_sta)) {
 				resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
 				goto fail;
 			}
diff --git a/src/ap/sta_info.c b/src/ap/sta_info.c
index 314fed562..70f650454 100644
--- a/src/ap/sta_info.c
+++ b/src/ap/sta_info.c
@@ -1989,7 +1989,7 @@ int ap_sta_re_add(struct hostapd_data *hapd, struct sta_info *sta)
 			    sta->supported_rates_len,
 			    0, NULL, NULL, NULL, 0, NULL, 0, NULL,
 			    sta->flags, 0, 0, 0, 0,
-			    mld_link_addr, mld_link_sta, eml_cap)) {
+			    mld_link_addr, mld_link_sta, eml_cap, sta->mtk_sta)) {
 		hostapd_logger(hapd, sta->addr,
 			       HOSTAPD_MODULE_IEEE80211,
 			       HOSTAPD_LEVEL_NOTICE,
diff --git a/src/ap/sta_info.h b/src/ap/sta_info.h
index deac45ee2..fa8fda629 100644
--- a/src/ap/sta_info.h
+++ b/src/ap/sta_info.h
@@ -338,6 +338,7 @@ struct sta_info {
 			      * units of 1000 TUs */
 
 	u64 last_known_sta_id_timestamp;
+	bool mtk_sta;
 };
 
 
diff --git a/src/common/ieee802_11_common.c b/src/common/ieee802_11_common.c
index 8c49a5ac8..814074891 100644
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -15,6 +15,7 @@
 #include "qca-vendor.h"
 #include "ieee802_11_defs.h"
 #include "ieee802_11_common.h"
+#include "mtk_vendor.h"
 
 
 static int ieee802_11_parse_vendor_specific(const u8 *pos, size_t elen,
@@ -212,6 +213,22 @@ static int ieee802_11_parse_vendor_specific(const u8 *pos, size_t elen,
 		}
 		break;
 
+	case OUI_MTK:
+		switch (pos[3]) {
+		case MTK_VENDOR_ELEM_DEFAULT:
+		case MTK_VENDOR_ELEM_256QAM:
+			elems->vendor_mtk = pos;
+			elems->vendor_mtk_len = elen;
+			break;
+		default:
+			wpa_printf(MSG_EXCESSIVE, "Unknown Mediatek "
+				   "information element ignored "
+				   "(type=%d len=%lu)",
+				   pos[3], (unsigned long) elen);
+			return -1;
+		}
+		break;
+
 	default:
 		wpa_printf(MSG_EXCESSIVE, "unknown vendor specific "
 			   "information element ignored (vendor OUI "
diff --git a/src/common/ieee802_11_common.h b/src/common/ieee802_11_common.h
index adca0bce8..49f28b341 100644
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -124,6 +124,7 @@ struct ieee802_11_elems {
 	const u8 *rsn_selection;
 	const u8 *wfa_capab;
 	const u8 *mscs_desc;
+	const u8 *vendor_mtk;
 
 	u8 ssid_len;
 	u8 supp_rates_len;
@@ -196,6 +197,7 @@ struct ieee802_11_elems {
 	size_t rsn_selection_len;
 	u8 wfa_capab_len;
 	size_t mscs_desc_len;
+	size_t vendor_mtk_len;
 
 	struct mb_ies_info mb_ies;
 
diff --git a/src/common/mtk_vendor.h b/src/common/mtk_vendor.h
index d9bc44888..a88182b0a 100644
--- a/src/common/mtk_vendor.h
+++ b/src/common/mtk_vendor.h
@@ -26,6 +26,11 @@ enum mtk_nl80211_vendor_subcmds {
 	MTK_NL80211_VENDOR_SUBCMD_DFS_TX_CTRL = 0xd5,
 };
 
+enum mtk_vendor_element_id {
+	MTK_VENDOR_ELEM_DEFAULT = 0,
+	MTK_VENDOR_ELEM_256QAM = 8,
+};
+
 enum mtk_nl80211_vendor_subevents {
 	MTK_NL80211_VENDOR_EVENT_PP_BMP_UPDATE = 0x5,
 };
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 0c87e287e..11eeb0786 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2703,6 +2703,7 @@ struct hostapd_sta_add_params {
 	s8 mld_link_id;
 	const u8 *mld_link_addr;
 	u16 eml_cap;
+	bool mtk_sta;
 };
 
 struct mac_address {
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 659cb10eb..ee1a5ba82 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -6069,6 +6069,13 @@ static int wpa_driver_nl80211_sta_add(void *priv,
 				goto fail;
 		}
 
+		if (params->mtk_sta) {
+			wpa_printf(MSG_DEBUG, "  * mtk_sta =%u",
+				   params->mtk_sta);
+			if (nla_put_flag(msg, NL80211_ATTR_VENDOR_MTK_STA))
+				goto fail;
+		}
+
 		if (is_ap_interface(drv->nlmode) &&
 		    nla_put_u8(msg, NL80211_ATTR_STA_SUPPORT_P2P_PS,
 			       params->support_p2p_ps ?
diff --git a/src/drivers/nl80211_copy.h b/src/drivers/nl80211_copy.h
index 5fdc24a36..800f22ef3 100644
--- a/src/drivers/nl80211_copy.h
+++ b/src/drivers/nl80211_copy.h
@@ -3537,6 +3537,8 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_MLO_TSF_OFFSET_VAL,
 
+	NL80211_ATTR_VENDOR_MTK_STA,
+
 	__NL80211_ATTR_AFTER_LAST,
 	NUM_NL80211_ATTR = __NL80211_ATTR_AFTER_LAST,
 	NL80211_ATTR_MAX = __NL80211_ATTR_AFTER_LAST - 1
-- 
2.45.2

