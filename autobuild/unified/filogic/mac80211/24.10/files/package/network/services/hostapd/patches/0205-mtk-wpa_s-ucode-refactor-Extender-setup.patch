From c8458b37ffec62bc3cecb09748fefbb6bd211e9f Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Mon, 19 May 2025 16:44:06 +0800
Subject: [PATCH 205/206] mtk: wpa_s: ucode: refactor Extender setup

No matter the STA is MLD or not, the following applies.
The refactor include
1. the BSS stop operation: STA now only stops the BSS on the band(s) it is
   going to use. The STA will read the radio mask and stop the BSS(es)
   that share the same radio as it.
2. the BSS restart operation: STA now restarts all BSS(es) no matter on
   whcih band(s) it has connection. If the BSS(es) share the same band
   as the STA, the BSS(es) will use the same channel as the STA;
   Otherwise the BSS(es) use the channel as it configuration files
   specifies.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 wpa_supplicant/ucode.c | 41 +++++++++++++++++++++++++++++++++--------
 1 file changed, 33 insertions(+), 8 deletions(-)

diff --git a/wpa_supplicant/ucode.c b/wpa_supplicant/ucode.c
index 704a41971..57b919315 100644
--- a/wpa_supplicant/ucode.c
+++ b/wpa_supplicant/ucode.c
@@ -282,15 +282,15 @@ static uc_value_t *
 uc_wpas_iface_status(uc_vm_t *vm, size_t nargs)
 {
 	struct wpa_supplicant *wpa_s = uc_fn_thisval("wpas.iface");
-	struct wpa_bss *bss;
-	uc_value_t *ret, *val, *link_obj = uc_fn_arg(0);
+	struct wpa_bss *bss = NULL;
+	uc_value_t *ret, *val, *radio_idx_obj = uc_fn_arg(0);
 	struct wpa_channel_info ci;
 	u8 op_class, channel;
 	enum chan_width chwidth;
 	enum oper_chan_width oper_chwidth = CONF_OPER_CHWIDTH_USE_HT;
-	int center_freq1, bw320_offset = 1, is_24ghz, radio_idx;
 	enum hostapd_hw_mode hw_mode;
-	int link_id = ucv_int64_get(link_obj);
+	int center_freq1, bw320_offset = 1, is_24ghz, i, link_id = -1;
+	int radio_idx = ucv_int64_get(radio_idx_obj);
 	u32 freq;
 	u16 punct_bitmap;
 
@@ -302,14 +302,34 @@ uc_wpas_iface_status(uc_vm_t *vm, size_t nargs)
 	val = ucv_string_new(wpa_supplicant_state_txt(wpa_s->wpa_state));
 	ucv_object_add(ret, "state", ucv_get(val));
 
-	bss = link_id == -1 ? wpa_s->current_bss : wpa_s->links[link_id].bss;
+	if (wpa_s->valid_links) {
+		/* The connection is ML */
+		struct wpa_bss *link_bss;
+
+		for_each_link(wpa_s->valid_links, i) {
+			link_bss = wpa_s->links[i].bss;
+			if (!link_bss)
+				continue;
+
+			if (wpas_ucode_get_radio_idx(wpa_s, link_bss->freq) ==
+			    radio_idx) {
+				link_id = i;
+				bss = link_bss;
+				break;
+			}
+		}
+	} else if (wpa_s->current_bss &&
+		   wpas_ucode_get_radio_idx(wpa_s, wpa_s->current_bss->freq) ==
+		   radio_idx) {
+			bss = wpa_s->current_bss;
+	}
+
 	if (bss) {
 		int sec_chan = 0;
 
 		hw_mode = ieee80211_freq_to_chan(bss->freq, &channel);
 		is_24ghz = hw_mode == HOSTAPD_MODE_IEEE80211G ||
 			   hw_mode == HOSTAPD_MODE_IEEE80211B;
-		radio_idx = wpas_ucode_get_radio_idx(wpa_s, bss->freq);
 
 		if (wpa_s->valid_links) {
 			freq = wpa_s->links[link_id].freq;
@@ -388,10 +408,12 @@ uc_wpas_iface_ctrl(uc_vm_t *vm, size_t nargs)
 }
 
 static uc_value_t *
-uc_wpas_iface_get_valid_links(uc_vm_t *vm, size_t nargs)
+uc_wpas_iface_get_info(uc_vm_t *vm, size_t nargs)
 {
 	struct wpa_supplicant *wpa_s = uc_fn_thisval("wpas.iface");
 	uc_value_t *ret;
+	u32 radio_mask;
+	int i;
 
 	if (!wpa_s)
 		return NULL;
@@ -399,6 +421,9 @@ uc_wpas_iface_get_valid_links(uc_vm_t *vm, size_t nargs)
 	ret = ucv_object_new(vm);
 	ucv_object_add(ret, "valid_links", ucv_uint64_new(wpa_s->valid_links));
 
+	wpas_drv_get_vif_radio_mask(wpa_s, &radio_mask);
+	ucv_object_add(ret, "radio_mask", ucv_uint64_new(radio_mask));
+
 	return ret;
 }
 
@@ -414,7 +439,7 @@ int wpas_ucode_init(struct wpa_global *gl)
 	static const uc_function_list_t iface_fns[] = {
 		{ "status", uc_wpas_iface_status },
 		{ "ctrl", uc_wpas_iface_ctrl },
-		{ "get_valid_links", uc_wpas_iface_get_valid_links },
+		{ "get_info", uc_wpas_iface_get_info },
 	};
 	uc_value_t *data, *proto;
 
-- 
2.45.2

