From e2903bd4663a20c83a8f49f209fe44cebd9a18b8 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Tue, 29 Oct 2024 14:31:42 +0800
Subject: [PATCH 144/206] mtk: wpa_s: add Neg-TTLM setup and teardown for STA
 MLD

Add support to setup and tear down Neg-TTLM of the STA MLD by
wpa_cli:
$ wpa_cli -i <ifname> neg_ttlm_setup <uplink|downlink|bidi> <tid 0 bitmap> <tid 1 bitmap> <tid 2 bitmap> <tid 3 bitmap> <tid 4 bitmap> <tid 5 bitmap> <tid 6 bitmap> <tid 7 bitmap>
$ wpa_cli -i <ifname> neg_ttlm_teardown

This patch reads input from wpa_cli, then sends
NL80211_CMD_SET_TID_TO_LINK_MAPPING comamnd to the kerenl. If it's a
teardown resuest, the attributes for DL/UL bitmap are not provided.

There are some limitations about requesting Neg-TTLM:
1. only support bi-direction TTLM
2. it dose not check the conflict with active Adv-TTLM (if any)
3. A new Neg-TTLM setup will replace the old one.
4. A Neg-TTLM teardown do nothing if there is no active Neg-TTLM.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 src/common/ieee802_11_defs.h | 14 +++++++
 src/drivers/driver.h         | 19 ++++++++++
 src/drivers/driver_nl80211.c | 41 ++++++++++++++++++++
 wpa_supplicant/ctrl_iface.c  | 72 ++++++++++++++++++++++++++++++++++++
 wpa_supplicant/driver_i.h    | 15 ++++++++
 wpa_supplicant/wpa_cli.c     | 18 +++++++++
 6 files changed, 179 insertions(+)

diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index f5337a260..2316f2858 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -806,6 +806,20 @@
 #define EHT_EML_OMN_EMLSR_PADDING_DELAY_MASK 0x07
 #define EHT_EML_OMN_EMLSR_TRANSITION_DELAY_MASK 0x38
 
+#define IEEE80211_TTLM_MAX_CNT 2
+#define IEEE80211_TTLM_NUM_TIDS 8
+
+struct ieee80211_neg_ttlm {
+	u16 dlink[IEEE80211_TTLM_NUM_TIDS];
+	u16 ulink[IEEE80211_TTLM_NUM_TIDS];
+	bool valid;
+};
+
+struct neg_ttlm_req {
+	u8 dialog_token;
+	u8 variable[];
+};
+
 /**
  * struct attlm_settings - Setting for Advertised Tid-to-Link Mapping
  * @valid: whether this A-TTLM is still valid
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index fcd6c2f88..8a394c31c 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2787,6 +2787,11 @@ struct wpa_mlo_signal_info {
 	struct wpa_signal_info links[MAX_NUM_MLD_LINKS];
 };
 
+struct wpa_neg_ttlm_info {
+	u16 dlink[IEEE80211_TTLM_NUM_TIDS];
+	u16 ulink[IEEE80211_TTLM_NUM_TIDS];
+};
+
 /**
  * struct wpa_channel_info - Information about the current channel
  * @frequency: Center frequency of the primary 20 MHz channel
@@ -4513,6 +4518,20 @@ struct wpa_driver_ops {
 	int (*mlo_signal_poll)(void *priv,
 			       struct wpa_mlo_signal_info *mlo_signal_info);
 
+	/**
+	 * neg_ttlm_setup - set up a negotiated TTLM to AP MLD
+	 * @priv: Private driver interface data
+	 * @neg_ttlm: Neg-TTLM info structure
+	 */
+	int (*neg_ttlm_setup)(void *priv,
+			      struct wpa_neg_ttlm_info *neg_ttlm);
+
+	/**
+	 * neg_ttlm_teardown - tear down a negotiated TTLM
+	 * @priv: Private driver interface data
+	 */
+	int (*neg_ttlm_teardown)(void *priv);
+
 	/**
 	 * channel_info - Get parameters of the current operating channel
 	 * @priv: Private driver interface data
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 11ec0cd52..563e438f7 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -10324,6 +10324,45 @@ static int nl80211_mlo_signal_poll(void *priv,
 }
 
 
+static int nl80211_neg_ttlm_setup(void *priv,
+				  struct wpa_neg_ttlm_info *neg_ttlm)
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct nl_msg *msg;
+
+	if (!(msg = nl80211_bss_msg(bss, 0,
+	    NL80211_CMD_SET_TID_TO_LINK_MAPPING)) ||
+	    nla_put(msg, NL80211_ATTR_MLO_TTLM_DLINK,
+		    sizeof(neg_ttlm->dlink), neg_ttlm->dlink) ||
+	    nla_put(msg, NL80211_ATTR_MLO_TTLM_ULINK,
+		    sizeof(neg_ttlm->ulink), neg_ttlm->ulink)) {
+		nl80211_nlmsg_clear(msg);
+		nlmsg_free(msg);
+		return -1;
+	}
+
+	return send_and_recv_cmd(drv, msg);
+}
+
+
+static int nl80211_neg_ttlm_teardown(void *priv)
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct nl_msg *msg;
+
+	if (!(msg = nl80211_bss_msg(bss, 0,
+	    NL80211_CMD_SET_TID_TO_LINK_MAPPING))) {
+		nl80211_nlmsg_clear(msg);
+		nlmsg_free(msg);
+		return -1;
+	}
+
+	return send_and_recv_cmd(drv, msg);
+}
+
+
 static int nl80211_set_param(void *priv, const char *param)
 {
 	struct i802_bss *bss = priv;
@@ -16642,6 +16681,8 @@ const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.signal_monitor = nl80211_signal_monitor,
 	.signal_poll = nl80211_signal_poll,
 	.mlo_signal_poll = nl80211_mlo_signal_poll,
+	.neg_ttlm_setup = nl80211_neg_ttlm_setup,
+	.neg_ttlm_teardown = nl80211_neg_ttlm_teardown,
 	.channel_info = nl80211_channel_info,
 	.set_param = nl80211_set_param,
 	.get_radio_name = nl80211_get_radio_name,
diff --git a/wpa_supplicant/ctrl_iface.c b/wpa_supplicant/ctrl_iface.c
index 79d330448..11c8fd6f7 100644
--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -12275,6 +12275,72 @@ static int wpas_ctrl_iface_mlo_signal_poll(struct wpa_supplicant *wpa_s,
 }
 
 
+static int wpas_ctrl_iface_neg_ttlm_setup(struct wpa_supplicant *wpa_s,
+					  const char *cmd)
+{
+	int dir, i = 0, ret;
+	u16 tid_bitmap[IEEE80211_TTLM_NUM_TIDS];
+	char *pos;
+	struct wpa_neg_ttlm_info neg_ttlm;
+
+	if (!wpa_s->valid_links)
+		return -1;
+
+	/*
+	 * Format:
+	 * <uplink/downlink/bidi> <tid0_bitmap> <tid1_bitmap> ... <tid7_bitmap>
+	 */
+	pos = os_strchr(cmd, ' ');
+	if (pos == NULL)
+		return -1;
+	*pos++ = '\0';
+
+	if (os_strcmp(cmd, "downlink") == 0) {
+		dir = 0;
+	} else if (os_strcmp(cmd, "uplink") == 0) {
+		dir = 1;
+	} else if (os_strcmp(cmd, "bidi") == 0) {
+		dir = 2;
+	} else {
+		wpa_printf(MSG_ERROR, "Wrong TTLM direction: %s\n", cmd);
+		return -1;
+	}
+
+	/* TODO add support to setup different link set in UL/DL direction */
+	if (dir != 2) {
+		wpa_printf(MSG_ERROR, "Only support bi-direction Neg-TTLM\n");
+		return -1;
+	}
+
+	ret = sscanf(pos, "%hu %hu %hu %hu %hu %hu %hu %hu", &tid_bitmap[0],
+		     &tid_bitmap[1], &tid_bitmap[2], &tid_bitmap[3],
+		     &tid_bitmap[4], &tid_bitmap[5], &tid_bitmap[6],
+		     &tid_bitmap[7]);
+
+	if (ret != 8) {
+		wpa_printf(MSG_ERROR, "Wrong TID mapping %s\n", pos);
+		return -1;
+	}
+
+	wpa_printf(MSG_DEBUG, "Negotiated Tid-To-Link Mapping: Setup request: ");
+	wpa_printf(MSG_DEBUG, "  * direction: %s", cmd);
+	for (i = 0; i < IEEE80211_TTLM_NUM_TIDS; i++) {
+		neg_ttlm.dlink[i] = dir != 1 ? tid_bitmap[i] : 0xffff;
+		neg_ttlm.ulink[i] = dir != 0 ? tid_bitmap[i] : 0xffff;
+		wpa_printf(MSG_DEBUG, "TID %d: downlink=%d, uplink=%d\n",
+			   i, neg_ttlm.dlink[i], neg_ttlm.ulink[i]);
+	}
+
+	return wpa_drv_neg_ttlm_setup(wpa_s, &neg_ttlm);
+}
+
+
+static int wpas_ctrl_iface_neg_ttlm_teardown(struct wpa_supplicant *wpa_s)
+{
+	return wpa_drv_neg_ttlm_teardown(wpa_s);
+}
+
+
 static int wpas_ctrl_iface_mlo_status(struct wpa_supplicant *wpa_s,
 				      char *buf, size_t buflen)
 {
@@ -13861,6 +13927,12 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 		if (wpas_update_random_addr_disassoc(wpa_s) != 1)
 			reply_len = -1;
 		wpa_s->conf->preassoc_mac_addr = mac_addr_style;
+	} else if (os_strncmp(buf, "NEG_TTLM_SETUP ", 15) == 0) {
+		if(wpas_ctrl_iface_neg_ttlm_setup(wpa_s, buf + 15))
+			reply_len = -1;
+	} else if (os_strcmp(buf, "NEG_TTLM_TEARDOWN") == 0) {
+		if(wpas_ctrl_iface_neg_ttlm_teardown(wpa_s))
+			reply_len = -1;
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
 		reply_len = 16;
diff --git a/wpa_supplicant/driver_i.h b/wpa_supplicant/driver_i.h
index 2922304f3..4ac76ac01 100644
--- a/wpa_supplicant/driver_i.h
+++ b/wpa_supplicant/driver_i.h
@@ -544,6 +544,21 @@ static inline int wpa_drv_mlo_signal_poll(struct wpa_supplicant *wpa_s,
 	return -1;
 }
 
+static inline int wpa_drv_neg_ttlm_setup(struct wpa_supplicant *wpa_s,
+					 struct wpa_neg_ttlm_info *neg_ttlm)
+{
+	if (wpa_s->driver->neg_ttlm_setup)
+		return wpa_s->driver->neg_ttlm_setup(wpa_s->drv_priv, neg_ttlm);
+	return -1;
+}
+
+static inline int wpa_drv_neg_ttlm_teardown(struct wpa_supplicant *wpa_s)
+{
+	if (wpa_s->driver->neg_ttlm_teardown)
+		return wpa_s->driver->neg_ttlm_teardown(wpa_s->drv_priv);
+	return -1;
+}
+
 static inline int wpa_drv_channel_info(struct wpa_supplicant *wpa_s,
 				       struct wpa_channel_info *ci)
 {
diff --git a/wpa_supplicant/wpa_cli.c b/wpa_supplicant/wpa_cli.c
index f650bb909..508bcf0dd 100644
--- a/wpa_supplicant/wpa_cli.c
+++ b/wpa_supplicant/wpa_cli.c
@@ -434,6 +434,18 @@ static int wpa_cli_cmd_mlo_signal_poll(struct wpa_ctrl *ctrl, int argc, char *ar
 }
 
 
+static int wpa_cli_cmd_neg_ttlm_setup(struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	return wpa_cli_cmd(ctrl, "NEG_TTLM_SETUP", 9, argc, argv);
+}
+
+
+static int wpa_cli_cmd_neg_ttlm_teardown(struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	return wpa_ctrl_command(ctrl, "NEG_TTLM_TEARDOWN");
+}
+
+
 static int wpa_cli_cmd_set(struct wpa_ctrl *ctrl, int argc, char *argv[])
 {
 	char cmd[256];
@@ -4125,6 +4137,12 @@ static const struct wpa_cli_cmd wpa_cli_commands[] = {
 	{ "nan_flush", wpa_cli_cmd_nan_flush, NULL,
 	  cli_cmd_flag_none, "= Flush all NAN USD services" },
 #endif /* CONFIG_NAN_USD */
+	{ "neg_ttlm_setup", wpa_cli_cmd_neg_ttlm_setup, NULL,
+	  cli_cmd_flag_none,
+	  "<uplink/downlink/bidi> <tid0 bitmap> <tid1 bitmap> <tid2 bitmap> <tid3 bitmap> <tid4 bitmap> <tid5 bitmap> <tid6 bitmap> <tid7 bitmap> = Setup negotiated TTLM" },
+	{ "neg_ttlm_teardown", wpa_cli_cmd_neg_ttlm_teardown, NULL,
+	  cli_cmd_flag_none,
+	  "teardown the Neg-TTLM" },
 	{ NULL, NULL, NULL, cli_cmd_flag_none, NULL }
 };
 
-- 
2.45.2

