From a0ac170d0d84468bf823277fa56276f609f6e064 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Mon, 23 Jun 2025 14:42:22 +0800
Subject: [PATCH 212/236] mtk: hostapd: add disconnect counter for AP interface

Add 2 hostapd_cli commands for getting and clearing the counters:
1. hostapd_cli -i <ifname> get_disconnect_counter
2. hostapd_cli -i <ifname> clear_disconnect_counter

The output of getting counter will be like:
Triggered by AP
  - Broadcast DEAUTH: 0
  - Unicast DEAUTH: 0
  - Broadcast DISASSOC: 0
  - Unicast DISASSOC: 0
Triggered by STA
  - Unicast DEAUTH 1
  - Unicast DISASSOC 0

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>

Fix hostapd crash
Make the format consistent
Also, please help to correct the original commit message regarding the cmd format

1. hostapd_cli -i <ifname> get_disconnect_counter -> get_disconn_counter
2. hostapd_cli -i <ifname> clear_disconnect_counter -> clear_disconn_counter

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 hostapd/ctrl_iface.c  | 91 +++++++++++++++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c | 16 ++++++++
 src/ap/hostapd.c      | 15 +++++++
 src/ap/hostapd.h      |  7 ++++
 src/ap/ieee802_11.c   | 61 ++++++++++++++++++++++++++++-
 5 files changed, 188 insertions(+), 2 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 213316b75..94840befd 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -4960,6 +4960,91 @@ hostapd_ctrl_iface_set_dfs_detect_mode(struct hostapd_data *hapd, char *value,
 }
 
 
+static int
+hostapd_ctrl_iface_get_disconn_counter(struct hostapd_data *hapd, char *buf,
+				       size_t buflen)
+{
+	char *pos, *end;
+	int ret;
+
+#ifdef CONFIG_IEEE80211BE
+	if (hostapd_is_mld_ap(hapd) && hapd->mld && hapd->mld->fbss)
+		hapd = hapd->mld->fbss;
+#endif /* CONFIG_IEEE80211BE */
+
+	pos = buf;
+	end = buf + buflen;
+
+	ret = os_snprintf(pos, end - pos, "Triggered by AP\n");
+	if (os_snprintf_error(end - pos, ret))
+		return pos - buf;
+	pos += ret;
+
+	ret = os_snprintf(pos, end - pos, "  - Broadcast DEAUTH: %u\n",
+			  hapd->deauth_count_from_ap_bc);
+	if (os_snprintf_error(end - pos, ret))
+		return pos - buf;
+	pos += ret;
+
+	ret = os_snprintf(pos, end - pos, "  - Unicast DEAUTH: %u\n",
+			  hapd->deauth_count_from_ap_uc);
+	if (os_snprintf_error(end - pos, ret))
+		return pos - buf;
+	pos += ret;
+
+	ret = os_snprintf(pos, end - pos, "  - Broadcast DISASSOC: %u\n",
+			  hapd->disassoc_count_from_ap_bc);
+	if (os_snprintf_error(end - pos, ret))
+		return pos - buf;
+	pos += ret;
+
+	ret = os_snprintf(pos, end - pos, "  - Unicast DISASSOC: %u\n",
+			  hapd->disassoc_count_from_ap_uc);
+	if (os_snprintf_error(end - pos, ret))
+		return pos - buf;
+	pos += ret;
+
+	ret = os_snprintf(pos, end - pos, "Triggered by STA\n");
+	if (os_snprintf_error(end - pos, ret))
+		return pos - buf;
+	pos += ret;
+
+	ret = os_snprintf(pos, end - pos, "  - Unicast DEAUTH: %u\n",
+			  hapd->deauth_count_from_sta);
+	if (os_snprintf_error(end - pos, ret))
+		return pos - buf;
+	pos += ret;
+
+	ret = os_snprintf(pos, end - pos, "  - Unicast DISASSOC: %u\n",
+			  hapd->disassoc_count_from_sta);
+	if (os_snprintf_error(end - pos, ret))
+		return pos - buf;
+	pos += ret;
+
+	return pos - buf;
+}
+
+
+static int
+hostapd_ctrl_iface_clear_disconn_counter(struct hostapd_data *hapd, char *buf,
+					 size_t buflen)
+{
+#ifdef CONFIG_IEEE80211BE
+	if (hostapd_is_mld_ap(hapd) && hapd->mld && hapd->mld->fbss)
+		hapd = hapd->mld->fbss;
+#endif /* CONFIG_IEEE80211BE */
+
+	hapd->deauth_count_from_sta = 0;
+	hapd->deauth_count_from_ap_uc = 0;
+	hapd->deauth_count_from_ap_bc = 0;
+	hapd->disassoc_count_from_sta = 0;
+	hapd->disassoc_count_from_ap_uc = 0;
+	hapd->disassoc_count_from_ap_bc = 0;
+
+	return 0;
+}
+
+
 static int
 hostapd_ctrl_iface_set_offchain(struct hostapd_data *hapd, char *cmd,
 				char *buf, size_t buflen)
@@ -6838,6 +6923,12 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "DFS_DETECT_MODE ", 16) == 0) {
 		reply_len = hostapd_ctrl_iface_set_dfs_detect_mode(hapd, buf + 16,
 								   reply, reply_size);
+	} else if (os_strncmp(buf, "GET_DISCONN_COUNTER", 19) == 0) {
+		reply_len = hostapd_ctrl_iface_get_disconn_counter(hapd, reply,
+								   reply_size);
+	} else if (os_strncmp(buf, "CLEAR_DISCONN_COUNTER", 21) == 0) {
+		reply_len = hostapd_ctrl_iface_clear_disconn_counter(hapd, reply,
+								     reply_size);
 	} else if (os_strncmp(buf, "SET_OFFCHAIN", 12) == 0) {
 		reply_len = hostapd_ctrl_iface_set_offchain(hapd, buf + 12, reply, reply_size);
 	} else if (os_strncmp(buf, "GET_OFFCHAIN", 12) == 0) {
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 728b9aad5..5a4eeea22 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1872,6 +1872,18 @@ static int hostapd_cli_cmd_dfs_detect_mode(struct wpa_ctrl *ctrl, int argc,
 	return hostapd_cli_cmd(ctrl, "DFS_DETECT_MODE", 1, argc, argv);
 }
 
+static int
+hostapd_cli_cmd_get_disconn_counter(struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	return wpa_ctrl_command(ctrl, "GET_DISCONN_COUNTER");
+}
+
+static int
+hostapd_cli_cmd_clear_disconn_counter(struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	return wpa_ctrl_command(ctrl, "CLEAR_DISCONN_COUNTER");
+}
+
 struct hostapd_cli_cmd {
 	const char *cmd;
 	int (*handler)(struct wpa_ctrl *ctrl, int argc, char *argv[]);
@@ -2158,6 +2170,10 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 		" = Get EDCCA threshold from driver" },
 	{ "dfs_detect_mode", hostapd_cli_cmd_dfs_detect_mode, NULL,
 		" = Set DFS detection mode" },
+	{ "get_disconn_counter", hostapd_cli_cmd_get_disconn_counter, NULL,
+		" = Get the disconnect counter" },
+	{ "clear_disconn_counter", hostapd_cli_cmd_clear_disconn_counter, NULL,
+		" = Clear the disconnect counter" },
 	{ NULL, NULL, NULL, NULL }
 };
 
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index e916b7819..0e1a03512 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -5746,6 +5746,21 @@ int hostapd_mld_remove_link(struct hostapd_data *hapd)
 		next_fbss = dl_list_entry(mld->links.next, struct hostapd_data,
 					  link);
 		mld->fbss = next_fbss;
+
+		if (mld->fbss) {
+			next_fbss->deauth_count_from_sta =
+				hapd->deauth_count_from_sta;
+			next_fbss->deauth_count_from_ap_uc =
+				hapd->deauth_count_from_ap_uc;
+			next_fbss->deauth_count_from_ap_bc =
+				hapd->deauth_count_from_ap_bc;
+			next_fbss->disassoc_count_from_sta =
+				hapd->disassoc_count_from_sta;
+			next_fbss->disassoc_count_from_ap_uc =
+				hapd->disassoc_count_from_ap_uc;
+			next_fbss->disassoc_count_from_ap_bc =
+				hapd->disassoc_count_from_ap_bc;
+		}
 	}
 
 	wpa_printf(MSG_DEBUG, "AP MLD %s: First link BSS set to %p",
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index d34fb36cc..acc4386dc 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -555,6 +555,13 @@ struct hostapd_data {
 
 	s64 tsf_offset[MAX_NUM_MLD_LINKS];
 
+	u32 deauth_count_from_sta;
+	u32 deauth_count_from_ap_uc;
+	u32 deauth_count_from_ap_bc;
+	u32 disassoc_count_from_sta;
+	u32 disassoc_count_from_ap_uc;
+	u32 disassoc_count_from_ap_bc;
+
 #ifdef CONFIG_TESTING_OPTIONS
 	u8 eht_mld_link_removal_count;
 #endif /* CONFIG_TESTING_OPTIONS */
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 9307dccbc..bc5158822 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -6537,6 +6537,47 @@ static bool hostapd_ml_handle_disconnect(struct hostapd_data *hapd,
 }
 
 
+static void update_disconnect_count(struct hostapd_data *hapd, bool is_deauth,
+				    bool from_sta, bool broadcast, const u8 *addr,
+				    u16 reason)
+{
+	u8 peer_addr[ETH_ALEN];
+
+	if (!hapd)
+		return;
+
+#ifdef CONFIG_IEEE80211BE
+	if (hostapd_is_mld_ap(hapd) && hapd->mld && hapd->mld->fbss)
+		hapd = hapd->mld->fbss;
+#endif /* CONFIG_IEEE80211BE */
+
+	if (addr && !broadcast)
+		os_memcpy(peer_addr, addr, ETH_ALEN);
+	else
+		os_memset(peer_addr, 0xff, ETH_ALEN);
+	wpa_printf(MSG_INFO,
+		   "mtk: update disconnect counter: type=%s, from_sta=%d, "
+		   "addr="MACSTR", reason=%u\n",
+		   is_deauth ? "DEAUTH" : "DISASSOC", from_sta,
+		   MAC2STR(peer_addr), reason);
+	if (is_deauth) {
+		if (from_sta)
+			hapd->deauth_count_from_sta++;
+		else if (broadcast)
+			hapd->deauth_count_from_ap_bc++;
+		else
+			hapd->deauth_count_from_ap_uc++;
+	} else {
+		if (from_sta)
+			hapd->disassoc_count_from_sta++;
+		else if (broadcast)
+			hapd->disassoc_count_from_ap_bc++;
+		else
+			hapd->disassoc_count_from_ap_uc++;
+	}
+}
+
+
 static void handle_disassoc(struct hostapd_data *hapd,
 			    const struct ieee80211_mgmt *mgmt, size_t len)
 {
@@ -6558,6 +6599,9 @@ static void handle_disassoc(struct hostapd_data *hapd,
 		return;
 	}
 
+	update_disconnect_count(hapd, false, true, false, mgmt->sa,
+				le_to_host16(mgmt->u.disassoc.reason_code));
+
 	if (hostapd_ml_handle_disconnect(hapd, sta, mgmt, true))
 		return;
 
@@ -6590,6 +6634,9 @@ static void handle_deauth(struct hostapd_data *hapd,
 		return;
 	}
 
+	update_disconnect_count(hapd, true, true, false, mgmt->sa,
+				le_to_host16(mgmt->u.deauth.reason_code));
+
 	if (hostapd_ml_handle_disconnect(hapd, sta, mgmt, false))
 		return;
 
@@ -7429,8 +7476,11 @@ static void handle_deauth_cb(struct hostapd_data *hapd,
 			     size_t len, int ok)
 {
 	struct sta_info *sta;
-	if (is_multicast_ether_addr(mgmt->da))
+	if (is_multicast_ether_addr(mgmt->da)) {
+		update_disconnect_count(hapd, true, false, true, NULL,
+					le_to_host16(mgmt->u.deauth.reason_code));
 		return;
+	}
 	sta = ap_get_sta(hapd, mgmt->da);
 	if (!sta) {
 		wpa_printf(MSG_DEBUG, "handle_deauth_cb: STA " MACSTR
@@ -7444,6 +7494,8 @@ static void handle_deauth_cb(struct hostapd_data *hapd,
 		wpa_printf(MSG_DEBUG, "STA " MACSTR " did not acknowledge "
 			   "deauth", MAC2STR(sta->addr));
 
+	update_disconnect_count(hapd, true, false, false, mgmt->da,
+				le_to_host16(mgmt->u.deauth.reason_code));
 	ap_sta_deauth_cb(hapd, sta);
 }
 
@@ -7453,8 +7505,11 @@ static void handle_disassoc_cb(struct hostapd_data *hapd,
 			       size_t len, int ok)
 {
 	struct sta_info *sta;
-	if (is_multicast_ether_addr(mgmt->da))
+	if (is_multicast_ether_addr(mgmt->da)) {
+		update_disconnect_count(hapd, false, false, true, NULL,
+					le_to_host16(mgmt->u.disassoc.reason_code));
 		return;
+	}
 	sta = ap_get_sta(hapd, mgmt->da);
 	if (!sta) {
 		wpa_printf(MSG_DEBUG, "handle_disassoc_cb: STA " MACSTR
@@ -7468,6 +7523,8 @@ static void handle_disassoc_cb(struct hostapd_data *hapd,
 		wpa_printf(MSG_DEBUG, "STA " MACSTR " did not acknowledge "
 			   "disassoc", MAC2STR(sta->addr));
 
+	update_disconnect_count(hapd, false, false, false, mgmt->da,
+				le_to_host16(mgmt->u.disassoc.reason_code));
 	ap_sta_disassoc_cb(hapd, sta);
 }
 
-- 
2.45.2

