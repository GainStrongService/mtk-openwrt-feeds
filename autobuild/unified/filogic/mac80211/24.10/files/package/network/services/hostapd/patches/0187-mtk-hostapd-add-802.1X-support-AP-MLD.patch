From c63f03b44d9e87cf221a2de2a36767b568c49ac8 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Tue, 25 Mar 2025 14:37:55 +0800
Subject: [PATCH 187/206] mtk: hostapd: add 802.1X support AP MLD

This commit includes 2 function extension about 802.1X + AP MLD
1. WPS
2. EAP

Fix following issues so that WPS connection works on AP MLD
1. In ieee802_1x_sta_entry_alive(), also find sta_info on other link(s)
   if the current hapd is AP MLD
2. In ieee802_1x_send(), always set link_id to -1, which means it's
   MLD-level TX request and MAC80211 should choose the proper link to TX
3. In hostapd_event_eapol_rx(), forward EAPOL_RX event to hapd with
   correct link id
4. Active/finish WPS on a MLD-level.
5. When WPS EAPOL is finished and deauthentication is about to be
   conducted, the hapd that STA is associated needs to be found so that
   the deatuthentication works

Fix following issues so that EAP works on AP MLD
1. In ieee802_1x_ml_set_sta_authorized(),  if AP is MLD then replace
   hapd and sta with the associated ones
2. In ieee802_1x_search_radius_identifier(), if AP is MLD, also find
   the identifier on other link(s)

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 src/ap/drv_callbacks.c |  7 ++--
 src/ap/ieee802_1x.c    | 72 ++++++++++++++++++++++++++++++---
 src/ap/sta_info.c      | 10 +++++
 src/ap/sta_info.h      |  1 +
 src/ap/wps_hostapd.c   | 92 +++++++++++++++++++++++++++++++++++++-----
 5 files changed, 163 insertions(+), 19 deletions(-)

diff --git a/src/ap/drv_callbacks.c b/src/ap/drv_callbacks.c
index 702f916f1..ff5161d21 100644
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -2206,11 +2206,10 @@ static void hostapd_event_eapol_rx(struct hostapd_data *hapd, const u8 *src,
 				   enum frame_encryption encrypted,
 				   int link_id)
 {
-	struct hostapd_data *orig_hapd = hapd;
+	struct hostapd_data *link_hapd = switch_link_hapd(hapd, link_id);
 
 #ifdef CONFIG_IEEE80211BE
-	hapd = switch_link_hapd(hapd, link_id);
-	hapd = hostapd_find_by_sta(hapd->iface, src, true, NULL);
+	hapd = hostapd_find_by_sta(link_hapd->iface, src, true, NULL);
 #else /* CONFIG_IEEE80211BE */
 	hapd = hostapd_find_by_sta(hapd->iface, src, false, NULL);
 #endif /* CONFIG_IEEE80211BE */
@@ -2223,7 +2222,7 @@ static void hostapd_event_eapol_rx(struct hostapd_data *hapd, const u8 *src,
 		 * hostapd_find_by_sta(). */
 		wpa_printf(MSG_DEBUG,
 			   "No STA-specific hostapd instance for EAPOL RX found - fall back to initial context");
-		hapd = orig_hapd;
+		hapd = link_hapd;
 	}
 
 	ieee802_1x_receive(hapd, src, data, data_len, encrypted);
diff --git a/src/ap/ieee802_1x.c b/src/ap/ieee802_1x.c
index 05291f87c..c7fb70a52 100644
--- a/src/ap/ieee802_1x.c
+++ b/src/ap/ieee802_1x.c
@@ -95,14 +95,9 @@ static void ieee802_1x_send(struct hostapd_data *hapd, struct sta_info *sta,
 	if (sta->flags & WLAN_STA_PREAUTH) {
 		rsn_preauth_send(hapd, sta, buf, len);
 	} else {
-		int link_id = -1;
-
-#ifdef CONFIG_IEEE80211BE
-		link_id = hapd->conf->mld_ap ? hapd->mld_link_id : -1;
-#endif /* CONFIG_IEEE80211BE */
 		hostapd_drv_hapd_send_eapol(
 			hapd, sta->addr, buf, len,
-			encrypt, hostapd_sta_flags_to_drv(sta->flags), link_id);
+			encrypt, hostapd_sta_flags_to_drv(sta->flags), -1);
 	}
 
 	os_free(buf);
@@ -195,6 +190,20 @@ static void ieee802_1x_ml_set_sta_authorized(struct hostapd_data *hapd,
 void ieee802_1x_set_sta_authorized(struct hostapd_data *hapd,
 				   struct sta_info *sta, int authorized)
 {
+#ifdef CONFIG_IEEE80211BE
+	struct hostapd_data *assoc_hapd;
+	struct sta_info *assoc_sta;
+
+	if (hostapd_is_mld_ap(hapd)) {
+		assoc_sta = hostapd_ml_get_assoc_sta(hapd, sta, &assoc_hapd);
+
+		if (assoc_sta) {
+			sta = assoc_sta;
+			hapd = assoc_hapd;
+		}
+	}
+
+#endif /* CONFIG_IEEE80211BE */
 	ieee802_1x_set_authorized(hapd, sta, authorized, false);
 	ieee802_1x_ml_set_sta_authorized(hapd, sta, !!authorized);
 }
@@ -1958,6 +1967,22 @@ ieee802_1x_search_radius_identifier(struct hostapd_data *hapd, u8 identifier)
 	id_search.identifier = identifier;
 	id_search.sm = NULL;
 	ap_for_each_sta(hapd, ieee802_1x_select_radius_identifier, &id_search);
+#ifdef CONFIG_IEEE80211BE
+	if (!id_search.sm && hostapd_is_mld_ap(hapd)) {
+		struct hostapd_data *h;
+
+		for_each_mld_link(h, hapd) {
+			if (h == hapd)
+				continue;
+
+			ap_for_each_sta(h,
+					ieee802_1x_select_radius_identifier,
+					&id_search);
+			if (id_search.sm)
+				break;
+		}
+	}
+#endif /* CONFIG_IEEE80211BE */
 	return id_search.sm;
 }
 
@@ -2342,6 +2367,22 @@ static bool _ieee802_1x_finished(void *ctx, void *sta_ctx, int success,
 	struct hostapd_data *hapd = ctx;
 	struct sta_info *sta = sta_ctx;
 
+#ifdef CONFIG_IEEE80211BE
+	if (hostapd_is_mld_ap(hapd)) {
+		struct hostapd_data *link_bss, *assoc_hapd = NULL;
+
+		for_each_mld_link(link_bss, hapd) {
+			if (ap_sta_in_list(link_bss, sta)) {
+				assoc_hapd = link_bss;
+				break;
+			}
+		}
+
+		if (assoc_hapd)
+			hapd = assoc_hapd;
+	}
+#endif /* CONFIG_IEEE80211BE */
+
 	if (preauth) {
 		rsn_preauth_finished(hapd, sta, success);
 		return false;
@@ -2405,6 +2446,25 @@ static int ieee802_1x_sta_entry_alive(void *ctx, const u8 *addr)
 	struct sta_info *sta;
 
 	sta = ap_get_sta(hapd, addr);
+#ifdef CONFIG_IEEE80211BE
+	if ((!sta || hostapd_sta_is_link_sta(hapd, sta)) &&
+	    hostapd_is_mld_ap(hapd)) {
+		struct hostapd_data *h;
+
+		for_each_mld_link(h, hapd) {
+			if (h == hapd)
+				continue;
+
+			/* For STA MLD, finding the sta_info instance of
+			 * the setup link.
+			 * For Legacy STA, only ensure there is a sta_info
+			 * instance on one of the MLD links*/
+			sta = ap_get_sta(h, addr);
+			if (sta && !hostapd_sta_is_link_sta(h, sta))
+				break;
+		}
+	}
+#endif /* CONFIG_IEEE80211BE */
 	if (!sta || !sta->eapol_sm)
 		return 0;
 	return 1;
diff --git a/src/ap/sta_info.c b/src/ap/sta_info.c
index c4b174165..0f65c786b 100644
--- a/src/ap/sta_info.c
+++ b/src/ap/sta_info.c
@@ -2032,3 +2032,13 @@ void ap_sta_set_mld(struct sta_info *sta, bool mld)
 #endif /* CONFIG_IEEE80211BE */
 }
 
+bool ap_sta_in_list(struct hostapd_data *hapd, struct sta_info *sta) {
+	struct sta_info *tmp_sta;
+
+	for (tmp_sta = hapd->sta_list; tmp_sta; tmp_sta = tmp_sta->next)
+		if (tmp_sta == sta)
+			return true;
+
+	return false;
+}
+
diff --git a/src/ap/sta_info.h b/src/ap/sta_info.h
index 861e05b7b..ee341e772 100644
--- a/src/ap/sta_info.h
+++ b/src/ap/sta_info.h
@@ -433,5 +433,6 @@ void ap_sta_free_sta_profile(struct mld_info *info);
 void hostapd_free_link_stas(struct hostapd_data *hapd);
 void clear_wpa_sm_for_each_partner_link(struct hostapd_data *hapd,
 					struct sta_info *psta);
+bool ap_sta_in_list(struct hostapd_data *hapd, struct sta_info *sta);
 
 #endif /* STA_INFO_H */
diff --git a/src/ap/wps_hostapd.c b/src/ap/wps_hostapd.c
index 0429080d1..ca1a3af75 100644
--- a/src/ap/wps_hostapd.c
+++ b/src/ap/wps_hostapd.c
@@ -26,6 +26,7 @@
 #include "beacon.h"
 #include "sta_info.h"
 #include "wps_hostapd.h"
+#include "ieee802_11.h"
 
 
 #ifdef CONFIG_WPS_UPNP
@@ -61,6 +62,7 @@ static int wps_for_each(struct hostapd_iface *iface, void *ctx)
 		struct hostapd_data *hapd = iface->bss[j];
 		int ret;
 
+		/* TODO: wps_independent=0 under MLO is not supported yet */
 		if (hapd != data->calling_hapd &&
 		    (hapd->conf->wps_independent ||
 		     data->calling_hapd->conf->wps_independent))
@@ -333,6 +335,19 @@ void hostapd_wps_eap_completed(struct hostapd_data *hapd)
 	if (eloop_deplete_timeout(0, 0, wps_reload_config, hapd->iface, NULL) ==
 	    1)
 		wpa_printf(MSG_DEBUG, "WPS: Reschedule immediate configuration reload");
+
+#ifdef CONFIG_IEEE80211BE
+	if (hostapd_is_mld_ap(hapd)) {
+		struct hostapd_data *h;
+
+		for_each_mld_link(h, hapd) {
+			if (h == hapd || !h->wps)
+				continue;
+
+			hostapd_wps_cancel(h);
+		}
+	}
+#endif /* CONFIG_IEEE80211BE */
 }
 
 
@@ -1105,14 +1120,19 @@ int hostapd_init_wps(struct hostapd_data *hapd,
 	wps->wps_state = hapd->conf->wps_state;
 	wps->ap_setup_locked = hapd->conf->ap_setup_locked;
 	if (is_nil_uuid(hapd->conf->uuid)) {
-		const u8 *uuid;
+		const u8 *uuid, *mac_addr;
 		uuid = get_own_uuid(hapd->iface);
 		if (uuid && !conf->wps_independent) {
 			os_memcpy(wps->uuid, uuid, UUID_LEN);
 			wpa_hexdump(MSG_DEBUG, "WPS: Clone UUID from another "
 				    "interface", wps->uuid, UUID_LEN);
 		} else {
-			uuid_gen_mac_addr(hapd->own_addr, wps->uuid);
+			mac_addr = hapd->own_addr;
+#ifdef CONFIG_IEEE80211BE
+			if (hostapd_is_mld_ap(hapd))
+				mac_addr = hapd->mld->mld_addr;
+#endif /* CONFIG_IEEE80211BE */
+			uuid_gen_mac_addr(mac_addr, wps->uuid);
 			wpa_hexdump(MSG_DEBUG, "WPS: UUID based on MAC "
 				    "address", wps->uuid, UUID_LEN);
 		}
@@ -1531,11 +1551,38 @@ static int wps_add_pin(struct hostapd_data *hapd, void *ctx)
 
 	if (hapd->wps == NULL)
 		return 0;
+
 	ret = wps_registrar_add_pin(hapd->wps->registrar, data->addr,
 				    data->uuid, data->pin, data->pin_len,
 				    data->timeout);
-	if (ret == 0)
-		data->added++;
+	if (ret)
+		return ret;
+
+#ifdef CONFIG_IEEE80211BE
+	if (hostapd_is_mld_ap(hapd)) {
+		struct hostapd_data *h;
+		int num_links = 1;
+
+		for_each_mld_link(h, hapd) {
+			if (h == hapd || !h->wps)
+				continue;
+
+			/* TODO: error recovery if one of the link returns failure */
+			ret = wps_registrar_add_pin(h->wps->registrar, data->addr,
+						    data->uuid, data->pin,
+						    data->pin_len, data->timeout);
+			if (ret)
+				return ret;
+
+			num_links++;
+		}
+
+		wpa_printf(MSG_DEBUG,
+			   "WPS PIN: %d link(s) of AP MLD are enabled", num_links);
+	}
+#endif /* CONFIG_IEEE80211BE */
+
+	data->added++;
 	return ret;
 }
 
@@ -1574,14 +1621,41 @@ struct wps_button_pushed_ctx {
 static int wps_button_pushed(struct hostapd_data *hapd, void *ctx)
 {
 	struct wps_button_pushed_ctx *data = ctx;
+	int ret = 0;
 
-	if (hapd->wps) {
-		data->count++;
-		return wps_registrar_button_pushed(hapd->wps->registrar,
-						   data->p2p_dev_addr);
+	if (hapd->wps == NULL)
+		return 0;
+
+	ret = wps_registrar_button_pushed(hapd->wps->registrar,
+					  data->p2p_dev_addr);
+	if (ret)
+		return ret;
+
+#ifdef CONFIG_IEEE80211BE
+	if (hostapd_is_mld_ap(hapd)) {
+		struct hostapd_data *h;
+		int num_links = 1;
+
+		for_each_mld_link(h, hapd) {
+			if (h == hapd || !h->wps)
+				continue;
+
+			/* TODO: error recovery if one of the link returns failure */
+			ret = wps_registrar_button_pushed(h->wps->registrar,
+							  data->p2p_dev_addr);
+			if (ret)
+				return ret;
+
+			num_links++;
+		}
+
+		wpa_printf(MSG_DEBUG,
+			   "WPS PBC: %d link(s) of AP MLD are enabled", num_links);
 	}
+#endif /* CONFIG_IEEE80211BE */
 
-	return 0;
+	data->count++;
+	return ret;
 }
 
 
-- 
2.45.2

