From c57bd5ca7587950b1f7ab57b85b4a195a1d765c9 Mon Sep 17 00:00:00 2001
From: Allen Ye <allen.ye@mediatek.com>
Date: Mon, 14 Apr 2025 18:52:17 +0800
Subject: [PATCH 3/5] mtk: hostapd: FT: Add rrb frame support remove sta

When the sta successfully roams to the target ap. The target ap should
send rrb frame with FT_PACKET_R0KH_R1KH_CLEAR_STA tag to tell other
remote r1 to deauthenticate the specify station entry.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>
---
 src/ap/hostapd.h       |   1 +
 src/ap/ieee802_11.c    |   6 ++
 src/ap/wpa_auth.h      |  15 ++++
 src/ap/wpa_auth_ft.c   | 154 +++++++++++++++++++++++++++++++++++++++++
 src/ap/wpa_auth_glue.c |  26 +++++++
 5 files changed, 202 insertions(+)

diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 2aed88142..83381b5e9 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -313,6 +313,7 @@ struct hostapd_data {
 	struct eth_p_oui_ctx *oui_push;
 	struct eth_p_oui_ctx *oui_sreq;
 	struct eth_p_oui_ctx *oui_sresp;
+	struct eth_p_oui_ctx *oui_notify;
 #endif /* CONFIG_IEEE80211R_AP */
 
 	struct wps_context *wps;
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index cdd1c1d24..4c3188738 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -7163,6 +7163,12 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 		sta->pending_eapol_rx = NULL;
 	}
 
+
+#ifdef CONFIG_IEEE80211R_AP
+	if (sta->auth_alg == WLAN_AUTH_FT)
+		wpa_ft_sta_roamed_notify(sta->wpa_sm, hapd->wpa_auth, sta->addr);
+#endif
+
 handle_ml:
 	hostapd_ml_handle_assoc_cb(hapd, sta, ok);
 	sta->sending_assoc = 0;
diff --git a/src/ap/wpa_auth.h b/src/ap/wpa_auth.h
index bfe453a36..9117f4d55 100644
--- a/src/ap/wpa_auth.h
+++ b/src/ap/wpa_auth.h
@@ -49,6 +49,8 @@ struct ft_rrb_frame {
 #define FT_PACKET_R0KH_R1KH_SEQ_REQ 0x04
 #define FT_PACKET_R0KH_R1KH_SEQ_RESP 0x05
 
+#define FT_PACKET_R1KH_STA_ROAMED_NOTIFY 0x10
+
 /* packet layout
  *  IEEE 802 extended OUI ethertype frame header
  *  u16 authlen (little endian)
@@ -89,6 +91,9 @@ struct ft_rrb_frame {
 #define FT_RRB_RADIUS_CUI    16
 #define FT_RRB_SESSION_TIMEOUT  17 /* le32 seconds */
 
+#define FT_RRB_NOTIFIER_R1KH_ID	18 /* FT_R1KH_ID_LEN */
+#define FT_RRB_STA_ADDR 	19 /* ETH_ALEN */
+
 struct ft_rrb_tlv {
 	le16 type;
 	le16 len;
@@ -132,6 +137,12 @@ struct ft_rrb_seq {
  * sequence number response frame TLVs:
  *   auth:
  *     required: SEQ, NONCE, R0KH_ID, R1KH_ID
+ *
+ * station roamed notify frame TLVs:
+ *   auth:
+ *     required: SEQ, R1KH_ID (notifier), R1KH_ID (notifyee)
+ *   encrypted:
+ *     required: STA_ADDR
  */
 
 #ifdef _MSC_VER
@@ -417,6 +428,7 @@ struct wpa_auth_callbacks {
 			      const u8 *data, size_t data_len);
 	int (*add_tspec)(void *ctx, const u8 *sta_addr, u8 *tspec_ie,
 			 size_t tspec_ielen);
+	void (*remove_roamed_fto)(void *ctx, const u8 *sta_addr);
 #endif /* CONFIG_IEEE80211R_AP */
 #ifdef CONFIG_MESH
 	int (*start_ampe)(void *ctx, const u8 *sta_addr);
@@ -569,6 +581,9 @@ void wpa_ft_rrb_oui_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 		       const u8 *dst_addr, u8 oui_suffix, const u8 *data,
 		       size_t data_len);
 void wpa_ft_push_pmk_r1(struct wpa_authenticator *wpa_auth, const u8 *addr);
+void wpa_ft_sta_roamed_notify(struct wpa_state_machine *sm,
+			      struct wpa_authenticator *wpa_auth,
+			      const u8 *sta_addr);
 void wpa_ft_deinit(struct wpa_authenticator *wpa_auth);
 void wpa_ft_sta_deinit(struct wpa_state_machine *sm);
 int wpa_ft_fetch_pmk_r1(struct wpa_authenticator *wpa_auth,
diff --git a/src/ap/wpa_auth_ft.c b/src/ap/wpa_auth_ft.c
index e71096b67..acac1055c 100644
--- a/src/ap/wpa_auth_ft.c
+++ b/src/ap/wpa_auth_ft.c
@@ -691,6 +691,16 @@ wpa_ft_add_sta(struct wpa_authenticator *wpa_auth, const u8 *sta_addr)
 }
 
 
+static void wpa_ft_remove_roamed_sta(struct wpa_authenticator *wpa_auth,
+				     const u8 *sta_addr)
+{
+	if (wpa_auth->cb->remove_roamed_fto == NULL)
+		return;
+	wpa_auth->cb->remove_roamed_fto(wpa_auth->cb_ctx, sta_addr);
+	return;
+}
+
+
 static int wpa_ft_set_vlan(struct wpa_authenticator *wpa_auth,
 			   const u8 *sta_addr, struct vlan_description *vlan)
 {
@@ -5119,6 +5129,79 @@ out:
 }
 
 
+static int wpa_ft_rrb_rx_sta_roamed_notify(struct wpa_authenticator *wpa_auth,
+					   const u8 *src_addr,
+					   const u8 *enc, size_t enc_len,
+					   const u8 *auth, size_t auth_len,
+					   int no_defer)
+{
+	const char *msgtype = "roamed sta notify";
+	u8 *plain = NULL;
+	const u8 *key;
+	size_t plain_len = 0, key_len;
+	struct ft_remote_r1kh *notifier_r1kh, *notifier_r1kh_wildcard;
+	int seq_ret;
+	const u8 *f_r1kh_id, *f_notifier_r1kh_id, *f_sta_addr;
+	size_t f_r1kh_id_len, f_notifier_r1kh_id_len, f_sta_addr_len;
+
+	RRB_GET_AUTH(FT_RRB_NOTIFIER_R1KH_ID, notifier_r1kh_id, msgtype, FT_R1KH_ID_LEN);
+	wpa_printf(MSG_DEBUG, "FT: notifier R1KH-ID=" MACSTR, MAC2STR(f_notifier_r1kh_id));
+
+	RRB_GET_AUTH(FT_RRB_R1KH_ID, r1kh_id, msgtype, FT_R1KH_ID_LEN);
+	wpa_printf(MSG_DEBUG, "FT: R1KH-ID=" MACSTR, MAC2STR(f_r1kh_id));
+
+	if (wpa_ft_rrb_check_r1kh(wpa_auth, f_r1kh_id)) {
+		wpa_printf(MSG_DEBUG, "FT: R1KH-ID mismatch");
+		goto out;
+	}
+
+	wpa_ft_rrb_lookup_r1kh(wpa_auth, f_notifier_r1kh_id, &notifier_r1kh,
+			       &notifier_r1kh_wildcard);
+	if (notifier_r1kh) {
+		key = notifier_r1kh->key;
+		key_len = sizeof(notifier_r1kh->key);
+	} else
+		goto out;
+
+	seq_ret = wpa_ft_rrb_seq_chk(notifier_r1kh->seq, src_addr, enc, enc_len,
+				     auth, auth_len, msgtype, 0);
+
+	if (seq_ret == FT_RRB_SEQ_DROP)
+		goto out;
+
+	if (wpa_ft_rrb_decrypt(key, key_len, enc, enc_len, auth, auth_len,
+			       src_addr, FT_PACKET_R1KH_STA_ROAMED_NOTIFY,
+			       &plain, &plain_len) < 0)
+		goto out;
+
+	/* just send seq request and continue, if seq num is invalid. */
+	switch (seq_ret) {
+	case FT_RRB_SEQ_DEFER:
+		/* FIXME: add support for r1kh to r1kh or more flexibility seq request */
+		wpa_printf(MSG_DEBUG,
+			   "FT: receive defer sequence number from notifier R1KH");
+	case FT_RRB_SEQ_OK:
+		wpa_ft_rrb_seq_accept(wpa_auth, notifier_r1kh->seq, src_addr, auth,
+				      auth_len, msgtype);
+		wpa_ft_rrb_r1kh_replenish(wpa_auth, notifier_r1kh,
+					  wpa_auth->conf.rkh_pos_timeout);
+		break;
+	default:
+		goto out;
+	}
+
+	RRB_GET(FT_RRB_STA_ADDR, sta_addr, msgtype, ETH_ALEN);
+	wpa_printf(MSG_DEBUG, "FT: remove roamed FTO sta_addr=" MACSTR,
+		   MAC2STR(f_sta_addr));
+
+	wpa_ft_remove_roamed_sta(wpa_auth, f_sta_addr);
+
+out:
+	bin_clear_free(plain, plain_len);
+	return 0;
+}
+
+
 int wpa_ft_rrb_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 		  const u8 *data, size_t data_len)
 {
@@ -5304,6 +5387,9 @@ void wpa_ft_rrb_oui_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 		wpa_ft_rrb_rx_seq_resp(wpa_auth, src_addr, enc, elen, auth,
 				       alen, no_defer);
 		break;
+	case FT_PACKET_R1KH_STA_ROAMED_NOTIFY:
+		wpa_ft_rrb_rx_sta_roamed_notify(wpa_auth, src_addr, enc, elen, auth,
+				      alen, no_defer);
 	}
 }
 
@@ -5393,4 +5479,72 @@ void wpa_ft_push_pmk_r1(struct wpa_authenticator *wpa_auth, const u8 *addr)
 	}
 }
 
+
+static void wpa_ft_sta_roamed_notify_per_r1kh(struct wpa_state_machine *sm,
+					      struct wpa_authenticator *wpa_auth,
+					      struct ft_remote_r1kh *r1kh,
+					      const u8 *sta_addr)
+{
+	u8 *packet;
+	size_t packet_len;
+	struct ft_rrb_seq f_seq;
+	struct tlv_list clear[] = {
+		{ .type = FT_RRB_STA_ADDR, .len = ETH_ALEN,
+		  .data = sta_addr },
+		{ .type = FT_RRB_LAST_EMPTY, .len = 0, .data = NULL },
+	};
+	struct tlv_list clear_auth[] = {
+		{ .type = FT_RRB_SEQ, .len = sizeof(f_seq),
+		  .data = (u8 *) &f_seq },
+		{ .type = FT_RRB_NOTIFIER_R1KH_ID, .len = FT_R1KH_ID_LEN,
+		  .data = wpa_auth->conf.r1_key_holder },
+		{ .type = FT_RRB_R1KH_ID, .len = FT_R1KH_ID_LEN,
+		  .data = r1kh->id },
+		{ .type = FT_RRB_LAST_EMPTY, .len = 0, .data = NULL },
+	};
+
+	if (wpa_ft_new_seq(r1kh->seq, &f_seq) < 0) {
+		wpa_printf(MSG_DEBUG, "FT: Failed to get seq num");
+		return;
+	}
+
+	wpa_printf(MSG_DEBUG, "FT: Send sta roamed notify rrb from " MACSTR
+		   " to remote FTR address " MACSTR,
+		   MAC2STR(wpa_auth_get_aa(sm)), MAC2STR(r1kh->addr));
+
+	if (wpa_ft_rrb_build(r1kh->key, sizeof(r1kh->key), clear, NULL, clear_auth, NULL,
+			     wpa_auth_get_aa(sm), FT_PACKET_R1KH_STA_ROAMED_NOTIFY,
+			     &packet, &packet_len) < 0)
+		return;
+
+	wpa_ft_rrb_oui_send(wpa_auth, r1kh->addr, FT_PACKET_R1KH_STA_ROAMED_NOTIFY,
+			    packet, packet_len);
+
+	os_free(packet);
+	return;
+}
+
+
+void wpa_ft_sta_roamed_notify(struct wpa_state_machine *sm,
+			      struct wpa_authenticator *wpa_auth,
+			      const u8 *sta_addr)
+{
+	struct ft_remote_r1kh *r1kh;
+
+	if (!wpa_auth->conf.r1kh_list)
+		return;
+
+	wpa_printf(MSG_DEBUG, "FT: send successful roaming notification for STA " MACSTR,
+		   MAC2STR(sta_addr));
+
+	for (r1kh = *wpa_auth->conf.r1kh_list; r1kh; r1kh = r1kh->next) {
+		if (is_zero_ether_addr(r1kh->addr) ||
+		    is_zero_ether_addr(r1kh->id))
+			continue;
+		if (wpa_ft_rrb_init_r1kh_seq(r1kh) < 0)
+			continue;
+		wpa_ft_sta_roamed_notify_per_r1kh(sm, wpa_auth, r1kh, sta_addr);
+	}
+}
+
 #endif /* CONFIG_IEEE80211R_AP */
diff --git a/src/ap/wpa_auth_glue.c b/src/ap/wpa_auth_glue.c
index 938b9aa70..869b37ee3 100644
--- a/src/ap/wpa_auth_glue.c
+++ b/src/ap/wpa_auth_glue.c
@@ -857,6 +857,8 @@ static struct eth_p_oui_ctx * hostapd_wpa_get_oui(struct hostapd_data *hapd,
 		return hapd->oui_sreq;
 	case FT_PACKET_R0KH_R1KH_SEQ_RESP:
 		return hapd->oui_sresp;
+	case FT_PACKET_R1KH_STA_ROAMED_NOTIFY:
+		return hapd->oui_notify;
 #endif /* CONFIG_IEEE80211R_AP */
 	default:
 		return NULL;
@@ -1252,6 +1254,21 @@ static int hostapd_wpa_auth_add_sta_ft(void *ctx, const u8 *sta_addr)
 }
 
 
+static void hostapd_wpa_auth_remove_roamed_fto(void *ctx, const u8 *sta_addr)
+{
+	struct hostapd_data *hapd = ctx;
+	struct sta_info *sta;
+	int reason = WLAN_REASON_DEAUTH_LEAVING;
+
+	hostapd_drv_sta_deauth(hapd, sta_addr, reason);
+	sta = ap_get_sta(hapd, sta_addr);
+	if (sta)
+		ap_sta_deauthenticate(hapd, sta, reason);
+	else
+		hostapd_drv_sta_remove(hapd, sta_addr);
+}
+
+
 static int hostapd_wpa_auth_set_vlan(void *ctx, const u8 *sta_addr,
 				     struct vlan_description *vlan)
 {
@@ -1581,6 +1598,12 @@ static int hostapd_wpa_register_ft_oui(struct hostapd_data *hapd,
 	if (!hapd->oui_sresp)
 		return -1;
 
+	hapd->oui_notify = eth_p_oui_register(hapd, ft_iface,
+					     FT_PACKET_R1KH_STA_ROAMED_NOTIFY,
+					     hostapd_rrb_oui_receive, hapd);
+	if (!hapd->oui_notify)
+		return -1;
+
 	return 0;
 }
 
@@ -1597,6 +1620,8 @@ static void hostapd_wpa_unregister_ft_oui(struct hostapd_data *hapd)
 	hapd->oui_sreq = NULL;
 	eth_p_oui_unregister(hapd->oui_sresp);
 	hapd->oui_sresp = NULL;
+	eth_p_oui_unregister(hapd->oui_notify);
+	hapd->oui_notify = NULL;
 }
 #endif /* CONFIG_IEEE80211R_AP */
 
@@ -1747,6 +1772,7 @@ int hostapd_setup_wpa(struct hostapd_data *hapd)
 		.get_radius_cui = hostapd_wpa_auth_get_radius_cui,
 		.set_session_timeout = hostapd_wpa_auth_set_session_timeout,
 		.get_session_timeout = hostapd_wpa_auth_get_session_timeout,
+		.remove_roamed_fto = hostapd_wpa_auth_remove_roamed_fto,
 #endif /* CONFIG_IEEE80211R_AP */
 #ifndef CONFIG_NO_RADIUS
 		.request_radius_psk = hostapd_request_radius_psk,
-- 
2.45.2

