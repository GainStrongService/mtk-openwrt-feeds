From 72d22284337aebd85095bcbe4a8b6cd7e5eb0a1d Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Mon, 10 Feb 2025 10:25:14 +0800
Subject: [PATCH 158/206] mtk: hostapd: fix RNR unsync issue after channel
 switch

The 6G RNR info in the beacons of the colocated APs (including legacy
2/5G APs and AP-MLDs without a 6G link) is not updated after a channel switch.
The ieee802_11_set_beacon in hostapd_event_ch_switch was removed
in the previous patch to avoid setting the CU flag twice for MLD (csa_after & here).
However, this results in the RNR info in the beacons of those colocated
APs mentioned above not being updated.
Therefore, add ieee802_11_set_beacon_for_colocat to update the beacon
only for the 2/5G legacy AP.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 src/ap/beacon.c        | 54 ++++++++++++++++++++++++++++++++++++++++++
 src/ap/beacon.h        |  1 +
 src/ap/drv_callbacks.c |  1 +
 3 files changed, 56 insertions(+)

diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index eb2d577c7..9c51bffcb 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -3436,6 +3436,60 @@ int ieee802_11_set_beacon(struct hostapd_data *hapd)
 }
 
 
+int ieee802_11_set_beacon_for_colocat(struct hostapd_data *hapd)
+{
+	struct hostapd_iface *iface = hapd->iface;
+	size_t i, j;
+
+	/* Avoid duplicate beacon updates triggered by
+	 * the channel switch event of each 6G bss
+	 */
+	if (!is_6ghz_op_class(iface->conf->op_class) ||
+	    hapd != iface->bss[0])
+		return 0;
+
+	for (i = 0; i < iface->interfaces->count; i++) {
+		struct hostapd_data *bss, *tmp;
+		struct hostapd_iface *other;
+
+		other = iface->interfaces->iface[i];
+		if (other == iface || !other || !other->conf ||
+		    is_6ghz_op_class(other->conf->op_class))
+			continue;
+
+		for (j = 0; j < other->num_bss; j++) {
+			bss = other->bss[j];
+#ifdef CONFIG_IEEE80211BE
+			/* Update beacon frames for colocated AP MLDs without a 6G link.
+			 * For an AP-MLD with a 6G link, the 6G colocation info in the
+			 * beacon of the affiliated 2/5G link will be updated by the
+			 * CSA procedure (csa after beacon).
+			 */
+			if (bss->conf->mld_ap) {
+				bool skip = false;
+
+				for_each_mld_link(tmp, bss) {
+					if (tmp != bss && tmp->started &&
+					    is_6ghz_op_class(tmp->iconf->op_class)) {
+						skip = true;
+						break;
+					}
+				}
+
+				if (skip)
+					continue;
+			}
+#endif /* CONFIG_IEEE80211BE */
+
+			if (bss && bss->started)
+				__ieee802_11_set_beacon(bss);
+		}
+	}
+
+	return 0;
+}
+
+
 int ieee802_11_set_beacons(struct hostapd_iface *iface)
 {
 	size_t i;
diff --git a/src/ap/beacon.h b/src/ap/beacon.h
index 298f0c05d..e390929df 100644
--- a/src/ap/beacon.h
+++ b/src/ap/beacon.h
@@ -52,6 +52,7 @@ void handle_probe_req(struct hostapd_data *hapd,
 		      int ssi_signal);
 int ieee802_11_set_beacon_per_bss_only(struct hostapd_data *hapd);
 int ieee802_11_set_beacon_per_iface_only(struct hostapd_iface *iface);
+int ieee802_11_set_beacon_for_colocat(struct hostapd_data *hapd);
 int ieee802_11_set_beacon(struct hostapd_data *hapd);
 int ieee802_11_set_beacons(struct hostapd_iface *iface);
 int ieee802_11_set_bss_critical_update(struct hostapd_data *hapd,
diff --git a/src/ap/drv_callbacks.c b/src/ap/drv_callbacks.c
index 48ef7a31f..702f916f1 100644
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -1378,6 +1378,7 @@ void hostapd_event_ch_switch(struct hostapd_data *hapd, int freq, int ht,
 	if (hapd->csa_in_progress &&
 	    freq == hapd->cs_freq_params.freq) {
 		hostapd_cleanup_cs_params(hapd);
+		ieee802_11_set_beacon_for_colocat(hapd);
 
 #ifdef CONFIG_IEEE80211BE
 		if (hapd->conf->mld_ap) {
-- 
2.45.2

