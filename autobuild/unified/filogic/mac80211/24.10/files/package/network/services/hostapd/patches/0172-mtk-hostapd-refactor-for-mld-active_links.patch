From 1cd1da76f46676a73ceb7cb60dcc949f56d9f084 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Mon, 24 Mar 2025 15:47:34 +0800
Subject: [PATCH 172/206] mtk: hostapd: refactor for mld->active_links

Originally, active_links was added for bootup CAC in the following commit to
prevent the 5G CAC link from being added in the RNR of its neighbor link
of its affiliated mld.
"mtk: hostapd: handle 5G link setup after DFS bootup CAC as link reconfig"
In this context, active_links refers to the link that have started beaconing in the mld.
Thus, if the 5G link is under CAC, it will be excluded from active_links.

However, in the following commit, active_links is also used to prevent the link from
being removed twice.
"mtk: hostapd: Fix hostapd crash if setup a iface with a link bss
failed"
In this case, active_links is more accurately described as the links that have been added
to the mld.

Additionally, various checks have been added upstream for building RNR, so there is
no need to use active_links to prevent CAC links from being added to RNR.

Therefore, cleanup the code related to active_links for bootup CAC and rename
active_links to valid_links for readibility.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 hostapd/ctrl_iface.c    |  5 ++---
 src/ap/dfs.c            | 17 -----------------
 src/ap/hostapd.c        | 12 ++++--------
 src/ap/hostapd.h        |  2 +-
 src/ap/ieee802_11.c     |  5 ++---
 src/ap/ieee802_11_eht.c | 10 +++++-----
 src/ap/ucode.c          |  7 ++-----
 7 files changed, 16 insertions(+), 42 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index ba9d57daa..c675e6c9b 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -4059,7 +4059,7 @@ static int hostapd_ctrl_iface_set_attlm(struct hostapd_data *hapd, char *cmd,
 	struct attlm_settings *attlm;
 	struct hostapd_data *h;
 	char *token, *context = NULL;
-	u16 switch_time, disabled_links, valid_links = 0;
+	u16 switch_time, disabled_links, valid_links;
 	u32 duration;
 	int ret, i;
 
@@ -4073,8 +4073,7 @@ static int hostapd_ctrl_iface_set_attlm(struct hostapd_data *hapd, char *cmd,
 
 	attlm = &hapd->mld->new_attlm;
 
-	for_each_mld_link(h, hapd)
-		valid_links |= BIT(h->mld_link_id);
+	valid_links = hapd->mld->valid_links;
 
 	while ((token = str_token(cmd, " ", &context))) {
 		if (os_strncmp(token, "switch_time=", 12) == 0) {
diff --git a/src/ap/dfs.c b/src/ap/dfs.c
index 399f5c551..906a681a3 100644
--- a/src/ap/dfs.c
+++ b/src/ap/dfs.c
@@ -1044,22 +1044,6 @@ int hostapd_handle_dfs(struct hostapd_iface *iface)
 			return -1;
 	}
 
-	/* Remove the CAC link from the active links of AP MLD temporarily to avoid
-	 * it being reported in the RNR of the affiliated APs of the same AP MLD
-	 */
-	if (iface->cac_started) {
-		int i;
-
-		for (i = 0; i < iface->num_bss; i++) {
-			struct hostapd_data *hapd = iface->bss[i];
-
-			if (!hapd->conf->mld_ap || !hapd->mld)
-				continue;
-
-			hapd->mld->active_links &= ~BIT(hapd->mld_link_id);
-		}
-	}
-
 	return 0;
 }
 
@@ -1409,7 +1393,6 @@ int hostapd_dfs_complete_cac(struct hostapd_iface *iface, int success, int freq,
 					if (!hapd->conf->mld_ap || !hapd->mld)
 						continue;
 
-					hapd->mld->active_links |= BIT(hapd->mld_link_id);
 					for_each_mld_link(h, hapd)
 						h->mld->link_reconf_in_progress |=
 								BIT(h->mld_link_id);
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index c5669940f..18e6b98f7 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -1372,11 +1372,7 @@ static int hostapd_start_beacon(struct hostapd_data *hapd,
 #ifdef CONFIG_IEEE80211BE
 	if (hapd->conf->mld_ap && (!hapd->mld->started ||
 				   hapd->conf->mld_allowed_links == 255)) {
-		struct hostapd_data *p_hapd;
-		u16 valid_links = 0;
-
-		for_each_mld_link(p_hapd, hapd)
-			valid_links |= BIT(p_hapd->mld_link_id);
+		u16 valid_links = hapd->mld->valid_links;
 
 		if (valid_links == hapd->conf->mld_allowed_links ||
 		    hapd->conf->mld_allowed_links == 255 ||
@@ -5623,7 +5619,7 @@ int hostapd_mld_add_link(struct hostapd_data *hapd)
 
 	dl_list_add_tail(&mld->links, &hapd->link);
 	mld->num_links++;
-	mld->active_links |= BIT(hapd->mld_link_id);
+	mld->valid_links |= BIT(hapd->mld_link_id);
 
 	wpa_printf(MSG_DEBUG, "AP MLD %s: Link ID %d added. num_links: %d",
 		   mld->name, hapd->mld_link_id, mld->num_links);
@@ -5650,12 +5646,12 @@ int hostapd_mld_remove_link(struct hostapd_data *hapd)
 	if (!mld)
 		return -1;
 
-	if (!(mld->active_links & BIT(hapd->mld_link_id)))
+	if (!(mld->valid_links & BIT(hapd->mld_link_id)))
 		return 0;
 
 	dl_list_del(&hapd->link);
 	mld->num_links--;
-	mld->active_links &= ~BIT(hapd->mld_link_id);
+	mld->valid_links &= ~BIT(hapd->mld_link_id);
 
 	wpa_printf(MSG_DEBUG, "AP MLD %s: Link ID %d removed. num_links: %d",
 		   mld->name, hapd->mld_link_id, mld->num_links);
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 48077b45a..2e07460e4 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -595,7 +595,7 @@ struct hostapd_mld {
 	u8 refcount;
 	bool started;
 	u16 link_reconf_in_progress;
-	u16 active_links;
+	u16 valid_links;
 	u16 removed_links;
 
 	struct attlm_settings new_attlm;
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 9728e1d28..34b2729d2 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -1165,7 +1165,7 @@ void sae_accept_sta(struct hostapd_data *hapd, struct sta_info *sta)
 	sta->sae->peer_commit_scalar = NULL;
 	if (hostapd_is_mld_ap(hapd)) {
 		for_each_mld_link(link, hapd) {
-			if (!(hapd->mld->active_links & BIT(link->mld_link_id)))
+			if (!link->started)
 				continue;
 			wpa_auth_pmksa_add_sae(link->wpa_auth, sta->addr,
 					sta->sae->pmk, sta->sae->pmk_len,
@@ -8597,8 +8597,7 @@ static u8 * hostapd_eid_rnr_mlo(struct hostapd_data *hapd, u32 type,
 		iface = hapd->iface->interfaces->iface[i];
 
 		if (!iface || iface == hapd->iface ||
-		    hapd->iface->freq == iface->freq ||
-		    !(hapd->mld->active_links & BIT(hapd->mld_link_id)))
+		    hapd->iface->freq == iface->freq)
 			continue;
 
 		eid = hostapd_eid_rnr_iface(iface->bss[0], hapd, eid,
diff --git a/src/ap/ieee802_11_eht.c b/src/ap/ieee802_11_eht.c
index 666a90fbd..c1ca508a5 100644
--- a/src/ap/ieee802_11_eht.c
+++ b/src/ap/ieee802_11_eht.c
@@ -520,8 +520,8 @@ static u8 * hostapd_eid_eht_basic_ml_common(struct hostapd_data *hapd,
 	u16 mld_cap;
 	u8 max_simul_links, active_links = 0;
 
-	if (hapd->mld && !(hapd->mld->active_links & BIT(hapd->mld_link_id))) {
-		wpa_printf(MSG_ERROR, "MLD: Current link %d is not active for %s",
+	if (hapd->mld && !(hapd->mld->valid_links & BIT(hapd->mld_link_id))) {
+		wpa_printf(MSG_ERROR, "MLD: Current link %d is not valid for %s",
 			   hapd->mld_link_id, hapd->mld->name);
 		return pos;
 	}
@@ -1713,8 +1713,8 @@ static int ieee802_11_parse_neg_ttlm(struct hostapd_data *hapd,
 
 	if (control & IEEE80211_TTLM_CONTROL_DEF_LINK_MAP) {
 		for (tid = 0; tid < IEEE80211_TTLM_NUM_TIDS; tid++) {
-			neg_ttlm->dlink[tid] = hapd->mld->active_links;
-			neg_ttlm->ulink[tid] = hapd->mld->active_links;
+			neg_ttlm->dlink[tid] = hapd->mld->valid_links;
+			neg_ttlm->ulink[tid] = hapd->mld->valid_links;
 		}
 		*direction = IEEE80211_TTLM_DIRECTION_BOTH;
 		neg_ttlm->valid = true;
@@ -2274,7 +2274,7 @@ void hostapd_teardown_neg_ttlm(struct hostapd_data *hapd, struct sta_info *sta)
 
 		ttlm.valid = true;
 		for (tid = 0; tid < IEEE80211_TTLM_NUM_TIDS; tid++) {
-			map = ~attlm->disabled_links & hapd->mld->active_links;
+			map = ~attlm->disabled_links & hapd->mld->valid_links;
 			ttlm.dlink[tid] = map;
 			ttlm.ulink[tid] = map;
 		}
diff --git a/src/ap/ucode.c b/src/ap/ucode.c
index 8cefe88bf..85e7659b9 100644
--- a/src/ap/ucode.c
+++ b/src/ap/ucode.c
@@ -803,12 +803,9 @@ uc_hostapd_iface_is_mld_finished(uc_vm_t *vm, size_t nargs)
 
 	for (i = 0; i < iface->num_bss; i++) {
 		if (iface->bss[i]->conf->mld_ap) {
-			struct hostapd_data *p_hapd;
-			u16 valid_links = 0;
-
-			for_each_mld_link(p_hapd, iface->bss[i])
-				valid_links |= BIT(p_hapd->mld_link_id);
+			u16 valid_links;
 
+			valid_links = iface->bss[i]->mld->valid_links;
 			if (iface->bss[i]->conf->mld_allowed_links > 0 &&
 			    valid_links != iface->bss[i]->conf->mld_allowed_links) {
 				finished = false;
-- 
2.45.2

