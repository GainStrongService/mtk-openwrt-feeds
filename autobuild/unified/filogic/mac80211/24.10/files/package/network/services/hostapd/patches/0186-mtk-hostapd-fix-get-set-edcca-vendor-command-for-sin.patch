From 53c36c0a058fbb82ac09530ac2541d40b9ae8401 Mon Sep 17 00:00:00 2001
From: Howard Hsu <howard-yh.hsu@mediatek.com>
Date: Tue, 15 Apr 2025 11:47:30 +0800
Subject: [PATCH 186/206] mtk: hostapd: fix get/set edcca vendor command for
 single-wiphy

Fix get/set edcca vendor command with band index to run for single-wiphy
change.

Signed-off-by: Howard Hsu <howard-yh.hsu@mediatek.com>

---
 hostapd/ctrl_iface.c         | 22 +++++++++--------
 hostapd/hostapd_cli.c        | 14 +++++++++++
 src/ap/ap_drv_ops.c          | 28 ++++++++++++++++++----
 src/common/mtk_vendor.h      |  1 +
 src/drivers/driver.h         |  8 +++----
 src/drivers/driver_nl80211.c | 46 +++++++++++++++++++++++++++++-------
 6 files changed, 92 insertions(+), 27 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 1ef89202e..3842e0cff 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -4153,10 +4153,9 @@ static int hostapd_ctrl_iface_neg_ttlm_teardown(struct hostapd_data *hapd,
 
 static int
 hostapd_ctrl_iface_set_edcca(struct hostapd_data *hapd, char *cmd,
-					 char *buf, size_t buflen)
+			     char *buf, size_t buflen)
 {
 	char *pos, *config, *value;
-	u8 mode;
 
 	config = cmd;
 	pos = os_strchr(config, ' ');
@@ -4186,13 +4185,16 @@ hostapd_ctrl_iface_set_edcca(struct hostapd_data *hapd, char *cmd,
 			return -1;
 	} else if (os_strcmp(config, "threshold") == 0) {
 		char *thres_value;
+		int threshold_arr[EDCCA_MAX_BW_NUM];
+		int bw_idx, threshold;
+
 		thres_value = os_strchr(value, ':');
 		if (thres_value == NULL)
 			return -1;
 		*thres_value++ = '\0';
 
-		int bw_idx = atoi(value);
-		int threshold = atoi(thres_value);
+		bw_idx = atoi(value);
+		threshold = atoi(thres_value);
 
 		if (bw_idx < EDCCA_BW_20 || bw_idx > EDCCA_BW_160) {
 			wpa_printf(MSG_ERROR,
@@ -4208,7 +4210,6 @@ hostapd_ctrl_iface_set_edcca(struct hostapd_data *hapd, char *cmd,
 			return -1;
 		}
 
-		int threshold_arr[EDCCA_MAX_BW_NUM];
 		/* 0x7f means keep the origival value in firmware */
 		os_memset(threshold_arr, 0x7f, sizeof(threshold_arr));
 		threshold_arr[bw_idx] = threshold;
@@ -4217,7 +4218,7 @@ hostapd_ctrl_iface_set_edcca(struct hostapd_data *hapd, char *cmd,
 			return -1;
 	} else {
 		wpa_printf(MSG_ERROR,
-			"Unsupported parameter %s for SET_EDCCA", config);
+			   "Unsupported parameter %s for SET_EDCCA", config);
 		return -1;
 	}
 	return os_snprintf(buf, buflen, "OK\n");
@@ -4232,15 +4233,16 @@ hostapd_ctrl_iface_get_edcca(struct hostapd_data *hapd, char *cmd, char *buf,
 
 	pos = buf;
 	end = buf + buflen;
-	u8 value[EDCCA_MAX_BW_NUM] = {0};
 
 	if (os_strcmp(cmd, "enable") == 0) {
 		return os_snprintf(pos, end - pos, "Enable: %s\n",
 				   edcca_mode_str(hapd->iconf->edcca_enable));
 	} else if (os_strcmp(cmd, "compensation") == 0) {
 		return os_snprintf(pos, end - pos, "Compensation: %d\n",
-				  hapd->iconf->edcca_compensation);
+				   hapd->iconf->edcca_compensation);
 	} else if (os_strcmp(cmd, "threshold") == 0) {
+		u8 value[EDCCA_MAX_BW_NUM] = {0};
+
 		if (hostapd_drv_get_edcca(hapd, EDCCA_CTRL_GET_THRES, value) != 0)
 			return -1;
 		return os_snprintf(pos, end - pos,
@@ -6720,10 +6722,10 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 #endif /* CONFIG_IEEE80211BE */
 	} else if (os_strncmp(buf, "SET_EDCCA ", 10) == 0) {
 		reply_len = hostapd_ctrl_iface_set_edcca(hapd, buf+10, reply,
-							  reply_size);
+							 reply_size);
 	} else if (os_strncmp(buf, "GET_EDCCA ", 10) == 0) {
 		reply_len = hostapd_ctrl_iface_get_edcca(hapd, buf+10, reply,
-							  reply_size);
+							 reply_size);
 	} else if (os_strncmp(buf, "SET_MU ", 7) == 0) {
 		reply_len = hostapd_ctrl_iface_set_mu(hapd, buf + 7, reply, reply_size);
 	} else if (os_strncmp(buf, "GET_MU ", 7) == 0) {
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index ea8609170..ea65cb067 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1844,6 +1844,16 @@ static int hostapd_cli_cmd_del_mscs(struct wpa_ctrl *ctrl, int argc, char *argv[
 	return hostapd_cli_cmd(ctrl, "DEL_MSCS", 1, argc, argv);
 }
 
+static int hostapd_cli_cmd_set_edcca(struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	return hostapd_cli_cmd(ctrl, "SET_EDCCA", 1, argc, argv);
+}
+
+static int hostapd_cli_cmd_get_edcca(struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	return hostapd_cli_cmd(ctrl, "GET_EDCCA", 1, argc, argv);
+}
+
 struct hostapd_cli_cmd {
 	const char *cmd;
 	int (*handler)(struct wpa_ctrl *ctrl, int argc, char *argv[]);
@@ -2122,6 +2132,10 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 		" = Control EPCS priority access" },
 	{ "del_mscs", hostapd_cli_cmd_del_mscs, NULL,
 		" = Delete MSCS for the specific STA" },
+	{ "set_edcca", hostapd_cli_cmd_set_edcca, NULL,
+		" = Configure EDCCA mode or threshold" },
+	{ "get_edcca", hostapd_cli_cmd_get_edcca, NULL,
+		" = Get EDCCA threshold from driver" },
 	{ NULL, NULL, NULL, NULL }
 };
 
diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index 521356338..98bcdcaab 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -1462,28 +1462,46 @@ int hostapd_add_pmkid(struct hostapd_data *hapd, const u8 *bssid, const u8 *pmk,
 
 int hostapd_drv_configure_edcca_enable(struct hostapd_data *hapd)
 {
+	s8 link_id = -1;
+
 	if (!hapd->driver || !hapd->driver->configure_edcca_enable)
 		return 0;
-	return hapd->driver->configure_edcca_enable(hapd->drv_priv,
-			hapd->iconf->edcca_enable,
-				hapd->iconf->edcca_compensation);
+
+	if (hapd->conf->mld_ap)
+		link_id = hapd->mld_link_id;
+
+	return hapd->driver->configure_edcca_enable(hapd->drv_priv, link_id,
+						    hapd->iconf->edcca_enable,
+						    hapd->iconf->edcca_compensation);
 }
 
 
 int hostapd_drv_configure_edcca_threshold(struct hostapd_data *hapd,
 					  const int *threshold)
 {
+	s8 link_id = -1;
+
 	if (!hapd->driver || !hapd->driver->configure_edcca_threshold)
 		return 0;
-	return hapd->driver->configure_edcca_threshold(hapd->drv_priv, threshold);
+
+	if (hapd->conf->mld_ap)
+		link_id = hapd->mld_link_id;
+
+	return hapd->driver->configure_edcca_threshold(hapd->drv_priv, link_id, threshold);
 }
 
 
 int hostapd_drv_get_edcca(struct hostapd_data *hapd, const u8 mode, u8 *value)
 {
+	s8 link_id = -1;
+
 	if (!hapd->driver || !hapd->driver->get_edcca)
 		return 0;
-	return hapd->driver->get_edcca(hapd->drv_priv, mode, value);
+
+	if (hapd->conf->mld_ap)
+		link_id = hapd->mld_link_id;
+
+	return hapd->driver->get_edcca(hapd->drv_priv, link_id, mode, value);
 }
 
 int hostapd_drv_mu_ctrl(struct hostapd_data *hapd, u8 mode)
diff --git a/src/common/mtk_vendor.h b/src/common/mtk_vendor.h
index f35d9976e..cdb09bd20 100644
--- a/src/common/mtk_vendor.h
+++ b/src/common/mtk_vendor.h
@@ -39,6 +39,7 @@ enum mtk_vendor_attr_edcca_ctrl {
 	MTK_VENDOR_ATTR_EDCCA_CTRL_SEC80_VAL,
 	MTK_VENDOR_ATTR_EDCCA_CTRL_COMPENSATE,
 	MTK_VENDOR_ATTR_EDCCA_CTRL_SEC160_VAL,
+	MTK_VENDOR_ATTR_EDCCA_CTRL_RADIO_IDX,
 
 	/* keep last */
 	NUM_MTK_VENDOR_ATTRS_EDCCA_CTRL,
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index f79c91b30..8120895b9 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -5565,10 +5565,10 @@ struct wpa_driver_ops {
 	struct hostapd_multi_hw_info *
 	(*get_multi_hw_info)(void *priv, unsigned int *num_multi_hws);
 
-	int (*configure_edcca_enable)(void *priv, const u8 edcca_enable,
-				  const s8 edcca_compensation);
-	int (*configure_edcca_threshold)(void *priv, const int *threshold);
-	int (*get_edcca)(void *priv, const u8 mode, u8 *value);
+	int (*configure_edcca_enable)(void *priv, s8 link_id, const u8 edcca_enable,
+				      const s8 edcca_compensation);
+	int (*configure_edcca_threshold)(void *priv, s8 link_id, const int *threshold);
+	int (*get_edcca)(void *priv, s8 link_id, const u8 mode, u8 *value);
 
 	/**
 	 * mu_ctrl - ctrl for UL/DL MURU
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 1acd71f27..94fe07385 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -115,8 +115,9 @@ static struct nla_policy edcca_ctrl_policy[NUM_MTK_VENDOR_ATTRS_EDCCA_CTRL] = {
 	[MTK_VENDOR_ATTR_EDCCA_CTRL_SEC20_VAL] = { .type = NLA_U8 },
 	[MTK_VENDOR_ATTR_EDCCA_CTRL_SEC40_VAL] = { .type = NLA_U8 },
 	[MTK_VENDOR_ATTR_EDCCA_CTRL_SEC80_VAL] = { .type = NLA_U8 },
-	[MTK_VENDOR_ATTR_EDCCA_CTRL_COMPENSATE] = { .type = NLA_U8 },
+	[MTK_VENDOR_ATTR_EDCCA_CTRL_COMPENSATE] = { .type = NLA_S8 },
 	[MTK_VENDOR_ATTR_EDCCA_CTRL_SEC160_VAL] = { .type = NLA_U8 },
+	[MTK_VENDOR_ATTR_EDCCA_CTRL_RADIO_IDX] = { .type = NLA_U8 },
 };
 
 static const struct nla_policy
@@ -15385,14 +15386,17 @@ static int testing_nl80211_radio_disable(void *priv, int disabled)
 
 #endif /* CONFIG_TESTING_OPTIONS */
 
-static int nl80211_configure_edcca_enable(void *priv,
+static int nl80211_configure_edcca_enable(void *priv, s8 link_id,
 					  const u8 edcca_enable,
 					  const s8 edcca_compensation)
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct i802_link *link = nl80211_get_link(bss, link_id);
+	struct hostapd_data *hapd = bss->ctx;
 	struct nl_msg *msg;
 	struct nlattr *data;
+	u8 radio_idx = 0;
 	int ret;
 
 	if (!drv->mtk_edcca_vendor_cmd_avail) {
@@ -15401,6 +15405,12 @@ static int nl80211_configure_edcca_enable(void *priv,
 		return 0;
 	}
 
+	if (link && link->ctx)
+		hapd = link->ctx;
+
+	if (hapd->iface->current_hw_info)
+		radio_idx = hapd->iface->current_hw_info->hw_idx;
+
 	if (!(msg = nl80211_drv_msg(drv, 0, NL80211_CMD_VENDOR)) ||
 	    nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_MTK) ||
 	    nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
@@ -15408,8 +15418,8 @@ static int nl80211_configure_edcca_enable(void *priv,
 	    !(data = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA)) ||
 	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_MODE, EDCCA_CTRL_SET_EN) ||
 	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_PRI20_VAL, edcca_enable) ||
-	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_COMPENSATE,
-		edcca_compensation)) {
+	    nla_put_s8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_COMPENSATE, edcca_compensation) ||
+	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_RADIO_IDX, radio_idx)) {
 		wpa_printf (MSG_ERROR, "Prepare nl80211 msg fail");
 		nlmsg_free(msg);
 		return -ENOBUFS;
@@ -15423,12 +15433,15 @@ static int nl80211_configure_edcca_enable(void *priv,
 	return ret;
 }
 
-static int nl80211_configure_edcca_threshold(void *priv, const int *threshold)
+static int nl80211_configure_edcca_threshold(void *priv, s8 link_id, const int *threshold)
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct i802_link *link = nl80211_get_link(bss, link_id);
+	struct hostapd_data *hapd = bss->ctx;
 	struct nl_msg *msg;
 	struct nlattr *data;
+	u8 radio_idx = 0;
 	int ret;
 
 	if (!drv->mtk_edcca_vendor_cmd_avail) {
@@ -15443,6 +15456,12 @@ static int nl80211_configure_edcca_threshold(void *priv, const int *threshold)
 		return 0;
 	}
 
+	if (link && link->ctx)
+		hapd = link->ctx;
+
+	if (hapd->iface->current_hw_info)
+		radio_idx = hapd->iface->current_hw_info->hw_idx;
+
 	if (!(msg = nl80211_drv_msg(drv, 0, NL80211_CMD_VENDOR)) ||
 	    nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_MTK) ||
 	    nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
@@ -15452,7 +15471,8 @@ static int nl80211_configure_edcca_threshold(void *priv, const int *threshold)
 	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_PRI20_VAL, threshold[0] & 0xff) ||
 	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_SEC40_VAL, threshold[1] & 0xff) ||
 	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_SEC80_VAL, threshold[2] & 0xff) ||
-	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_SEC160_VAL, threshold[3] & 0xff)) {
+	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_SEC160_VAL, threshold[3] & 0xff) ||
+	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_RADIO_IDX, radio_idx)) {
 		wpa_printf (MSG_ERROR, "Prepare nl80211 msg fail");
 		nlmsg_free(msg);
 		return -ENOBUFS;
@@ -15520,12 +15540,15 @@ static int edcca_info_handler(struct nl_msg *msg, void *arg)
 }
 
 
-static int nl80211_get_edcca(void *priv, const u8 mode, u8 *value)
+static int nl80211_get_edcca(void *priv, s8 link_id, const u8 mode, u8 *value)
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct i802_link *link = nl80211_get_link(bss, link_id);
+	struct hostapd_data *hapd = bss->ctx;
 	struct nl_msg *msg;
 	struct nlattr *data;
+	u8 radio_idx = 0;
 	int ret;
 
 	if (!drv->mtk_edcca_vendor_cmd_avail) {
@@ -15534,12 +15557,19 @@ static int nl80211_get_edcca(void *priv, const u8 mode, u8 *value)
 		return 0;
 	}
 
+	if (link && link->ctx)
+		hapd = link->ctx;
+
+	if (hapd->iface->current_hw_info)
+		radio_idx = hapd->iface->current_hw_info->hw_idx;
+
 	if (!(msg = nl80211_drv_msg(drv, NLM_F_DUMP, NL80211_CMD_VENDOR)) ||
 	    nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_MTK) ||
 	    nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
 			MTK_NL80211_VENDOR_SUBCMD_EDCCA_CTRL) ||
 	    !(data = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA | NLA_F_NESTED)) ||
-	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_MODE, mode)) {
+	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_MODE, mode) ||
+	    nla_put_u8(msg, MTK_VENDOR_ATTR_EDCCA_CTRL_RADIO_IDX, radio_idx)) {
 		wpa_printf (MSG_ERROR, "Prepare nl80211 msg fail");
 		nlmsg_free(msg);
 		return -ENOBUFS;
-- 
2.45.2

