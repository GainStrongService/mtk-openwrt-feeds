From e15e4520445745138b19f3a5562f288bd865303c Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Tue, 15 Apr 2025 10:04:58 +0800
Subject: [PATCH 188/206] mtk: hostapd: add support to dump STA Neg-TTLM status

The Usage is:
$ hostapd_cli -i <ifname> get_neg_ttlm <STA's MLD address>

Note that the command fails when STA's link address is used.

The result will be like:
root@OpenWrt:/# hostapd_cli -i ap-mld-1 get_neg_ttlm 00:0c:43:2b:b1:69
Link Mapping:   uplink  downlink
TID 0:          0x0005  0x0005
TID 1:          0x0001  0x0001
TID 2:          0x0005  0x0005
TID 3:          0x0002  0x0002
TID 4:          0x0005  0x0005
TID 5:          0x0003  0x0003
TID 6:          0x0005  0x0005
TID 7:          0x0004  0x0004

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 hostapd/ctrl_iface.c  | 68 +++++++++++++++++++++++++++++++++++++++----
 hostapd/hostapd_cli.c | 14 +++++++++
 2 files changed, 77 insertions(+), 5 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 3842e0cff..aac7a17ad 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -4116,24 +4116,35 @@ static int hostapd_ctrl_iface_set_attlm(struct hostapd_data *hapd, char *cmd,
 	return hostapd_mld_set_attlm(hapd);
 }
 
-static int hostapd_ctrl_iface_neg_ttlm_teardown(struct hostapd_data *hapd,
-						char *cmd)
+static struct sta_info *hostapd_ctrl_read_sta(struct hostapd_data *hapd,
+					      char *cmd)
 {
 	u8 addr[ETH_ALEN] = {};
-	struct hostapd_data *assoc_hapd;
 	struct sta_info *sta;
 
 	if (hwaddr_aton(cmd, addr)) {
 		wpa_printf(MSG_DEBUG, "Invalid STA MAC address");
-		return -1;
+		return NULL;
 	}
 
 	sta = ap_get_sta(hapd, addr);
 	if (!sta) {
 		wpa_printf(MSG_DEBUG, "STA " MACSTR " not found.", MAC2STR(addr));
-		return -1;
+		return NULL;
 	}
 
+	return sta;
+}
+
+static int hostapd_ctrl_iface_neg_ttlm_teardown(struct hostapd_data *hapd,
+						char *cmd)
+{
+	struct hostapd_data *assoc_hapd;
+	struct sta_info *sta = hostapd_ctrl_read_sta(hapd, cmd);
+
+	if (!sta)
+		return -1;
+
 	sta = hostapd_ml_get_assoc_sta(hapd, sta, &assoc_hapd);
 	if (!sta || !sta->mld_info.mld_sta || !sta->neg_ttlm.valid) {
 		wpa_printf(MSG_DEBUG, "Invalid STA\n");
@@ -4148,6 +4159,50 @@ static int hostapd_ctrl_iface_neg_ttlm_teardown(struct hostapd_data *hapd,
 	hostapd_teardown_neg_ttlm(assoc_hapd, sta);
 	return 0;
 }
+
+static int hostapd_ctrl_iface_get_neg_ttlm(struct hostapd_data *hapd, char *cmd,
+					   char *buf, size_t buflen)
+{
+	struct sta_info *sta = hostapd_ctrl_read_sta(hapd, cmd);
+	struct hostapd_data *assoc_hapd;
+	char *pos, *end;
+	int ret, i;
+
+	if (!sta)
+		return -1;
+
+	sta = hostapd_ml_get_assoc_sta(hapd, sta, &assoc_hapd);
+	if (!sta || !sta->mld_info.mld_sta) {
+		wpa_printf(MSG_DEBUG, "Invalid STA\n");
+		return -1;
+	}
+
+	pos = buf;
+	end = buf + buflen;
+
+	if (!sta->neg_ttlm.valid) {
+		ret = os_snprintf(pos, end - pos, "Neg-TTLM is inactive\n");
+		if (os_snprintf_error(end - pos, ret))
+			return pos - end;
+
+		return ret;
+	}
+
+	ret = os_snprintf(pos, end - pos, "Link Mapping:\tuplink\tdownlink\n");
+	if (os_snprintf_error(end - pos, ret))
+		return pos - end;
+	pos += ret;
+
+	for (i = 0; i < IEEE80211_TTLM_NUM_TIDS; i++) {
+		ret = os_snprintf(pos, end - pos, "TID %d:\t\t0x%04x\t0x%04x\n",
+				i, sta->neg_ttlm.ulink[i], sta->neg_ttlm.dlink[i]);
+		if (os_snprintf_error(end - pos, ret))
+			return pos - end;
+		pos += ret;
+	}
+
+	return pos - buf;
+}
 #endif /* CONFIG_TESTING_OPTIONS */
 #endif /* CONFIG_IEEE80211BE */
 
@@ -6718,6 +6773,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "NEG_TTLM_TEARDOWN ", 18) == 0) {
 		if (hostapd_ctrl_iface_neg_ttlm_teardown(hapd, buf + 18))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "GET_NEG_TTLM ", 13) == 0) {
+		reply_len = hostapd_ctrl_iface_get_neg_ttlm(hapd, buf + 13,
+							    reply, reply_size);
 #endif /* CONFIG_TESTING_OPTIONS */
 #endif /* CONFIG_IEEE80211BE */
 	} else if (os_strncmp(buf, "SET_EDCCA ", 10) == 0) {
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index ea65cb067..19247aa4f 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1834,6 +1834,18 @@ static int hostapd_cli_cmd_neg_ttlm_teardown(struct wpa_ctrl *ctrl, int argc,
 	return hostapd_cli_cmd(ctrl, "NEG_TTLM_TEARDOWN", 1, argc, argv);
 }
 
+static int hostapd_cli_cmd_get_neg_ttlm(struct wpa_ctrl *ctrl, int argc,
+					char *argv[])
+{
+	if (argc != 1) {
+		printf("Invalid 'get_neg_ttlm' command - only one argument, "
+		       "STA address, is required.\n");
+		return -1;
+	}
+
+	return hostapd_cli_cmd(ctrl, "GET_NEG_TTLM", 1, argc, argv);
+}
+
 static int hostapd_cli_cmd_epcs(struct wpa_ctrl *ctrl, int argc, char *argv[])
 {
 	return hostapd_cli_cmd(ctrl, "EPCS", 1, argc, argv);
@@ -2128,6 +2140,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 		" = Disable the affiliated AP of a MLD AP" },
 	{ "neg_ttlm_teardown", hostapd_cli_cmd_neg_ttlm_teardown, NULL,
 		" = Teardown the Negotiated TTLM with the STA" },
+	{ "get_neg_ttlm", hostapd_cli_cmd_get_neg_ttlm, NULL,
+		" = Get the Negotiated TTLM Status of the STA" },
 	{ "epcs", hostapd_cli_cmd_epcs, NULL,
 		" = Control EPCS priority access" },
 	{ "del_mscs", hostapd_cli_cmd_del_mscs, NULL,
-- 
2.45.2

