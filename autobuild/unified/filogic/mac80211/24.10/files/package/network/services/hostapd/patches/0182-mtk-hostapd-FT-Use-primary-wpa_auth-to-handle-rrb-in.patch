From 180a18d7c20c1b20033deb5823089f64d3d6e8ff Mon Sep 17 00:00:00 2001
From: Allen Ye <allen.ye@mediatek.com>
Date: Tue, 25 Mar 2025 11:39:42 +0800
Subject: [PATCH 182/206] mtk: hostapd: FT: Use primary wpa_auth to handle rrb
 in ml sta connect

Fix target FTR may fail to receive PMK-R1 when enable mld.
Use primary wpa_auth handle FT rrb frames to prevent that pnk push and rrb
sequence responses from different link. Which will make target FTR set invalid
rrb sequence.
Once ap receive a pmk push successfully, copy the pmk to each mld link.

When current FTR send a PMK-R1 push or pull response to a target FTR. The
FTR may send sequence request frame to current FTR. If current FTR is a
mld ap, each link will response their rrb sequence. The sequence number from
non-assoc link is invalid to PMK-R1 push or pull frame. That may make target
FTR failed to store PMK-R1.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>
---
 src/ap/wpa_auth.c    |  4 +-
 src/ap/wpa_auth.h    |  2 +
 src/ap/wpa_auth_ft.c | 96 ++++++++++++++++++++++++++++++++++----------
 3 files changed, 79 insertions(+), 23 deletions(-)

diff --git a/src/ap/wpa_auth.c b/src/ap/wpa_auth.c
index c40de7d88..f3f1be1fd 100644
--- a/src/ap/wpa_auth.c
+++ b/src/ap/wpa_auth.c
@@ -176,7 +176,7 @@ static int wpa_get_link_sta_auth(struct wpa_authenticator *wpa_auth, void *data)
 }
 
 
-static struct wpa_authenticator *
+struct wpa_authenticator *
 wpa_get_link_auth(struct wpa_authenticator *wpa_auth, int link_id)
 {
 	struct wpa_get_link_auth_ctx ctx;
@@ -5295,7 +5295,7 @@ SM_STATE(WPA_PTK, PTKINITDONE)
 		MACSTR, MAC2STR(sm->addr));
 
 #ifdef CONFIG_IEEE80211R_AP
-	wpa_ft_push_pmk_r1(sm->wpa_auth, wpa_auth_get_spa(sm));
+	wpa_ft_push_pmk_r1(wpa_get_primary_auth(sm->wpa_auth), wpa_auth_get_spa(sm));
 #endif /* CONFIG_IEEE80211R_AP */
 
 	sm->ptkstart_without_success = 0;
diff --git a/src/ap/wpa_auth.h b/src/ap/wpa_auth.h
index 03a444b87..75e9365ba 100644
--- a/src/ap/wpa_auth.h
+++ b/src/ap/wpa_auth.h
@@ -705,4 +705,6 @@ bool wpa_auth_sm_known_sta_identification(struct wpa_state_machine *sm,
 
 const u8 * wpa_auth_get_aa(const struct wpa_state_machine *sm);
 const u8 * wpa_auth_get_spa(const struct wpa_state_machine *sm);
+struct wpa_authenticator * wpa_get_link_auth(struct wpa_authenticator *wpa_auth,
+					     int link_id);
 #endif /* WPA_AUTH_H */
diff --git a/src/ap/wpa_auth_ft.c b/src/ap/wpa_auth_ft.c
index 5ff5b4fae..94878fc2b 100644
--- a/src/ap/wpa_auth_ft.c
+++ b/src/ap/wpa_auth_ft.c
@@ -2196,44 +2196,72 @@ int wpa_auth_derive_ptk_ft(struct wpa_state_machine *sm, struct wpa_ptk *ptk,
 }
 
 
-void wpa_auth_ft_store_keys(struct wpa_state_machine *sm, const u8 *pmk_r0,
-			    const u8 *pmk_r1, const u8 *pmk_r0_name,
-			    size_t key_len)
+static void wpa_auth_ft_store_pmks(struct wpa_state_machine *sm, const u8 *pmk_r0,
+				   const u8 *pmk_r0_name, const u8 *pmk_r1,
+				   size_t key_len, int link_id)
 {
-	int psk_local = sm->wpa_auth->conf.ft_psk_generate_local;
-	int expires_in = sm->wpa_auth->conf.r0_key_lifetime;
+	struct wpa_authenticator *wpa_auth;
+	int psk_local, expires_in;
 	struct vlan_description vlan;
 	const u8 *identity, *radius_cui;
 	size_t identity_len, radius_cui_len;
 	int session_timeout;
 
+	if (link_id >= 0)
+		wpa_auth = wpa_get_link_auth(sm->wpa_auth, link_id);
+	else
+		wpa_auth = sm->wpa_auth;
+
+	if (!wpa_auth)
+		return;
+
+	psk_local = wpa_auth->conf.ft_psk_generate_local;
 	if (psk_local && wpa_key_mgmt_ft_psk(sm->wpa_key_mgmt))
 		return;
 
-	if (wpa_ft_get_vlan(sm->wpa_auth, sm->addr, &vlan) < 0) {
+	if (wpa_ft_get_vlan(wpa_auth, sm->addr, &vlan) < 0) {
 		wpa_printf(MSG_DEBUG, "FT: vlan not available for STA " MACSTR,
 			   MAC2STR(sm->addr));
 		return;
 	}
-
-	identity_len = wpa_ft_get_identity(sm->wpa_auth, sm->addr, &identity);
-	radius_cui_len = wpa_ft_get_radius_cui(sm->wpa_auth, sm->addr,
-					       &radius_cui);
-	session_timeout = wpa_ft_get_session_timeout(sm->wpa_auth, sm->addr);
-
-
-	wpa_ft_store_pmk_r0(sm->wpa_auth, sm->addr, pmk_r0, key_len,
+	expires_in = wpa_auth->conf.r0_key_lifetime;
+	identity_len = wpa_ft_get_identity(wpa_auth, sm->addr, &identity);
+	radius_cui_len = wpa_ft_get_radius_cui(wpa_auth, sm->addr,
+						&radius_cui);
+	session_timeout = wpa_ft_get_session_timeout(wpa_auth, sm->addr);
+	wpa_ft_store_pmk_r0(wpa_auth, sm->addr, pmk_r0, key_len,
 			    pmk_r0_name,
 			    sm->pairwise, &vlan, expires_in,
 			    session_timeout, identity, identity_len,
 			    radius_cui, radius_cui_len);
-	wpa_ft_store_pmk_r1(sm->wpa_auth, sm->addr, pmk_r1, key_len,
+	wpa_ft_store_pmk_r1(wpa_auth, sm->addr, pmk_r1, key_len,
 			    sm->pmk_r1_name, sm->pairwise, &vlan,
 			    expires_in, session_timeout, identity,
 			    identity_len, radius_cui, radius_cui_len);
 }
 
 
+void wpa_auth_ft_store_keys(struct wpa_state_machine *sm, const u8 *pmk_r0,
+			    const u8 *pmk_r1, const u8 *pmk_r0_name,
+			    size_t key_len)
+{
+	int link_id;
+
+	if (sm->mld_assoc_link_id == -1) {
+		wpa_auth_ft_store_pmks(sm, pmk_r0, pmk_r0_name, pmk_r1, key_len, -1);
+		return;
+	}
+
+	for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
+		if (!sm->mld_links[link_id].valid)
+			continue;
+
+		wpa_auth_ft_store_pmks(sm, pmk_r0, pmk_r0_name, pmk_r1, key_len, link_id);
+	}
+	return;
+}
+
+
 static inline int wpa_auth_get_seqnum(struct wpa_authenticator *wpa_auth,
 				      const u8 *addr, int idx, u8 *seq)
 {
@@ -4596,12 +4624,32 @@ static int wpa_ft_rrb_rx_r1(struct wpa_authenticator *wpa_auth,
 		session_timeout = 0;
 	wpa_printf(MSG_DEBUG, "FT: session_timeout %d", session_timeout);
 
-	if (wpa_ft_store_pmk_r1(wpa_auth, f_s1kh_id, f_pmk_r1, pmk_r1_len,
-				f_pmk_r1_name,
-				pairwise, &vlan, expires_in, session_timeout,
-				f_identity, f_identity_len, f_radius_cui,
-				f_radius_cui_len) < 0)
-		goto out;
+	if (wpa_auth->is_ml) {
+		struct wpa_authenticator *link_auth;
+		for (int link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
+			link_auth = wpa_get_link_auth(wpa_auth, link_id);
+
+			if (!link_auth)
+				continue;
+
+			ret = wpa_ft_store_pmk_r1(link_auth, f_s1kh_id, f_pmk_r1,
+						  pmk_r1_len, f_pmk_r1_name, pairwise,
+						  &vlan, expires_in, session_timeout,
+						  f_identity, f_identity_len,
+						  f_radius_cui, f_radius_cui_len);
+			if (ret < 0)
+				goto out;
+
+		}
+	} else {
+		ret = wpa_ft_store_pmk_r1(wpa_auth, f_s1kh_id, f_pmk_r1, pmk_r1_len,
+					  f_pmk_r1_name,
+					  pairwise, &vlan, expires_in, session_timeout,
+					  f_identity, f_identity_len, f_radius_cui,
+					  f_radius_cui_len);
+		if (ret < 0)
+			goto out;
+	}
 
 	ret = 0;
 out:
@@ -5185,6 +5233,12 @@ void wpa_ft_rrb_oui_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 		return;
 	}
 
+	if (ether_addr_equal(wpa_auth->mld_addr, dst_addr) && wpa_auth->is_ml &&
+	    !wpa_auth->primary_auth) {
+		wpa_printf(MSG_DEBUG, "MLD: FT: RRB frame handled by primary auth");
+		return;
+	}
+
 	auth = data + sizeof(u16);
 	wpa_hexdump(MSG_MSGDUMP, "FT: Authenticated payload", auth, alen);
 	enc = data + sizeof(u16) + alen;
-- 
2.45.2

