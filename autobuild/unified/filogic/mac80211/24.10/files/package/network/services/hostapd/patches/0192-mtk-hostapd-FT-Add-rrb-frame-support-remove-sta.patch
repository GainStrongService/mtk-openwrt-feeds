From 501a67b42939113555767b4cfb22874a6da85122 Mon Sep 17 00:00:00 2001
From: Allen Ye <allen.ye@mediatek.com>
Date: Mon, 14 Apr 2025 18:52:17 +0800
Subject: [PATCH 192/206] mtk: hostapd: FT: Add rrb frame support remove sta

When the sta successfully roams to the target ap. The target ap should
send rrb frame with FT_PACKET_R0KH_R1KH_CLEAR_STA tag to tell other
remote r1 to deauthenticate the specify station entry.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>

Fix all rrb frame use mld addr as src address and store pmk in the primary
wpa_auth when ap is mld. Which supports legacy sta roaming with mld aps.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>
---
 src/ap/hostapd.h       |   1 +
 src/ap/ieee802_11.c    |   6 +
 src/ap/wpa_auth.c      |   2 +-
 src/ap/wpa_auth.h      |  17 +++
 src/ap/wpa_auth_ft.c   | 255 +++++++++++++++++++++++++++++++++--------
 src/ap/wpa_auth_glue.c |  26 +++++
 6 files changed, 257 insertions(+), 50 deletions(-)

diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 8728ce449..c0e0c4f0d 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -313,6 +313,7 @@ struct hostapd_data {
 	struct eth_p_oui_ctx *oui_push;
 	struct eth_p_oui_ctx *oui_sreq;
 	struct eth_p_oui_ctx *oui_sresp;
+	struct eth_p_oui_ctx *oui_notify;
 #endif /* CONFIG_IEEE80211R_AP */
 
 	struct wps_context *wps;
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index bdfd6ac52..b7c387495 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -7350,6 +7350,12 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 		sta->pending_eapol_rx = NULL;
 	}
 
+
+#ifdef CONFIG_IEEE80211R_AP
+	if (sta->auth_alg == WLAN_AUTH_FT)
+		wpa_ft_sta_roamed_notify(sta->wpa_sm, hapd->wpa_auth, sta->addr);
+#endif
+
 handle_ml:
 	hostapd_ml_handle_assoc_cb(hapd, sta, ok);
 	sta->sending_assoc = 0;
diff --git a/src/ap/wpa_auth.c b/src/ap/wpa_auth.c
index 3802f0935..167e726dc 100644
--- a/src/ap/wpa_auth.c
+++ b/src/ap/wpa_auth.c
@@ -207,7 +207,7 @@ static int wpa_get_primary_auth_cb(struct wpa_authenticator *wpa_auth,
 #endif /* CONFIG_IEEE80211BE */
 
 
-static struct wpa_authenticator *
+struct wpa_authenticator *
 wpa_get_primary_auth(struct wpa_authenticator *wpa_auth)
 {
 #ifdef CONFIG_IEEE80211BE
diff --git a/src/ap/wpa_auth.h b/src/ap/wpa_auth.h
index f5e5278ff..c30962243 100644
--- a/src/ap/wpa_auth.h
+++ b/src/ap/wpa_auth.h
@@ -49,6 +49,8 @@ struct ft_rrb_frame {
 #define FT_PACKET_R0KH_R1KH_SEQ_REQ 0x04
 #define FT_PACKET_R0KH_R1KH_SEQ_RESP 0x05
 
+#define FT_PACKET_R1KH_STA_ROAMED_NOTIFY 0x10
+
 /* packet layout
  *  IEEE 802 extended OUI ethertype frame header
  *  u16 authlen (little endian)
@@ -89,6 +91,9 @@ struct ft_rrb_frame {
 #define FT_RRB_RADIUS_CUI    16
 #define FT_RRB_SESSION_TIMEOUT  17 /* le32 seconds */
 
+#define FT_RRB_NOTIFIER_R1KH_ID	18 /* FT_R1KH_ID_LEN */
+#define FT_RRB_STA_ADDR 	19 /* ETH_ALEN */
+
 struct ft_rrb_tlv {
 	le16 type;
 	le16 len;
@@ -132,6 +137,12 @@ struct ft_rrb_seq {
  * sequence number response frame TLVs:
  *   auth:
  *     required: SEQ, NONCE, R0KH_ID, R1KH_ID
+ *
+ * station roamed notify frame TLVs:
+ *   auth:
+ *     required: SEQ, R1KH_ID (notifier), R1KH_ID (notifyee)
+ *   encrypted:
+ *     required: STA_ADDR
  */
 
 #ifdef _MSC_VER
@@ -417,6 +428,7 @@ struct wpa_auth_callbacks {
 			      const u8 *data, size_t data_len);
 	int (*add_tspec)(void *ctx, const u8 *sta_addr, u8 *tspec_ie,
 			 size_t tspec_ielen);
+	void (*remove_roamed_fto)(void *ctx, const u8 *sta_addr);
 #endif /* CONFIG_IEEE80211R_AP */
 #ifdef CONFIG_MESH
 	int (*start_ampe)(void *ctx, const u8 *sta_addr);
@@ -569,6 +581,9 @@ void wpa_ft_rrb_oui_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 		       const u8 *dst_addr, u8 oui_suffix, const u8 *data,
 		       size_t data_len);
 void wpa_ft_push_pmk_r1(struct wpa_authenticator *wpa_auth, const u8 *addr);
+void wpa_ft_sta_roamed_notify(struct wpa_state_machine *sm,
+			      struct wpa_authenticator *wpa_auth,
+			      const u8 *sta_addr);
 void wpa_ft_deinit(struct wpa_authenticator *wpa_auth);
 void wpa_ft_sta_deinit(struct wpa_state_machine *sm);
 int wpa_ft_fetch_pmk_r1(struct wpa_authenticator *wpa_auth,
@@ -707,6 +722,8 @@ const u8 * wpa_auth_get_aa(const struct wpa_state_machine *sm);
 const u8 * wpa_auth_get_spa(const struct wpa_state_machine *sm);
 struct wpa_authenticator * wpa_get_link_auth(struct wpa_authenticator *wpa_auth,
 					     int link_id);
+struct wpa_authenticator * wpa_get_primary_auth(struct wpa_authenticator *wpa_auth);
+
 void wpa_assign_wpa_auth_group(struct wpa_state_machine *sm,
 				  struct wpa_authenticator *wpa_auth);
 #endif /* WPA_AUTH_H */
diff --git a/src/ap/wpa_auth_ft.c b/src/ap/wpa_auth_ft.c
index e73be8601..020ecb96f 100644
--- a/src/ap/wpa_auth_ft.c
+++ b/src/ap/wpa_auth_ft.c
@@ -691,6 +691,16 @@ wpa_ft_add_sta(struct wpa_authenticator *wpa_auth, const u8 *sta_addr)
 }
 
 
+static void wpa_ft_remove_roamed_sta(struct wpa_authenticator *wpa_auth,
+				     const u8 *sta_addr)
+{
+	if (wpa_auth->cb->remove_roamed_fto == NULL)
+		return;
+	wpa_auth->cb->remove_roamed_fto(wpa_auth->cb_ctx, sta_addr);
+	return;
+}
+
+
 static int wpa_ft_set_vlan(struct wpa_authenticator *wpa_auth,
 			   const u8 *sta_addr, struct vlan_description *vlan)
 {
@@ -1393,7 +1403,8 @@ static int wpa_ft_store_pmk_r0(struct wpa_authenticator *wpa_auth,
 			       const u8 *identity, size_t identity_len,
 			       const u8 *radius_cui, size_t radius_cui_len)
 {
-	struct wpa_ft_pmk_cache *cache = wpa_auth->ft_pmk_cache;
+	struct wpa_authenticator *primary_auth = wpa_get_primary_auth(wpa_auth);
+	struct wpa_ft_pmk_cache *cache = primary_auth->ft_pmk_cache;
 	struct wpa_ft_pmk_r0_sa *r0;
 	struct os_reltime now;
 
@@ -1452,7 +1463,8 @@ static int wpa_ft_fetch_pmk_r0(struct wpa_authenticator *wpa_auth,
 			       const u8 *spa, const u8 *pmk_r0_name,
 			       const struct wpa_ft_pmk_r0_sa **r0_out)
 {
-	struct wpa_ft_pmk_cache *cache = wpa_auth->ft_pmk_cache;
+	struct wpa_authenticator *primary_auth = wpa_get_primary_auth(wpa_auth);
+	struct wpa_ft_pmk_cache *cache = primary_auth->ft_pmk_cache;
 	struct wpa_ft_pmk_r0_sa *r0;
 	struct os_reltime now;
 
@@ -1480,7 +1492,8 @@ static int wpa_ft_store_pmk_r1(struct wpa_authenticator *wpa_auth,
 			       const u8 *identity, size_t identity_len,
 			       const u8 *radius_cui, size_t radius_cui_len)
 {
-	struct wpa_ft_pmk_cache *cache = wpa_auth->ft_pmk_cache;
+	struct wpa_authenticator *primary_auth = wpa_get_primary_auth(wpa_auth);
+	struct wpa_ft_pmk_cache *cache = primary_auth->ft_pmk_cache;
 	int max_expires_in = wpa_auth->conf.r1_max_key_lifetime;
 	struct wpa_ft_pmk_r1_sa *r1;
 	struct os_reltime now;
@@ -1546,7 +1559,8 @@ int wpa_ft_fetch_pmk_r1(struct wpa_authenticator *wpa_auth,
 			const u8 **radius_cui, size_t *radius_cui_len,
 			int *session_timeout)
 {
-	struct wpa_ft_pmk_cache *cache = wpa_auth->ft_pmk_cache;
+	struct wpa_authenticator *primary_auth = wpa_get_primary_auth(wpa_auth);
+	struct wpa_ft_pmk_cache *cache = primary_auth->ft_pmk_cache;
 	struct wpa_ft_pmk_r1_sa *r1;
 	struct os_reltime now;
 
@@ -1997,8 +2011,9 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 			      const u8 *pmk_r0_name)
 {
 	struct ft_remote_r0kh *r0kh, *r0kh_wildcard;
+	struct wpa_authenticator *wpa_auth = wpa_get_primary_auth(sm->wpa_auth);
 	u8 *packet = NULL;
-	const u8 *key, *f_r1kh_id = sm->wpa_auth->conf.r1_key_holder;
+	const u8 *key, *f_r1kh_id = wpa_auth->conf.r1_key_holder;
 	size_t packet_len, key_len;
 	struct ft_rrb_seq f_seq;
 	int tsecs, tusecs, first;
@@ -2026,21 +2041,21 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 	if (sm->ft_pending_pull_left_retries <= 0)
 		return -1;
 	first = sm->ft_pending_pull_left_retries ==
-		sm->wpa_auth->conf.rkh_pull_retries;
+		wpa_auth->conf.rkh_pull_retries;
 	sm->ft_pending_pull_left_retries--;
 
-	wpa_ft_rrb_lookup_r0kh(sm->wpa_auth, sm->r0kh_id, sm->r0kh_id_len,
+	wpa_ft_rrb_lookup_r0kh(wpa_auth, sm->r0kh_id, sm->r0kh_id_len,
 			       &r0kh, &r0kh_wildcard);
 
 	/* Keep r0kh sufficiently long in the list for seq num check */
-	r0kh_timeout = sm->wpa_auth->conf.rkh_pull_timeout / 1000 +
+	r0kh_timeout = wpa_auth->conf.rkh_pull_timeout / 1000 +
 		1 + ftRRBseqTimeout;
 	if (r0kh) {
-		wpa_ft_rrb_r0kh_replenish(sm->wpa_auth, r0kh, r0kh_timeout);
+		wpa_ft_rrb_r0kh_replenish(wpa_auth, r0kh, r0kh_timeout);
 	} else if (r0kh_wildcard) {
 		wpa_printf(MSG_DEBUG, "FT: Using wildcard R0KH-ID");
 		/* r0kh->addr: updated by SEQ_RESP and wpa_ft_expire_pull */
-		r0kh = wpa_ft_rrb_add_r0kh(sm->wpa_auth, r0kh_wildcard,
+		r0kh = wpa_ft_rrb_add_r0kh(wpa_auth, r0kh_wildcard,
 					   r0kh_wildcard->addr,
 					   sm->r0kh_id, sm->r0kh_id_len,
 					   r0kh_timeout);
@@ -2055,7 +2070,7 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 			    sm->r0kh_id, sm->r0kh_id_len);
 		return -1;
 	}
-	if (ether_addr_equal(r0kh->addr, wpa_auth_get_aa(sm))) {
+	if (ether_addr_equal(r0kh->addr, wpa_ft_rrb_get_aa(wpa_auth))) {
 		wpa_printf(MSG_DEBUG,
 			   "FT: R0KH-ID points to self - no matching key available");
 		return -1;
@@ -2067,14 +2082,14 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 	if (r0kh->seq->rx.num_last == 0) {
 		/* A sequence request will be sent out anyway when pull
 		 * response is received. Send it out now to avoid one RTT. */
-		wpa_ft_rrb_seq_req(sm->wpa_auth, r0kh->seq, r0kh->addr,
+		wpa_ft_rrb_seq_req(wpa_auth, r0kh->seq, r0kh->addr,
 				   r0kh->id, r0kh->id_len, f_r1kh_id, key,
 				   key_len, NULL, 0, NULL, 0, NULL);
 	}
 
 	wpa_printf(MSG_DEBUG, "FT: Send PMK-R1 pull request from " MACSTR
 		   " to remote R0KH address " MACSTR,
-		   wpa_auth_get_aa(sm), MAC2STR(r0kh->addr));
+		   MAC2STR(wpa_ft_rrb_get_aa(wpa_auth)), MAC2STR(r0kh->addr));
 
 	if (first &&
 	    random_get_bytes(sm->ft_pending_pull_nonce, FT_RRB_NONCE_LEN) < 0) {
@@ -2089,7 +2104,7 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 	}
 
 	if (wpa_ft_rrb_build(key, key_len, req_enc, NULL, req_auth, NULL,
-			     wpa_auth_get_aa(sm), FT_PACKET_R0KH_R1KH_PULL,
+			     wpa_ft_rrb_get_aa(wpa_auth), FT_PACKET_R0KH_R1KH_PULL,
 			     &packet, &packet_len) < 0)
 		return -1;
 
@@ -2101,11 +2116,11 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 		return -1;
 	}
 
-	tsecs = sm->wpa_auth->conf.rkh_pull_timeout / 1000;
-	tusecs = (sm->wpa_auth->conf.rkh_pull_timeout % 1000) * 1000;
+	tsecs = wpa_auth->conf.rkh_pull_timeout / 1000;
+	tusecs = (wpa_auth->conf.rkh_pull_timeout % 1000) * 1000;
 	eloop_register_timeout(tsecs, tusecs, wpa_ft_expire_pull, sm, NULL);
 
-	wpa_ft_rrb_oui_send(sm->wpa_auth, r0kh->addr, FT_PACKET_R0KH_R1KH_PULL,
+	wpa_ft_rrb_oui_send(wpa_auth, r0kh->addr, FT_PACKET_R0KH_R1KH_PULL,
 			    packet, packet_len);
 
 	os_free(packet);
@@ -4236,7 +4251,7 @@ static int wpa_ft_send_rrb_auth_resp(struct wpa_state_machine *sm,
 	frame->packet_type = FT_PACKET_RESPONSE;
 	frame->action_length = host_to_le16(rlen);
 #ifdef CONFIG_IEEE80211BE
-	if (wpa_auth->is_ml)
+	if (sm->mld_assoc_link_id >= 0)
 		os_memcpy(target_addr, wpa_auth->mld_addr, ETH_ALEN);
 	else
 #endif
@@ -4649,32 +4664,13 @@ static int wpa_ft_rrb_rx_r1(struct wpa_authenticator *wpa_auth,
 		session_timeout = 0;
 	wpa_printf(MSG_DEBUG, "FT: session_timeout %d", session_timeout);
 
-	if (wpa_auth->is_ml) {
-		struct wpa_authenticator *link_auth;
-		for (int link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
-			link_auth = wpa_get_link_auth(wpa_auth, link_id);
-
-			if (!link_auth)
-				continue;
-
-			ret = wpa_ft_store_pmk_r1(link_auth, f_s1kh_id, f_pmk_r1,
-						  pmk_r1_len, f_pmk_r1_name, pairwise,
-						  &vlan, expires_in, session_timeout,
-						  f_identity, f_identity_len,
-						  f_radius_cui, f_radius_cui_len);
-			if (ret < 0)
-				goto out;
-
-		}
-	} else {
-		ret = wpa_ft_store_pmk_r1(wpa_auth, f_s1kh_id, f_pmk_r1, pmk_r1_len,
-					  f_pmk_r1_name,
-					  pairwise, &vlan, expires_in, session_timeout,
-					  f_identity, f_identity_len, f_radius_cui,
-					  f_radius_cui_len);
-		if (ret < 0)
-			goto out;
-	}
+	ret = wpa_ft_store_pmk_r1(wpa_auth, f_s1kh_id, f_pmk_r1, pmk_r1_len,
+				  f_pmk_r1_name,
+				  pairwise, &vlan, expires_in, session_timeout,
+				  f_identity, f_identity_len, f_radius_cui,
+				  f_radius_cui_len);
+	if (ret < 0)
+		goto out;
 
 	ret = 0;
 out:
@@ -4746,14 +4742,15 @@ static int ft_get_sta_cb(struct wpa_state_machine *sm, void *ctx)
 }
 
 
-static int wpa_ft_rrb_rx_resp(struct wpa_authenticator *wpa_auth,
+static int wpa_ft_rrb_rx_resp(struct wpa_authenticator *primary_auth,
 			      const u8 *src_addr,
 			      const u8 *enc, size_t enc_len,
 			      const u8 *auth, size_t auth_len,
 			      int no_defer)
 {
+	struct wpa_authenticator *target_auth = NULL;
 	const char *msgtype = "pull response";
-	int nak, ret = -1;
+	int nak, ret = -1, link_id = 0;
 	struct ft_get_sta_ctx ctx;
 	u8 s1kh_id[ETH_ALEN];
 	const u8 *f_nonce;
@@ -4766,13 +4763,29 @@ static int wpa_ft_rrb_rx_resp(struct wpa_authenticator *wpa_auth,
 
 	os_memset(&ctx, 0, sizeof(ctx));
 	ctx.nonce = f_nonce;
-	if (!wpa_auth_for_each_sta(wpa_auth, ft_get_sta_cb, &ctx)) {
+
+	/* Primary auth may not have corresponding sta state machine
+	 * search all the sta of the mld bss for the target wpa_auth */
+	if (primary_auth->is_ml) {
+		for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
+			target_auth = wpa_get_link_auth(primary_auth, link_id);
+			if (!target_auth)
+				continue;
+
+			if (wpa_auth_for_each_sta(target_auth, ft_get_sta_cb, &ctx))
+				break;
+		}
+	} else {
+		if (wpa_auth_for_each_sta(primary_auth, ft_get_sta_cb, &ctx))
+			target_auth = primary_auth;
+	}
+	if (link_id == MAX_NUM_MLD_LINKS || !target_auth) {
 		/* nonce not found */
 		wpa_printf(MSG_DEBUG, "FT: Invalid nonce");
 		return -1;
 	}
 
-	ret = wpa_ft_rrb_rx_r1(wpa_auth, src_addr, FT_PACKET_R0KH_R1KH_RESP,
+	ret = wpa_ft_rrb_rx_r1(primary_auth, src_addr, FT_PACKET_R0KH_R1KH_RESP,
 			       enc, enc_len, auth, auth_len, msgtype, s1kh_id,
 			       no_defer ? NULL : &wpa_ft_rrb_rx_resp);
 	if (ret == -2) {
@@ -4785,7 +4798,7 @@ static int wpa_ft_rrb_rx_resp(struct wpa_authenticator *wpa_auth,
 		return -1;
 
 	ctx.s1kh_id = s1kh_id;
-	if (wpa_auth_for_each_sta(wpa_auth, ft_get_sta_cb, &ctx)) {
+	if (wpa_auth_for_each_sta(target_auth, ft_get_sta_cb, &ctx)) {
 		wpa_printf(MSG_DEBUG,
 			   "FT: Response to a pending pull request for " MACSTR,
 			   MAC2STR(ctx.sm->addr));
@@ -5106,6 +5119,79 @@ out:
 }
 
 
+static int wpa_ft_rrb_rx_sta_roamed_notify(struct wpa_authenticator *wpa_auth,
+					   const u8 *src_addr,
+					   const u8 *enc, size_t enc_len,
+					   const u8 *auth, size_t auth_len,
+					   int no_defer)
+{
+	const char *msgtype = "roamed sta notify";
+	u8 *plain = NULL;
+	const u8 *key;
+	size_t plain_len = 0, key_len;
+	struct ft_remote_r1kh *notifier_r1kh, *notifier_r1kh_wildcard;
+	int seq_ret;
+	const u8 *f_r1kh_id, *f_notifier_r1kh_id, *f_sta_addr;
+	size_t f_r1kh_id_len, f_notifier_r1kh_id_len, f_sta_addr_len;
+
+	RRB_GET_AUTH(FT_RRB_NOTIFIER_R1KH_ID, notifier_r1kh_id, msgtype, FT_R1KH_ID_LEN);
+	wpa_printf(MSG_DEBUG, "FT: notifier R1KH-ID=" MACSTR, MAC2STR(f_notifier_r1kh_id));
+
+	RRB_GET_AUTH(FT_RRB_R1KH_ID, r1kh_id, msgtype, FT_R1KH_ID_LEN);
+	wpa_printf(MSG_DEBUG, "FT: R1KH-ID=" MACSTR, MAC2STR(f_r1kh_id));
+
+	if (wpa_ft_rrb_check_r1kh(wpa_auth, f_r1kh_id)) {
+		wpa_printf(MSG_DEBUG, "FT: R1KH-ID mismatch");
+		goto out;
+	}
+
+	wpa_ft_rrb_lookup_r1kh(wpa_auth, f_notifier_r1kh_id, &notifier_r1kh,
+			       &notifier_r1kh_wildcard);
+	if (notifier_r1kh) {
+		key = notifier_r1kh->key;
+		key_len = sizeof(notifier_r1kh->key);
+	} else
+		goto out;
+
+	seq_ret = wpa_ft_rrb_seq_chk(notifier_r1kh->seq, src_addr, enc, enc_len,
+				     auth, auth_len, msgtype, 0);
+
+	if (seq_ret == FT_RRB_SEQ_DROP)
+		goto out;
+
+	if (wpa_ft_rrb_decrypt(key, key_len, enc, enc_len, auth, auth_len,
+			       src_addr, FT_PACKET_R1KH_STA_ROAMED_NOTIFY,
+			       &plain, &plain_len) < 0)
+		goto out;
+
+	/* just send seq request and continue, if seq num is invalid. */
+	switch (seq_ret) {
+	case FT_RRB_SEQ_DEFER:
+		/* FIXME: add support for r1kh to r1kh or more flexibility seq request */
+		wpa_printf(MSG_DEBUG,
+			   "FT: receive defer sequence number from notifier R1KH");
+	case FT_RRB_SEQ_OK:
+		wpa_ft_rrb_seq_accept(wpa_auth, notifier_r1kh->seq, src_addr, auth,
+				      auth_len, msgtype);
+		wpa_ft_rrb_r1kh_replenish(wpa_auth, notifier_r1kh,
+					  wpa_auth->conf.rkh_pos_timeout);
+		break;
+	default:
+		goto out;
+	}
+
+	RRB_GET(FT_RRB_STA_ADDR, sta_addr, msgtype, ETH_ALEN);
+	wpa_printf(MSG_DEBUG, "FT: remove roamed FTO sta_addr=" MACSTR,
+		   MAC2STR(f_sta_addr));
+
+	wpa_ft_remove_roamed_sta(wpa_auth, f_sta_addr);
+
+out:
+	bin_clear_free(plain, plain_len);
+	return 0;
+}
+
+
 int wpa_ft_rrb_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 		  const u8 *data, size_t data_len)
 {
@@ -5291,6 +5377,9 @@ void wpa_ft_rrb_oui_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 		wpa_ft_rrb_rx_seq_resp(wpa_auth, src_addr, enc, elen, auth,
 				       alen, no_defer);
 		break;
+	case FT_PACKET_R1KH_STA_ROAMED_NOTIFY:
+		wpa_ft_rrb_rx_sta_roamed_notify(wpa_auth, src_addr, enc, elen, auth,
+				      alen, no_defer);
 	}
 }
 
@@ -5380,4 +5469,72 @@ void wpa_ft_push_pmk_r1(struct wpa_authenticator *wpa_auth, const u8 *addr)
 	}
 }
 
+
+static void wpa_ft_sta_roamed_notify_per_r1kh(struct wpa_state_machine *sm,
+					      struct wpa_authenticator *wpa_auth,
+					      struct ft_remote_r1kh *r1kh,
+					      const u8 *sta_addr)
+{
+	u8 *packet;
+	size_t packet_len;
+	struct ft_rrb_seq f_seq;
+	struct tlv_list clear[] = {
+		{ .type = FT_RRB_STA_ADDR, .len = ETH_ALEN,
+		  .data = sta_addr },
+		{ .type = FT_RRB_LAST_EMPTY, .len = 0, .data = NULL },
+	};
+	struct tlv_list clear_auth[] = {
+		{ .type = FT_RRB_SEQ, .len = sizeof(f_seq),
+		  .data = (u8 *) &f_seq },
+		{ .type = FT_RRB_NOTIFIER_R1KH_ID, .len = FT_R1KH_ID_LEN,
+		  .data = wpa_auth->conf.r1_key_holder },
+		{ .type = FT_RRB_R1KH_ID, .len = FT_R1KH_ID_LEN,
+		  .data = r1kh->id },
+		{ .type = FT_RRB_LAST_EMPTY, .len = 0, .data = NULL },
+	};
+
+	if (wpa_ft_new_seq(r1kh->seq, &f_seq) < 0) {
+		wpa_printf(MSG_DEBUG, "FT: Failed to get seq num");
+		return;
+	}
+
+	wpa_printf(MSG_DEBUG, "FT: Send sta roamed notify rrb from " MACSTR
+		   " to remote FTR address " MACSTR,
+		   MAC2STR(wpa_ft_rrb_get_aa(sm->wpa_auth)), MAC2STR(r1kh->addr));
+
+	if (wpa_ft_rrb_build(r1kh->key, sizeof(r1kh->key), clear, NULL, clear_auth, NULL,
+			     wpa_ft_rrb_get_aa(sm->wpa_auth), FT_PACKET_R1KH_STA_ROAMED_NOTIFY,
+			     &packet, &packet_len) < 0)
+		return;
+
+	wpa_ft_rrb_oui_send(wpa_auth, r1kh->addr, FT_PACKET_R1KH_STA_ROAMED_NOTIFY,
+			    packet, packet_len);
+
+	os_free(packet);
+	return;
+}
+
+
+void wpa_ft_sta_roamed_notify(struct wpa_state_machine *sm,
+			      struct wpa_authenticator *wpa_auth,
+			      const u8 *sta_addr)
+{
+	struct ft_remote_r1kh *r1kh;
+
+	if (!wpa_auth->conf.r1kh_list)
+		return;
+
+	wpa_printf(MSG_DEBUG, "FT: send successful roaming notification for STA " MACSTR,
+		   MAC2STR(sta_addr));
+
+	for (r1kh = *wpa_auth->conf.r1kh_list; r1kh; r1kh = r1kh->next) {
+		if (is_zero_ether_addr(r1kh->addr) ||
+		    is_zero_ether_addr(r1kh->id))
+			continue;
+		if (wpa_ft_rrb_init_r1kh_seq(r1kh) < 0)
+			continue;
+		wpa_ft_sta_roamed_notify_per_r1kh(sm, wpa_auth, r1kh, sta_addr);
+	}
+}
+
 #endif /* CONFIG_IEEE80211R_AP */
diff --git a/src/ap/wpa_auth_glue.c b/src/ap/wpa_auth_glue.c
index fc1f3aa83..19cb9011f 100644
--- a/src/ap/wpa_auth_glue.c
+++ b/src/ap/wpa_auth_glue.c
@@ -846,6 +846,8 @@ static struct eth_p_oui_ctx * hostapd_wpa_get_oui(struct hostapd_data *hapd,
 		return hapd->oui_sreq;
 	case FT_PACKET_R0KH_R1KH_SEQ_RESP:
 		return hapd->oui_sresp;
+	case FT_PACKET_R1KH_STA_ROAMED_NOTIFY:
+		return hapd->oui_notify;
 #endif /* CONFIG_IEEE80211R_AP */
 	default:
 		return NULL;
@@ -1241,6 +1243,21 @@ static int hostapd_wpa_auth_add_sta_ft(void *ctx, const u8 *sta_addr)
 }
 
 
+static void hostapd_wpa_auth_remove_roamed_fto(void *ctx, const u8 *sta_addr)
+{
+	struct hostapd_data *hapd = ctx;
+	struct sta_info *sta;
+	int reason = WLAN_REASON_DEAUTH_LEAVING;
+
+	hostapd_drv_sta_deauth(hapd, sta_addr, reason);
+	sta = ap_get_sta(hapd, sta_addr);
+	if (sta)
+		ap_sta_deauthenticate(hapd, sta, reason);
+	else
+		hostapd_drv_sta_remove(hapd, sta_addr);
+}
+
+
 static int hostapd_wpa_auth_set_vlan(void *ctx, const u8 *sta_addr,
 				     struct vlan_description *vlan)
 {
@@ -1570,6 +1587,12 @@ static int hostapd_wpa_register_ft_oui(struct hostapd_data *hapd,
 	if (!hapd->oui_sresp)
 		return -1;
 
+	hapd->oui_notify = eth_p_oui_register(hapd, ft_iface,
+					     FT_PACKET_R1KH_STA_ROAMED_NOTIFY,
+					     hostapd_rrb_oui_receive, hapd);
+	if (!hapd->oui_notify)
+		return -1;
+
 	return 0;
 }
 
@@ -1586,6 +1609,8 @@ static void hostapd_wpa_unregister_ft_oui(struct hostapd_data *hapd)
 	hapd->oui_sreq = NULL;
 	eth_p_oui_unregister(hapd->oui_sresp);
 	hapd->oui_sresp = NULL;
+	eth_p_oui_unregister(hapd->oui_notify);
+	hapd->oui_notify = NULL;
 }
 #endif /* CONFIG_IEEE80211R_AP */
 
@@ -1751,6 +1776,7 @@ int hostapd_setup_wpa(struct hostapd_data *hapd)
 		.get_radius_cui = hostapd_wpa_auth_get_radius_cui,
 		.set_session_timeout = hostapd_wpa_auth_set_session_timeout,
 		.get_session_timeout = hostapd_wpa_auth_get_session_timeout,
+		.remove_roamed_fto = hostapd_wpa_auth_remove_roamed_fto,
 #endif /* CONFIG_IEEE80211R_AP */
 #ifndef CONFIG_NO_RADIUS
 		.request_radius_psk = hostapd_request_radius_psk,
-- 
2.45.2

