From 7f2207a2119572f8f87253601f09920eb9d38028 Mon Sep 17 00:00:00 2001
From: Allen Ye <allen.ye@mediatek.com>
Date: Tue, 29 Apr 2025 13:45:29 +0800
Subject: [PATCH 4/5] mtk: hostapd: FT: Add rrb frame support mld
 address

Fix all rrb frame use mld addr as src address and store pmk in the primary
wpa_auth when ap is mld. Which supports legacy sta roaming with mld aps.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>
---
 src/ap/wpa_auth.c    |   2 +-
 src/ap/wpa_auth.h    |   2 +
 src/ap/wpa_auth_ft.c | 105 ++++++++++++++++++++++---------------------
 3 files changed, 57 insertions(+), 52 deletions(-)

diff --git a/src/ap/wpa_auth.c b/src/ap/wpa_auth.c
index 16d3fb9e8..34140fe53 100644
--- a/src/ap/wpa_auth.c
+++ b/src/ap/wpa_auth.c
@@ -200,7 +200,7 @@ static int wpa_get_primary_auth_cb(struct wpa_authenticator *wpa_auth,
 #endif /* CONFIG_IEEE80211BE */
 
 
-static struct wpa_authenticator *
+struct wpa_authenticator *
 wpa_get_primary_auth(struct wpa_authenticator *wpa_auth)
 {
 #ifdef CONFIG_IEEE80211BE
diff --git a/src/ap/wpa_auth.h b/src/ap/wpa_auth.h
index 9117f4d55..e62f01ab5 100644
--- a/src/ap/wpa_auth.h
+++ b/src/ap/wpa_auth.h
@@ -722,6 +722,8 @@ const u8 * wpa_auth_get_aa(const struct wpa_state_machine *sm);
 const u8 * wpa_auth_get_spa(const struct wpa_state_machine *sm);
 struct wpa_authenticator * wpa_get_link_auth(struct wpa_authenticator *wpa_auth,
 					     int link_id);
+struct wpa_authenticator * wpa_get_primary_auth(struct wpa_authenticator *wpa_auth);
+
 void wpa_assign_wpa_auth_group(struct wpa_state_machine *sm,
 				  struct wpa_authenticator *wpa_auth);
 #endif /* WPA_AUTH_H */
diff --git a/src/ap/wpa_auth_ft.c b/src/ap/wpa_auth_ft.c
index acac1055c..43b0580f6 100644
--- a/src/ap/wpa_auth_ft.c
+++ b/src/ap/wpa_auth_ft.c
@@ -1403,7 +1403,8 @@ static int wpa_ft_store_pmk_r0(struct wpa_authenticator *wpa_auth,
 			       const u8 *identity, size_t identity_len,
 			       const u8 *radius_cui, size_t radius_cui_len)
 {
-	struct wpa_ft_pmk_cache *cache = wpa_auth->ft_pmk_cache;
+	struct wpa_authenticator *primary_auth = wpa_get_primary_auth(wpa_auth);
+	struct wpa_ft_pmk_cache *cache = primary_auth->ft_pmk_cache;
 	struct wpa_ft_pmk_r0_sa *r0;
 	struct os_reltime now;
 
@@ -1462,7 +1463,8 @@ static int wpa_ft_fetch_pmk_r0(struct wpa_authenticator *wpa_auth,
 			       const u8 *spa, const u8 *pmk_r0_name,
 			       const struct wpa_ft_pmk_r0_sa **r0_out)
 {
-	struct wpa_ft_pmk_cache *cache = wpa_auth->ft_pmk_cache;
+	struct wpa_authenticator *primary_auth = wpa_get_primary_auth(wpa_auth);
+	struct wpa_ft_pmk_cache *cache = primary_auth->ft_pmk_cache;
 	struct wpa_ft_pmk_r0_sa *r0;
 	struct os_reltime now;
 
@@ -1490,7 +1492,8 @@ static int wpa_ft_store_pmk_r1(struct wpa_authenticator *wpa_auth,
 			       const u8 *identity, size_t identity_len,
 			       const u8 *radius_cui, size_t radius_cui_len)
 {
-	struct wpa_ft_pmk_cache *cache = wpa_auth->ft_pmk_cache;
+	struct wpa_authenticator *primary_auth = wpa_get_primary_auth(wpa_auth);
+	struct wpa_ft_pmk_cache *cache = primary_auth->ft_pmk_cache;
 	int max_expires_in = wpa_auth->conf.r1_max_key_lifetime;
 	struct wpa_ft_pmk_r1_sa *r1;
 	struct os_reltime now;
@@ -1556,7 +1559,8 @@ int wpa_ft_fetch_pmk_r1(struct wpa_authenticator *wpa_auth,
 			const u8 **radius_cui, size_t *radius_cui_len,
 			int *session_timeout)
 {
-	struct wpa_ft_pmk_cache *cache = wpa_auth->ft_pmk_cache;
+	struct wpa_authenticator *primary_auth = wpa_get_primary_auth(wpa_auth);
+	struct wpa_ft_pmk_cache *cache = primary_auth->ft_pmk_cache;
 	struct wpa_ft_pmk_r1_sa *r1;
 	struct os_reltime now;
 
@@ -2007,8 +2011,9 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 			      const u8 *pmk_r0_name)
 {
 	struct ft_remote_r0kh *r0kh, *r0kh_wildcard;
+	struct wpa_authenticator *wpa_auth = wpa_get_primary_auth(sm->wpa_auth);
 	u8 *packet = NULL;
-	const u8 *key, *f_r1kh_id = sm->wpa_auth->conf.r1_key_holder;
+	const u8 *key, *f_r1kh_id = wpa_auth->conf.r1_key_holder;
 	size_t packet_len, key_len;
 	struct ft_rrb_seq f_seq;
 	int tsecs, tusecs, first;
@@ -2036,21 +2041,21 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 	if (sm->ft_pending_pull_left_retries <= 0)
 		return -1;
 	first = sm->ft_pending_pull_left_retries ==
-		sm->wpa_auth->conf.rkh_pull_retries;
+		wpa_auth->conf.rkh_pull_retries;
 	sm->ft_pending_pull_left_retries--;
 
-	wpa_ft_rrb_lookup_r0kh(sm->wpa_auth, sm->r0kh_id, sm->r0kh_id_len,
+	wpa_ft_rrb_lookup_r0kh(wpa_auth, sm->r0kh_id, sm->r0kh_id_len,
 			       &r0kh, &r0kh_wildcard);
 
 	/* Keep r0kh sufficiently long in the list for seq num check */
-	r0kh_timeout = sm->wpa_auth->conf.rkh_pull_timeout / 1000 +
+	r0kh_timeout = wpa_auth->conf.rkh_pull_timeout / 1000 +
 		1 + ftRRBseqTimeout;
 	if (r0kh) {
-		wpa_ft_rrb_r0kh_replenish(sm->wpa_auth, r0kh, r0kh_timeout);
+		wpa_ft_rrb_r0kh_replenish(wpa_auth, r0kh, r0kh_timeout);
 	} else if (r0kh_wildcard) {
 		wpa_printf(MSG_DEBUG, "FT: Using wildcard R0KH-ID");
 		/* r0kh->addr: updated by SEQ_RESP and wpa_ft_expire_pull */
-		r0kh = wpa_ft_rrb_add_r0kh(sm->wpa_auth, r0kh_wildcard,
+		r0kh = wpa_ft_rrb_add_r0kh(wpa_auth, r0kh_wildcard,
 					   r0kh_wildcard->addr,
 					   sm->r0kh_id, sm->r0kh_id_len,
 					   r0kh_timeout);
@@ -2065,7 +2070,7 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 			    sm->r0kh_id, sm->r0kh_id_len);
 		return -1;
 	}
-	if (ether_addr_equal(r0kh->addr, wpa_auth_get_aa(sm))) {
+	if (ether_addr_equal(r0kh->addr, wpa_ft_rrb_get_aa(wpa_auth))) {
 		wpa_printf(MSG_DEBUG,
 			   "FT: R0KH-ID points to self - no matching key available");
 		return -1;
@@ -2077,14 +2082,14 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 	if (r0kh->seq->rx.num_last == 0) {
 		/* A sequence request will be sent out anyway when pull
 		 * response is received. Send it out now to avoid one RTT. */
-		wpa_ft_rrb_seq_req(sm->wpa_auth, r0kh->seq, r0kh->addr,
+		wpa_ft_rrb_seq_req(wpa_auth, r0kh->seq, r0kh->addr,
 				   r0kh->id, r0kh->id_len, f_r1kh_id, key,
 				   key_len, NULL, 0, NULL, 0, NULL);
 	}
 
 	wpa_printf(MSG_DEBUG, "FT: Send PMK-R1 pull request from " MACSTR
 		   " to remote R0KH address " MACSTR,
-		   wpa_auth_get_aa(sm), MAC2STR(r0kh->addr));
+		   MAC2STR(wpa_ft_rrb_get_aa(wpa_auth)), MAC2STR(r0kh->addr));
 
 	if (first &&
 	    random_get_bytes(sm->ft_pending_pull_nonce, FT_RRB_NONCE_LEN) < 0) {
@@ -2099,7 +2104,7 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 	}
 
 	if (wpa_ft_rrb_build(key, key_len, req_enc, NULL, req_auth, NULL,
-			     wpa_auth_get_aa(sm), FT_PACKET_R0KH_R1KH_PULL,
+			     wpa_ft_rrb_get_aa(wpa_auth), FT_PACKET_R0KH_R1KH_PULL,
 			     &packet, &packet_len) < 0)
 		return -1;
 
@@ -2111,11 +2116,11 @@ static int wpa_ft_pull_pmk_r1(struct wpa_state_machine *sm,
 		return -1;
 	}
 
-	tsecs = sm->wpa_auth->conf.rkh_pull_timeout / 1000;
-	tusecs = (sm->wpa_auth->conf.rkh_pull_timeout % 1000) * 1000;
+	tsecs = wpa_auth->conf.rkh_pull_timeout / 1000;
+	tusecs = (wpa_auth->conf.rkh_pull_timeout % 1000) * 1000;
 	eloop_register_timeout(tsecs, tusecs, wpa_ft_expire_pull, sm, NULL);
 
-	wpa_ft_rrb_oui_send(sm->wpa_auth, r0kh->addr, FT_PACKET_R0KH_R1KH_PULL,
+	wpa_ft_rrb_oui_send(wpa_auth, r0kh->addr, FT_PACKET_R0KH_R1KH_PULL,
 			    packet, packet_len);
 
 	os_free(packet);
@@ -4259,7 +4264,7 @@ static int wpa_ft_send_rrb_auth_resp(struct wpa_state_machine *sm,
 	frame->packet_type = FT_PACKET_RESPONSE;
 	frame->action_length = host_to_le16(rlen);
 #ifdef CONFIG_IEEE80211BE
-	if (wpa_auth->is_ml)
+	if (sm->mld_assoc_link_id >= 0)
 		os_memcpy(target_addr, wpa_auth->mld_addr, ETH_ALEN);
 	else
 #endif
@@ -4672,32 +4677,13 @@ static int wpa_ft_rrb_rx_r1(struct wpa_authenticator *wpa_auth,
 		session_timeout = 0;
 	wpa_printf(MSG_DEBUG, "FT: session_timeout %d", session_timeout);
 
-	if (wpa_auth->is_ml) {
-		struct wpa_authenticator *link_auth;
-		for (int link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
-			link_auth = wpa_get_link_auth(wpa_auth, link_id);
-
-			if (!link_auth)
-				continue;
-
-			ret = wpa_ft_store_pmk_r1(link_auth, f_s1kh_id, f_pmk_r1,
-						  pmk_r1_len, f_pmk_r1_name, pairwise,
-						  &vlan, expires_in, session_timeout,
-						  f_identity, f_identity_len,
-						  f_radius_cui, f_radius_cui_len);
-			if (ret < 0)
-				goto out;
-
-		}
-	} else {
-		ret = wpa_ft_store_pmk_r1(wpa_auth, f_s1kh_id, f_pmk_r1, pmk_r1_len,
-					  f_pmk_r1_name,
-					  pairwise, &vlan, expires_in, session_timeout,
-					  f_identity, f_identity_len, f_radius_cui,
-					  f_radius_cui_len);
-		if (ret < 0)
-			goto out;
-	}
+	ret = wpa_ft_store_pmk_r1(wpa_auth, f_s1kh_id, f_pmk_r1, pmk_r1_len,
+				  f_pmk_r1_name,
+				  pairwise, &vlan, expires_in, session_timeout,
+				  f_identity, f_identity_len, f_radius_cui,
+				  f_radius_cui_len);
+	if (ret < 0)
+		goto out;
 
 	ret = 0;
 out:
@@ -4769,14 +4755,15 @@ static int ft_get_sta_cb(struct wpa_state_machine *sm, void *ctx)
 }
 
 
-static int wpa_ft_rrb_rx_resp(struct wpa_authenticator *wpa_auth,
+static int wpa_ft_rrb_rx_resp(struct wpa_authenticator *primary_auth,
 			      const u8 *src_addr,
 			      const u8 *enc, size_t enc_len,
 			      const u8 *auth, size_t auth_len,
 			      int no_defer)
 {
+	struct wpa_authenticator *target_auth = NULL;
 	const char *msgtype = "pull response";
-	int nak, ret = -1;
+	int nak, ret = -1, link_id = 0;
 	struct ft_get_sta_ctx ctx;
 	u8 s1kh_id[ETH_ALEN];
 	const u8 *f_nonce;
@@ -4789,13 +4776,29 @@ static int wpa_ft_rrb_rx_resp(struct wpa_authenticator *wpa_auth,
 
 	os_memset(&ctx, 0, sizeof(ctx));
 	ctx.nonce = f_nonce;
-	if (!wpa_auth_for_each_sta(wpa_auth, ft_get_sta_cb, &ctx)) {
+
+	/* Primary auth may not have corresponding sta state machine
+	 * search all the sta of the mld bss for the target wpa_auth */
+	if (primary_auth->is_ml) {
+		for (link_id = 0; link_id < MAX_NUM_MLD_LINKS; link_id++) {
+			target_auth = wpa_get_link_auth(primary_auth, link_id);
+			if (!target_auth)
+				continue;
+
+			if (wpa_auth_for_each_sta(target_auth, ft_get_sta_cb, &ctx))
+				break;
+		}
+	} else {
+		if (wpa_auth_for_each_sta(primary_auth, ft_get_sta_cb, &ctx))
+			target_auth = primary_auth;
+	}
+	if (link_id == MAX_NUM_MLD_LINKS || !target_auth) {
 		/* nonce not found */
 		wpa_printf(MSG_DEBUG, "FT: Invalid nonce");
 		return -1;
 	}
 
-	ret = wpa_ft_rrb_rx_r1(wpa_auth, src_addr, FT_PACKET_R0KH_R1KH_RESP,
+	ret = wpa_ft_rrb_rx_r1(primary_auth, src_addr, FT_PACKET_R0KH_R1KH_RESP,
 			       enc, enc_len, auth, auth_len, msgtype, s1kh_id,
 			       no_defer ? NULL : &wpa_ft_rrb_rx_resp);
 	if (ret == -2) {
@@ -4808,7 +4811,7 @@ static int wpa_ft_rrb_rx_resp(struct wpa_authenticator *wpa_auth,
 		return -1;
 
 	ctx.s1kh_id = s1kh_id;
-	if (wpa_auth_for_each_sta(wpa_auth, ft_get_sta_cb, &ctx)) {
+	if (wpa_auth_for_each_sta(target_auth, ft_get_sta_cb, &ctx)) {
 		wpa_printf(MSG_DEBUG,
 			   "FT: Response to a pending pull request for " MACSTR,
 			   MAC2STR(ctx.sm->addr));
@@ -5510,10 +5513,10 @@ static void wpa_ft_sta_roamed_notify_per_r1kh(struct wpa_state_machine *sm,
 
 	wpa_printf(MSG_DEBUG, "FT: Send sta roamed notify rrb from " MACSTR
 		   " to remote FTR address " MACSTR,
-		   MAC2STR(wpa_auth_get_aa(sm)), MAC2STR(r1kh->addr));
+		   MAC2STR(wpa_ft_rrb_get_aa(sm->wpa_auth)), MAC2STR(r1kh->addr));
 
 	if (wpa_ft_rrb_build(r1kh->key, sizeof(r1kh->key), clear, NULL, clear_auth, NULL,
-			     wpa_auth_get_aa(sm), FT_PACKET_R1KH_STA_ROAMED_NOTIFY,
+			     wpa_ft_rrb_get_aa(sm->wpa_auth), FT_PACKET_R1KH_STA_ROAMED_NOTIFY,
 			     &packet, &packet_len) < 0)
 		return;
 
-- 
2.45.2

