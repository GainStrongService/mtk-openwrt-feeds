From 4aeebe6783927e233a592edcf1eb176fa46a5ed6 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Mon, 5 May 2025 13:19:43 +0800
Subject: [PATCH 198/206] mtk: hostapd: fix wbcs values when pp is enabled

The seg0 and seg1 for punct_update_legacy_bw should be center ch &
center ch 2 instead of the value of seg0 & seg1 in wbcs.
They are different when bandwidth is 160, as wbcs seg0 will become primary
80MHz center and seg1 will become 160MHz center.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 src/ap/ieee802_11.c | 51 ++++++++++++++++++++++++++++++++-------------
 1 file changed, 37 insertions(+), 14 deletions(-)

diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 3f9333ca8..f5fb3d913 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -7888,16 +7888,51 @@ u8 * hostapd_eid_txpower_envelope(struct hostapd_data *hapd, u8 *eid)
 static u8 * hostapd_eid_wb_channel_switch(struct hostapd_data *hapd, u8 *eid,
 					  u8 chan1, u8 chan2)
 {
+	int bandwidth = hapd->cs_freq_params.bandwidth;
 	u8 bw;
-	enum oper_chan_width oper_chwidth = CONF_OPER_CHWIDTH_160MHZ;
 #ifdef CONFIG_IEEE80211BE
 	u16 punct_bitmap = hapd->cs_freq_params.punct_bitmap;
+
+	if (punct_bitmap) {
+		enum oper_chan_width oper_chwidth;
+
+		switch (bandwidth) {
+		case 320:
+			oper_chwidth = CONF_OPER_CHWIDTH_320MHZ;
+			break;
+		case 160:
+			oper_chwidth = CONF_OPER_CHWIDTH_160MHZ;
+			break;
+		case 80:
+			oper_chwidth = CONF_OPER_CHWIDTH_80MHZ;
+			break;
+		default:
+			/* not valid punctured bitmap */
+			return eid;
+		}
+
+		punct_update_legacy_bw(punct_bitmap,
+				       hapd->cs_freq_params.channel,
+				       &oper_chwidth, &chan1, &chan2);
+		switch (oper_chwidth) {
+		case CONF_OPER_CHWIDTH_160MHZ:
+			bandwidth = 160;
+			break;
+		case CONF_OPER_CHWIDTH_80MHZ:
+			bandwidth = 80;
+			break;
+		case CONF_OPER_CHWIDTH_USE_HT:
+		default:
+			bandwidth = chan1 ? 40 : 20;
+			break;
+		}
+	}
 #endif /* CONFIG_IEEE80211BE */
 
 	/* bandwidth: 0: 40, 1: 80, 160, 80+80, 4 to 255 reserved as per
 	 * IEEE P802.11-REVme/D7.0, 9.4.2.159 and Table 9-316.
 	 */
-	switch (hapd->cs_freq_params.bandwidth) {
+	switch (bandwidth) {
 	case 320:
 		/* As per IEEE P802.11be/D7.0, 35.15.3,
 		 * For EHT BSS operating channel width wider than 160 MHz,
@@ -7911,8 +7946,6 @@ static u8 * hostapd_eid_wb_channel_switch(struct hostapd_data *hapd, u8 *eid,
 			chan1 -= 16;
 		else
 			chan1 += 16;
-
-		oper_chwidth = CONF_OPER_CHWIDTH_320MHZ;
 		/* fallthrough */
 	case 160:
 		/* Update the CCFS0 and CCFS1 values in the element based on
@@ -7934,25 +7967,15 @@ static u8 * hostapd_eid_wb_channel_switch(struct hostapd_data *hapd, u8 *eid,
 		break;
 	case 80:
 		bw = 1;
-		oper_chwidth = CONF_OPER_CHWIDTH_80MHZ;
 		break;
 	case 40:
 		bw = 0;
-		oper_chwidth = CONF_OPER_CHWIDTH_USE_HT;
 		break;
 	default:
 		/* not valid VHT bandwidth or not in CSA */
 		return eid;
 	}
 
-#ifdef CONFIG_IEEE80211BE
-	if (punct_bitmap) {
-		punct_update_legacy_bw(punct_bitmap,
-				       hapd->cs_freq_params.channel,
-				       &oper_chwidth, &chan1, &chan2);
-	}
-#endif /* CONFIG_IEEE80211BE */
-
 	*eid++ = WLAN_EID_WIDE_BW_CHSWITCH;
 	*eid++ = 3; /* Length of Wide Bandwidth Channel Switch element */
 	*eid++ = bw; /* New Channel Width */
-- 
2.45.2

