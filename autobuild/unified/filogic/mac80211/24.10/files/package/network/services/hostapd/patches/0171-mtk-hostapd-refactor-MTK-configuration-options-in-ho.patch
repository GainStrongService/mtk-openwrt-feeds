From ecb30de6561a727989dd0323fe305ecc7b638566 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Thu, 13 Mar 2025 10:26:34 +0800
Subject: [PATCH 171/206] mtk: hostapd: refactor MTK configuration options in
 hostapd/wpa_s for prplMesh

There are hostapd/wpa_s options for MLD operation in MTK internal patch,
but prplMesh will not use these options.
Therefore this commit refactor the usage of these option by following

- mld_primary: it is only used by ucode, so remove it from hostapd
- mld_allowed_links: it is needed in AP MLD mode for starting beaconing
  after AP MLD is ready, and in Extender mode for STA interface checking
  whether AP MLD finishes the setup.
  For prplMesh use, set the default value to 255 and ignore it if the
  value is 255.
- mld_radio_msk: it is used by ucode to create wdev with correct radio
  mask. This commit makes hostapd read it from HW feature, so it can
  also be removed from hostapd configuration
- mld_allowed_phy_bitmap: set the default value to 7, which means by
  default STA MLD will use each phy radio
- mld_assoc_phy: this option remain the same. It is because the option
  is converted to "freq_list" and "mld_connect_band_pref", which are
  original wpa_s configuration and used by prplMesh

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>

Fix incorrect use on "mld_allowed_links".
1. if mld_allowed_links is 255, immediately set the beacon again
   to start beacon TX.
2. if mld_allowed_links is 0, which means the variable is not used and
   immediately set the beacon to start beacon TX.
3. Otherwise, only after the mld_allowed_links equals to valid_links,
   the beacon starts to TX.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 hostapd/config_file.c   | 4 ----
 src/ap/ap_config.c      | 3 +++
 src/ap/ap_config.h      | 3 ---
 src/ap/hostapd.c        | 6 +++++-
 src/ap/hostapd.h        | 3 ++-
 src/ap/hw_features.c    | 2 ++
 wpa_supplicant/config.c | 1 +
 wpa_supplicant/config.h | 1 +
 8 files changed, 14 insertions(+), 9 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index a01175771..1f579051d 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -5224,12 +5224,8 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		conf->punct_acs_threshold = val;
 	} else if (os_strcmp(buf, "mld_ap") == 0) {
 		bss->mld_ap = !!atoi(pos);
-	} else if (os_strcmp(buf, "mld_primary") == 0) {
-		bss->mld_primary = !!atoi(pos);
 	} else if (os_strcmp(buf, "mld_allowed_links") == 0) {
 		bss->mld_allowed_links = atoi(pos);
-	} else if (os_strcmp(buf, "mld_radio_mask") == 0) {
-		bss->mld_radio_mask = atoi(pos);
 	} else if (os_strcmp(buf, "mld_addr") == 0) {
 		if (hwaddr_aton(pos, bss->mld_addr)) {
 			wpa_printf(MSG_ERROR, "Line %d: Invalid mld_addr",
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 223b07828..6878c3dff 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -179,6 +179,9 @@ void hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
 	bss->pasn_noauth = 1;
 #endif /* CONFIG_PASN */
 	bss->bss_termination_tsf = 0;
+#ifdef CONFIG_IEEE80211BE
+	bss->mld_allowed_links = 255;
+#endif /* CONFIG_IEEE80211BE */
 }
 
 
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 612028155..afcafb113 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -967,11 +967,8 @@ struct hostapd_bss_config {
 	/* The AP is part of an AP MLD */
 	u8 mld_ap;
 
-	/* The AP is the primary AP of an AP MLD */
-	u8 mld_primary;
 	/* Allowed link bitmap of the AP MLD to which the AP is affiliated */
 	u16 mld_allowed_links;
-	u32 mld_radio_mask;
 
 	/* The MLD ID to which the AP MLD is affiliated with */
 	u8 mld_id;
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 4c50a3707..c5669940f 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -1369,7 +1369,9 @@ static int hostapd_start_beacon(struct hostapd_data *hapd,
 	if (!conf->start_disabled && ieee802_11_set_beacon(hapd) < 0)
 		return -1;
 
-	if (hapd->conf->mld_ap && !hapd->mld->started) {
+#ifdef CONFIG_IEEE80211BE
+	if (hapd->conf->mld_ap && (!hapd->mld->started ||
+				   hapd->conf->mld_allowed_links == 255)) {
 		struct hostapd_data *p_hapd;
 		u16 valid_links = 0;
 
@@ -1377,6 +1379,7 @@ static int hostapd_start_beacon(struct hostapd_data *hapd,
 			valid_links |= BIT(p_hapd->mld_link_id);
 
 		if (valid_links == hapd->conf->mld_allowed_links ||
+		    hapd->conf->mld_allowed_links == 255 ||
 		    !hapd->conf->mld_allowed_links) {
 			hapd->mld->started = 1;
 			ieee802_11_set_beacon(hapd);
@@ -1397,6 +1400,7 @@ static int hostapd_start_beacon(struct hostapd_data *hapd,
 		hostapd_drv_sta_deauth(hapd, addr,
 				       WLAN_REASON_PREV_AUTH_NOT_VALID);
 	}
+#endif /* CONFIG_IEEE80211BE */
 
 	if (hapd->driver && hapd->driver->set_operstate)
 		hapd->driver->set_operstate(hapd->drv_priv, 1);
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 5e55d8533..48077b45a 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -808,6 +808,7 @@ struct hostapd_iface {
 	struct hostapd_multi_hw_info *multi_hw_info;
 	unsigned int num_multi_hws;
 	struct hostapd_multi_hw_info *current_hw_info;
+	u8 radio_mask;
 
 #ifdef CONFIG_AFC
 	struct {
@@ -1103,7 +1104,7 @@ static inline u32 hostapd_get_radio_mask(struct hostapd_data *hapd)
 #ifdef CONFIG_IEEE80211BE
 	if (hapd->iface->current_hw_info) {
 		if (hapd->conf->mld_ap)
-			return hapd->conf->mld_radio_mask;
+			return hapd->iface->radio_mask;
 		else
 			return 1 << hapd->iface->current_hw_info->hw_idx;
 	}
diff --git a/src/ap/hw_features.c b/src/ap/hw_features.c
index 56eaae852..e18c5dfba 100644
--- a/src/ap/hw_features.c
+++ b/src/ap/hw_features.c
@@ -180,12 +180,14 @@ int hostapd_get_hw_features(struct hostapd_iface *iface)
 	hostapd_free_multi_hw_info(iface->multi_hw_info);
 	iface->multi_hw_info = multi_hw_info;
 	iface->num_multi_hws = num_multi_hws;
+	iface->radio_mask = 0;
 
 	wpa_printf(MSG_DEBUG, "Multiple underlying hardwares info:");
 
 	for (k = 0; k < num_multi_hws; k++) {
 		struct hostapd_multi_hw_info *hw_info = &multi_hw_info[k];
 
+		iface->radio_mask |= BIT(hw_info->hw_idx);
 		wpa_printf(MSG_DEBUG,
 			   "  %d. hw_idx=%u, frequency range: %d-%d MHz",
 			   k + 1, hw_info->hw_idx, hw_info->start_freq,
diff --git a/wpa_supplicant/config.c b/wpa_supplicant/config.c
index 9ab4ea3d0..dbd3e2137 100644
--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -4843,6 +4843,7 @@ struct wpa_config * wpa_config_alloc_empty(const char *ctrl_interface,
 
 #ifdef CONFIG_TESTING_OPTIONS
 	config->mld_connect_band_pref = DEFAULT_MLD_CONNECT_BAND_PREF;
+	config->mld_allowed_phy = DEFAULT_MLD_ALLOWED_PHY;
 #endif /* CONFIG_TESTING_OPTIONS */
 
 	return config;
diff --git a/wpa_supplicant/config.h b/wpa_supplicant/config.h
index f7c1193e7..1c77b786e 100644
--- a/wpa_supplicant/config.h
+++ b/wpa_supplicant/config.h
@@ -48,6 +48,7 @@
 #define DEFAULT_EXTENDED_KEY_ID 0
 #define DEFAULT_SCAN_RES_VALID_FOR_CONNECT 5
 #define DEFAULT_MLD_CONNECT_BAND_PREF MLD_CONNECT_BAND_PREF_AUTO
+#define DEFAULT_MLD_ALLOWED_PHY 7
 
 #include "config_ssid.h"
 #include "wps/wps.h"
-- 
2.45.2

