From 01931d1a8869378818b8aa745d4c78b6db447883 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 3 Jun 2025 21:23:24 +0800
Subject: [PATCH 206/206] mtk: hostapd: update DFS detection mode

Set RDD_DET_MODE via mt76 vendor cmd when dfs detection mode is enabled

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 hostapd/config_file.c             |  2 +-
 hostapd/ctrl_iface.c              | 11 ++++++-
 hostapd/hostapd_cli.c             |  8 +++++
 src/ap/ap_config.h                |  8 ++++-
 src/ap/ap_drv_ops.c               | 14 ++++++++
 src/ap/ap_drv_ops.h               |  2 ++
 src/common/mtk_vendor.h           | 13 ++++++++
 src/drivers/driver.h              |  8 +++++
 src/drivers/driver_nl80211.c      | 54 +++++++++++++++++++++++++++++++
 src/drivers/driver_nl80211.h      |  1 +
 src/drivers/driver_nl80211_capa.c |  3 ++
 11 files changed, 121 insertions(+), 3 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 1f579051d..fd766cda7 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -5300,7 +5300,7 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 	} else if (os_strcmp(buf, "ibf_enable") == 0) { /*ibf setting is per device*/
 		int val = atoi(pos);
 		conf->ibf_enable = !!val;
-	} else if (os_strcmp(buf, "dfs_detect_mode") == 0) { /*bypass channel switch*/
+	} else if (os_strcmp(buf, "dfs_detect_mode") == 0) { /* bypass channel switch */
 		u8 en = strtol(pos, NULL, 10);
 
 		conf->dfs_detect_mode = en;
diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index aac7a17ad..4f3e81033 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -4899,7 +4899,7 @@ static int
 hostapd_ctrl_iface_set_dfs_detect_mode(struct hostapd_data *hapd, char *value,
 				       char *buf, size_t buflen)
 {
-	u8 dfs_detect_mode;
+	u8 dfs_detect_mode, dfs_tx_mode;
 
 	if (!value)
 		return -1;
@@ -4911,6 +4911,15 @@ hostapd_ctrl_iface_set_dfs_detect_mode(struct hostapd_data *hapd, char *value,
 	}
 	hapd->iconf->dfs_detect_mode = dfs_detect_mode;
 
+	/* avoid stopping tx when radar is detected in cert mode */
+	if (dfs_detect_mode == DFS_DETECT_MODE_AP_ENABLE ||
+	    dfs_detect_mode == DFS_DETECT_MODE_ALL_ENABLE)
+		dfs_tx_mode = DFS_TX_CERT_MODE;
+	else
+		dfs_tx_mode = DFS_TX_NORMAL_MODE;
+
+	if (hostapd_drv_dfs_tx_mode(hapd, dfs_tx_mode))
+		return -1;
 	return os_snprintf(buf, buflen, "OK\n");
 }
 
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 1dd220189..728b9aad5 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1866,6 +1866,12 @@ static int hostapd_cli_cmd_get_edcca(struct wpa_ctrl *ctrl, int argc, char *argv
 	return hostapd_cli_cmd(ctrl, "GET_EDCCA", 1, argc, argv);
 }
 
+static int hostapd_cli_cmd_dfs_detect_mode(struct wpa_ctrl *ctrl, int argc,
+					   char *argv[])
+{
+	return hostapd_cli_cmd(ctrl, "DFS_DETECT_MODE", 1, argc, argv);
+}
+
 struct hostapd_cli_cmd {
 	const char *cmd;
 	int (*handler)(struct wpa_ctrl *ctrl, int argc, char *argv[]);
@@ -2150,6 +2156,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 		" = Configure EDCCA mode or threshold" },
 	{ "get_edcca", hostapd_cli_cmd_get_edcca, NULL,
 		" = Get EDCCA threshold from driver" },
+	{ "dfs_detect_mode", hostapd_cli_cmd_dfs_detect_mode, NULL,
+		" = Set DFS detection mode" },
 	{ NULL, NULL, NULL, NULL }
 };
 
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index afcafb113..6c316f7c3 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1370,7 +1370,7 @@ enum background_radar_mode {
 	BACKGROUND_RADAR_CERT_MODE,
 };
 
-enum dfs_mode {
+enum dfs_detect_mode {
 	DFS_DETECT_MODE_DISABLE,
 	DFS_DETECT_MODE_AP_ENABLE,
 	DFS_DETECT_MODE_BACKGROUND_ENABLE,
@@ -1409,6 +1409,12 @@ enum pp_mode {
 	PP_USR_MODE,
 };
 
+enum dfs_tx_mode {
+	DFS_TX_NORMAL_MODE,
+	DFS_TX_CERT_MODE,
+};
+
+
 #define EDCCA_DEFAULT_COMPENSATION -6
 #define EDCCA_MIN_COMPENSATION -126
 #define EDCCA_MAX_COMPENSATION 126
diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index 98bcdcaab..808f3306a 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -1805,3 +1805,17 @@ int hostapd_drv_set_scs(struct hostapd_data *hapd, struct hostapd_scs_desc_info
 	return hapd->driver->set_scs(hapd->drv_priv, info, hapd->mld_link_id);
 }
 #endif
+
+int hostapd_drv_dfs_tx_mode(struct hostapd_data *hapd, u8 dfs_tx_mode)
+{
+	s8 link_id = -1;
+
+	if (!hapd->driver || !hapd->driver->dfs_tx_mode)
+		return 0;
+
+	if (hapd->conf->mld_ap)
+		link_id = hapd->mld_link_id;
+
+	return hapd->driver->dfs_tx_mode(hapd->drv_priv, link_id,
+					 dfs_tx_mode);
+}
diff --git a/src/ap/ap_drv_ops.h b/src/ap/ap_drv_ops.h
index 4cb534c02..a5df7ef4a 100644
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -205,6 +205,8 @@ int hostapd_drv_set_scs(struct hostapd_data *hapd,
 			struct hostapd_scs_desc_info *info);
 #endif
 
+int hostapd_drv_dfs_tx_mode(struct hostapd_data *hapd, u8 dfs_tx_mode);
+
 void hostapd_get_ext_capa(struct hostapd_iface *iface);
 void hostapd_get_mld_capa(struct hostapd_iface *iface);
 
diff --git a/src/common/mtk_vendor.h b/src/common/mtk_vendor.h
index cdb09bd20..d9bc44888 100644
--- a/src/common/mtk_vendor.h
+++ b/src/common/mtk_vendor.h
@@ -23,6 +23,7 @@ enum mtk_nl80211_vendor_subcmds {
 	MTK_NL80211_VENDOR_SUBCMD_SCS_CTRL = 0xd0,
 	MTK_NL80211_VENDOR_SUBCMD_EML_CTRL = 0xd3,
 	MTK_NL80211_VENDOR_SUBCMD_EPCS_CTRL = 0xd4,
+	MTK_NL80211_VENDOR_SUBCMD_DFS_TX_CTRL = 0xd5,
 };
 
 enum mtk_nl80211_vendor_subevents {
@@ -363,6 +364,18 @@ enum mtk_vendor_attr_scs_ctrl {
 		NUM_MTK_VENDOR_ATTRS_SCS_CTRL - 1
 };
 
+enum mtk_vendor_attr_dfs_tx_ctrl {
+	MTK_VENDOR_ATTR_DFS_TX_CTRL_UNSPEC,
+
+	MTK_VENDOR_ATTR_DFS_TX_CTRL_MODE,
+	MTK_VENDOR_ATTR_DFS_TX_CTRL_RADIO_IDX,
+
+	/* keep last */
+	NUM_MTK_VENDOR_ATTRS_DFS_TX_CTRL,
+	MTK_VENDOR_ATTR_DFS_TX_CTRL_MAX =
+		NUM_MTK_VENDOR_ATTRS_DFS_TX_CTRL - 1
+};
+
 #define CSI_BW20_DATA_COUNT	64
 #define CSI_BW40_DATA_COUNT	128
 #define CSI_BW80_DATA_COUNT	256
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index acf0414a6..b89c5245f 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -5748,6 +5748,14 @@ struct wpa_driver_ops {
 	* @vif_radio_mask: radio mask of the interface
 	*/
 	int (*get_vif_radio_mask)(void *priv, u32 *vif_radio_mask);
+
+	/**
+	 * dfs_tx_mode - set dfs tx mode
+	 * @priv: Private driver interface data
+	 * @link_id: MLD link id. -1 if this is an non-MLD AP
+	 * @dfs_tx_mode: dfs tx mode
+	 */
+	int (*dfs_tx_mode)(void *priv, s8 link_id, u8 dfs_tx_mode);
 };
 
 /**
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 2d1065e42..ecb66501f 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -16756,6 +16756,59 @@ fail:
 	return -ENOBUFS;
 }
 
+static int nl80211_dfs_tx_mode(void *priv, s8 link_id, const u8 dfs_tx_mode)
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct i802_link *link = nl80211_get_link(bss, link_id);
+	struct hostapd_data *hapd = bss->ctx;
+	struct nl_msg *msg;
+	struct nlattr *data;
+	u8 radio_idx = 0;
+	int ret;
+
+	if (!drv->mtk_dfs_tx_vendor_cmd_avail) {
+		wpa_printf(MSG_INFO,
+			   "nl80211: Driver does not support setting dfs tx mode");
+		return 0;
+	}
+
+	msg = nl80211_drv_msg(drv, 0, NL80211_CMD_VENDOR);
+	if (!msg)
+		goto fail;
+
+	if (nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_MTK) ||
+	    nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+			MTK_NL80211_VENDOR_SUBCMD_DFS_TX_CTRL))
+		goto fail;
+
+	data = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA);
+	if (!data)
+		goto fail;
+
+	if (link && link->ctx)
+		hapd = link->ctx;
+
+	if (hapd->iface->current_hw_info)
+		radio_idx = hapd->iface->current_hw_info->hw_idx;
+
+	if (nla_put_u8(msg, MTK_VENDOR_ATTR_DFS_TX_CTRL_MODE, dfs_tx_mode) ||
+	    nla_put_u8(msg, MTK_VENDOR_ATTR_DFS_TX_CTRL_RADIO_IDX, radio_idx))
+		goto fail;
+
+	nla_nest_end(msg, data);
+
+	ret = send_and_recv_cmd(drv, msg);
+	if (ret)
+		wpa_printf(MSG_ERROR, "Failed to set dfs tx mode. ret=%d (%s) ",
+			   ret, strerror(-ret));
+	return ret;
+
+fail:
+	nlmsg_free(msg);
+	return -ENOBUFS;
+}
+
 const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.name = "nl80211",
 	.desc = "Linux nl80211/cfg80211",
@@ -16963,4 +17016,5 @@ const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.csi_dump = nl80211_csi_dump,
 	.txpower_ctrl = nl80211_txpower_ctrl,
 	.get_vif_radio_mask = nl80211_get_vif_radio_mask,
+	.dfs_tx_mode = nl80211_dfs_tx_mode,
 };
diff --git a/src/drivers/driver_nl80211.h b/src/drivers/driver_nl80211.h
index 77355e04e..c3389415c 100644
--- a/src/drivers/driver_nl80211.h
+++ b/src/drivers/driver_nl80211.h
@@ -217,6 +217,7 @@ struct wpa_driver_nl80211_data {
 	unsigned int mtk_epcs_vendor_cmd_avail:1;
 	unsigned int mtk_txpower_vendor_cmd_avail:1;
 	unsigned int mtk_scs_vendor_cmd_avail:1;
+	unsigned int mtk_dfs_tx_vendor_cmd_avail:1;
 
 	u8 extra_bss_membership_selectors[8];
 
diff --git a/src/drivers/driver_nl80211_capa.c b/src/drivers/driver_nl80211_capa.c
index a3220a241..9caee4cb1 100644
--- a/src/drivers/driver_nl80211_capa.c
+++ b/src/drivers/driver_nl80211_capa.c
@@ -1196,6 +1196,9 @@ static int wiphy_info_handler(struct nl_msg *msg, void *arg)
 				case MTK_NL80211_VENDOR_SUBCMD_SCS_CTRL:
 					drv->mtk_scs_vendor_cmd_avail = 1;
 					break;
+				case MTK_NL80211_VENDOR_SUBCMD_DFS_TX_CTRL:
+					drv->mtk_dfs_tx_vendor_cmd_avail = 1;
+					break;
 				}
 			}
 
-- 
2.45.2

