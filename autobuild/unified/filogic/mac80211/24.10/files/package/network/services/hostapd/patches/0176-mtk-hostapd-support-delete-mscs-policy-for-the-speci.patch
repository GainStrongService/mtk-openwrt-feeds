From b6fcf569e5c6ab404faacb02e04bc7b1be9545ce Mon Sep 17 00:00:00 2001
From: Howard Hsu <howard-yh.hsu@mediatek.com>
Date: Tue, 11 Mar 2025 13:39:17 +0800
Subject: [PATCH 176/206] mtk: hostapd: support delete mscs policy for the
 specific sta

Support delete mscs policy for the specific station. This hostapd_cli
command is required for QoS Management program TC 4.4.2.
Usage:
hostapd_cli -i <intf> del_mscs <sta mac addr>

Signed-off-by: Howard Hsu <howard-yh.hsu@mediatek.com>

---
 hostapd/ctrl_iface.c  | 24 ++++++++++++++++++++++++
 hostapd/hostapd_cli.c |  7 +++++++
 src/ap/scs.c          | 13 +++++++++++++
 src/ap/scs.h          |  1 +
 4 files changed, 45 insertions(+)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index c675e6c9b..f36351e66 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -6059,6 +6059,28 @@ hostapd_ctrl_iface_wmm(struct hostapd_data *hapd, char *cmd, char *buf,
 	return os_snprintf(buf, buflen, "OK\n");
 }
 
+static int
+hostapd_ctrl_iface_del_mscs(struct hostapd_data *hapd, char *cmd,
+			    char *buf, size_t buflen)
+{
+	u8 addr[ETH_ALEN];
+	struct sta_info *sta;
+
+	if (hwaddr_aton(cmd, addr))
+		goto fail;
+
+	sta = ap_get_sta(hapd, addr);
+	if (!sta)
+		goto fail;
+
+	hostapd_del_mscs(hapd, addr);
+
+	return os_snprintf(buf, buflen, "OK\n");
+
+fail:
+	return os_snprintf(buf, buflen, "FAIL\n");
+}
+
 static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 					      char *buf, char *reply,
 					      int reply_size,
@@ -6752,6 +6774,8 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 		reply_len = hostapd_ctrl_iface_set_eml_resp(hapd, buf + 9, reply, reply_size);
 	} else if (os_strncmp(buf, "EPCS ", 5) == 0) {
 		reply_len = hostapd_ctrl_iface_epcs(hapd, buf + 5, reply, reply_size);
+	} else if (os_strncmp(buf, "DEL_MSCS ", 9) == 0) {
+		reply_len = hostapd_ctrl_iface_del_mscs(hapd, buf + 9, reply, reply_size);
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
 		reply_len = 16;
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index ed0e70bdc..ea8609170 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1839,6 +1839,11 @@ static int hostapd_cli_cmd_epcs(struct wpa_ctrl *ctrl, int argc, char *argv[])
 	return hostapd_cli_cmd(ctrl, "EPCS", 1, argc, argv);
 }
 
+static int hostapd_cli_cmd_del_mscs(struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	return hostapd_cli_cmd(ctrl, "DEL_MSCS", 1, argc, argv);
+}
+
 struct hostapd_cli_cmd {
 	const char *cmd;
 	int (*handler)(struct wpa_ctrl *ctrl, int argc, char *argv[]);
@@ -2115,6 +2120,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 		" = Teardown the Negotiated TTLM with the STA" },
 	{ "epcs", hostapd_cli_cmd_epcs, NULL,
 		" = Control EPCS priority access" },
+	{ "del_mscs", hostapd_cli_cmd_del_mscs, NULL,
+		" = Delete MSCS for the specific STA" },
 	{ NULL, NULL, NULL, NULL }
 };
 
diff --git a/src/ap/scs.c b/src/ap/scs.c
index 321ed664a..cb0ae8d21 100644
--- a/src/ap/scs.c
+++ b/src/ap/scs.c
@@ -253,6 +253,19 @@ static void hostapd_handle_mscs_req(struct hostapd_data *hapd,
 			   sta->mscs_assoc_setup_status);
 }
 
+void hostapd_del_mscs(struct hostapd_data *hapd, u8 *mac)
+{
+	struct hostapd_mscs_desc_info info;
+
+	os_memset(&info, 0, sizeof(info));
+	os_memcpy(info.peer_addr, mac, ETH_ALEN);
+	info.req_type = SCS_REQ_REMOVE;
+
+	send_mtk_mscs_nl_msg(hapd, &info);
+
+	send_mscs_response(hapd, mac, 0, WLAN_STATUS_TCLAS_PROCESSING_TERMINATED);
+}
+
 static bool hostapd_find_scs_session(struct sta_info *sta, u8 scsid,
 				     int *session_idx)
 {
diff --git a/src/ap/scs.h b/src/ap/scs.h
index 825039ea5..028d55b8b 100644
--- a/src/ap/scs.h
+++ b/src/ap/scs.h
@@ -35,4 +35,5 @@ u16 hostapd_set_mscs(struct hostapd_data *hapd, const u8 *addr,
 		     const u8 *pos, size_t len);
 int hostapd_mtk_mscs_daemon_init(struct hapd_interfaces *ifaces);
 void hostapd_mtk_mscs_daemon_deinit(struct hapd_interfaces *ifaces);
+void hostapd_del_mscs(struct hostapd_data *hapd, u8 *mac);
 #endif
-- 
2.45.2

