From 534138b0ff03e6c8d43c5a017738b9e7f2dbdf1e Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Mon, 18 Dec 2023 11:35:34 +0800
Subject: [PATCH 141/149] mtk: hostapd: add support for enable/disable single
 BSS

This function is ported from wifi 6.
(https://gerrit.mediatek.inc/c/openwrt/feeds/mtk_openwrt_feeds/+/8407972)

Enabling or disabling single BSS mean that the beacon of the BSS is
enabled or disabled.

When the BSS is disabled, the following statements are true:
1. the events or packets from the driver are all ignored.
2. Per radio functions (ex. channel switch, color change) will not
   execute for the BSS, but are finished by other enabling BSS(es).
   The changed parameters take effect when the BSS is enabled again.
3. Enabling the BSS will not reload the configuration. In other word,
   if the configuration changes during the BSS disabling, the BSS needs
   to be removed and added again, not just be enabled.

This patch add new commands to enable/disable single BSS:
$ hostapd_cli -i <ifname> enable_bss
$ hostapd_cli -i <ifname> disable_bss

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 hostapd/ctrl_iface.c               | 42 ++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c              | 18 +++++++++++++
 src/ap/hostapd.c                   | 40 ++++++++++++++++++++++++++++
 src/ap/hostapd.h                   |  2 ++
 src/drivers/driver_nl80211.c       | 11 ++++++++
 src/drivers/driver_nl80211_event.c |  8 ++++++
 6 files changed, 121 insertions(+)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index f9a615ef8..70588f238 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -1555,6 +1555,24 @@ static int hostapd_ctrl_iface_enable(struct hostapd_iface *iface)
 }
 
 
+static int hostapd_ctrl_iface_enable_bss(struct hostapd_data *hapd)
+{
+#ifdef CONFIG_IEEE80211BE
+	if (hostapd_is_mld_ap(hapd)) {
+		wpa_printf(MSG_ERROR, "Cannot enable AP MLD");
+		return -1;
+	}
+#endif /* CONFIG_IEEE80211BE */
+
+	if (hostapd_enable_bss(hapd) < 0) {
+		wpa_printf(MSG_ERROR, "Enabling of BSS failed");
+		return -1;
+	}
+
+	return 0;
+}
+
+
 static int hostapd_ctrl_iface_reload(struct hostapd_iface *iface)
 {
 	if (hostapd_reload_iface(iface) < 0) {
@@ -1585,6 +1603,24 @@ static int hostapd_ctrl_iface_disable(struct hostapd_iface *iface)
 }
 
 
+static int hostapd_ctrl_iface_disable_bss(struct hostapd_data *hapd)
+{
+#ifdef CONFIG_IEEE80211BE
+	if (hostapd_is_mld_ap(hapd)) {
+		wpa_printf(MSG_ERROR, "Cannot disable AP MLD");
+		return -1;
+	}
+#endif /* CONFIG_IEEE80211BE */
+
+	if (hostapd_disable_bss(hapd) < 0) {
+		wpa_printf(MSG_ERROR, "Disabling of BSS failed");
+		return -1;
+	}
+
+	return 0;
+}
+
+
 static int
 hostapd_ctrl_iface_kick_mismatch_psk_sta_iter(struct hostapd_data *hapd,
 					      struct sta_info *sta, void *ctx)
@@ -5857,6 +5893,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strcmp(buf, "ENABLE") == 0) {
 		if (hostapd_ctrl_iface_enable(hapd->iface))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "ENABLE_BSS", 10) == 0) {
+		if (hostapd_ctrl_iface_enable_bss(hapd))
+			reply_len = -1;
 	} else if (os_strcmp(buf, "RELOAD_WPA_PSK") == 0) {
 		if (hostapd_ctrl_iface_reload_wpa_psk(hapd))
 			reply_len = -1;
@@ -5880,6 +5919,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strcmp(buf, "DISABLE") == 0) {
 		if (hostapd_ctrl_iface_disable(hapd->iface))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "DISABLE_BSS", 11) == 0) {
+		if (hostapd_ctrl_iface_disable_bss(hapd))
+			reply_len = -1;
 	} else if (os_strcmp(buf, "UPDATE_BEACON") == 0) {
 		if (ieee802_11_set_beacon(hapd))
 			reply_len = -1;
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 6088775b8..53ce14d74 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1252,6 +1252,13 @@ static int hostapd_cli_cmd_enable(struct wpa_ctrl *ctrl, int argc,
 }
 
 
+static int hostapd_cli_cmd_enable_bss(struct wpa_ctrl *ctrl, int argc,
+				      char *argv[])
+{
+	return wpa_ctrl_command(ctrl, "ENABLE_BSS");
+}
+
+
 static int hostapd_cli_cmd_reload(struct wpa_ctrl *ctrl, int argc,
 				  char *argv[])
 {
@@ -1280,6 +1287,13 @@ static int hostapd_cli_cmd_disable(struct wpa_ctrl *ctrl, int argc,
 }
 
 
+static int hostapd_cli_cmd_disable_bss(struct wpa_ctrl *ctrl, int argc,
+				       char *argv[])
+{
+	return wpa_ctrl_command(ctrl, "DISABLE_BSS");
+}
+
+
 static int hostapd_cli_cmd_enable_mld(struct wpa_ctrl *ctrl, int argc,
 				      char *argv[])
 {
@@ -1911,6 +1925,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	  "  = send vendor driver command" },
 	{ "enable", hostapd_cli_cmd_enable, NULL,
 	  "= enable hostapd on current interface" },
+	{ "enable_bss", hostapd_cli_cmd_enable_bss, NULL,
+	  "= enable hostapd on current BSS" },
 	{ "reload", hostapd_cli_cmd_reload, NULL,
 	  "= reload configuration for current interface" },
 	{ "reload_bss", hostapd_cli_cmd_reload_bss, NULL,
@@ -1919,6 +1935,8 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	  "= reload configuration for current interface" },
 	{ "disable", hostapd_cli_cmd_disable, NULL,
 	  "= disable hostapd on current interface" },
+	{ "disable_bss", hostapd_cli_cmd_disable_bss, NULL,
+	  "= disable hostapd on current BSS" },
 	{ "enable_mld", hostapd_cli_cmd_enable_mld, NULL,
 	  "= enable AP MLD to which the interface is affiliated" },
 	{ "disable_mld", hostapd_cli_cmd_disable_mld, NULL,
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index 2ae4496c9..6cdaaeb26 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -3765,6 +3765,20 @@ int hostapd_reload_bss_only(struct hostapd_data *bss)
 }
 
 
+int hostapd_enable_bss(struct hostapd_data *hapd)
+{
+	if (hapd->beacon_set_done)
+		return 0;
+
+	if (hapd->conf->bss_load_update_period && bss_load_update_init(hapd)) {
+		wpa_printf(MSG_ERROR, "BSS Load initialization failed");
+		return -1;
+	}
+
+	return ieee802_11_set_beacon_per_bss_only(hapd);
+}
+
+
 int hostapd_disable_iface(struct hostapd_iface *hapd_iface)
 {
 	size_t j;
@@ -3819,6 +3833,29 @@ int hostapd_disable_iface(struct hostapd_iface *hapd_iface)
 }
 
 
+int hostapd_disable_bss(struct hostapd_data *hapd)
+{
+	struct hostapd_iface *iface = hapd->iface;
+	int i, remain_bss = 0;
+
+	if (!hapd->beacon_set_done)
+		return 0;
+
+	for (i = 0; i < iface->num_bss; i++)
+		remain_bss += iface->bss[i]->beacon_set_done ? 1 : 0;
+
+	if (remain_bss == 1) {
+		wpa_printf(MSG_ERROR, "Cannot disable last BSS");
+		return -1;
+	}
+
+	hapd->beacon_set_done = 0;
+	bss_load_update_deinit(hapd);
+	hostapd_bss_deinit_no_free(hapd);
+	return hostapd_drv_stop_ap(hapd);
+}
+
+
 static struct hostapd_iface *
 hostapd_iface_alloc(struct hapd_interfaces *interfaces)
 {
@@ -4805,6 +4842,9 @@ int hostapd_switch_channel(struct hostapd_data *hapd,
 	struct hostapd_data *link_bss;
 	int ret;
 
+	if (!hapd->beacon_set_done)
+		return 0;
+
 	if (!(hapd->iface->drv_flags & WPA_DRIVER_FLAGS_AP_CSA)) {
 		wpa_printf(MSG_INFO, "CSA is not supported");
 		return -1;
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 58564440f..10f3c68eb 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -937,7 +937,9 @@ void hostapd_interface_deinit_free(struct hostapd_iface *iface);
 int hostapd_enable_iface(struct hostapd_iface *hapd_iface);
 int hostapd_reload_iface(struct hostapd_iface *hapd_iface);
 int hostapd_reload_bss_only(struct hostapd_data *bss);
+int hostapd_enable_bss(struct hostapd_data *hapd);
 int hostapd_disable_iface(struct hostapd_iface *hapd_iface);
+int hostapd_disable_bss(struct hostapd_data *hapd);
 void hostapd_bss_deinit_no_free(struct hostapd_data *hapd);
 void hostapd_free_hapd_data(struct hostapd_data *hapd);
 void hostapd_cleanup_iface_partial(struct hostapd_iface *iface);
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 4280b8c66..b9a8486ed 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -5296,6 +5296,17 @@ static int wpa_driver_nl80211_set_ap(void *priv,
 	wpa_printf(MSG_DEBUG, "nl80211: dtim_period=%d", params->dtim_period);
 	wpa_printf(MSG_DEBUG, "nl80211: ssid=%s",
 		   wpa_ssid_txt(params->ssid, params->ssid_len));
+
+	if (!beacon_set) {
+		/* update wdev->preset_chandef in MAC80211 */
+		ret = nl80211_set_channel(bss, params->freq, 1);
+		if (ret) {
+			wpa_printf(MSG_ERROR,
+				   "nl80211: Frequency set failed: %d (%s)",
+				   ret, strerror(-ret));
+		}
+	}
+
 	if (!(msg = nl80211_bss_msg(bss, 0, cmd)) ||
 	    nla_put(msg, NL80211_ATTR_BEACON_HEAD, params->head_len,
 		    params->head) ||
diff --git a/src/drivers/driver_nl80211_event.c b/src/drivers/driver_nl80211_event.c
index dc6d4ee48..a57acefd0 100644
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -1738,6 +1738,7 @@ static void mlme_event(struct i802_bss *bss,
 	size_t len;
 	int link_id = -1;
 	struct i802_link *mld_link = NULL;
+	bool beacon_set;
 
 	if (timed_out && addr) {
 		mlme_timeout_event(drv, cmd, addr);
@@ -1761,6 +1762,13 @@ static void mlme_event(struct i802_bss *bss,
 	if (nl80211_link_valid(bss->valid_links, link_id))
 		mld_link = nl80211_get_link(bss, link_id);
 
+	beacon_set = mld_link ? mld_link->beacon_set : bss->flink->beacon_set;
+	if (is_ap_interface(drv->nlmode) && !beacon_set) {
+		wpa_printf(MSG_DEBUG,
+			   "nl80211: drop BSS Event due to disabled BSS");
+		return;
+	}
+
 	data = nla_data(frame);
 	len = nla_len(frame);
 	if (len < 4 + 2 * ETH_ALEN) {
-- 
2.45.2

