From 24c5b894b5412aac56ca0790ec3dcfc60489cf6d Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Fri, 19 Jan 2024 14:11:05 +0800
Subject: [PATCH 065/210] mtk: hostapd: Handle DFS radar detection in MLO

To handle DFS CAC in MLO, we add the following changes:
1. Add link id info to radar detect cmd for the kernel to use the correct link.
2. Block RNR IE for disabled iface. (the EID len would be wrong without it)
3. Only flush the old stations for the first BSS; otherwise, after DFS CAC
stations would be flushed again.

Add background radar handling

The logic has changed here, so rebase it.
Avoid flushing old stations for non-first BSS so that the stations
can remain connected when non-first BSS is added via link add or it
completes CAC.
Also, handle the case when the first BSS requires CAC.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 src/ap/ap_drv_ops.c                |  9 +++++++++
 src/ap/hostapd.c                   | 11 ++++++++++-
 src/ap/ieee802_11.c                |  3 +++
 src/drivers/driver_nl80211.c       |  8 ++++++++
 src/drivers/driver_nl80211.h       |  1 +
 src/drivers/driver_nl80211_event.c |  3 ++-
 6 files changed, 33 insertions(+), 2 deletions(-)

diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index 5de1139b5..56f0780f3 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -1116,6 +1116,15 @@ int hostapd_start_dfs_cac(struct hostapd_iface *iface,
 		return -1;
 	}
 	data.radar_background = radar_background;
+	data.link_id = -1;
+
+#ifdef CONFIG_IEEE80211BE
+	if (hapd->conf->mld_ap) {
+		data.link_id = hapd->mld_link_id;
+		wpa_printf(MSG_DEBUG,
+			   "hostapd_start_dfs_cac: link_id=%d", data.link_id);
+	}
+#endif /* CONFIG_IEEE80211BE */
 
 	data.link_id = -1;
 #ifdef CONFIG_IEEE80211BE
diff --git a/src/ap/hostapd.c b/src/ap/hostapd.c
index f32d3be9c..4ca79f158 100644
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -1441,9 +1441,18 @@ int hostapd_setup_bss(struct hostapd_data *hapd, int first, bool start_beacon)
 	u8 if_addr[ETH_ALEN];
 	int flush_old_stations = 1;
 
-	if (!hostapd_mld_is_first_bss(hapd))
+	if (!hostapd_mld_is_first_bss(hapd)) {
+		/* Only flush old stations when setting up the first BSS for the MLD. */
+		flush_old_stations = 0;
 		wpa_printf(MSG_DEBUG,
 			   "MLD: %s: Setting non-first BSS", __func__);
+	} else if (hapd->conf->mld_ap &&
+		   hapd->iface->state == HAPD_IFACE_DFS) {
+		/* Also, avoid flushing old STA when the first BSS of the MLD requires CAC. */
+		flush_old_stations = 0;
+		wpa_printf(MSG_DEBUG,
+			   "MLD: %s: Setting first BSS after CAC complete", __func__);
+	}
 
 	wpa_printf(MSG_DEBUG, "%s(hapd=%p (%s), first=%d)",
 		   __func__, hapd, conf->iface, first);
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 509dadabe..8bfba3262 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -8184,6 +8184,9 @@ u8 * hostapd_eid_rnr_colocation(struct hostapd_data *hapd, u8 *eid,
 		    !is_6ghz_op_class(iface->conf->op_class))
 			continue;
 
+		if (!iface->bss[0]->started)
+			continue;
+
 		eid = hostapd_eid_rnr_iface(iface->bss[0], hapd, eid,
 					    current_len, NULL, false);
 	}
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 1b6ba501c..203dbd31e 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -10792,6 +10792,14 @@ static int nl80211_start_radar_detection(void *priv,
 			nlmsg_free(msg);
 			return -1;
 		}
+
+		if (freq->radar_background) {
+			struct i802_link *link = nl80211_get_link(bss, freq->link_id);
+
+			link->background_freq = freq->freq;
+		} else {
+			nl80211_link_set_freq(bss, freq->link_id, freq->freq);
+		}
 	}
 
 	ret = send_and_recv_cmd(drv, msg);
diff --git a/src/drivers/driver_nl80211.h b/src/drivers/driver_nl80211.h
index 2834e8a67..09b4620f6 100644
--- a/src/drivers/driver_nl80211.h
+++ b/src/drivers/driver_nl80211.h
@@ -56,6 +56,7 @@ struct i802_link {
 	unsigned int beacon_set:1;
 
 	int freq;
+	int background_freq;
 	int bandwidth;
 	u8 addr[ETH_ALEN];
 	void *ctx;
diff --git a/src/drivers/driver_nl80211_event.c b/src/drivers/driver_nl80211_event.c
index 3994dbe4e..6507f1349 100644
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -1651,7 +1651,8 @@ nl80211_get_link_id_by_freq(struct i802_bss *bss, unsigned int freq)
 	unsigned int i;
 
 	for_each_link(bss->valid_links, i) {
-		if ((unsigned int) bss->links[i].freq == freq)
+		if ((unsigned int) bss->links[i].freq == freq ||
+		    (unsigned int) bss->links[i].background_freq == freq)
 			return i;
 	}
 
-- 
2.45.2

