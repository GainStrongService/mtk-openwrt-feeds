From 1d0855831f7c1fcffb210b0dc3dbbc9088551944 Mon Sep 17 00:00:00 2001
From: Allen Ye <allen.ye@mediatek.com>
Date: Tue, 8 Oct 2024 19:58:14 +0800
Subject: [PATCH 038/119] mtk: mt76: mt7996: Refactor handling vht operating
 mode notification

Refactor handling vht operating mode notification.

Fix incorrect operating-mode setting during STA addition.
Specifically, STA_REC_RA command provides operating-mode fields, which were not used.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>
---
 mt7996/mac.c    | 10 ++++++---
 mt7996/mcu.c    | 55 ++++++++++++++++++++++++++++++++++++-------------
 mt7996/mcu.h    |  1 +
 mt7996/mt7996.h |  5 +++--
 4 files changed, 52 insertions(+), 19 deletions(-)

diff --git a/mt7996/mac.c b/mt7996/mac.c
index 065bd856..ec1f2d36 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -2960,9 +2960,13 @@ void mt7996_mac_sta_rc_work(struct work_struct *work)
 
 		spin_unlock_bh(&dev->mt76.sta_poll_lock);
 
-		if (changed & (IEEE80211_RC_SUPP_RATES_CHANGED |
-			       IEEE80211_RC_NSS_CHANGED |
-			       IEEE80211_RC_BW_CHANGED))
+		if (changed & IEEE80211_RC_VHT_OMN_CHANGED)
+			mt7996_mcu_set_fixed_field(dev, msta_link->sta, NULL,
+						   msta_link->wcid.link_id,
+						   RATE_PARAM_VHT_OMN_UPDATE);
+		else if (changed & (IEEE80211_RC_SUPP_RATES_CHANGED |
+				    IEEE80211_RC_NSS_CHANGED |
+				    IEEE80211_RC_BW_CHANGED))
 			mt7996_mcu_add_rate_ctrl(dev, msta_link->sta, vif,
 						 msta_link->wcid.link_id,
 						 true);
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 40e83457..d0f9829a 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -3058,6 +3058,8 @@ int mt7996_mcu_set_fixed_field(struct mt7996_dev *dev, struct mt7996_sta *msta,
 	struct sk_buff *skb;
 	int err = -ENODEV;
 	struct tlv *tlv;
+	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
 
 	rcu_read_lock();
 
@@ -3069,6 +3071,11 @@ int mt7996_mcu_set_fixed_field(struct mt7996_dev *dev, struct mt7996_sta *msta,
 	if (!msta_link)
 		goto error_unlock;
 
+	sta = wcid_to_sta(&msta_link->wcid);
+	link_sta = rcu_dereference(sta->link[link_id]);
+	if (!link_sta)
+		goto error_unlock;
+
 	skb = __mt76_connac_mcu_alloc_sta_req(&dev->mt76, mlink,
 					      &msta_link->wcid,
 					      MT7996_STA_UPDATE_MAX_SIZE);
@@ -3091,19 +3098,34 @@ int mt7996_mcu_set_fixed_field(struct mt7996_dev *dev, struct mt7996_sta *msta,
 		if (phy)
 			ra->phy = *phy;
 		break;
-	case RATE_PARAM_MMPS_UPDATE: {
-		struct ieee80211_sta *sta = wcid_to_sta(&msta_link->wcid);
-		struct ieee80211_link_sta *link_sta;
-
-		link_sta = rcu_dereference(sta->link[link_id]);
-		if (!link_sta) {
-			dev_kfree_skb(skb);
-			goto error_unlock;
-		}
-
+	case RATE_PARAM_MMPS_UPDATE:
 		ra->mmps_mode = mt7996_mcu_get_mmps_mode(link_sta->smps_mode);
 		break;
-	}
+	case RATE_PARAM_VHT_OMN_UPDATE:
+		ra->op_mode = true;
+		switch (link_sta->bandwidth) {
+			case IEEE80211_STA_RX_BW_20:
+				ra->op_vht_chan_width =
+					IEEE80211_OPMODE_NOTIF_CHANWIDTH_20MHZ;
+				break;
+			case IEEE80211_STA_RX_BW_40:
+				ra->op_vht_chan_width =
+					IEEE80211_OPMODE_NOTIF_CHANWIDTH_40MHZ;
+				break;
+			case IEEE80211_STA_RX_BW_80:
+				ra->op_vht_chan_width =
+					IEEE80211_OPMODE_NOTIF_CHANWIDTH_80MHZ;
+				break;
+			case IEEE80211_STA_RX_BW_160:
+				ra->op_vht_chan_width =
+					IEEE80211_OPMODE_NOTIF_CHANWIDTH_160MHZ;
+				break;
+			default:
+				return 0;
+		}
+		ra->op_vht_rx_nss = link_sta->rx_nss > 0 ? link_sta->rx_nss - 1 : 0;
+		ra->op_vht_rx_nss_type = 0;
+		break;
 	default:
 		break;
 	}
@@ -3244,10 +3266,12 @@ mt7996_mcu_sta_rate_ctrl_tlv(struct sk_buff *skb, struct mt7996_dev *dev,
 			     struct mt7996_vif_link *link)
 {
 #define INIT_RCPI 180
+	enum ieee80211_sta_rx_bandwidth cap_bw = ieee80211_link_sta_cap_bw(link_sta);
 	struct mt76_phy *mphy = link->phy->mt76;
 	struct cfg80211_chan_def *chandef = &mphy->chandef;
 	struct cfg80211_bitrate_mask *mask = &link->bitrate_mask;
 	u32 cap = link_sta->sta->wme ? STA_CAP_WMM : 0;
+	u8 cap_nss = ieee80211_link_sta_cap_nss(link_sta);
 	enum nl80211_band band = chandef->chan->band;
 	struct sta_rec_ra_uni *ra;
 	struct tlv *tlv;
@@ -3260,10 +3284,13 @@ mt7996_mcu_sta_rate_ctrl_tlv(struct sk_buff *skb, struct mt7996_dev *dev,
 	ra->auto_rate = true;
 	ra->phy_mode = mt76_connac_get_phy_mode(mphy, vif, band, link_sta);
 	ra->channel = chandef->chan->hw_value;
-	ra->bw = (link_sta->bandwidth == IEEE80211_STA_RX_BW_320) ?
-		 CMD_CBW_320MHZ : link_sta->bandwidth;
-	ra->phy.bw = ra->bw;
+	ra->bw = mt76_connac_chan_bw(chandef);
+	ra->phy.bw = (cap_bw == IEEE80211_STA_RX_BW_320) ? CMD_CBW_320MHZ : cap_bw;
 	ra->mmps_mode = mt7996_mcu_get_mmps_mode(link_sta->smps_mode);
+	ra->op_mode = cap_bw != link_sta->bandwidth || cap_nss != link_sta->rx_nss;
+	ra->op_vht_chan_width = link_sta->bandwidth;
+	ra->op_vht_rx_nss = link_sta->rx_nss - 1;
+	ra->op_vht_rx_nss_type = 0;
 
 	if (supp_rate) {
 		supp_rate &= mask->control[band].legacy;
diff --git a/mt7996/mcu.h b/mt7996/mcu.h
index 53d5a7ee..430b5fa3 100644
--- a/mt7996/mcu.h
+++ b/mt7996/mcu.h
@@ -1013,6 +1013,7 @@ enum {
 };
 
 enum {
+	RATE_PARAM_VHT_OMN_UPDATE = 1,
 	RATE_PARAM_FIXED = 3,
 	RATE_PARAM_MMPS_UPDATE = 5,
 	RATE_PARAM_FIXED_HE_LTF = 7,
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 16e5d469..d25d5a7f 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -1241,11 +1241,12 @@ int mt7996_mcu_mld_reconf_stop_link(struct mt7996_dev *dev,
 				    struct ieee80211_vif *vif, u16 removed_links);
 int mt7996_mcu_mld_link_oper(struct mt7996_phy *phy,
 			     struct ieee80211_bss_conf *conf,
-			     struct mt7996_bss_conf *mconf, bool add);
+			     struct mt7996_vif_link *mconf, bool add);
 int mt7996_mcu_mld_set_attlm(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 			     u16 disabled_links, u16 switch_time, u32 duration);
 int mt7996_mcu_peer_mld_ttlm_req(struct mt7996_dev *dev, struct ieee80211_vif *vif,
-				 u64 changed);
+				 struct ieee80211_sta *sta,
+				 struct ieee80211_neg_ttlm *neg_ttlm);
 
 static inline u8 mt7996_max_interface_num(struct mt7996_dev *dev)
 {
-- 
2.45.2

