From 2dc80eefcb63109cd8c502bc4483214f429a19ad Mon Sep 17 00:00:00 2001
From: Shayne Chen <shayne.chen@mediatek.com>
Date: Fri, 6 Sep 2024 11:36:41 +0800
Subject: [PATCH 48/75] mtk: mt76: mt7996: rework link removal of MLO
 reconfiguration

Remove all mconf and mlink only on removing interface and station,
respectively.

Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>
---
 mac80211.c        |   2 +-
 mt76_connac_mcu.c |   8 +-
 mt76_connac_mcu.h |   2 +
 mt7996/mac.c      |   9 +-
 mt7996/main.c     | 217 ++++++++++++++++++++++++----------------------
 mt7996/mcu.c      | 115 ++++++++++++++++++++----
 mt7996/mcu.h      |   5 +-
 mt7996/mt7996.h   |  40 ++++++++-
 mt7996/testmode.c |   6 +-
 9 files changed, 267 insertions(+), 137 deletions(-)

diff --git a/mac80211.c b/mac80211.c
index efe90a26..b58c007b 100644
--- a/mac80211.c
+++ b/mac80211.c
@@ -1201,7 +1201,7 @@ mt76_rx_convert(struct mt76_dev *dev, struct sk_buff *skb,
 	memcpy(status->chain_signal, mstat.chain_signal,
 	       sizeof(mstat.chain_signal));
 
-	if (mstat.wcid) {
+	if (mstat.wcid && !mstat.wcid->sta_disabled) {
 		status->link_valid = mstat.wcid->link_valid;
 		status->link_id = mstat.wcid->link_id;
 	}
diff --git a/mt76_connac_mcu.c b/mt76_connac_mcu.c
index a84eb0c3..e9807348 100644
--- a/mt76_connac_mcu.c
+++ b/mt76_connac_mcu.c
@@ -368,11 +368,11 @@ void mt76_connac_mcu_bss_omac_tlv(struct sk_buff *skb,
 EXPORT_SYMBOL_GPL(mt76_connac_mcu_bss_omac_tlv);
 
 void mt76_connac_mcu_sta_basic_tlv(struct mt76_dev *dev, struct sk_buff *skb,
+				   struct ieee80211_vif *vif,
 				   struct ieee80211_bss_conf *conf,
 				   struct ieee80211_link_sta *link_sta,
 				   int conn_state, bool newly)
 {
-	struct ieee80211_vif *vif = conf->vif;
 	struct sta_rec_basic *basic;
 	struct tlv *tlv;
 	int conn_type;
@@ -1056,9 +1056,9 @@ int mt76_connac_mcu_sta_cmd(struct mt76_phy *phy,
 				    CONN_STATE_DISCONNECT;
 	link_sta = info->sta ? &info->sta->deflink : NULL;
 	if (info->sta || !info->offload_fw)
-		mt76_connac_mcu_sta_basic_tlv(dev, skb, &info->vif->bss_conf,
-					      link_sta, conn_state,
-					      info->newly);
+		mt76_connac_mcu_sta_basic_tlv(dev, skb, info->vif,
+					      &info->vif->bss_conf, link_sta,
+					      conn_state, info->newly);
 	if (info->sta && info->enable)
 		mt76_connac_mcu_sta_tlv(phy, skb, info->sta,
 					info->vif, info->rcpi,
diff --git a/mt76_connac_mcu.h b/mt76_connac_mcu.h
index c84f34b2..a9bfc6ed 100644
--- a/mt76_connac_mcu.h
+++ b/mt76_connac_mcu.h
@@ -1407,6 +1407,7 @@ enum {
 	UNI_BSS_INFO_MLD = 26,
 	UNI_BSS_INFO_PM_DISABLE = 27,
 	UNI_BSS_INFO_BCN_CRIT_UPDATE = 32,
+	UNI_BSS_INFO_MLD_LINK_OP = 36,
 	UNI_BSS_INFO_BCN_STA_PROF_CSA = 37,
 	UNI_BSS_INFO_BCN_ML_RECONF = 38,
 	UNI_BSS_INFO_BCN_ATTLM = 39,
@@ -1962,6 +1963,7 @@ mt76_connac_mcu_add_tlv(struct sk_buff *skb, int tag, int len)
 int mt76_connac_mcu_set_channel_domain(struct mt76_phy *phy);
 int mt76_connac_mcu_set_vif_ps(struct mt76_dev *dev, struct ieee80211_vif *vif);
 void mt76_connac_mcu_sta_basic_tlv(struct mt76_dev *dev, struct sk_buff *skb,
+				   struct ieee80211_vif *vif,
 				   struct ieee80211_bss_conf *conf,
 				   struct ieee80211_link_sta *link_sta,
 				   int state, bool newly);
diff --git a/mt7996/mac.c b/mt7996/mac.c
index 989d857d..35ae8a00 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -356,6 +356,10 @@ mt7996_mac_fill_rx(struct mt7996_dev *dev, enum mt76_rxq_id q,
 	if (status->wcid) {
 		mlink = wcid_to_mlink(status->wcid);
 		mt76_wcid_add_poll(&dev->mt76, &mlink->wcid);
+
+		if (status->wcid->sta_disabled)
+			status->wcid = mt7996_get_active_link_wcid(dev,
+								   status->wcid);
 	}
 
 	status->freq = mphy->chandef.chan->center_freq;
@@ -677,8 +681,6 @@ mt7996_mac_write_txwi_80211(struct mt7996_dev *dev, __le32 *txwi,
 			    struct sk_buff *skb, struct ieee80211_key_conf *key,
 			    struct mt76_wcid *wcid)
 {
-	struct mt76_phy *mphy =
-		mt76_dev_phy(&dev->mt76, le32_get_bits(txwi[1], MT_TXD1_TGID));
 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
 	struct ieee80211_mgmt *mgmt = (struct ieee80211_mgmt *)skb->data;
 	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
@@ -689,7 +691,7 @@ mt7996_mac_write_txwi_80211(struct mt7996_dev *dev, __le32 *txwi,
 	u8 fc_type, fc_stype;
 	u32 val;
 
-	if (ieee80211_is_cert_mode(mphy->hw) && ieee80211_is_deauth(fc)) {
+	if (ieee80211_is_deauth(fc)) {
 		/* In WPA3 cert TC-4.8.1, the deauth must be transmitted without
 		 * considering PSM bit
 		 */
@@ -1123,6 +1125,7 @@ mt7996_check_tx_ba_status(struct mt76_wcid *wcid, u8 tid)
 
 	sta = wcid_to_sta(wcid);
 	msta = (struct mt7996_sta *)sta->drv_priv;
+
 	link_sta = rcu_dereference(sta->link[wcid->link_id]);
 	if (!link_sta)
 		return;
diff --git a/mt7996/main.c b/mt7996/main.c
index c28a3ae2..59d92c75 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -261,13 +261,12 @@ static void mt7996_init_bitrate_mask(struct mt7996_bss_conf *mconf)
 }
 
 static void mt7996_remove_bss_conf(struct ieee80211_vif *vif,
-				   struct ieee80211_bss_conf *conf,
-				   struct mt7996_bss_conf *mconf)
+				   struct mt7996_bss_conf *mconf,
+				   int link_id)
 {
 	struct mt7996_phy *phy;
 	struct mt7996_dev *dev;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	u8 link_id = conf->link_id;
 	struct mt7996_link_sta *mlink =
 		mlink_dereference_protected(&mvif->sta, link_id);
 
@@ -282,15 +281,16 @@ static void mt7996_remove_bss_conf(struct ieee80211_vif *vif,
 		   __func__, mconf->phy->mt76->band_idx, mconf->mt76.idx,
 		   mconf->link_id, mlink->wcid.idx);
 
-	mt7996_mcu_add_sta(dev, conf, mconf, NULL, mlink, CONN_STATE_DISCONNECT,
+	mt7996_mcu_add_sta(dev, vif, NULL, mconf, NULL, mlink, CONN_STATE_DISCONNECT,
 			   false);
-	mt7996_mcu_add_bss_info(phy, conf, mconf, mlink, false);
-	mt7996_mcu_add_dev_info(phy, conf, mconf, false);
+	mt7996_mcu_add_bss_info(phy, vif, NULL, mconf, mlink, false);
+	mt7996_mcu_add_dev_info(phy, NULL, mconf, false);
 
 	rcu_assign_pointer(dev->mt76.wcid[mlink->wcid.idx], NULL);
 	rcu_assign_pointer(mvif->link[link_id], NULL);
 	rcu_assign_pointer(mvif->sta.link[link_id], NULL);
 
+	mvif->valid_links &= ~BIT(link_id);
 	dev->mt76.vif_mask &= ~BIT_ULL(mconf->mt76.idx);
 	dev->mld_id_mask &= ~BIT_ULL(mconf->own_mld_id);
 	phy->omac_mask &= ~BIT_ULL(mconf->mt76.omac_idx);
@@ -300,21 +300,6 @@ static void mt7996_remove_bss_conf(struct ieee80211_vif *vif,
 		list_del_init(&mlink->wcid.poll_list);
 	spin_unlock_bh(&dev->mt76.sta_poll_lock);
 
-	/* reassign a new bss wcid if the previous one was removed */
-	if (vif->txq && ieee80211_vif_is_mld(vif) &&
-	    hweight16(vif->valid_links) > 1) {
-		struct mt76_txq *mtxq = (struct mt76_txq *)vif->txq->drv_priv;
-
-		if (mtxq->wcid == mlink->wcid.idx) {
-			u8 new_link = __ffs(vif->valid_links & ~BIT(link_id));
-			struct mt7996_link_sta *new_mlink =
-				mlink_dereference_protected(&mvif->sta, new_link);
-
-			if (new_mlink)
-				mtxq->wcid = new_mlink->wcid.idx;
-		}
-	}
-
 	mt76_wcid_cleanup(&dev->mt76, &mlink->wcid);
 
 	if (mlink != &mvif->sta.deflink)
@@ -385,6 +370,7 @@ static int mt7996_add_bss_conf(struct mt7996_phy *phy,
 	mconf->link_id = link_id;
 	mconf->bpcc = 0;
 	memset(mconf->tsf_offset, 0, sizeof(mconf->tsf_offset));
+	mvif->valid_links |= BIT(link_id);
 
 	ret = mt7996_mcu_add_dev_info(phy, conf, mconf, true);
 	if (ret)
@@ -438,12 +424,13 @@ static int mt7996_add_bss_conf(struct mt7996_phy *phy,
 		mconf->mt76.basic_rates_idx = MT7996_BASIC_RATES_TBL;
 	mt7996_init_bitrate_mask(mconf);
 
-	mt7996_mcu_add_bss_info(phy, conf, mconf, mlink, true);
+	mconf->bssid_indicator = conf->bssid_indicator;
+	mt7996_mcu_add_bss_info(phy, vif, conf, mconf, mlink, true);
 	/* defer the first STA_REC of BMC entry to BSS_CHANGED_BSSID for STA
 	 * interface, since firmware only records BSSID when the entry is new
 	 */
 	if (vif->type != NL80211_IFTYPE_STATION)
-		mt7996_mcu_add_sta(dev, conf, mconf, NULL, mlink,
+		mt7996_mcu_add_sta(dev, vif, conf, mconf, NULL, mlink,
 				   CONN_STATE_PORT_SECURE, true);
 	rcu_assign_pointer(dev->mt76.wcid[idx], &mlink->wcid);
 	rcu_assign_pointer(mvif->link[link_id], mconf);
@@ -456,7 +443,7 @@ static int mt7996_add_bss_conf(struct mt7996_phy *phy,
 
 	return 0;
 error:
-	mt7996_remove_bss_conf(vif, conf, mconf);
+	mt7996_remove_bss_conf(vif, mconf, link_id);
 	return ret;
 }
 
@@ -748,7 +735,7 @@ static int mt7996_set_key(struct ieee80211_hw *hw, enum set_key_cmd cmd,
 
 		if (cmd == SET_KEY && !sta && !mconf->mt76.cipher) {
 			mconf->mt76.cipher = mt76_connac_mcu_get_cipher(key->cipher);
-			mt7996_mcu_add_bss_info(mconf->phy, conf, mconf, mlink, true);
+			mt7996_mcu_add_bss_info(mconf->phy, vif, conf, mconf, mlink, true);
 		}
 
 		if (cmd == SET_KEY) {
@@ -956,8 +943,11 @@ static void mt7996_vif_cfg_changed(struct ieee80211_hw *hw,
 			struct mt7996_link_sta *mlink =
 				mlink_dereference_protected(&mvif->sta, link_id);
 
-			mt7996_mcu_add_bss_info(mconf->phy, conf, mconf, mlink, true);
-			mt7996_mcu_add_sta(dev, conf, mconf, NULL, mlink,
+			if (!conf || !mconf || !mlink)
+				continue;
+
+			mt7996_mcu_add_bss_info(mconf->phy, vif, conf, mconf, mlink, true);
+			mt7996_mcu_add_sta(dev, vif, conf, mconf, NULL, mlink,
 					   CONN_STATE_PORT_SECURE, false);
 		}
 	}
@@ -1020,8 +1010,8 @@ static void mt7996_link_info_changed(struct ieee80211_hw *hw,
 	 */
 	if ((changed & BSS_CHANGED_BSSID && !is_zero_ether_addr(info->bssid)) ||
 	    (changed & BSS_CHANGED_BEACON_ENABLED && info->enable_beacon)) {
-		mt7996_mcu_add_bss_info(phy, info, mconf, mlink, true);
-		mt7996_mcu_add_sta(dev, info, mconf, NULL, mlink,
+		mt7996_mcu_add_bss_info(phy, vif, info, mconf, mlink, true);
+		mt7996_mcu_add_sta(dev, vif, info, mconf, NULL, mlink,
 				   CONN_STATE_PORT_SECURE,
 				   !!(changed & BSS_CHANGED_BSSID));
 	}
@@ -1177,16 +1167,15 @@ mt7996_post_channel_switch(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 }
 
 static void mt7996_remove_link_sta(struct mt7996_dev *dev,
+				   struct ieee80211_vif *vif,
 				   struct ieee80211_bss_conf *conf,
 				   struct mt7996_bss_conf *mconf,
+				   struct ieee80211_sta *sta,
 				   struct ieee80211_link_sta *link_sta,
 				   struct mt7996_link_sta *mlink,
 				   bool last_link)
 {
-	struct ieee80211_sta *sta = link_sta->sta;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
-	u16 valid_links = sta->valid_links;
-	bool pri_changed;
 	int i;
 
 	if (!mlink)
@@ -1195,11 +1184,11 @@ static void mt7996_remove_link_sta(struct mt7996_dev *dev,
 	for (i = 0; i < ARRAY_SIZE(mlink->wcid.aggr); i++)
 			mt76_rx_aggr_stop(&dev->mt76, &mlink->wcid, i);
 
-	if (sta->mlo && last_link)
-		mt7996_mcu_teardown_mld_sta(dev, mconf, mlink);
-	else
-		mt7996_mcu_add_sta(dev, conf, mconf, link_sta, mlink,
+	if (!sta->mlo)
+		mt7996_mcu_add_sta(dev, vif, conf, mconf, link_sta, mlink,
 				   CONN_STATE_DISCONNECT, false);
+	else if (sta->mlo && last_link)
+		mt7996_mcu_teardown_mld_sta(dev, mconf, mlink);
 
 	mt7996_mac_wtbl_update(dev, mlink->wcid.idx,
 			       MT_WTBL_UPDATE_ADM_COUNT_CLEAR);
@@ -1208,6 +1197,7 @@ static void mt7996_remove_link_sta(struct mt7996_dev *dev,
 		mt7996_mac_twt_teardown_flow(dev, mlink, i);
 
 	rcu_assign_pointer(mlink->sta->link[mlink->wcid.link_id], NULL);
+	mlink->sta->valid_links &= ~BIT(mlink->wcid.link_id);
 	rcu_assign_pointer(dev->mt76.wcid[mlink->wcid.idx], NULL);
 
 	spin_lock_bh(&dev->mt76.sta_poll_lock);
@@ -1217,41 +1207,6 @@ static void mt7996_remove_link_sta(struct mt7996_dev *dev,
 		list_del_init(&mlink->rc_list);
 	spin_unlock_bh(&dev->mt76.sta_poll_lock);
 
-	valid_links &= ~BIT(mlink->wcid.link_id);
-	if (!valid_links)
-		goto done;
-
-	/* update primary and secondary link */
-	pri_changed = mlink->wcid.link_id == msta->pri_link;
-	if (pri_changed)
-		msta->pri_link = msta->sec_link;
-
-	if (valid_links & ~(BIT(msta->pri_link)))
-		msta->sec_link = __ffs(valid_links & ~(BIT(msta->pri_link)));
-	else
-		msta->sec_link = msta->pri_link;
-
-	if (pri_changed) {
-		struct mt7996_link_sta *mlink_new =
-			mlink_dereference_protected(msta, msta->pri_link);
-
-		if (!mlink_new)
-			goto done;
-
-		mlink_new->wcid.ampdu_state = mlink->wcid.ampdu_state;
-		for (i = 0; i < ARRAY_SIZE(mlink->wcid.aggr); i++)
-			rcu_assign_pointer(mlink_new->wcid.aggr[i], mlink->wcid.aggr[i]);
-		for (i = 0; i < ARRAY_SIZE(sta->txq); i++) {
-			struct mt76_txq *mtxq;
-
-			if (!sta->txq[i])
-				continue;
-			mtxq = (struct mt76_txq *)sta->txq[i]->drv_priv;
-			mtxq->wcid = mlink_new->wcid.idx;
-		}
-	}
-
-done:
 	mt76_wcid_cleanup(&dev->mt76, &mlink->wcid);
 	mt76_wcid_mask_clear(dev->mt76.wcid_mask, mlink->wcid.idx);
 	mt76_wcid_mask_clear(dev->mt76.wcid_phy_mask, mlink->wcid.idx);
@@ -1288,6 +1243,7 @@ static int mt7996_add_link_sta(struct mt7996_dev *dev,
 		INIT_LIST_HEAD(&mlink->rc_list);
 		INIT_LIST_HEAD(&mlink->wcid.poll_list);
 		msta->vif = mvif;
+		msta->valid_links |= BIT(link_id);
 		mlink->wcid.sta = 1;
 		mlink->wcid.idx = idx;
 		mlink->wcid.phy_idx = mconf->phy->mt76->band_idx;
@@ -1326,7 +1282,7 @@ static int mt7996_add_link_sta(struct mt7996_dev *dev,
 	mt7996_mac_wtbl_update(dev, mlink->wcid.idx,
 			       MT_WTBL_UPDATE_ADM_COUNT_CLEAR);
 
-	ret = mt7996_mcu_add_sta(dev, conf, mconf, link_sta, mlink,
+	ret = mt7996_mcu_add_sta(dev, conf->vif, conf, mconf, link_sta, mlink,
 				 CONN_STATE_CONNECT, true);
 	if (ret)
 		goto error;
@@ -1348,7 +1304,7 @@ static int mt7996_add_link_sta(struct mt7996_dev *dev,
 
 	return 0;
 error:
-	mt7996_remove_link_sta(dev, conf, mconf, link_sta, mlink,
+	mt7996_remove_link_sta(dev, conf->vif, conf, mconf, sta, link_sta, mlink,
 			       hweight16(sta->valid_links) <= 1);
 	return ret;
 }
@@ -1374,9 +1330,12 @@ mt7996_mac_sta_remove_links(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 			link_conf_dereference_protected(vif, link_id);
 		struct ieee80211_link_sta *link_sta =
 			link_sta_dereference_protected(sta, link_id);
-		bool last_link = rem == sta->valid_links && link_id == __fls(rem);
 
-		mt7996_remove_link_sta(dev, conf, mconf, link_sta, mlink, last_link);
+		if (!mconf || !mlink)
+			continue;
+
+		mt7996_remove_link_sta(dev, vif, conf, mconf, sta, link_sta,
+				       mlink, msta->valid_links == BIT(link_id));
 	}
 }
 
@@ -1502,7 +1461,7 @@ int mt7996_mac_sta_event(struct mt76_dev *mdev, struct ieee80211_vif *vif,
 			if (!mconf || !mlink || !conf || !link_sta)
 				continue;
 
-			ret = mt7996_mcu_add_sta(dev, conf, mconf, link_sta, mlink,
+			ret = mt7996_mcu_add_sta(dev, vif, conf, mconf, link_sta, mlink,
 						 CONN_STATE_PORT_SECURE, false);
 			if (ret)
 				goto out;
@@ -1522,12 +1481,13 @@ void mt7996_mac_sta_remove(struct mt76_dev *mdev, struct ieee80211_vif *vif,
 			   struct ieee80211_sta *sta)
 {
 	struct mt7996_dev *dev = container_of(mdev, struct mt7996_dev, mt76);
+	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
 	unsigned long rem = sta->valid_links ?: BIT(0);
 
 #ifdef CONFIG_MTK_VENDOR
 	mt7996_mcu_set_csi(&dev->phy, 2, 8, 1, 0, sta->addr);
 #endif
-	mt7996_mac_sta_remove_links(dev, vif, sta, rem);
+	mt7996_mac_sta_remove_links(dev, vif, sta, rem | msta->valid_links);
 }
 
 static void
@@ -2651,8 +2611,7 @@ void mt7996_scan_complete(struct mt7996_phy *phy, bool aborted)
 			mconf = mconf_dereference_protected(mvif, i);
 
 			if (mconf && mconf->phy == phy && mconf == &mvif->deflink)
-				mt7996_remove_bss_conf(vif, &vif->bss_conf,
-						       &mvif->deflink);
+				mt7996_remove_bss_conf(vif, &mvif->deflink, i);
 		}
 	}
 
@@ -2691,7 +2650,7 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		mconf = mconf_dereference_protected(mvif, 0);
 
 		if (mconf && mconf->phy != phy) {
-			mt7996_remove_bss_conf(vif, &vif->bss_conf, &mvif->deflink);
+			mt7996_remove_bss_conf(vif, &mvif->deflink, 0);
 			mconf = NULL;
 		}
 
@@ -2832,8 +2791,7 @@ void mt7996_roc_complete_work(struct work_struct *work)
 			mconf = mconf_dereference_protected(mvif, i);
 
 			if (mconf && mconf->phy == phy && mconf == &mvif->deflink) {
-				mt7996_remove_bss_conf(vif, &vif->bss_conf,
-						       &mvif->deflink);
+				mt7996_remove_bss_conf(vif, &mvif->deflink, i);
 				break;
 			}
 		}
@@ -3072,7 +3030,7 @@ mt7996_assign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	/* Remove bss conf when change non-MLO interface to MLO interface */
 	if (ieee80211_vif_is_mld(vif) && mconf == &mvif->deflink)
-		mt7996_remove_bss_conf(vif, link_conf, mconf);
+		mt7996_remove_bss_conf(vif, mconf, link_id);
 	else if (mconf && phy != mconf->phy)
 		dev_err(phy->dev->mt76.dev,
 			"%s: error: change link[%d] from phy%d to phy%d",
@@ -3203,9 +3161,10 @@ mt7996_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mt7996_hw_phy(hw);
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_bss_conf *mconf;
 	unsigned long rem = old_links & ~new_links & ~vif->dormant_links;
-	unsigned int link_id;
-	int ret = 0;
+	unsigned long add = new_links & ~old_links;
+	int link_id, ret = 0;
 
 	mt7996_dbg(dev, MT7996_DBG_MLD,
 		   "%s: old=0x%x, new=0x%x, dormant=0x%x\n",
@@ -3217,22 +3176,42 @@ mt7996_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	mutex_lock(&dev->mt76.mutex);
 
 	/* remove first */
-	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, link_id);
+	if (rem && vif->type == NL80211_IFTYPE_AP) {
+		ret = mt7996_mcu_mld_reconf_stop_link(dev, vif, rem);
+		if (ret)
+			goto out;
+
+		for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
+			mconf = mconf_dereference_protected(mvif, link_id);
+			if (!mconf)
+				continue;
+
+			ret = mt7996_mcu_mld_link_oper(mconf->phy, old[link_id],
+						       mconf, false);
+			if (ret)
+				goto out;
+		}
+	}
+
+	for_each_set_bit(link_id, &add, IEEE80211_MLD_MAX_NUM_LINKS) {
+		struct ieee80211_bss_conf *conf =
+			link_conf_dereference_protected(vif, link_id);
 
+		mconf =	mconf_dereference_protected(mvif, link_id);
 		if (!mconf)
 			continue;
 
-		mt7996_remove_bss_conf(vif, old[link_id], mconf);
+		ret = mt7996_mcu_mld_link_oper(mconf->phy, conf, mconf, true);
+		if (ret)
+			goto out;
 	}
 
 	if (!old_links) {
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, 0);
+		mconf = mconf_dereference_protected(mvif, 0);
 
+		/* switch from non-MLD vif to MLD vif, remove default bss conf */
 		if (ieee80211_vif_is_mld(vif) && mconf == &mvif->deflink)
-			mt7996_remove_bss_conf(vif, &vif->bss_conf, mconf);
+			mt7996_remove_bss_conf(vif, mconf, 0);
 
 		mvif->group_mld_id = get_own_mld_idx(dev->mld_id_mask, true);
 		dev->mld_id_mask |= BIT_ULL(mvif->group_mld_id);
@@ -3241,13 +3220,24 @@ mt7996_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		dev->mld_remap_id_mask |= BIT_ULL(mvif->mld_remap_id);
 	}
 
-	/* fallback to non-MLO interface */
-	if (!new_links) {
-		ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
-		dev->mld_id_mask &= ~BIT_ULL(mvif->group_mld_id);
-		dev->mld_remap_id_mask &= ~BIT_ULL(mvif->mld_remap_id);
+	if (new_links)
+		goto out;
+
+	/* remove all links and fallback to non-MLO interface */
+	rem = mvif->valid_links;
+	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
+		mconf = mconf_dereference_protected(mvif, link_id);
+		if (!mconf)
+			continue;
+
+		mt7996_remove_bss_conf(vif, mconf, link_id);
 	}
 
+	ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+	dev->mld_id_mask &= ~BIT_ULL(mvif->group_mld_id);
+	dev->mld_remap_id_mask &= ~BIT_ULL(mvif->mld_remap_id);
+
+out:
 	mutex_unlock(&dev->mt76.mutex);
 
 	return ret;
@@ -3258,22 +3248,41 @@ mt7996_change_sta_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			struct ieee80211_sta *sta, u16 old_links, u16 new_links)
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
 	unsigned long add = new_links & ~old_links;
 	unsigned long rem = old_links & ~new_links;
-	int ret = 0;
+	int ret = 0, link_id;
 	bool assoc;
 
 	mt7996_dbg(dev, MT7996_DBG_STA, "%s: STA %pM old=0x%x, new=0x%x\n",
 		   __func__, sta->addr, old_links, new_links);
 	mutex_lock(&dev->mt76.mutex);
 
-	if (rem) {
-		mt7996_mac_sta_remove_links(dev, vif, sta, rem);
+	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
+		struct mt7996_link_sta *mlink =
+			mlink_dereference_protected(msta, link_id);
+		struct mt7996_link_sta *mlink_new;
+		int i;
+
+		if (!mlink)
+			continue;
+
+		mlink->wcid.sta_disabled = 1;
 
-		/* Todo: update hw info of MLD STA */
-		/* ret = mt7996_mcu_add_mld_sta(dev, vif, sta, new_links); */
-		/* if (ret) */
-		/* 	goto remove; */
+		if (link_id != msta->pri_link)
+			continue;
+
+		msta->pri_link = msta->sec_link;
+		mlink_new = mlink_dereference_protected(msta, msta->pri_link);
+		mlink_new->wcid.ampdu_state = mlink->wcid.ampdu_state;
+
+		for (i = 0; i < ARRAY_SIZE(sta->txq); i++) {
+			struct mt76_txq *mtxq;
+			if (!sta->txq[i])
+				continue;
+			mtxq = (struct mt76_txq *)sta->txq[i]->drv_priv;
+			mtxq->wcid = mlink_new->wcid.idx;
+		}
 	}
 
 	assoc = vif->type == NL80211_IFTYPE_STATION ? vif->cfg.assoc : false;
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 0e9d182a..3c691874 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -1716,20 +1716,20 @@ mt7996_mcu_bss_he_tlv(struct sk_buff *skb, struct ieee80211_bss_conf *conf,
 
 static void
 mt7996_mcu_bss_mbssid_tlv(struct sk_buff *skb, struct ieee80211_bss_conf *conf,
-			  struct mt7996_phy *phy, int enable)
+			  struct mt7996_bss_conf *mconf, int enable)
 {
 	struct bss_info_uni_mbssid *mbssid;
 	struct tlv *tlv;
 
-	if (!conf->bssid_indicator && enable)
+	if (!mconf->bssid_indicator && enable)
 		return;
 
 	tlv = mt7996_mcu_add_uni_tlv(skb, UNI_BSS_INFO_11V_MBSSID, sizeof(*mbssid));
 
 	mbssid = (struct bss_info_uni_mbssid *)tlv;
 
-	if (enable) {
-		mbssid->max_indicator = conf->bssid_indicator;
+	if (enable && conf) {
+		mbssid->max_indicator = mconf->bssid_indicator;
 		mbssid->mbss_idx = conf->bssid_index;
 		mbssid->tx_bss_omac_idx = 0;
 	}
@@ -1768,7 +1768,7 @@ mt7996_mcu_bss_txcmd_tlv(struct sk_buff *skb, bool en)
 
 static void
 mt7996_mcu_bss_mld_tlv(struct sk_buff *skb, struct ieee80211_vif *vif,
-		       struct mt7996_bss_conf *mconf)
+		       struct ieee80211_bss_conf *conf, struct mt7996_bss_conf *mconf)
 {
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_dev *dev = mconf->phy->dev;
@@ -1788,6 +1788,7 @@ mt7996_mcu_bss_mld_tlv(struct sk_buff *skb, struct ieee80211_vif *vif,
 	}
 
 	mld->own_mld_id = mconf->own_mld_id;
+	mld->link_id = conf->link_id;
 	mt7996_dbg(dev, MT7996_DBG_BSS,
 		   "%s: group_mld_id=%d, own_mld_id=%d, remap_idx=%d, mld->addr[%pM]\n",
 		   __func__, mld->group_mld_id,  mld->own_mld_id,
@@ -1872,12 +1873,12 @@ mt7996_mcu_bss_ifs_timing_tlv(struct sk_buff *skb, struct mt7996_phy *phy)
 }
 
 static int
-mt7996_mcu_bss_basic_tlv(struct sk_buff *skb, struct ieee80211_bss_conf *conf,
+mt7996_mcu_bss_basic_tlv(struct sk_buff *skb, struct ieee80211_vif *vif,
+			 struct ieee80211_bss_conf *conf,
 			 struct mt7996_bss_conf *mconf, struct ieee80211_sta *sta,
 			 u16 wlan_idx, bool enable)
 {
 	struct mt76_phy *phy = mconf->phy->mt76;
-	struct ieee80211_vif *vif = conf->vif;
 	struct mt7996_dev *dev = mconf->phy->dev;
 	struct cfg80211_chan_def *chandef = &phy->chandef;
 	struct mt76_connac_bss_basic_tlv *bss;
@@ -1943,6 +1944,9 @@ mt7996_mcu_bss_basic_tlv(struct sk_buff *skb, struct ieee80211_bss_conf *conf,
 		return 0;
 	}
 
+	if (!conf)
+		return 0;
+
 	memcpy(bss->bssid, conf->bssid, ETH_ALEN);
 
 	mt7996_dbg(dev, MT7996_DBG_BSS,
@@ -1977,12 +1981,11 @@ __mt7996_mcu_alloc_bss_req(struct mt76_dev *dev, struct mt76_vif *mvif, int len)
 	return skb;
 }
 
-int mt7996_mcu_add_bss_info(struct mt7996_phy *phy,
+int mt7996_mcu_add_bss_info(struct mt7996_phy *phy, struct ieee80211_vif *vif,
 			    struct ieee80211_bss_conf *conf,
 			    struct mt7996_bss_conf *mconf,
 			    struct mt7996_link_sta *mlink, int enable)
 {
-	struct ieee80211_vif *vif = conf->vif;
 	struct mt7996_dev *dev = phy->dev;
 	struct sk_buff *skb;
 
@@ -1997,7 +2000,7 @@ int mt7996_mcu_add_bss_info(struct mt7996_phy *phy,
 		return PTR_ERR(skb);
 
 	/* bss_basic must be first */
-	mt7996_mcu_bss_basic_tlv(skb, conf, mconf, NULL, mlink->wcid.idx, enable);
+	mt7996_mcu_bss_basic_tlv(skb, vif, conf, mconf, NULL, mlink->wcid.idx, enable);
 	mt7996_mcu_bss_sec_tlv(skb, mconf);
 
 	if (vif->type == NL80211_IFTYPE_MONITOR)
@@ -2014,10 +2017,10 @@ int mt7996_mcu_add_bss_info(struct mt7996_phy *phy,
 			mt7996_mcu_bss_he_tlv(skb, conf, phy);
 
 		/* this tag is necessary no matter if the vif is MLD */
-		mt7996_mcu_bss_mld_tlv(skb, vif, mconf);
+		mt7996_mcu_bss_mld_tlv(skb, vif, conf, mconf);
 	}
 
-	mt7996_mcu_bss_mbssid_tlv(skb, conf, phy, enable);
+	mt7996_mcu_bss_mbssid_tlv(skb, conf, mconf, enable);
 
 out:
 	return mt76_mcu_skb_send_msg(&dev->mt76, skb,
@@ -3394,12 +3397,12 @@ mt7996_mcu_sta_init_vow(struct mt7996_bss_conf *mconf,
 }
 #endif
 
-int mt7996_mcu_add_sta(struct mt7996_dev *dev, struct ieee80211_bss_conf *conf,
+int mt7996_mcu_add_sta(struct mt7996_dev *dev, struct ieee80211_vif *vif,
+		       struct ieee80211_bss_conf *conf,
 		       struct mt7996_bss_conf *mconf,
 		       struct ieee80211_link_sta *link_sta,
 		       struct mt7996_link_sta *mlink, int conn_state, bool newly)
 {
-	struct ieee80211_vif *vif = conf->vif;
 	struct sk_buff *skb;
 	// int ret;
 
@@ -3410,7 +3413,7 @@ int mt7996_mcu_add_sta(struct mt7996_dev *dev, struct ieee80211_bss_conf *conf,
 		return PTR_ERR(skb);
 
 	/* starec basic */
-	mt76_connac_mcu_sta_basic_tlv(&dev->mt76, skb, conf, link_sta,
+	mt76_connac_mcu_sta_basic_tlv(&dev->mt76, skb, vif, conf, link_sta,
 				      conn_state, newly);
 	mt7996_dbg(dev, MT7996_DBG_DEV,
 		   "%s: link=%u, wcid=%u, newly=%d, conn_state=%d\n",
@@ -3716,10 +3719,13 @@ int mt7996_mcu_add_dev_info(struct mt7996_phy *phy,
 	if (mconf->mt76.omac_idx >= REPEATER_BSSID_START)
 		return mt7996_mcu_muar_config(phy, conf, mconf, false, enable);
 
-	memcpy(data.tlv.omac_addr, conf->addr, ETH_ALEN);
-	mt7996_dbg(dev, MT7996_DBG_DEV, "%s: band=%u, omac=%u, addr=%pM, en=%d\n",
-		   __func__, data.hdr.band_idx, data.hdr.omac_idx,
-		   data.tlv.omac_addr, enable);
+	if (conf) {
+		memcpy(data.tlv.omac_addr, conf->addr, ETH_ALEN);
+		mt7996_dbg(dev, MT7996_DBG_DEV,
+			   "%s: band=%u, omac=%u, addr=%pM, en=%d\n",
+			   __func__, data.hdr.band_idx, data.hdr.omac_idx,
+			   data.tlv.omac_addr, enable);
+	}
 	return mt76_mcu_send_msg(&dev->mt76, MCU_WMWA_UNI_CMD(DEV_INFO_UPDATE),
 				 &data, sizeof(data), true);
 }
@@ -3769,6 +3775,77 @@ mt7996_mcu_mld_reconf(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 	return mt76_mcu_skb_send_msg(&dev->mt76, skb, MCU_WM_UNI_CMD(MLD), true);
 }
 
+int mt7996_mcu_mld_reconf_stop_link(struct mt7996_dev *dev,
+				    struct ieee80211_vif *vif, u16 removed_links)
+{
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mld_req_hdr hdr = { .mld_idx = 0 };
+	struct mld_reconf_stop_link *sl;
+	struct sk_buff *skb;
+	struct tlv *tlv;
+	unsigned long rem = removed_links;
+	int len = sizeof(hdr) + sizeof(*sl), link_id;
+
+	memcpy(hdr.mld_addr, vif->addr, ETH_ALEN);
+
+	skb = mt76_mcu_msg_alloc(&dev->mt76, NULL, len);
+	if (!skb)
+		return -ENOMEM;
+
+	skb_put_data(skb, &hdr, sizeof(hdr));
+
+	tlv = mt7996_mcu_add_uni_tlv(skb, UNI_CMD_MLD_RECONF_STOP_LINK, sizeof(*sl));
+	sl = (struct mld_reconf_stop_link *)tlv;
+	sl->link_bitmap = cpu_to_le16(removed_links);
+
+	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
+		struct mt7996_bss_conf *mconf =
+			mconf_dereference_protected(mvif, link_id);
+
+		if (!mconf)
+			continue;
+
+		sl->bss_idx[link_id] = mconf->mt76.idx;
+	}
+
+	return mt76_mcu_skb_send_msg(&dev->mt76, skb, MCU_WM_UNI_CMD(MLD), true);
+}
+
+int mt7996_mcu_mld_link_oper(struct mt7996_phy *phy,
+			     struct ieee80211_bss_conf *conf,
+			     struct mt7996_bss_conf *mconf, bool add)
+{
+	struct ieee80211_vif *vif = conf->vif;
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_dev *dev = phy->dev;
+	struct bss_mld_link_op_tlv *mld_op;
+	struct sk_buff *skb;
+	struct tlv *tlv;
+
+	skb = __mt7996_mcu_alloc_bss_req(&dev->mt76, &mconf->mt76,
+					 MT7996_BSS_UPDATE_MAX_SIZE);
+	if (IS_ERR(skb))
+		return PTR_ERR(skb);
+
+	tlv = mt7996_mcu_add_uni_tlv(skb, UNI_BSS_INFO_MLD_LINK_OP, sizeof(*mld_op));
+	mld_op = (struct bss_mld_link_op_tlv *)tlv;
+	mld_op->link_operation = add;
+	mld_op->own_mld_id = mconf->own_mld_id;
+	mld_op->link_id = conf->link_id;
+	memcpy(mld_op->mac_addr, vif->addr, ETH_ALEN);
+
+	if (add) {
+		mld_op->group_mld_id = mvif->group_mld_id;
+		mld_op->remap_idx = mvif->mld_remap_id;
+	} else {
+		mld_op->group_mld_id = 0xff;
+		mld_op->remap_idx = 0xff;
+	}
+
+	return mt76_mcu_skb_send_msg(&dev->mt76, skb,
+				     MCU_WMWA_UNI_CMD(BSS_INFO_UPDATE), true);
+}
+
 int mt7996_mcu_mld_set_attlm(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 			     u16 disabled_links, u16 switch_time, u32 duration)
 {
diff --git a/mt7996/mcu.h b/mt7996/mcu.h
index b05b2fef..c1dd3a59 100644
--- a/mt7996/mcu.h
+++ b/mt7996/mcu.h
@@ -642,7 +642,8 @@ struct bss_mld_tlv {
 	u8 own_mld_id;
 	u8 mac_addr[ETH_ALEN];
 	u8 remap_idx;
-	u8 __rsv[3];
+	u8 link_id;
+	u8 __rsv[2];
 } __packed;
 
 struct bss_mld_link_op_tlv {
@@ -653,6 +654,7 @@ struct bss_mld_link_op_tlv {
 	u8 mac_addr[ETH_ALEN];
 	u8 remap_idx;
 	u8 link_operation;
+	u8 link_id;
 	u8 rsv[2];
 } __packed;
 
@@ -1255,6 +1257,7 @@ struct mld_reconf_stop_link {
 enum {
 	UNI_CMD_MLD_ATTLM_RES_REQ = 0x02,
 	UNI_CMD_MLD_RECONF_AP_REM_TIMER = 0x03,
+	UNI_CMD_MLD_RECONF_STOP_LINK = 0x04,
 };
 
 struct mt7996_mcu_mld_event {
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 2835e532..438348fb 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -425,6 +425,7 @@ struct mt7996_sta {
 	struct mt7996_vif *vif;
 	u8 pri_link;
 	u8 sec_link;
+	u16 valid_links;
 
 	unsigned long last_addba_req_time[IEEE80211_NUM_TIDS];
 };
@@ -441,6 +442,8 @@ struct mt7996_bss_conf {
 	u8 own_mld_id;
 	u8 bpcc;
 
+	u8 bssid_indicator;
+
 	s64 tsf_offset[IEEE80211_MLD_MAX_NUM_LINKS];
 };
 
@@ -454,6 +457,7 @@ struct mt7996_vif {
 	u8 master_link_id;
 	u8 group_mld_id;
 	u8 mld_remap_id;
+	u16 valid_links;
 
 	u8 cs_link_id;
 	u16 cs_ready_links;
@@ -1147,6 +1151,32 @@ mt7996_get_link_wcid(struct mt7996_dev *dev, u16 idx, u8 band_idx)
 	return &mlink->wcid;
 }
 
+static inline struct mt76_wcid *
+mt7996_get_active_link_wcid(struct mt7996_dev *dev, struct mt76_wcid *old_wcid)
+{
+	struct mt7996_link_sta *old_mlink = wcid_to_mlink(old_wcid), *mlink = NULL;
+	struct mt7996_sta *msta = old_mlink->sta;
+	int i;
+
+	if (old_wcid->link_id != msta->pri_link)
+		mlink = rcu_dereference(msta->link[msta->pri_link]);
+	else if (old_wcid->link_id != msta->sec_link)
+		mlink = rcu_dereference(msta->link[msta->sec_link]);
+
+	if (mlink)
+		return &mlink->wcid;
+
+	for (i = MT_BAND0; i <= MT_BAND2; i++) {
+		struct mt76_wcid *tmp =
+			mt7996_get_link_wcid(dev, old_wcid->idx, i);
+
+		if (tmp && !tmp->sta_disabled)
+			return tmp;
+	}
+
+	return old_wcid;
+}
+
 #define mt7996_for_each_phy(dev, phy)					\
 	for (int __i = 0; __i < ARRAY_SIZE((dev)->radio_phy); __i++)	\
 		if (((phy) = (dev)->radio_phy[__i]) != NULL)
@@ -1193,11 +1223,12 @@ int mt7996_mcu_twt_agrt_update(struct mt7996_dev *dev,
 int mt7996_mcu_add_dev_info(struct mt7996_phy *phy,
 			    struct ieee80211_bss_conf *conf,
 			    struct mt7996_bss_conf *mconf, bool enable);
-int mt7996_mcu_add_bss_info(struct mt7996_phy *phy,
+int mt7996_mcu_add_bss_info(struct mt7996_phy *phy, struct ieee80211_vif *vif,
 			    struct ieee80211_bss_conf *conf,
 			    struct mt7996_bss_conf *mconf,
 			    struct mt7996_link_sta *mlink, int enable);
-int mt7996_mcu_add_sta(struct mt7996_dev *dev, struct ieee80211_bss_conf *conf,
+int mt7996_mcu_add_sta(struct mt7996_dev *dev, struct ieee80211_vif *vif,
+		       struct ieee80211_bss_conf *conf,
 		       struct mt7996_bss_conf *mconf,
 		       struct ieee80211_link_sta *link_sta,
 		       struct mt7996_link_sta *mlink, int conn_state, bool newly);
@@ -1311,6 +1342,11 @@ int mt7996_mcu_mld_set_attlm(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 			     u16 disabled_links, u16 switch_time, u32 duration);
 int mt7996_mcu_peer_mld_ttlm_req(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 				 u64 changed);
+int mt7996_mcu_mld_reconf_stop_link(struct mt7996_dev *dev,
+				    struct ieee80211_vif *vif, u16 removed_links);
+int mt7996_mcu_mld_link_oper(struct mt7996_phy *phy,
+			     struct ieee80211_bss_conf *conf,
+			     struct mt7996_bss_conf *mconf, bool add);
 
 static inline bool mt7996_has_wa(struct mt7996_dev *dev)
 {
diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index 6893a4d2..c7d87b1a 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -242,10 +242,10 @@ mt7996_tm_init(struct mt7996_phy *phy, bool en)
 
 	mt7996_tm_rf_switch_mode(dev, rf_test_mode);
 
-	mt7996_mcu_add_bss_info(phy, &phy->monitor_vif->bss_conf,
+	mt7996_mcu_add_bss_info(phy, phy->monitor_vif, &phy->monitor_vif->bss_conf,
 				&mvif->deflink, &mvif->sta.deflink, en);
 	state = en ? CONN_STATE_PORT_SECURE : CONN_STATE_DISCONNECT;
-	mt7996_mcu_add_sta(dev, &phy->monitor_vif->bss_conf, &mvif->deflink,
+	mt7996_mcu_add_sta(dev, phy->monitor_vif, &phy->monitor_vif->bss_conf, &mvif->deflink,
 			   NULL, &mvif->sta.deflink, state, false);
 
 	mt7996_tm_set(dev, SET_ID(BAND_IDX), phy->mt76->band_idx);
@@ -1217,7 +1217,7 @@ mt7996_tm_txbf_init(struct mt7996_phy *phy, u16 *val)
 	mt7996_tm_set_mac_addr(dev, td->addr[2], SET_ID(BSSID));
 
 	mt7996_mcu_add_dev_info(phy, &phy->monitor_vif->bss_conf, &mvif->deflink, true);
-	mt7996_mcu_add_bss_info(phy, &phy->monitor_vif->bss_conf,
+	mt7996_mcu_add_bss_info(phy, phy->monitor_vif, &phy->monitor_vif->bss_conf,
 				&mvif->deflink, &mvif->sta.deflink, true);
 
 	if (td->ibf) {
-- 
2.45.2

