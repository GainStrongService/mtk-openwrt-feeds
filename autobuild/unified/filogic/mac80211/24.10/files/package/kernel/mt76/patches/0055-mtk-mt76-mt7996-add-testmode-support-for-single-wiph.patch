From 063097280f91de130e102f883d19f332c9139be5 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Fri, 8 Nov 2024 17:01:16 +0800
Subject: [PATCH 55/75] mtk: mt76: mt7996: add testmode support for single
 wiphy

Add testmode support for single wiphy
Handle phyX to radio index conversion

Ignore ENOTCONN when setting all monitor interfaces to idle for all
radios
Without this patch, some mon interface will not be reset to idle.
For example, add mon1, then add mon2.
In this case mon0 does not exist, so the for loop will break
immediately.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mt76.h            |   1 +
 mt7996/init.c     |   1 +
 mt7996/main.c     |   4 +-
 testmode.c        |  26 +++++
 testmode.h        |   4 +
 tools/main.c      | 250 ++++++++++++++++++++++++++++++++++++----------
 tools/mt76-test.h |  37 +++++++
 7 files changed, 268 insertions(+), 55 deletions(-)

diff --git a/mt76.h b/mt76.h
index 1585d78b..37666604 100644
--- a/mt76.h
+++ b/mt76.h
@@ -1043,6 +1043,7 @@ struct mt76_dev {
 	struct mt76_phy phy; /* must be first */
 	struct mt76_phy *phys[__MT_MAX_BAND];
 	struct mt76_phy *band_phys[NUM_NL80211_BANDS];
+	struct mt76_phy *radio_phy[__MT_MAX_BAND];
 
 	struct ieee80211_hw *hw;
 
diff --git a/mt7996/init.c b/mt7996/init.c
index b9231c8e..21f092ae 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -485,6 +485,7 @@ mt7996_init_wiphy_band(struct ieee80211_hw *hw, struct mt7996_phy *phy)
 	}
 
 	dev->radio_phy[n_radios] = phy;
+	dev->mt76.radio_phy[n_radios] = phy->mt76;
 	radio->freq_range = freq;
 	radio->n_freq_range = 1;
 	radio->iface_combinations = is_mt7996(&dev->mt76) ? &if_comb : &if_comb_7992;
diff --git a/mt7996/main.c b/mt7996/main.c
index 623a9521..8a5dea3d 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -114,8 +114,6 @@ static int mt7996_start(struct ieee80211_hw *hw)
 #endif
 	}
 
-	mt7996_testmode_disable_all(dev);
-
 	mutex_unlock(&dev->mt76.mutex);
 
 	ieee80211_queue_delayed_work(hw, &dev->scs_work, HZ);
@@ -508,6 +506,8 @@ static int mt7996_add_interface(struct ieee80211_hw *hw,
 		return -EINVAL;
 	}
 
+	mt7996_testmode_disable_all(dev);
+
 	for (i = 0; i < MT7996_MAX_RADIOS; i++) {
 		/* FIXME: only set the required radio temporarily for testmode.
 		 * The TX speed of testmode will be affected if the unused radio is enabled.
diff --git a/testmode.c b/testmode.c
index 47325cbf..0c698a48 100644
--- a/testmode.c
+++ b/testmode.c
@@ -805,6 +805,19 @@ int mt76_testmode_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	mutex_lock(&dev->mutex);
 
+	/* handle radio conversion for single multi-radio wiphy */
+	if (tb[MT76_TM_ATTR_RADIO_IDX]) {
+		u32 radio_idx;
+
+		radio_idx = nla_get_u32(tb[MT76_TM_ATTR_RADIO_IDX]);
+		if (radio_idx > __MT_MAX_BAND ||
+		    !dev->radio_phy[radio_idx])
+			goto out;
+
+		phy = dev->radio_phy[radio_idx];
+		td = &phy->test;
+	}
+
 	if (tb[MT76_TM_ATTR_LM_ACT]) {
 		err = mt76_testmode_set_list_mode(phy, tb);
 		goto out;
@@ -1043,6 +1056,19 @@ int mt76_testmode_dump(struct ieee80211_hw *hw, struct sk_buff *msg,
 
 	mutex_lock(&dev->mutex);
 
+	/* handle radio conversion for single multi-radio wiphy */
+	if (tb[MT76_TM_ATTR_RADIO_IDX]) {
+		u32 radio_idx;
+
+		radio_idx = nla_get_u32(tb[MT76_TM_ATTR_RADIO_IDX]);
+		if (radio_idx > __MT_MAX_BAND ||
+		    !dev->radio_phy[radio_idx])
+			goto out;
+
+		phy = dev->radio_phy[radio_idx];
+		td = &phy->test;
+	}
+
 	if (tb[MT76_TM_ATTR_PRECAL] || tb[MT76_TM_ATTR_PRECAL_INFO]) {
 		int flag, type;
 
diff --git a/testmode.h b/testmode.h
index 3f2f97dd..7043b6d1 100644
--- a/testmode.h
+++ b/testmode.h
@@ -88,6 +88,8 @@
  * @MT76_TM_ATTR_LM_STA_IDX: station index used in list mode (u8)
  * @MT76_TM_ATTR_LM_SEG_TIMEOUT: TX/RX segment timeout used in list mode (u8)
  *
+ * @MT76_TM_ATTR_RADIO_IDX: radio index used for single multi-radio wiphy (u32)
+ *
  */
 enum mt76_testmode_attr {
 	MT76_TM_ATTR_UNSPEC,
@@ -161,6 +163,8 @@ enum mt76_testmode_attr {
 	MT76_TM_ATTR_LM_STA_IDX,
 	MT76_TM_ATTR_LM_SEG_TIMEOUT,
 
+	MT76_TM_ATTR_RADIO_IDX,
+
 	/* keep last */
 	NUM_MT76_TM_ATTRS,
 	MT76_TM_ATTR_MAX = NUM_MT76_TM_ATTRS - 1,
diff --git a/tools/main.c b/tools/main.c
index aaa17f85..6fd648a9 100644
--- a/tools/main.c
+++ b/tools/main.c
@@ -20,26 +20,143 @@ struct unl unl;
 static uint32_t tm_changed[DIV_ROUND_UP(NUM_MT76_TM_ATTRS, 32)];
 static const char *progname;
 
-static int phy_lookup_idx(const char *name)
+static void parse_radio_config(struct radio_config *radio, struct nlattr *freqs)
 {
-	char buf[128];
-	FILE *f;
-	int len;
+	struct nlattr *freq;
+	int rem;
+
+	nla_for_each_nested(freq, freqs, rem) {
+		static struct nla_policy freq_policy[NL80211_WIPHY_RADIO_FREQ_ATTR_MAX + 1] = {
+			[NL80211_WIPHY_RADIO_FREQ_ATTR_START] = { .type = NLA_U32 },
+			[NL80211_WIPHY_RADIO_FREQ_ATTR_END] = { .type = NLA_U32 },
+		};
+		struct nlattr *tb[NL80211_WIPHY_RADIO_FREQ_ATTR_MAX + 1];
+		uint32_t start, end;
+
+		if (nla_type(freq) != NL80211_WIPHY_RADIO_ATTR_FREQ_RANGE)
+			continue;
+
+		if (nla_parse_nested(tb, NL80211_WIPHY_RADIO_ATTR_MAX + 1,
+				     freq, freq_policy) ||
+		    !tb[NL80211_WIPHY_RADIO_FREQ_ATTR_START] ||
+		    !tb[NL80211_WIPHY_RADIO_FREQ_ATTR_END])
+			continue;
 
-	/* TODO: Handle single wiphy radio index */
-	snprintf(buf, sizeof(buf), "/sys/class/ieee80211/%s/index", name);
-	f = fopen(buf, "r");
-	if (!f)
-		return -1;
+		start = nla_get_u32(tb[NL80211_WIPHY_RADIO_FREQ_ATTR_START]) / 1000;
+		end = nla_get_u32(tb[NL80211_WIPHY_RADIO_FREQ_ATTR_END]) / 1000;
 
-	len = fread(buf, 1, sizeof(buf) - 1, f);
-	fclose(f);
+		if (start >= 2400 && end <= 2500) {
+			radio->band = NL80211_BAND_2GHZ;
+			radio->parking_freq = 2412;
+			return;
+		}
+		if (start >= 5000 && end <= 5900) {
+			radio->band = NL80211_BAND_5GHZ;
+			radio->parking_freq = 5180;
+			return;
+		}
+		if (start >= 5925 && end <= 7200) {
+			radio->band = NL80211_BAND_6GHZ;
+			radio->parking_freq = 5955;
+			return;
+		}
+	}
 
-	if (!len)
-		return -1;
+	radio->band = -1;
+	radio->parking_freq = 0;
+}
 
-	buf[len] = 0;
-	return atoi(buf);
+static void parse_radios(struct wiphy_config *wiphy, struct nlattr *radios)
+{
+	struct nlattr *radio;
+	int radio_idx, rem;
+
+	nla_for_each_nested(radio, radios, rem) {
+		static struct nla_policy radio_policy[NL80211_WIPHY_RADIO_ATTR_MAX + 1] = {
+			[NL80211_WIPHY_RADIO_ATTR_INDEX] = { .type = NLA_U32 },
+		};
+		struct nlattr *tb[NL80211_WIPHY_RADIO_ATTR_MAX + 1];
+
+		if (nla_parse_nested(tb, NL80211_WIPHY_RADIO_ATTR_MAX + 1,
+				     radio, radio_policy) ||
+		    !tb[NL80211_WIPHY_RADIO_ATTR_INDEX])
+			continue;
+
+		radio_idx = nla_get_u32(tb[NL80211_WIPHY_RADIO_ATTR_INDEX]);
+		parse_radio_config(&wiphy->radio[radio_idx], radio);
+		wiphy->radio_num++;
+	}
+}
+
+static int mt76_get_wiphy_cb(struct nl_msg *msg, void *arg)
+{
+	struct nlattr *tb_msg[NL80211_ATTR_MAX + 1];
+	struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
+	struct wiphy_list *wiphys = (struct wiphy_list *)arg;
+	int wiphy_idx, idx = wiphys->wiphy_num - 1;
+
+	nla_parse(tb_msg, NL80211_ATTR_MAX, genlmsg_attrdata(gnlh, 0),
+		  genlmsg_attrlen(gnlh, 0), NULL);
+
+	if (!tb_msg[NL80211_ATTR_WIPHY])
+		return NL_STOP;
+
+	wiphy_idx = nla_get_u32(tb_msg[NL80211_ATTR_WIPHY]);
+	if (idx < 0 || wiphys->wiphy[idx].wiphy_idx != wiphy_idx) {
+		idx++;
+		wiphys->wiphy[idx].wiphy_idx = wiphy_idx;
+		wiphys->wiphy_num++;
+	}
+
+	if (tb_msg[NL80211_ATTR_MAC])
+		nla_memcpy(wiphys->mac_addr, tb_msg[NL80211_ATTR_MAC], ETH_ALEN);
+
+	if (tb_msg[NL80211_ATTR_WIPHY_RADIOS]) {
+		wiphys->is_single_wiphy = true;
+		parse_radios(&wiphys->wiphy[idx], tb_msg[NL80211_ATTR_WIPHY_RADIOS]);
+	}
+
+	return NL_SKIP;
+}
+
+static void mt76_get_wiphy(struct phy_config *config, int phy_idx)
+{
+	struct wiphy_list wiphys = {0};
+	struct nl_msg *msg;
+	int i, radio_num;
+	int idx = 0;
+
+	msg = unl_genl_msg(&unl, NL80211_CMD_GET_WIPHY, true);
+	nla_put_flag(msg, NL80211_ATTR_SPLIT_WIPHY_DUMP);
+	unl_genl_request(&unl, msg, mt76_get_wiphy_cb, (void *)&wiphys);
+
+	config->wiphy_idx = -1;
+	config->radio_idx = -1;
+	config->parking_freq = 0;
+	config->band = -1;
+	memcpy(config->mac_addr, wiphys.mac_addr, ETH_ALEN);
+
+	if (!wiphys.is_single_wiphy) {
+		config->wiphy_idx = phy_idx;
+		return;
+	}
+
+	/* wiphys is in reversed order */
+	for (i = wiphys.wiphy_num - 1; i >= 0; i--) {
+		struct wiphy_config *wiphy = &wiphys.wiphy[i];
+
+		radio_num = wiphy->radio_num;
+		if (idx <= phy_idx && phy_idx < idx + radio_num) {
+			config->wiphy_idx = wiphy->wiphy_idx;
+			config->radio_idx = phy_idx - idx;
+			config->mac_addr[5] += config->radio_idx;
+			config->parking_freq = wiphy->radio[config->radio_idx].parking_freq;
+			config->band = wiphy->radio[config->radio_idx].band;
+			config->radio_num = radio_num;
+			return;
+		}
+		idx += radio_num;
+	}
 }
 
 void usage(void)
@@ -79,16 +196,19 @@ static int mt76_dump_cb(struct nl_msg *msg, void *arg)
 	return NL_SKIP;
 }
 
-static int mt76_dump(int phy, int argc, char **argv)
+static int mt76_dump(struct phy_config *config, int argc, char **argv)
 {
 	struct nl_msg *msg;
 	void *data;
 
 	msg = unl_genl_msg(&unl, NL80211_CMD_TESTMODE, true);
-	nla_put_u32(msg, NL80211_ATTR_WIPHY, phy);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, config->wiphy_idx);
 
 	data = nla_nest_start(msg, NL80211_ATTR_TESTDATA);
 
+	if (config->radio_idx >= 0)
+		nla_put_u32(msg, MT76_TM_ATTR_RADIO_IDX, config->radio_idx);
+
 	for (; argc > 0; argc--, argv++) {
 		if (!strcmp(argv[0], "stats"))
 			nla_put_flag(msg, MT76_TM_ATTR_STATS);
@@ -111,7 +231,7 @@ static inline bool tm_is_changed(uint32_t id)
 	return tm_changed[id / 32] & (1U << (id % 32));
 }
 
-static int mt76_set(int phy, int argc, char **argv)
+static int mt76_set(struct phy_config *config, int argc, char **argv)
 {
 	const struct tm_field *fields = msg_field.fields;
 	struct nl_msg *msg;
@@ -122,9 +242,13 @@ static int mt76_set(int phy, int argc, char **argv)
 		return 1;
 
 	msg = unl_genl_msg(&unl, NL80211_CMD_TESTMODE, false);
-	nla_put_u32(msg, NL80211_ATTR_WIPHY, phy);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, config->wiphy_idx);
 
 	data = nla_nest_start(msg, NL80211_ATTR_TESTDATA);
+
+	if (config->radio_idx >= 0)
+		nla_put_u32(msg, MT76_TM_ATTR_RADIO_IDX, config->radio_idx);
+
 	for (; argc > 0; argc--, argv++) {
 		char *name = argv[0];
 		char *val = strchr(name, '=');
@@ -169,34 +293,45 @@ static int mt76_set(int phy, int argc, char **argv)
 	return ret;
 }
 
-static int mt76_set_state(int phy, char *state)
+static int mt76_set_state_all(struct phy_config *config, char *state)
 {
 	const struct tm_field *fields = msg_field.fields;
 	struct nl_msg *msg;
+	int i, radio, max_radio, ret = 0;
 	void *data;
-	int ret, i;
 
-	msg = unl_genl_msg(&unl, NL80211_CMD_TESTMODE, false);
-	nla_put_u32(msg, NL80211_ATTR_WIPHY, phy);
+	max_radio = config->radio_idx >= 0 ? config->radio_num : 1;
 
-	data = nla_nest_start(msg, NL80211_ATTR_TESTDATA);
-	for (i = 0; i < msg_field.len; i++) {
-		if (!fields[i].parse)
-			continue;
+	for (radio = 0; radio < max_radio; radio++) {
+		msg = unl_genl_msg(&unl, NL80211_CMD_TESTMODE, false);
+		nla_put_u32(msg, NL80211_ATTR_WIPHY, config->wiphy_idx);
 
-		if (!strcmp(fields[i].name, "state"))
-			break;
-	}
+		data = nla_nest_start(msg, NL80211_ATTR_TESTDATA);
 
-	if (!fields[i].parse(&fields[i], i, msg, state))
-		return 1;
+		if (config->radio_idx >= 0)
+			nla_put_u32(msg, MT76_TM_ATTR_RADIO_IDX, radio);
 
-	tm_set_changed(i);
-	nla_nest_end(msg, data);
+		for (i = 0; i < msg_field.len; i++) {
+			if (!fields[i].parse)
+				continue;
 
-	ret = unl_genl_request(&unl, msg, NULL, NULL);
-	if (ret)
-		fprintf(stderr, "Failed to set state %s: %s\n", state, strerror(-ret));
+			if (!strcmp(fields[i].name, "state"))
+				break;
+		}
+
+		if (!fields[i].parse(&fields[i], i, msg, state))
+			return 1;
+
+		tm_set_changed(i);
+		nla_nest_end(msg, data);
+
+		ret = unl_genl_request(&unl, msg, NULL, NULL);
+		if (ret && ret != -ENOTCONN) {
+			fprintf(stderr, "Failed to set state %s for radio %d: %s\n",
+				state, radio, strerror(-ret));
+			break;
+		}
+	}
 
 	return ret;
 }
@@ -215,7 +350,7 @@ static void mt76_set_tm_reg(void)
 		fprintf(stderr, "Failed to set reg %s: %s\n", reg, strerror(-ret));
 }
 
-static int mt76_add_iface(int phy, int argc, char **argv)
+static int mt76_add_iface(struct phy_config *config, int argc, char **argv)
 {
 	struct nl_msg *msg;
 	char *name, cmd[64];
@@ -228,10 +363,13 @@ static int mt76_add_iface(int phy, int argc, char **argv)
 
 	name = argv[0];
 	msg = unl_genl_msg(&unl, NL80211_CMD_NEW_INTERFACE, false);
-	/* TODO: Handle single wiphy radio index */
-	nla_put_u32(msg, NL80211_ATTR_WIPHY, phy);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, config->wiphy_idx);
 	nla_put_u32(msg, NL80211_ATTR_IFTYPE, NL80211_IFTYPE_MONITOR);
 	nla_put_string(msg, NL80211_ATTR_IFNAME, name);
+	if (config->radio_idx >= 0)
+		nla_put_u32(msg, NL80211_ATTR_VIF_RADIO_MASK, BIT(config->radio_idx));
+
+	nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, config->mac_addr);
 
 	ret = unl_genl_request(&unl, msg, NULL, NULL);
 	if (ret) {
@@ -242,12 +380,18 @@ static int mt76_add_iface(int phy, int argc, char **argv)
 	sprintf(cmd, "ifconfig %s up", name);
 	system(cmd);
 
+	/* for single wiphy model, parking channel will not be set */
+	if (config->parking_freq) {
+		sprintf(cmd, "iw dev %s set freq %d HT20", name, config->parking_freq);
+		system(cmd);
+	}
+
 	/* turn on testmode */
-	ret = mt76_set_state(phy, "idle");
+	ret = mt76_set_state_all(config, "idle");
 	return ret;
 }
 
-static int mt76_delete_iface(int phy, int argc, char **argv)
+static int mt76_delete_iface(struct phy_config *config, int argc, char **argv)
 {
 	unsigned int devidx;
 	struct nl_msg *msg;
@@ -266,7 +410,7 @@ static int mt76_delete_iface(int phy, int argc, char **argv)
 	}
 
 	/* turn off testmode before deleting interface */
-	ret = mt76_set_state(phy, "off");
+	ret = mt76_set_state_all(config, "off");
 	if (ret)
 		return ret;
 
@@ -275,7 +419,7 @@ static int mt76_delete_iface(int phy, int argc, char **argv)
 
 	/* delete interface */
 	msg = unl_genl_msg(&unl, NL80211_CMD_DEL_INTERFACE, false);
-	nla_put_u32(msg, NL80211_ATTR_WIPHY, phy);
+	nla_put_u32(msg, NL80211_ATTR_WIPHY, config->wiphy_idx);
 	nla_put_u32(msg, NL80211_ATTR_IFINDEX, devidx);
 
 	ret = unl_genl_request(&unl, msg, NULL, NULL);
@@ -287,8 +431,8 @@ static int mt76_delete_iface(int phy, int argc, char **argv)
 
 int main(int argc, char **argv)
 {
+	struct phy_config config = {0};
 	const char *cmd, *phyname;
-	int phy;
 	int ret = 0;
 
 	progname = argv[0];
@@ -301,9 +445,9 @@ int main(int argc, char **argv)
 	}
 
 	phyname = argv[1];
-	phy = phy_lookup_idx(phyname);
-	if (phy < 0) {
-		fprintf(stderr, "Could not find phy '%s'\n", argv[1]);
+	mt76_get_wiphy(&config, atoi(phyname + 3));
+	if (config.wiphy_idx < 0) {
+		fprintf(stderr, "Could not find phy '%s'\n", phyname);
 		return 2;
 	}
 
@@ -312,15 +456,15 @@ int main(int argc, char **argv)
 	argc -= 3;
 
 	if (!strcmp(cmd, "dump"))
-		ret = mt76_dump(phy, argc, argv);
+		ret = mt76_dump(&config, argc, argv);
 	else if (!strcmp(cmd, "set"))
-		ret = mt76_set(phy, argc, argv);
+		ret = mt76_set(&config, argc, argv);
 	else if (!strcmp(cmd, "add"))
-		ret = mt76_add_iface(phy, argc, argv);
+		ret = mt76_add_iface(&config, argc, argv);
 	else if (!strcmp(cmd, "del"))
-		ret = mt76_delete_iface(phy, argc, argv);
+		ret = mt76_delete_iface(&config, argc, argv);
 	else if (!strcmp(cmd, "eeprom"))
-		ret = mt76_eeprom(phy, argc, argv);
+		ret = mt76_eeprom(config.wiphy_idx, argc, argv);
 	else if (!strcmp(cmd, "fwlog"))
 		ret = mt76_fwlog(phyname, argc, argv);
 	else if (!strcmp(cmd, "idxlog"))
diff --git a/tools/mt76-test.h b/tools/mt76-test.h
index b9d508c5..a868d524 100644
--- a/tools/mt76-test.h
+++ b/tools/mt76-test.h
@@ -19,6 +19,14 @@
 #define DIV_ROUND_UP(n, d) (((n) + (d) - 1) / (d))
 #endif
 
+#ifndef BIT
+#define BIT(n) (1UL << (n))
+#endif
+
+#ifndef ETH_ALEN
+#define ETH_ALEN	6
+#endif
+
 #define EEPROM_FILE_PATH_FMT	"/tmp/mt76-test-%s"
 #define EEPROM_PART_SIZE	20480
 
@@ -27,6 +35,35 @@
 struct nl_msg;
 struct nlattr;
 
+#define MT_MAX_BAND	3
+
+struct phy_config {
+	int wiphy_idx;
+	int radio_idx;
+	int radio_num;
+	int parking_freq;
+	int band;
+	uint8_t mac_addr[ETH_ALEN];
+};
+
+struct radio_config {
+	int parking_freq;
+	enum nl80211_band band;
+};
+
+struct wiphy_config {
+	int wiphy_idx;
+	int radio_num;
+	struct radio_config radio[MT_MAX_BAND];
+};
+
+struct wiphy_list {
+	bool is_single_wiphy;
+	int wiphy_num;
+	uint8_t mac_addr[ETH_ALEN];
+	struct wiphy_config wiphy[MT_MAX_BAND * 2];
+};
+
 struct tm_field {
 	const char *name;
 	const char *prefix;
-- 
2.45.2

