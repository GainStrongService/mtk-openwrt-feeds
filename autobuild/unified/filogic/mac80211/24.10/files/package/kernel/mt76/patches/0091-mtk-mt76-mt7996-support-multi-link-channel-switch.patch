From a8a824d45eef4f1b9e2bd1b80321d46db4d12703 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Fri, 19 Jan 2024 14:04:03 +0800
Subject: [PATCH 091/146] mtk: mt76: mt7996: support multi-link channel switch

mtk: wifi: mt76: mt7996: remove the limitation of radar detect width for mlo

mtk: wifi: mt76: mt7996: start and finalize channel switch on link basis

mtk: wifi: mt76: mt7996: fix DFS RDD init issue

1. Add radar enabled flag in mt76_phy since hw->conf.radar_enabled
is only used for non-chanctx driver.
2. Add IEEE80211_CHANCTX_CHANGE_RADAR flag in change_chanctx for RDD
DFS state update.

mtk: wifi: mt76: mt7996: fix background radar using wrong phy for mld ap

mt7996_hw_phy will be phy0 for 3 link mld ap

mtk: mt76: mt7996: ACS channel time too long on duty channel

This problem happens in SW scan and was already fixed.
(https://gerrit.mediatek.inc/c/gateway/WiFi7/mac80211/mt76/+/8312969)

This commit applys same solution for HW scan.

mtk: mt76: mt7996: add post channel switch for DFS channel switching

Add post channel switch callback for DFS channel switch support
After CAC, we need to set channel again for DFS RDD (notify to change
state from cac to active)
Add IEEE80211_HW_HANDLE_QUIET_CSA flag to avoid stopping the entire vif TX
queue when csa_blocked_tx is raised especially for DFS channel switch.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 mac80211.c    |  2 +-
 mt76.h        |  1 +
 mt7996/init.c |  1 +
 mt7996/main.c | 30 +++++++++++++++++++++++++++---
 mt7996/mcu.c  | 17 ++++++++++++++---
 5 files changed, 44 insertions(+), 7 deletions(-)

diff --git a/mac80211.c b/mac80211.c
index c75cea46..9319f0b4 100644
--- a/mac80211.c
+++ b/mac80211.c
@@ -1918,7 +1918,7 @@ enum mt76_dfs_state mt76_phy_dfs_state(struct mt76_phy *phy)
 	    test_bit(MT76_SCANNING, &phy->state))
 		return MT_DFS_STATE_DISABLED;
 
-	if (!hw->conf.radar_enabled) {
+	if (!phy->radar_enabled) {
 		if ((hw->conf.flags & IEEE80211_CONF_MONITOR) &&
 		    (phy->chandef.chan->flags & IEEE80211_CHAN_RADAR))
 			return MT_DFS_STATE_ACTIVE;
diff --git a/mt76.h b/mt76.h
index e88984fe..bde46bae 100644
--- a/mt76.h
+++ b/mt76.h
@@ -858,6 +858,7 @@ struct mt76_phy {
 
 	struct mt76_channel_state *chan_state;
 	enum mt76_dfs_state dfs_state;
+	bool radar_enabled;
 	ktime_t survey_time;
 
 	u32 aggr_stats[32];
diff --git a/mt7996/init.c b/mt7996/init.c
index 5d6a02c7..ab001f2d 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -566,6 +566,7 @@ mt7996_init_wiphy(struct ieee80211_hw *hw, struct mtk_wed_device *wed)
 	ieee80211_hw_set(hw, SUPPORTS_MULTI_BSSID);
 	ieee80211_hw_set(hw, CHANCTX_STA_CSA);
 	ieee80211_hw_set(hw, CONNECTION_MONITOR);
+	ieee80211_hw_set(hw, HANDLES_QUIET_CSA);
 
 	hw->max_tx_fragments = 4;
 
diff --git a/mt7996/main.c b/mt7996/main.c
index 029b618e..76b5c1c9 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -591,6 +591,7 @@ static void ___mt7996_set_channel(struct mt7996_phy *phy,
 	struct mt76_phy *mphy = phy->mt76;
 	bool offchannel = phy->scan_chan != NULL;
 	int timeout = HZ / 5;
+	unsigned long was_scanning = ieee80211_get_scanning(mphy->hw);
 
 	wait_event_timeout(mdev->tx_wait, !mt76_has_tx_pending(mphy), timeout);
 	mt76_update_survey(mphy);
@@ -605,7 +606,7 @@ static void ___mt7996_set_channel(struct mt7996_phy *phy,
 	if (!offchannel)
 		mphy->main_chan = chandef->chan;
 
-	if (chandef->chan != mphy->main_chan)
+	if (chandef->chan != mphy->main_chan || was_scanning)
 		memset(mphy->chan_state, 0, sizeof(*mphy->chan_state));
 }
 
@@ -1082,6 +1083,22 @@ mt7996_channel_switch_beacon(struct ieee80211_hw *hw,
 	mutex_unlock(&dev->mt76.mutex);
 }
 
+static int
+mt7996_post_channel_switch(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+			   struct ieee80211_bss_conf *link_conf)
+{
+	struct cfg80211_chan_def *chandef = &link_conf->chanreq.oper;
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct mt7996_phy *phy = mt7996_band_phy(dev, chandef->chan->band);
+	int ret;
+
+	ret = cfg80211_chandef_dfs_required(hw->wiphy, chandef, NL80211_IFTYPE_AP);
+	if (ret <= 0)
+		return ret;
+
+	return mt7996_set_channel(phy, chandef);
+}
+
 static void mt7996_remove_link_sta(struct mt7996_dev *dev,
 				   struct ieee80211_bss_conf *conf,
 				   struct mt7996_bss_conf *mconf,
@@ -2481,6 +2498,7 @@ mt7996_add_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
 	}
 
 	phy->chanctx = ctx;
+	phy->mt76->radar_enabled = conf->radar_enabled;
 	mutex_unlock(&phy->dev->mt76.mutex);
 
 	if (!mt76_testmode_enabled(phy->mt76) && !phy->mt76->test.bf_en) {
@@ -2508,8 +2526,10 @@ mt7996_remove_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *co
 
 	mutex_lock(&phy->dev->mt76.mutex);
 	ctx->assigned = false;
-	if (ctx == phy->chanctx)
+	if (ctx == phy->chanctx) {
 		phy->chanctx = NULL;
+		phy->mt76->radar_enabled = false;
+	}
 	mutex_unlock(&phy->dev->mt76.mutex);
 }
 
@@ -2521,8 +2541,10 @@ mt7996_change_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *co
 	struct mt7996_phy *phy = ctx->phy;
 
 	wiphy_info(hw->wiphy, "%s: change %u, 0x%x\n", __func__, conf->def.chan->hw_value, changed);
-	if (changed & IEEE80211_CHANCTX_CHANGE_WIDTH) {
+	if (changed & IEEE80211_CHANCTX_CHANGE_WIDTH ||
+	    changed & IEEE80211_CHANCTX_CHANGE_RADAR) {
 		ctx->chandef = conf->def;
+		phy->mt76->radar_enabled = conf->radar_enabled;
 
 		mt7996_set_channel(phy, &ctx->chandef);
 	}
@@ -2620,6 +2642,7 @@ mt7996_switch_vif_chanctx(struct ieee80211_hw *hw,
 	mutex_lock(&phy->dev->mt76.mutex);
 
 	phy->chanctx = new_ctx;
+	phy->mt76->radar_enabled = vifs->new_ctx->radar_enabled;
 	new_ctx->assigned = true;
 	new_ctx->chandef = vifs->new_ctx->def;
 	new_ctx->phy = phy;
@@ -2737,6 +2760,7 @@ const struct ieee80211_ops mt7996_ops = {
 	.release_buffered_frames = mt76_release_buffered_frames,
 	.get_txpower = mt7996_get_txpower,
 	.channel_switch_beacon = mt7996_channel_switch_beacon,
+	.post_channel_switch = mt7996_post_channel_switch,
 	.get_stats = mt7996_get_stats,
 	.get_et_sset_count = mt7996_get_et_sset_count,
 	.get_et_stats = mt7996_get_et_stats,
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index ffd4ce61..b6454ede 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -361,10 +361,21 @@ int mt7996_mcu_wa_cmd(struct mt7996_dev *dev, int cmd, u32 a1, u32 a2, u32 a3)
 static void
 mt7996_mcu_csa_finish(void *priv, u8 *mac, struct ieee80211_vif *vif)
 {
-	if (!vif->bss_conf.csa_active || vif->type == NL80211_IFTYPE_STATION)
+	struct mt76_phy *mphy = (struct mt76_phy *)priv;
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct ieee80211_bss_conf *link_conf;
+	int link_id, band_idx = mphy->band_idx;
+
+	link_id = mvif->band_to_link[band_idx];
+	if (link_id == IEEE80211_LINK_UNSPECIFIED)
+		return;
+
+	link_conf = rcu_dereference(vif->link_conf[link_id]);
+
+	if (!link_conf || !link_conf->csa_active || vif->type == NL80211_IFTYPE_STATION)
 		return;
 
-	ieee80211_csa_finish(vif, 0);
+	ieee80211_csa_finish(vif, link_id);
 }
 
 static void
@@ -489,7 +500,7 @@ mt7996_mcu_ie_countdown(struct mt7996_dev *dev, struct sk_buff *skb)
 		case UNI_EVENT_IE_COUNTDOWN_CSA:
 			ieee80211_iterate_active_interfaces_atomic(mphy->hw,
 					IEEE80211_IFACE_ITER_RESUME_ALL,
-					mt7996_mcu_csa_finish, mphy->hw);
+					mt7996_mcu_csa_finish, mphy);
 			break;
 		case UNI_EVENT_IE_COUNTDOWN_BCC:
 			ieee80211_iterate_active_interfaces_atomic(mphy->hw,
-- 
2.45.2

