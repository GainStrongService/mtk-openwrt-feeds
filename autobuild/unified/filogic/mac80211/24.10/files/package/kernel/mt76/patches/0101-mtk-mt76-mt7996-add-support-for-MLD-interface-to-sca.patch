From 223c4dc579698b290474786a457b87aa9b4f1aae Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Fri, 10 May 2024 13:35:56 +0800
Subject: [PATCH 101/146] mtk: mt76: mt7996: add support for MLD interface to
 scan

Before queueing a HW scan work, mt7996_hw_scan() should make sure that
there is mt7996_bss_conf on the scanning phy.

For MLD interface scan, we first iterate all links to find the
mt7996_bss_conf with target phy. A mt7996_bss_conf not being found
implies the link is invalid, for which an AP interface should NOT scan
while a STA interface should. Here we use the default link for STA scan,
and delete it after the scan is completed.

Note that AP's mt7996_bss_conf is added when the link is assigned to
a chanctx, meaning that the operating channel is already determined.
However, if the AP uses ACS to decide link's operating channel,
hostapd adds the link in mac80211 and triggers a scan, while
mt7996_bss_conf is not yet allocated. In such a case we also use the
default link to scan, and delete it once the scan is finished.

mtk: mt76: mt7996: add correct bss_conf for legacy AP scan

If the legacy AP interface is added but not yet started, its bss_conf
wlould be phy0. Problem happens when scan is triggered with scan request
contining channels not belong to phy0. In other word, it is invalid to
set channel that does not belong to current bss_conf.

This commit adds correct bss_conf for legacy AP so that setting channel
can be successful.

Now AP's bss_conf is not added until chanctx being assigned, so legacy AP
might receive scan request without bss_conf being assigned. (such as ACS)

This commit changes the way bss_conf being checked before scan. If the
bss_conf exists but belongs to a different phy than the scanning one, it's
removed. And if the bss_conf is not exist, or it just be removed, it's
added and assigned to the scanning phy.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 mt7996/main.c | 98 ++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 89 insertions(+), 9 deletions(-)

diff --git a/mt7996/main.c b/mt7996/main.c
index 4e283aae..e9dd849e 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -2524,10 +2524,24 @@ mt7996_net_fill_forward_path(struct ieee80211_hw *hw,
 
 void mt7996_scan_complete(struct mt7996_phy *phy, bool aborted)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)phy->scan_vif->drv_priv;
+	struct ieee80211_vif *vif = phy->scan_vif;
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct cfg80211_scan_info info = {
 		.aborted = aborted,
 	};
+	int i;
+
+	if (ieee80211_vif_is_mld(vif)) {
+		struct mt7996_bss_conf *mconf;
+
+		for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++) {
+			mconf = mconf_dereference_protected(mvif, i);
+
+			if (mconf && mconf->phy == phy && mconf == &mvif->deflink)
+				mt7996_remove_bss_conf(vif, &vif->bss_conf,
+						       &mvif->deflink);
+		}
+	}
 
 	ieee80211_scan_completed(phy->mt76->hw, &info);
 	phy->scan_chan = NULL;
@@ -2544,6 +2558,7 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mt7996_band_phy(dev, req->channels[0]->band);
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_bss_conf *mconf;
 	int ret;
 
 	mutex_lock(&phy->dev->mt76.mutex);
@@ -2556,15 +2571,80 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	phy->scan_vif = vif;
 	phy->scan_chan_idx = 0;
 
-	if (vif->type == NL80211_IFTYPE_STATION && !ieee80211_vif_is_mld(vif) &&
-	    (phy->mt76 != mvif->deflink.phy->mt76)) {
-		// phy->mt76->main_phy = hw->priv;
-		mt7996_remove_bss_conf(vif, &vif->bss_conf, &mvif->deflink);
+	if (!ieee80211_vif_is_mld(vif)) {
+		mconf = mconf_dereference_protected(mvif, 0);
 
-		ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
-		if (ret) {
-			mutex_unlock(&phy->dev->mt76.mutex);
-			return ret;
+		if (mconf && mconf->phy != phy) {
+			mt7996_remove_bss_conf(vif, &vif->bss_conf, &mvif->deflink);
+			mconf = NULL;
+		}
+
+		if (!mconf) {
+			ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+			if (ret) {
+				mutex_unlock(&phy->dev->mt76.mutex);
+				return ret;
+			}
+		}
+	} else {
+		struct ieee80211_bss_conf *link_conf;
+		unsigned long valid_links = vif->valid_links;
+		unsigned int link_id;
+		bool found = false;
+
+		for_each_set_bit(link_id, &valid_links,
+				 IEEE80211_MLD_MAX_NUM_LINKS) {
+			mconf = mconf_dereference_protected(mvif, link_id);
+			if (mconf && mconf->phy == phy) {
+				found = true;
+				break;
+			}
+
+			link_conf = link_conf_dereference_protected(vif, link_id);
+			if (link_conf && !mconf) {
+				/* The link is added in mac80211, but not yet
+				 * initialized and assigned to a chanctx.
+				 * Here we use the default link to perform scan.
+				 */
+				memcpy(&vif->bss_conf, link_conf, sizeof(struct ieee80211_bss_conf));
+				ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+				found = true;
+				break;
+			}
+		}
+
+		if (!found) {
+			if (vif->type != NL80211_IFTYPE_STATION) {
+				/* Only allowed STA MLD to scan full-band when
+				 * there is no valid link on the band.
+				 * (For example, when connecting by 2 links
+				 * (2+5 GHz), an AP MLD is not allowed to scan
+				 * full-band (2+5+6 GHz), while a STA MLD is.)
+				 */
+				mt7996_scan_complete(phy, 0);
+				mutex_unlock(&phy->dev->mt76.mutex);
+				return 0;
+			}
+
+			/* Try to find an empty link, which is later used to scan. */
+			for (link_id = 0;
+			     link_id < IEEE80211_MLD_MAX_NUM_LINKS;
+			     link_id++) {
+				if (!rcu_access_pointer(mvif->link[link_id]))
+					break;
+			}
+
+			if (link_id == IEEE80211_MLD_MAX_NUM_LINKS) {
+				mutex_unlock(&phy->dev->mt76.mutex);
+				return -ENOLINK;
+			}
+
+			vif->bss_conf.link_id = link_id;
+			ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+			if (ret) {
+				mutex_unlock(&phy->dev->mt76.mutex);
+				return ret;
+			}
 		}
 	}
 
-- 
2.45.2

