From 90eef2f3f8d729a47d15502387c13b464783d366 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Mon, 13 Jan 2025 14:07:45 +0800
Subject: [PATCH 53/95] mtk: mt76: mt7996: set TTLM on a STA MLD

This patch adds support to set TTLM a STA MLD by following actions:
1. do not handle Adv-TTLM or Neg-TTLM in vif_cfg_changed since it
   does not return anything to it's caller.
2. add a new driver operation, mt7996_set_ttlm, where we remain a TODO
   that handles the relationship between adv-TTLM and neg-TTLM. For now,
   the function returns failure if Adv-TTLM and Neg-TTLM are active at
   the same time.
3. refactor mt7996_mcu_peer_ttlm_req() so that the function could focus
   on prepare and send unified command to FW without other TTLM-related
   handling.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 mt7996/main.c | 56 +++++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 52 insertions(+), 4 deletions(-)

diff --git a/mt7996/main.c b/mt7996/main.c
index 7d7d8d9f..a5f74e2c 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -986,10 +986,6 @@ mt7996_vif_cfg_changed(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		}
 	}
 
-	if ((changed & BSS_CHANGED_MLD_VALID_LINKS) &&
-	    (changed & (BSS_CHANGED_MLD_ADV_TTLM | BSS_CHANGED_MLD_NEG_TTLM)))
-		mt7996_mcu_peer_mld_ttlm_req(dev, vif, changed);
-
 	mutex_unlock(&dev->mt76.mutex);
 }
 
@@ -2857,6 +2853,45 @@ out:
 	return ret;
 }
 
+static int
+mt7996_set_ttlm(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
+{
+	struct ieee80211_neg_ttlm merged_ttlm;
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct ieee80211_sta *sta;
+	int tid, ret;
+	u16 map = vif->valid_links;
+
+	/* TODO check the intersection between Adv-TTLM and Neg-TTLM */
+	if (vif->type != NL80211_IFTYPE_STATION ||
+	    (vif->adv_ttlm.active && vif->neg_ttlm.valid))
+		return -EOPNOTSUPP;
+
+	if (vif->adv_ttlm.active)
+		map &= vif->adv_ttlm.map;
+
+	sta = ieee80211_find_sta(vif, vif->cfg.ap_addr);
+	if (!sta)
+		return -EINVAL;
+
+	if (vif->neg_ttlm.valid) {
+		memcpy(merged_ttlm.downlink, vif->neg_ttlm.downlink,
+		       sizeof(merged_ttlm.downlink));
+		memcpy(merged_ttlm.uplink, vif->neg_ttlm.uplink,
+		       sizeof(merged_ttlm.uplink));
+	} else {
+		for (tid = 0; tid < IEEE80211_TTLM_NUM_TIDS; tid++) {
+			merged_ttlm.downlink[tid] = map;
+			merged_ttlm.uplink[tid] = map;
+		}
+	}
+
+	mutex_lock(&dev->mt76.mutex);
+	ret = mt7996_mcu_peer_mld_ttlm_req(dev, vif, sta, &merged_ttlm);
+	mutex_unlock(&dev->mt76.mutex);
+	return ret;
+}
+
 static int
 mt7996_set_attlm(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		 u16 disabled_links, u16 switch_time, u32 duration)
@@ -2870,6 +2905,17 @@ mt7996_set_attlm(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	return ret;
 }
 
+static enum ieee80211_neg_ttlm_res
+mt7996_can_neg_ttlm(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+		    struct ieee80211_neg_ttlm *neg_ttlm)
+{
+	/* TODO check intersection between adv-TTLM and neg-TTLM
+	 * For now, we reject all possible overlapping cases of Adv-TTLM and
+	 * Neg-TTLM
+	 */
+	return vif->adv_ttlm.active ? NEG_TTLM_RES_REJECT : NEG_TTLM_RES_ACCEPT;
+}
+
 static void
 mt7996_event_callback(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		      const struct ieee80211_event *event)
@@ -3026,4 +3072,6 @@ const struct ieee80211_ops mt7996_ops = {
 	.change_sta_links = mt7996_mac_sta_change_links,
 	.set_qos_map = mt7996_set_qos_map,
 	.set_attlm = mt7996_set_attlm,
+	.can_neg_ttlm = mt7996_can_neg_ttlm,
+	.set_ttlm = mt7996_set_ttlm,
 };
-- 
2.45.2

