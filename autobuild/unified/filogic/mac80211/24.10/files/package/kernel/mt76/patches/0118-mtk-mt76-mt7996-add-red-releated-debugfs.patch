From 2e5d268c8293db4dee55f59880093fb6ec34eafb Mon Sep 17 00:00:00 2001
From: Peter Chiu <chui-hao.chiu@mediatek.com>
Date: Wed, 27 Aug 2025 10:58:33 +0800
Subject: [PATCH 118/123] mtk: mt76: mt7996: add red releated debugfs

1. Remove sanity chenck for vow_drr_dbg
2. Add pbc_lower_bound to set low bound of pbc.

Signed-off-by: Peter Chiu <chui-hao.chiu@mediatek.com>
---
 mt7996/init.c          | 14 +++++++++
 mt7996/mcu.c           | 20 +++----------
 mt7996/mt7996.h        |  1 +
 mt7996/mtk_debugfs_i.c | 64 ++++++++++++++++++++++++++++++++++++++++++
 mt7996/mtk_mcu.c       |  3 --
 mt7996/mtk_mcu.h       | 24 ----------------
 6 files changed, 83 insertions(+), 43 deletions(-)

diff --git a/mt7996/init.c b/mt7996/init.c
index 3525dcc1..a4b2f825 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -1939,6 +1939,11 @@ void mt7996_set_stream_he_eht_caps(struct mt7996_phy *phy)
 
 int mt7996_register_device(struct mt7996_dev *dev)
 {
+#define WMM_PBC_LOW_BOUND_VO	1900
+#define WMM_PBC_LOW_BOUND_VI	1900
+#define WMM_PBC_LOW_BOUND_BE	1500
+#define WMM_PBC_LOW_BOUND_BK	900
+#define WMM_PBC_LOW_BOUND_MGMT	32
 	struct ieee80211_hw *hw = mt76_hw(dev);
 	struct mt7996_phy *phy;
 	int ret;
@@ -1957,6 +1962,15 @@ int mt7996_register_device(struct mt7996_dev *dev)
 	INIT_WORK(&dev->dump_work, mt7996_mac_dump_work);
 	mutex_init(&dev->dump_mutex);
 
+#define pbc_acq_low_bound_config(_ac, _bound)				\
+	dev->pbc_bound[mt76_connac_lmac_mapping(_ac)] = (_bound)
+
+	pbc_acq_low_bound_config(IEEE80211_AC_VO, WMM_PBC_LOW_BOUND_VO);
+	pbc_acq_low_bound_config(IEEE80211_AC_VI, WMM_PBC_LOW_BOUND_VI);
+	pbc_acq_low_bound_config(IEEE80211_AC_BE, WMM_PBC_LOW_BOUND_BE);
+	pbc_acq_low_bound_config(IEEE80211_AC_BK, WMM_PBC_LOW_BOUND_BK);
+	dev->pbc_bound[4] = WMM_PBC_LOW_BOUND_MGMT;
+#undef pbc_acq_low_bound_config
 	INIT_WORK(&dev->wmm_pbc_work, mt7996_mcu_wmm_pbc_work);
 
 	ret = mt7996_init_hardware(dev);
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 08bc6d4d..c1944a8d 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -1214,11 +1214,6 @@ void mt7996_mcu_wmm_pbc_work(struct work_struct *work)
 #define WMM_PBC_BSS_ALL		0xff
 #define WMM_PBC_WLAN_IDX_ALL	0xffff
 #define WMM_PBC_BOUND_DEFAULT	0xffff
-#define WMM_PBC_LOW_BOUND_VO	1900
-#define WMM_PBC_LOW_BOUND_VI	1900
-#define WMM_PBC_LOW_BOUND_BE	1500
-#define WMM_PBC_LOW_BOUND_BK	900
-#define WMM_PBC_LOW_BOUND_MGMT	32
 	struct mt7996_dev *dev = container_of(work, struct mt7996_dev, wmm_pbc_work);
 
 	struct {
@@ -1248,18 +1243,11 @@ void mt7996_mcu_wmm_pbc_work(struct work_struct *work)
 	};
 	int i, ret;
 
-#define pbc_acq_low_bound_config(_ac, _bound)						\
-	req.data.bound[mt76_connac_lmac_mapping(_ac)].low = dev->wmm_pbc_enable ?	\
-							    cpu_to_le16(_bound) : 0
-	pbc_acq_low_bound_config(IEEE80211_AC_VO, WMM_PBC_LOW_BOUND_VO);
-	pbc_acq_low_bound_config(IEEE80211_AC_VI, WMM_PBC_LOW_BOUND_VI);
-	pbc_acq_low_bound_config(IEEE80211_AC_BE, WMM_PBC_LOW_BOUND_BE);
-	pbc_acq_low_bound_config(IEEE80211_AC_BK, WMM_PBC_LOW_BOUND_BK);
-	req.data.bound[4].low = dev->wmm_pbc_enable ?
-				cpu_to_le16(WMM_PBC_LOW_BOUND_MGMT) : 0;
-
-	for (i = 0; i < WMM_PBC_QUEUE_NUM; ++i)
+	for (i = 0; i < WMM_PBC_QUEUE_NUM; ++i) {
+		req.data.bound[i].low = dev->wmm_pbc_enable ?
+					cpu_to_le16(dev->pbc_bound[i]) : 0;
 		req.data.bound[i].up = cpu_to_le16(WMM_PBC_BOUND_DEFAULT);
+	}
 
 	if (is_mt7990(&dev->mt76))
 		ret = mt76_mcu_send_msg(&dev->mt76, MCU_WA_UNI_CMD(SDO),
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 27d168c9..7c52328b 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -950,6 +950,7 @@ struct mt7996_dev {
 
 	bool wmm_pbc_enable;
 	struct work_struct wmm_pbc_work;
+	u16 pbc_bound[5];
 #ifdef CONFIG_MTK_DEBUG
 	u16 wlan_idx;
 	struct {
diff --git a/mt7996/mtk_debugfs_i.c b/mt7996/mtk_debugfs_i.c
index d58ea794..9fd6dff4 100644
--- a/mt7996/mtk_debugfs_i.c
+++ b/mt7996/mtk_debugfs_i.c
@@ -927,6 +927,68 @@ static const struct file_operations fops_mt7996_txop = {
 	.llseek = default_llseek,
 };
 
+static ssize_t mt7996_pbc_lower_bound_set(struct file *file,
+					  const char __user *user_buf,
+					  size_t count, loff_t *ppos)
+{
+	struct mt7996_dev *dev = file->private_data;
+	char buf[100];
+	u16 val[5];
+
+	if (count >= sizeof(buf))
+		return -EINVAL;
+
+	if (copy_from_user(buf, user_buf, count))
+		return -EFAULT;
+
+	if (count && buf[count - 1] == '\n')
+		buf[count - 1] = '\0';
+	else
+		buf[count] = '\0';
+
+	if (sscanf(buf, "%hu %hu %hu %hu %hu",
+		   &val[0], &val[1], &val[2], &val[3], &val[4]) != 5)
+		goto err;
+
+	memcpy(&dev->pbc_bound, &val, sizeof(dev->pbc_bound));
+
+	return count;
+err:
+	dev_warn(dev->mt76.dev,
+		 "format: [BK] [BE] [VI] [VO] [Mgmt]\n");
+	return -EINVAL;
+}
+
+static ssize_t mt7996_pbc_lower_bound_dump(struct file *file,
+					   char __user *user_buf,
+					   size_t count, loff_t *ppos)
+{
+	struct mt7996_dev *dev = file->private_data;
+	static const size_t size = 64;
+	int len = 0, ret;
+	char *buf;
+
+	buf = kzalloc(size, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	len += scnprintf(buf + len, size - len, "pbc_bound = %d %d %d %d %d\n",
+			 dev->pbc_bound[0], dev->pbc_bound[1], dev->pbc_bound[2],
+			 dev->pbc_bound[3], dev->pbc_bound[4]);
+	ret = simple_read_from_buffer(user_buf, count, ppos, buf, len);
+
+	kfree(buf);
+	return ret;
+}
+
+static const struct file_operations fops_mt7996_pbc_lower_bound = {
+	.write = mt7996_pbc_lower_bound_set,
+	.read = mt7996_pbc_lower_bound_dump,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 static ssize_t mt7996_mlo_agc_trig_set(struct file *file,
 				       const char __user *user_buf,
 				       size_t count, loff_t *ppos)
@@ -1299,6 +1361,8 @@ int mt7996_mtk_init_dev_debugfs_internal(struct mt7996_phy *phy, struct dentry *
 	debugfs_create_file("mat_table", 0400, dir, dev, &mt7996_mat_table_fops);
 	debugfs_create_file("mlo_agc_tx", 0200, dir, dev, &fops_mlo_agc_tx);
 	debugfs_create_file("mlo_agc_trig", 0200, dir, dev, &fops_mlo_agc_trig);
+	debugfs_create_file("pbc_lower_bound", 0600, dir, dev,
+			     &fops_mt7996_pbc_lower_bound);
 
 	if (!is_mt7996(&dev->mt76)) {
 		debugfs_create_file("sr_pp_enable", 0600, dir, dev,
diff --git a/mt7996/mtk_mcu.c b/mt7996/mtk_mcu.c
index 5679c9e5..81d19fdd 100644
--- a/mt7996/mtk_mcu.c
+++ b/mt7996/mtk_mcu.c
@@ -1361,9 +1361,6 @@ int mt7996_mcu_set_vow_drr_dbg(struct mt7996_dev *dev, u32 val)
 		.val = cpu_to_le32(val),
 	};
 
-	if (val & ~VOW_DRR_DBG_FLAGS)
-		return -EINVAL;
-
 	return mt76_mcu_send_msg(&dev->mt76, MCU_WM_UNI_CMD(VOW), &req,
 				 sizeof(req), true);
 }
diff --git a/mt7996/mtk_mcu.h b/mt7996/mtk_mcu.h
index 085aa641..628663ed 100644
--- a/mt7996/mtk_mcu.h
+++ b/mt7996/mtk_mcu.h
@@ -1144,30 +1144,6 @@ enum muru_vendor_ctrl {
 	MU_CTRL_DL_USER_CNT,
 	MU_CTRL_UL_USER_CNT,
 };
-
-enum {
-	VOW_DRR_DBG_DUMP_BMP = BIT(0),
-	VOW_DRR_DBG_EST_AT_PRINT = BIT(1),
-	VOW_DRR_DBG_ADJ_GLOBAL_THLD = BIT(21),
-	VOW_DRR_DBG_PRN_LOUD = BIT(22),
-	VOW_DRR_DBG_PRN_ADJ_STA = BIT(23),
-	VOW_DRR_DBG_FIX_CR = GENMASK(27, 24),
-	VOW_DRR_DBG_CLR_FIX_CR = BIT(28),
-	VOW_DRR_DBG_DISABLE = BIT(29),
-	VOW_DRR_DBG_DUMP_CR = BIT(30),
-	VOW_DRR_DBG_PRN = BIT(31)
-};
-
-#define VOW_DRR_DBG_FLAGS (VOW_DRR_DBG_DUMP_BMP |	\
-			  VOW_DRR_DBG_EST_AT_PRINT |	\
-			  VOW_DRR_DBG_ADJ_GLOBAL_THLD |	\
-			  VOW_DRR_DBG_PRN_LOUD |	\
-			  VOW_DRR_DBG_PRN_ADJ_STA |	\
-			  VOW_DRR_DBG_FIX_CR |		\
-			  VOW_DRR_DBG_CLR_FIX_CR |	\
-			  VOW_DRR_DBG_DISABLE |		\
-			  VOW_DRR_DBG_DUMP_CR |		\
-			  VOW_DRR_DBG_PRN)
 #endif
 
 enum {
-- 
2.45.2

