From 31f766a480ca2f9d6c0e5720416213d47302eb1b Mon Sep 17 00:00:00 2001
From: MeiChia Chiu <MeiChia.Chiu@mediatek.com>
Date: Tue, 7 May 2024 15:47:23 +0800
Subject: [PATCH 09/95] mtk: mt76: mt7996: Add support for EMLSR

1. Register the EMLSR capability
2. Set the EML capability of the station to firmware
3. Process the EML Operating Mode Notification frame

Signed-off-by: MeiChia Chiu <MeiChia.Chiu@mediatek.com>
---
 mt76_connac_mcu.h |  8 +++++
 mt7996/init.c     |  1 +
 mt7996/mcu.c      | 55 ++++++++++++++++++++++++++++++++++
 mt7996/mt7996.h   | 20 +++++++++++++
 mt7996/vendor.c   | 75 +++++++++++++++++++++++++++++++++++++++++++++++
 mt7996/vendor.h   | 15 ++++++++++
 6 files changed, 174 insertions(+)

diff --git a/mt76_connac_mcu.h b/mt76_connac_mcu.h
index 5e741f92..9104be47 100644
--- a/mt76_connac_mcu.h
+++ b/mt76_connac_mcu.h
@@ -628,6 +628,13 @@ struct sta_rec_tx_proc {
 	__le32 flag;
 } __packed;
 
+struct sta_rec_eml_op {
+	__le16 tag;
+	__le16 len;
+	u8 bitmap;
+	u8 link_ant_num[3];
+} __packed;
+
 /* wtbl_rec */
 
 struct wtbl_req_hdr {
@@ -832,6 +839,7 @@ enum {
 	STA_REC_PN_INFO = 0x26,
 	STA_REC_KEY_V3 = 0x27,
 	STA_REC_HDRT = 0x28,
+	STA_REC_EML_OP = 0x29,
 	STA_REC_HDR_TRANS = 0x2B,
 	STA_REC_TX_CAP = 0x2f,
 	STA_REC_MAX_NUM
diff --git a/mt7996/init.c b/mt7996/init.c
index c7a5ea16..b3f76b0b 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -104,6 +104,7 @@ static const struct wiphy_iftype_ext_capab mt7996_iftypes_ext_capa[] = {
 		.extended_capabilities = mt7996_if_types_ext_capa,
 		.extended_capabilities_mask = mt7996_if_types_ext_capa,
 		.extended_capabilities_len = sizeof(mt7996_if_types_ext_capa),
+		.eml_capabilities = IEEE80211_EML_CAP_EMLSR_SUPP,
 		.mld_capa_and_ops = 2,
 		/* the max number of simultaneous links is defined as the
 		 * maximum number of affiliated APs minus 1.
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 27abe7fd..f135f94b 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -6509,6 +6509,61 @@ int mt7996_mcu_set_vow_feature_ctrl(struct mt7996_phy *phy)
 	                         &req, sizeof(req), true);
 }
 
+int mt7996_mcu_set_eml_omn(struct ieee80211_vif *vif,
+			   u8 link_id,
+			   struct ieee80211_sta *sta,
+			   struct mt7996_dev *dev,
+			   struct mt7996_eml_omn *eml_omn)
+{
+#define EML_OMN_CONTROL_EMLSR_MODE	0x01
+	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
+	struct mt7996_sta_link *msta_link;
+	struct mt7996_vif_link *mconf, *mconf_link;
+	struct sta_rec_eml_op *eml_op;
+	struct sk_buff *skb;
+	struct tlv *tlv;
+
+	msta_link = mt76_dereference(msta->link[link_id], &dev->mt76);
+	mconf = mt7996_vif_link(dev, vif, link_id);
+
+	if (!msta_link || !mconf)
+		return -EINVAL;
+
+	skb = __mt76_connac_mcu_alloc_sta_req(&dev->mt76,
+					      &mconf->mt76,
+					      &msta_link->wcid,
+					      MT7996_STA_UPDATE_MAX_SIZE);
+
+	if (IS_ERR(skb))
+		return PTR_ERR(skb);
+
+	tlv = mt76_connac_mcu_add_tlv(skb, STA_REC_EML_OP, sizeof(*eml_op));
+	eml_op = (struct sta_rec_eml_op *) tlv;
+	eml_op->bitmap = 0;
+
+	if (eml_omn->control & EML_OMN_CONTROL_EMLSR_MODE) {
+		unsigned long bitmap = (unsigned long) le16_to_cpu(eml_omn->bitmap);
+		unsigned int linkid;
+
+		for_each_set_bit(linkid, &bitmap, IEEE80211_MLD_MAX_NUM_LINKS) {
+			mconf_link = mt7996_vif_link(dev, vif, linkid);
+
+			if (!mconf_link)
+				continue;
+
+			eml_op->bitmap |= BIT(mconf_link->phy->mt76->band_idx);
+		}
+	}
+
+	mlo_dbg(mconf->phy, "link:%u, wcid:%d, control:%x, mode:%d, bmp:%x\n",
+		msta_link->wcid.link_id, msta_link->wcid.idx, eml_omn->control,
+		!!(eml_omn->control & EML_OMN_CONTROL_EMLSR_MODE),
+		eml_op->bitmap);
+
+	return mt76_mcu_skb_send_msg(&dev->mt76, skb,
+			MCU_WMWA_UNI_CMD(STA_REC_UPDATE), true);
+}
+
 #ifdef CONFIG_MTK_VENDOR
 void mt7996_set_wireless_vif(void *data, u8 *mac, struct ieee80211_vif *vif)
 {
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 8dfe1af8..fe375a31 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -436,6 +436,23 @@ enum {
 	SCS_ENABLE,
 };
 
+struct mt7996_eml_omn {
+	u8 dialog_token;
+	u8 control;
+	__le16 bitmap;
+	union {
+		struct {
+			u8 emlsr_para_update;
+		} emlsr_info;
+		struct {
+			u8 mcs_map_count_control;
+			u8 mcs_map_bw80[3];
+			u8 mcs_map_bw160[3];
+			u8 mcs_map_bw320[3];
+		} emlmr_info;
+	} u;
+} __packed;
+
 struct mt7996_wed_rro_addr {
 	u32 head_low;
 	u32 head_high : 4;
@@ -1200,6 +1217,9 @@ int mt7996_mcu_wtbl_update_hdr_trans(struct mt7996_dev *dev,
 				     struct mt7996_sta_link *msta_link);
 int mt7996_mcu_cp_support(struct mt7996_dev *dev, u8 mode);
 int mt7996_mcu_set_pp_en(struct mt7996_phy *phy, u8 mode, u16 bitmap);
+int mt7996_mcu_set_eml_omn(struct ieee80211_vif *vif, u8 link_id,
+			   struct ieee80211_sta *sta, struct mt7996_dev *dev,
+			   struct mt7996_eml_omn *eml_omn);
 #ifdef CONFIG_MAC80211_DEBUGFS
 void mt7996_sta_add_debugfs(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			    struct ieee80211_sta *sta, struct dentry *dir);
diff --git a/mt7996/vendor.c b/mt7996/vendor.c
index 0a15d050..f2b26483 100644
--- a/mt7996/vendor.c
+++ b/mt7996/vendor.c
@@ -120,6 +120,13 @@ beacon_ctrl_policy[NUM_MTK_VENDOR_ATTRS_BEACON_CTRL] = {
 	[MTK_VENDOR_ATTR_BEACON_CTRL_MODE] = { .type = NLA_U8 },
 };
 
+static const struct nla_policy
+eml_ctrl_policy[NUM_MTK_VENDOR_ATTRS_EML_CTRL] = {
+	[MTK_VENDOR_ATTR_EML_LINK_ID] = { .type = NLA_U8 },
+	[MTK_VENDOR_ATTR_EML_STA_ADDR] = { .type = NLA_BINARY },
+	[MTK_VENDOR_ATTR_EML_CTRL_STRUCT] = { .type = NLA_BINARY },
+};
+
 static const struct nla_policy
 csi_ctrl_policy[NUM_MTK_VENDOR_ATTRS_CSI_CTRL] = {
 	[MTK_VENDOR_ATTR_CSI_CTRL_BAND_IDX] = { .type = NLA_U8 },
@@ -1017,6 +1024,63 @@ static int mt7996_vendor_beacon_ctrl(struct wiphy *wiphy,
 
 	return 0;
 }
+
+static int mt7996_vendor_eml_ctrl(struct wiphy *wiphy, struct wireless_dev *wdev,
+				  const void *data, int data_len)
+{
+	struct ieee80211_hw *hw = wiphy_to_ieee80211_hw(wiphy);
+	struct ieee80211_vif *vif = wdev_to_ieee80211_vif(wdev);
+	struct ieee80211_sta *sta;
+	struct nlattr *tb[NUM_MTK_VENDOR_ATTRS_EML_CTRL];
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct mt7996_eml_omn *eml_omn;
+	u8 sta_addr[ETH_ALEN], link_id;
+	int err;
+
+	if (!ieee80211_vif_is_mld(vif))
+		return -EINVAL;
+
+	err = nla_parse(tb, MTK_VENDOR_ATTR_EML_CTRL_MAX, data, data_len,
+			eml_ctrl_policy, NULL);
+	if (err)
+		return err;
+
+	if (!tb[MTK_VENDOR_ATTR_EML_LINK_ID] || !tb[MTK_VENDOR_ATTR_EML_STA_ADDR])
+		return -EINVAL;
+
+	link_id = nla_get_u8(tb[MTK_VENDOR_ATTR_EML_LINK_ID]);
+
+	if (link_id >= IEEE80211_LINK_UNSPECIFIED)
+		return -EINVAL;
+
+	mutex_lock(&dev->mt76.mutex);
+	nla_memcpy(sta_addr, tb[MTK_VENDOR_ATTR_EML_STA_ADDR], ETH_ALEN);
+	sta = ieee80211_find_sta_by_ifaddr(hw, sta_addr, NULL);
+
+	if (!sta) {
+		err = -EINVAL;
+		goto out;
+	}
+
+	if (tb[MTK_VENDOR_ATTR_EML_CTRL_STRUCT]) {
+		eml_omn = kzalloc(sizeof(struct mt7996_eml_omn), GFP_KERNEL);
+		if (!eml_omn) {
+			err = -ENOMEM;
+			goto out;
+		}
+
+		nla_memcpy(eml_omn, tb[MTK_VENDOR_ATTR_EML_CTRL_STRUCT],
+			   sizeof(struct mt7996_eml_omn));
+
+		err = mt7996_mcu_set_eml_omn(vif, link_id, sta, dev, eml_omn);
+		kfree(eml_omn);
+	}
+
+out:
+	mutex_unlock(&dev->mt76.mutex);
+	return err;
+}
+
 static int mt7996_vendor_csi_ctrl(struct wiphy *wiphy,
 				  struct wireless_dev *wdev,
 				  const void *data,
@@ -1381,6 +1445,17 @@ static const struct wiphy_vendor_command mt7996_vendor_commands[] = {
 		.policy = csi_ctrl_policy,
 		.maxattr = MTK_VENDOR_ATTR_CSI_CTRL_MAX,
 	},
+	{
+		.info = {
+			.vendor_id = MTK_NL80211_VENDOR_ID,
+			.subcmd = MTK_NL80211_VENDOR_SUBCMD_EML_CTRL,
+		},
+		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV |
+			 WIPHY_VENDOR_CMD_NEED_RUNNING,
+		.doit = mt7996_vendor_eml_ctrl,
+		.policy = eml_ctrl_policy,
+		.maxattr = MTK_VENDOR_ATTR_EML_CTRL_MAX,
+	},
 };
 
 void mt7996_vendor_register(struct mt7996_phy *phy)
diff --git a/mt7996/vendor.h b/mt7996/vendor.h
index 7485ea22..068fca9c 100644
--- a/mt7996/vendor.h
+++ b/mt7996/vendor.h
@@ -18,6 +18,7 @@ enum mtk_nl80211_vendor_subcmds {
 	MTK_NL80211_VENDOR_SUBCMD_BACKGROUND_RADAR_CTRL = 0xcb,
 	MTK_NL80211_VENDOR_SUBCMD_PP_CTRL = 0xcc,
 	MTK_NL80211_VENDOR_SUBCMD_BEACON_CTRL = 0xcd,
+	MTK_NL80211_VENDOR_SUBCMD_EML_CTRL = 0xd3,
 };
 
 enum mtk_vendor_attr_edcca_ctrl {
@@ -242,6 +243,20 @@ enum mtk_vendor_attr_beacon_ctrl {
 		NUM_MTK_VENDOR_ATTRS_BEACON_CTRL - 1
 };
 
+enum mtk_vendor_attr_eml_ctrl {
+
+	MTK_VENDOR_ATTR_EML_CTRL_UNSPEC,
+
+	MTK_VENDOR_ATTR_EML_LINK_ID,
+	MTK_VENDOR_ATTR_EML_STA_ADDR,
+	MTK_VENDOR_ATTR_EML_CTRL_STRUCT,
+
+	/* keep last */
+	NUM_MTK_VENDOR_ATTRS_EML_CTRL,
+	MTK_VENDOR_ATTR_EML_CTRL_MAX =
+		NUM_MTK_VENDOR_ATTRS_EML_CTRL - 1
+};
+
 enum mtk_vendor_attr_csi_ctrl {
 	MTK_VENDOR_ATTR_CSI_CTRL_UNSPEC,
 
-- 
2.45.2

