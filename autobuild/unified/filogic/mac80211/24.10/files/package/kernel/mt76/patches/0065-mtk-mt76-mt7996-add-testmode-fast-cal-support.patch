From 6ffc55e064320ad27c52eebae8b43b8bf3a8d7fb Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Wed, 19 Feb 2025 22:54:55 +0800
Subject: [PATCH 65/95] mtk: mt76: mt7996: add testmode fast cal support

add testmode fast cal support
Usage:
mt76-test phy0 set fast_cal=none/tx_verify (perform full cal)
mt76-test phy0 set fast_cal=rx_verify (skip tx cal items)
mt76-test phy0 set fast_cal=power_cal (skip dpd cal)

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>fast cal
---
 mt76.h            |  2 ++
 mt7996/testmode.c | 23 +++++++++++++++++++++++
 mt7996/testmode.h |  1 +
 testmode.c        |  9 +++++++--
 testmode.h        | 24 ++++++++++++++++++++++++
 tools/fields.c    |  9 +++++++++
 6 files changed, 66 insertions(+), 2 deletions(-)

diff --git a/mt76.h b/mt76.h
index bcafe96c..47bc00d4 100644
--- a/mt76.h
+++ b/mt76.h
@@ -918,6 +918,8 @@ struct mt76_testmode_data {
 
 	u16 rx_gain_bitmap;
 	bool rx_gain_done;
+
+	u8 fast_cal;
 };
 
 enum {
diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index 87740b8e..3023be30 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -286,6 +286,9 @@ void
 mt7996_tm_update_channel(struct mt7996_phy *phy)
 {
 #define CHAN_FREQ_BW_80P80_TAG		(SET_ID(CHAN_FREQ) | BIT(16))
+#define FAST_CAL_NONE			BIT(20)
+#define FAST_CAL_RX			BIT(21)
+#define FAST_CAL_POWER			BIT(22)
 	struct mt7996_dev *dev = phy->dev;
 	struct mt76_testmode_data *td = &phy->mt76->test;
 	struct cfg80211_chan_def *chandef = &phy->mt76->chandef;
@@ -335,6 +338,26 @@ mt7996_tm_update_channel(struct mt7996_phy *phy)
 	mt7996_tm_set(dev, SET_ID(PRIMARY_CH), pri_sel);
 	mt7996_tm_set(dev, SET_ID(BAND), mt7996_tm_band_mapping(chan->band));
 
+	if (mt76_testmode_param_present(td, MT76_TM_ATTR_FAST_CAL)) {
+		switch (td->fast_cal) {
+		case MT76_TM_FAST_CAL_TYPE_RX:
+			mt7996_tm_set(dev, SET_ID(CAL_BITMAP), FAST_CAL_RX);
+			dev_info(dev->mt76.dev, "apply RX fast cal (skip TX cal)\n");
+			break;
+		case MT76_TM_FAST_CAL_TYPE_POWER:
+			mt7996_tm_set(dev, SET_ID(CAL_BITMAP), FAST_CAL_POWER);
+			dev_info(dev->mt76.dev, "apply power fast cal (skip DPD cal)\n");
+			break;
+		case MT76_TM_FAST_CAL_TYPE_NONE:
+		case MT76_TM_FAST_CAL_TYPE_TX:
+		default:
+			/* same as not setting any cal bitmap */
+			mt7996_tm_set(dev, SET_ID(CAL_BITMAP), FAST_CAL_NONE);
+			dev_info(dev->mt76.dev, "apply full cal\n");
+			break;
+		}
+	}
+
 	/* trigger switch channel calibration */
 	mt7996_tm_set(dev, SET_ID(CHAN_FREQ), chandef->center_freq1 * 1000);
 }
diff --git a/mt7996/testmode.h b/mt7996/testmode.h
index b95a0ac8..9d381196 100644
--- a/mt7996/testmode.h
+++ b/mt7996/testmode.h
@@ -174,6 +174,7 @@ enum {
 	RF_TEST_ID_SET_TX_PATH = 113,
 	RF_TEST_ID_SET_NSS = 114,
 	RF_TEST_ID_SET_ANT_MASK = 115,
+	RF_TEST_ID_SET_CAL_BITMAP = 125,
 	RF_TEST_ID_SET_IBF_ENABLE = 126,
 	RF_TEST_ID_SET_EBF_ENABLE = 127,
 	RF_TEST_ID_GET_TX_POWER = 136,
diff --git a/testmode.c b/testmode.c
index 16c23ef9..a0e29694 100644
--- a/testmode.c
+++ b/testmode.c
@@ -42,6 +42,7 @@ const struct nla_policy mt76_tm_policy[NUM_MT76_TM_ATTRS] = {
 	[MT76_TM_ATTR_LM_CBW] = { .type = NLA_U8 },
 	[MT76_TM_ATTR_LM_STA_IDX] = { .type = NLA_U8 },
 	[MT76_TM_ATTR_LM_SEG_TIMEOUT] = { .type = NLA_U32 },
+	[MT76_TM_ATTR_FAST_CAL] = { .type = NLA_U8 },
 };
 EXPORT_SYMBOL_GPL(mt76_tm_policy);
 
@@ -873,7 +874,9 @@ int mt76_testmode_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	    mt76_tm_get_u8(tb[MT76_TM_ATTR_OFF_CH_SCAN_BW], &td->offchan_bw,
 			   NL80211_CHAN_WIDTH_20_NOHT, NL80211_CHAN_WIDTH_160) ||
 	    mt76_tm_get_u8(tb[MT76_TM_ATTR_IPI_THRESHOLD], &td->ipi_threshold, 0, 10) ||
-	    mt76_tm_get_u8(tb[MT76_TM_ATTR_IPI_RESET], &td->ipi_reset, 0, 1))
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_IPI_RESET], &td->ipi_reset, 0, 1) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_FAST_CAL], &td->fast_cal,
+			   0, MT76_TM_FAST_CAL_TYPE_MAX))
 		goto out;
 
 	if (tb[MT76_TM_ATTR_TX_LENGTH]) {
@@ -1140,7 +1143,9 @@ int mt76_testmode_dump(struct ieee80211_hw *hw, struct sk_buff *msg,
 	    (mt76_testmode_param_present(td, MT76_TM_ATTR_TX_PRI_SEL) &&
 	     nla_put_u8(msg, MT76_TM_ATTR_TX_PRI_SEL, td->tx_pri_sel)) ||
 	    (mt76_testmode_param_present(td, MT76_TM_ATTR_FREQ_OFFSET) &&
-	     nla_put_u32(msg, MT76_TM_ATTR_FREQ_OFFSET, td->freq_offset)))
+	     nla_put_u32(msg, MT76_TM_ATTR_FREQ_OFFSET, td->freq_offset)) ||
+	    (mt76_testmode_param_present(td, MT76_TM_ATTR_FAST_CAL) &&
+	     nla_put_u8(msg, MT76_TM_ATTR_FAST_CAL, td->fast_cal)))
 		goto out;
 
 	if (mt76_testmode_param_present(td, MT76_TM_ATTR_TX_POWER)) {
diff --git a/testmode.h b/testmode.h
index 1360c20e..9b763cc2 100644
--- a/testmode.h
+++ b/testmode.h
@@ -90,6 +90,9 @@
  *
  * @MT76_TM_ATTR_RADIO_IDX: radio index used for single multi-radio wiphy (u32)
  *
+ * @MT76_TM_ATTR_FAST_CAL: perform a fast calibration for a channel switch speed boost
+ *	(u8, see &enum mt76_testmode_fast_cal_type)
+ *
  */
 enum mt76_testmode_attr {
 	MT76_TM_ATTR_UNSPEC,
@@ -165,6 +168,8 @@ enum mt76_testmode_attr {
 
 	MT76_TM_ATTR_RADIO_IDX,
 
+	MT76_TM_ATTR_FAST_CAL,
+
 	/* keep last */
 	NUM_MT76_TM_ATTRS,
 	MT76_TM_ATTR_MAX = NUM_MT76_TM_ATTRS - 1,
@@ -406,4 +411,23 @@ enum mt76_testmode_list_act {
 	MT76_TM_LM_ACT_MAX = NUM_MT76_TM_LM_ACT - 1,
 };
 
+/**
+ * enum mt76_testmode_fast_cal_type - fast channel calibration type
+ *
+ * @MT76_TM_FAST_CAL_TYPE_NONE: perform full calibration
+ * @MT76_TM_FAST_CAL_TYPE_TX: fast calibration for TX verification
+ * @MT76_TM_FAST_CAL_TYPE_RX: fast calibration for RX verification
+ * @MT76_TM_FAST_CAL_TYPE_POWER: fast calibration for power calibration
+ */
+enum mt76_testmode_fast_cal_type {
+	MT76_TM_FAST_CAL_TYPE_NONE,
+	MT76_TM_FAST_CAL_TYPE_TX,
+	MT76_TM_FAST_CAL_TYPE_RX,
+	MT76_TM_FAST_CAL_TYPE_POWER,
+
+	/* keep last */
+	NUM_MT76_TM_FAST_CAL_TYPE,
+	MT76_TM_FAST_CAL_TYPE_MAX = NUM_MT76_TM_FAST_CAL_TYPE - 1,
+};
+
 #endif
diff --git a/tools/fields.c b/tools/fields.c
index b05e1a72..8f2f364b 100644
--- a/tools/fields.c
+++ b/tools/fields.c
@@ -93,6 +93,13 @@ static const char * const testmode_list_act[] = {
 	[MT76_TM_LM_ACT_DUMP_SEGMENT] = "dump_seg",
 };
 
+static const char * const testmode_fast_cal[] = {
+	[MT76_TM_FAST_CAL_TYPE_NONE] = "none",
+	[MT76_TM_FAST_CAL_TYPE_TX] = "tx_verify",
+	[MT76_TM_FAST_CAL_TYPE_RX] = "rx_verify",
+	[MT76_TM_FAST_CAL_TYPE_POWER] = "power_cal",
+};
+
 static void print_enum(const struct tm_field *field, struct nlattr *attr)
 {
 	unsigned int i = nla_get_u8(attr);
@@ -475,6 +482,7 @@ static const struct tm_field testdata_fields[NUM_MT76_TM_ATTRS] = {
 	FIELD_ENUM(LM_CBW, "lm_cbw", testmode_bw),
 	FIELD(u8, LM_STA_IDX, "lm_sta_idx"),
 	FIELD(u32, LM_SEG_TIMEOUT, "lm_seg_timeout"),
+	FIELD_ENUM(FAST_CAL, "fast_cal", testmode_fast_cal),
 	FIELD_MAC(MAC_ADDRS, "mac_addrs"),
 	FIELD_NESTED_RO(STATS, stats, "",
 			.print_extra = print_extra_stats),
@@ -523,6 +531,7 @@ static struct nla_policy testdata_policy[NUM_MT76_TM_ATTRS] = {
 	[MT76_TM_ATTR_LM_CBW] = { .type = NLA_U8 },
 	[MT76_TM_ATTR_LM_STA_IDX] = { .type = NLA_U8 },
 	[MT76_TM_ATTR_LM_SEG_TIMEOUT] = { .type = NLA_U32 },
+	[MT76_TM_ATTR_FAST_CAL] = { .type = NLA_U8 },
 };
 
 const struct tm_field msg_field = {
-- 
2.45.2

