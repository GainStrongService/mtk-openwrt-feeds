From 1cef8ce3c85c79f4d8943a05f8b5520d6b5fc4a4 Mon Sep 17 00:00:00 2001
From: Allen Ye <allen.ye@mediatek.com>
Date: Tue, 8 Oct 2024 19:58:14 +0800
Subject: [PATCH 49/75] mtk: mt76: mt7996: Refactor handling vht operating mode
 notification

Refactor handling vht operating mode notification.

Fix incorrect operating-mode setting during STA addition.
Specifically, STA_REC_RA command provides operating-mode fields, which were not used.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>
---
 mt7996/mac.c |  9 ++++++---
 mt7996/mcu.c | 36 +++++++++++++++++++++++++++++++++---
 mt7996/mcu.h |  1 +
 3 files changed, 40 insertions(+), 6 deletions(-)

diff --git a/mt7996/mac.c b/mt7996/mac.c
index 35ae8a00..131b4668 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -2854,9 +2854,12 @@ void mt7996_mac_sta_rc_work(struct work_struct *work)
 			continue;
 		}
 
-		if (changed & (IEEE80211_RC_SUPP_RATES_CHANGED |
-			       IEEE80211_RC_NSS_CHANGED |
-			       IEEE80211_RC_BW_CHANGED))
+		if (changed & IEEE80211_RC_VHT_OMN_CHANGED)
+			mt7996_mcu_set_fixed_field(dev, mconf, link_sta, mlink, NULL,
+						   RATE_PARAM_VHT_OMN_UPDATE);
+		else if (changed & (IEEE80211_RC_SUPP_RATES_CHANGED |
+				    IEEE80211_RC_NSS_CHANGED |
+				    IEEE80211_RC_BW_CHANGED))
 			mt7996_mcu_add_rate_ctrl(dev, conf, mconf, link_sta, mlink, true);
 
 		if (changed & IEEE80211_RC_SMPS_CHANGED)
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 3c691874..590700d8 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -3036,6 +3036,31 @@ int mt7996_mcu_set_fixed_field(struct mt7996_dev *dev,
 	case RATE_PARAM_MMPS_UPDATE:
 		ra->mmps_mode = mt7996_mcu_get_mmps_mode(link_sta->smps_mode);
 		break;
+	case RATE_PARAM_VHT_OMN_UPDATE:
+		ra->op_mode = true;
+		switch (link_sta->bandwidth) {
+			case IEEE80211_STA_RX_BW_20:
+				ra->op_vht_chan_width =
+					IEEE80211_OPMODE_NOTIF_CHANWIDTH_20MHZ;
+				break;
+			case IEEE80211_STA_RX_BW_40:
+				ra->op_vht_chan_width =
+					IEEE80211_OPMODE_NOTIF_CHANWIDTH_40MHZ;
+				break;
+			case IEEE80211_STA_RX_BW_80:
+				ra->op_vht_chan_width =
+					IEEE80211_OPMODE_NOTIF_CHANWIDTH_80MHZ;
+				break;
+			case IEEE80211_STA_RX_BW_160:
+				ra->op_vht_chan_width =
+					IEEE80211_OPMODE_NOTIF_CHANWIDTH_160MHZ;
+				break;
+			default:
+				return 0;
+		}
+		ra->op_vht_rx_nss = link_sta->rx_nss > 0 ? link_sta->rx_nss - 1 : 0;
+		ra->op_vht_rx_nss_type = 0;
+		break;
 	default:
 		break;
 	}
@@ -3140,9 +3165,11 @@ mt7996_mcu_sta_rate_ctrl_tlv(struct sk_buff *skb, struct mt7996_dev *dev,
 			     struct ieee80211_link_sta *link_sta)
 {
 #define INIT_RCPI 180
+	enum ieee80211_sta_rx_bandwidth cap_bw = ieee80211_link_sta_cap_bw(link_sta);
 	struct mt76_phy *mphy = mconf->phy->mt76;
 	struct cfg80211_chan_def *chandef = &mphy->chandef;
 	struct cfg80211_bitrate_mask *mask = &mconf->bitrate_mask;
+	u8 cap_nss = ieee80211_link_sta_cap_nss(link_sta);
 	enum nl80211_band band = chandef->chan->band;
 	struct sta_rec_ra_uni *ra;
 	struct tlv *tlv;
@@ -3156,10 +3183,13 @@ mt7996_mcu_sta_rate_ctrl_tlv(struct sk_buff *skb, struct mt7996_dev *dev,
 	ra->auto_rate = true;
 	ra->phy_mode = mt76_connac_get_phy_mode(mphy, conf->vif, band, link_sta);
 	ra->channel = chandef->chan->hw_value;
-	ra->bw = (link_sta->bandwidth == IEEE80211_STA_RX_BW_320) ?
-		 CMD_CBW_320MHZ : link_sta->bandwidth;
-	ra->phy.bw = ra->bw;
+	ra->bw = mt76_connac_chan_bw(chandef);
+	ra->phy.bw = (cap_bw == IEEE80211_STA_RX_BW_320) ? CMD_CBW_320MHZ : cap_bw;
 	ra->mmps_mode = mt7996_mcu_get_mmps_mode(link_sta->smps_mode);
+	ra->op_mode = cap_bw != link_sta->bandwidth || cap_nss != link_sta->rx_nss;
+	ra->op_vht_chan_width = link_sta->bandwidth;
+	ra->op_vht_rx_nss = link_sta->rx_nss - 1;
+	ra->op_vht_rx_nss_type = 0;
 
 	if (supp_rate) {
 		supp_rate &= mask->control[band].legacy;
diff --git a/mt7996/mcu.h b/mt7996/mcu.h
index c1dd3a59..368141b0 100644
--- a/mt7996/mcu.h
+++ b/mt7996/mcu.h
@@ -989,6 +989,7 @@ enum {
 };
 
 enum {
+	RATE_PARAM_VHT_OMN_UPDATE = 1,
 	RATE_PARAM_FIXED = 3,
 	RATE_PARAM_MMPS_UPDATE = 5,
 	RATE_PARAM_FIXED_HE_LTF = 7,
-- 
2.45.2

