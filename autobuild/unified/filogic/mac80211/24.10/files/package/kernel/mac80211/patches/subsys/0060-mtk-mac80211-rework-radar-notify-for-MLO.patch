From 489cef6d972f39c482bc4a8ae6782dc712f0293b Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Mon, 27 May 2024 13:23:59 +0800
Subject: [PATCH 60/87] mtk: mac80211: rework radar notify for MLO

Rework radar notify for MLO.
A netdev/wdev containing 5G link is required for all radar events since
userspace daemon will only process the event with the first netdev
(might not include 5G links) if netdev/wdev is not specified.
For instance, the radar event will be ignored in the following
configuration.
wdev 1: MLD AP (2+6G)
wdev 2: MLD AP (2+5+6G)

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>

There is a chance that the DFS pre-CAC check, triggered by a non-5G interface,
is executed during the switching time of 5G interfaces.
In this case, cfg80211_any_wiphy_oper_chan of target channel  will return 0,
as the 5G interface is not yet operating on the target channel.
Therefore, a pre-CAC expired event of the target channel will be issued to hostapd.
This causes the AP to re-CAC the target channel after switching to it,
which usually occurs after background radar CAC is completed.

=> Avoid scheduling dfs channel update work for non-5G link.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 include/net/cfg80211.h | 20 ++++++++++++++++++++
 net/wireless/chan.c    | 42 ++++++++++++++----------------------------
 net/wireless/mlme.c    | 15 +++++----------
 net/wireless/nl80211.c | 34 +++++++++++++++++++++-------------
 net/wireless/nl80211.h |  3 +--
 net/wireless/reg.c     |  2 +-
 6 files changed, 62 insertions(+), 54 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 49dffd50..a1e200ef 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -6419,6 +6419,26 @@ static inline void WARN_INVALID_LINK_ID(struct wireless_dev *wdev,
 		if (!(link_info)->valid_links ||		\
 		    ((link_info)->valid_links & BIT(link_id)))
 
+static inline struct wireless_dev *
+wiphy_get_band_first_wdev(struct wiphy *wiphy, int band, unsigned int *link)
+{
+	struct wireless_dev *wdev;
+	struct cfg80211_chan_def *c;
+	unsigned int link_id;
+
+	list_for_each_entry(wdev, &wiphy->wdev_list, list) {
+		for_each_valid_link(wdev, link_id) {
+			c = wdev_chandef(wdev, link_id);
+			if (c && c->chan && c->chan->band == band) {
+				*link = link_id;
+				return wdev;
+			}
+		}
+	}
+
+	return NULL;
+}
+
 /**
  * DOC: Utility functions
  *
diff --git a/net/wireless/chan.c b/net/wireless/chan.c
index f8dffd64..00ea372f 100644
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -1723,31 +1723,18 @@ bool cfg80211_any_usable_channels(struct wiphy *wiphy,
 }
 EXPORT_SYMBOL(cfg80211_any_usable_channels);
 
-static void cfg80211_sta_radar_notify(struct wiphy *wiphy,
-				      const struct cfg80211_chan_def *chandef,
-				      enum nl80211_radar_event event)
-{
-	struct wireless_dev *wdev;
-
-	list_for_each_entry(wdev, &wiphy->wdev_list, list) {
-		if (cfg80211_chandef_dfs_required(wiphy, chandef, wdev->iftype) > 0) {
-			nl80211_radar_notify(wiphy_to_rdev(wiphy), chandef,
-					     event, wdev->netdev, GFP_KERNEL);
-			return;
-		}
-	}
-}
-
 void cfg80211_sta_update_dfs_state(struct wireless_dev *wdev,
 				   const struct cfg80211_chan_def *bss_chandef,
 				   const struct cfg80211_chan_def *csa_chandef,
 				   bool associated)
 {
+	struct wiphy *wiphy = wdev->wiphy;
+	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
 	bool csa_active = !!csa_chandef;
 	enum nl80211_dfs_state dfs_state = NL80211_DFS_USABLE;
 	enum nl80211_radar_event event = NL80211_RADAR_STA_CAC_EXPIRED;
 
-	lockdep_assert_wiphy(wdev->wiphy);
+	lockdep_assert_wiphy(wiphy);
 
 	if (!bss_chandef || !bss_chandef->chan ||
 	    bss_chandef->chan->band != NL80211_BAND_5GHZ)
@@ -1755,17 +1742,17 @@ void cfg80211_sta_update_dfs_state(struct wireless_dev *wdev,
 
 	/* assume csa channel is cac completed */
 	if (csa_active &&
-	    (cfg80211_chandef_dfs_usable(wdev->wiphy, csa_chandef) ||
-	    cfg80211_chandef_dfs_available(wdev->wiphy, csa_chandef))) {
-		cfg80211_set_dfs_state(wdev->wiphy, csa_chandef, NL80211_DFS_AVAILABLE);
-		cfg80211_sta_radar_notify(wdev->wiphy, csa_chandef,
-					  NL80211_RADAR_STA_CAC_SKIPPED);
+	    (cfg80211_chandef_dfs_usable(wiphy, csa_chandef) ||
+	    cfg80211_chandef_dfs_available(wiphy, csa_chandef))) {
+		cfg80211_set_dfs_state(wiphy, csa_chandef, NL80211_DFS_AVAILABLE);
+		nl80211_radar_notify(rdev, csa_chandef,
+				     NL80211_RADAR_STA_CAC_SKIPPED, GFP_KERNEL);
 		netdev_info(wdev->netdev, "Set CSA channel's DFS state to available\n");
 	}
 
 	/* avoid updating the dfs state during nop */
-	if (!cfg80211_chandef_dfs_usable(wdev->wiphy, bss_chandef) &&
-	    !cfg80211_chandef_dfs_available(wdev->wiphy, bss_chandef))
+	if (!cfg80211_chandef_dfs_usable(wiphy, bss_chandef) &&
+	    !cfg80211_chandef_dfs_available(wiphy, bss_chandef))
 		return;
 
 	if (associated && !csa_active) {
@@ -1777,13 +1764,12 @@ void cfg80211_sta_update_dfs_state(struct wireless_dev *wdev,
 	 * when other interfaces still operate on this channel
 	 */
 	if (dfs_state == NL80211_DFS_USABLE &&
-	    (cfg80211_is_wiphy_oper_chan(wdev->wiphy, bss_chandef->chan) ||
-	     cfg80211_offchan_chain_is_active(wiphy_to_rdev(wdev->wiphy),
-					      bss_chandef->chan)))
+	    (cfg80211_is_wiphy_oper_chan(wiphy, bss_chandef->chan) ||
+	     cfg80211_offchan_chain_is_active(rdev, bss_chandef->chan)))
 		return;
 
-	cfg80211_set_dfs_state(wdev->wiphy, bss_chandef, dfs_state);
-	cfg80211_sta_radar_notify(wdev->wiphy, bss_chandef, event);
+	cfg80211_set_dfs_state(wiphy, bss_chandef, dfs_state);
+	nl80211_radar_notify(rdev, bss_chandef, event, GFP_KERNEL);
 
 	if (csa_active)
 		netdev_info(wdev->netdev, "Set origin channel's DFS state to usable\n");
diff --git a/net/wireless/mlme.c b/net/wireless/mlme.c
index 6ea81d58..d53ff8e1 100644
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -1058,8 +1058,7 @@ void cfg80211_dfs_channels_update_work(struct work_struct *work)
 							NL80211_CHAN_NO_HT);
 
 				nl80211_radar_notify(rdev, &chandef,
-						     radar_event, NULL,
-						     GFP_ATOMIC);
+						     radar_event, GFP_ATOMIC);
 
 				regulatory_propagate_dfs_state(wiphy, &chandef,
 							       c->dfs_state,
@@ -1102,7 +1101,7 @@ void __cfg80211_radar_event(struct wiphy *wiphy,
 
 	cfg80211_sched_dfs_chan_update(rdev);
 
-	nl80211_radar_notify(rdev, chandef, NL80211_RADAR_DETECTED, NULL, gfp);
+	nl80211_radar_notify(rdev, chandef, NL80211_RADAR_DETECTED, gfp);
 
 	memcpy(&rdev->radar_chandef, chandef, sizeof(struct cfg80211_chan_def));
 	queue_work(cfg80211_wq, &rdev->propagate_radar_detect_wk);
@@ -1151,7 +1150,7 @@ void cfg80211_cac_event(struct net_device *netdev,
 		return;
 	}
 
-	nl80211_radar_notify(rdev, chandef, event, netdev, gfp);
+	nl80211_radar_notify(rdev, chandef, event, gfp);
 }
 EXPORT_SYMBOL(cfg80211_cac_event);
 
@@ -1162,7 +1161,6 @@ __cfg80211_background_cac_event(struct cfg80211_registered_device *rdev,
 				enum nl80211_radar_event event)
 {
 	struct wiphy *wiphy = &rdev->wiphy;
-	struct net_device *netdev;
 
 	lockdep_assert_wiphy(&rdev->wiphy);
 
@@ -1178,13 +1176,11 @@ __cfg80211_background_cac_event(struct cfg80211_registered_device *rdev,
 		memcpy(&rdev->cac_done_chandef, chandef, sizeof(*chandef));
 		queue_work(cfg80211_wq, &rdev->propagate_cac_done_wk);
 		cfg80211_sched_dfs_chan_update(rdev);
-		wdev = rdev->background_radar_wdev;
 		rdev->background_cac_started = false;
 		break;
 	case NL80211_RADAR_CAC_ABORTED:
 		if (!cancel_delayed_work(&rdev->background_cac_done_wk))
 			return;
-		wdev = rdev->background_radar_wdev;
 		rdev->background_cac_started = false;
 		break;
 	case NL80211_RADAR_CAC_STARTED:
@@ -1194,8 +1190,7 @@ __cfg80211_background_cac_event(struct cfg80211_registered_device *rdev,
 		return;
 	}
 
-	netdev = wdev ? wdev->netdev : NULL;
-	nl80211_radar_notify(rdev, chandef, event, netdev, GFP_KERNEL);
+	nl80211_radar_notify(rdev, chandef, event, GFP_KERNEL);
 }
 
 static void
@@ -1290,7 +1285,7 @@ void cfg80211_background_radar_update_channel(struct wiphy *wiphy,
 
 	event = expand ? NL80211_RADAR_BACKGROUND_CHAN_EXPAND :
 			 NL80211_RADAR_BACKGROUND_CHAN_UPDATE;
-	nl80211_radar_notify(wiphy_to_rdev(wiphy), chandef, event, NULL, GFP_ATOMIC);
+	nl80211_radar_notify(wiphy_to_rdev(wiphy), chandef, event, GFP_ATOMIC);
 }
 EXPORT_SYMBOL(cfg80211_background_radar_update_channel);
 
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 9155cb06..47fd03ae 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -19718,7 +19718,8 @@ void cfg80211_ch_switch_notify(struct net_device *dev,
 	}
 
 	cfg80211_schedule_channels_check(wdev);
-	cfg80211_sched_dfs_chan_update(rdev);
+	if (chandef->chan && chandef->chan->band == NL80211_BAND_5GHZ)
+		cfg80211_sched_dfs_chan_update(rdev);
 
 	nl80211_ch_switch_notify(rdev, dev, link_id, chandef, GFP_KERNEL,
 				 NL80211_CMD_CH_SWITCH_NOTIFY, 0, false);
@@ -19798,12 +19799,22 @@ EXPORT_SYMBOL(cfg80211_bss_color_notify);
 void
 nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 		     const struct cfg80211_chan_def *chandef,
-		     enum nl80211_radar_event event,
-		     struct net_device *netdev, gfp_t gfp)
+		     enum nl80211_radar_event event, gfp_t gfp)
 {
+	struct wiphy *wiphy = &rdev->wiphy;
+	struct wireless_dev *wdev;
 	struct sk_buff *msg;
+	unsigned int link_id;
 	void *hdr;
 
+	/* Specifying a wdev containing a 5G link is necessary for MLO.
+	 * Otherwise, userspace will only process the radar event
+	 * with the first wdev, which may not have 5G links.
+	 */
+	wdev = wiphy_get_band_first_wdev(wiphy, NL80211_BAND_5GHZ, &link_id);
+	if (!wdev)
+		return;
+
 	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, gfp);
 	if (!msg)
 		return;
@@ -19817,15 +19828,12 @@ nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 	if (nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx))
 		goto nla_put_failure;
 
-	/* NOP and radar events don't need a netdev parameter */
-	if (netdev) {
-		struct wireless_dev *wdev = netdev->ieee80211_ptr;
-
-		if (nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex) ||
-		    nla_put_u64_64bit(msg, NL80211_ATTR_WDEV, wdev_id(wdev),
-				      NL80211_ATTR_PAD))
-			goto nla_put_failure;
-	}
+	if (nla_put_u32(msg, NL80211_ATTR_IFINDEX, wdev->netdev->ifindex) ||
+	    nla_put_u64_64bit(msg, NL80211_ATTR_WDEV, wdev_id(wdev),
+			      NL80211_ATTR_PAD) ||
+	    (wdev->valid_links &&
+	     nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, link_id)))
+		goto nla_put_failure;
 
 	if (nla_put_u32(msg, NL80211_ATTR_RADAR_EVENT, event))
 		goto nla_put_failure;
@@ -19835,7 +19843,7 @@ nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 
 	genlmsg_end(msg, hdr);
 
-	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(wiphy), msg, 0,
 				NL80211_MCGRP_MLME, gfp);
 	return;
 
diff --git a/net/wireless/nl80211.h b/net/wireless/nl80211.h
index ffaab9a9..ee68488e 100644
--- a/net/wireless/nl80211.h
+++ b/net/wireless/nl80211.h
@@ -114,8 +114,7 @@ int nl80211_send_mgmt(struct cfg80211_registered_device *rdev,
 void
 nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 		     const struct cfg80211_chan_def *chandef,
-		     enum nl80211_radar_event event,
-		     struct net_device *netdev, gfp_t gfp);
+		     enum nl80211_radar_event event, gfp_t gfp);
 
 void nl80211_send_ap_stopped(struct wireless_dev *wdev, unsigned int link_id);
 
diff --git a/net/wireless/reg.c b/net/wireless/reg.c
index 854140f1..67257b59 100644
--- a/net/wireless/reg.c
+++ b/net/wireless/reg.c
@@ -4293,7 +4293,7 @@ void regulatory_propagate_dfs_state(struct wiphy *wiphy,
 			cfg80211_check_and_end_cac(rdev);
 		}
 
-		nl80211_radar_notify(rdev, chandef, event, NULL, GFP_KERNEL);
+		nl80211_radar_notify(rdev, chandef, event, GFP_KERNEL);
 	}
 }
 
-- 
2.45.2

