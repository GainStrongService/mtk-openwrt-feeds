From 11a3b6226262f86c96ccfad5a284356769b47a16 Mon Sep 17 00:00:00 2001
From: Shayne Chen <shayne.chen@mediatek.com>
Date: Mon, 4 Dec 2023 11:57:38 +0800
Subject: [PATCH 081/146] mtk: mt76: mt7996: rework TXS for multi-link support

This is a preliminary patch to add MLO support for mt7996 chipsets.

The wcidx and band idx in the TXS are sometimes mismatched
since FW will select a link to TX based on its algorithm.
That is, the wcidx in the TXS would be the one
registered by the driver rather than the actual TXed wcidx.
However, the band idx in the TXS is the actual TXed band.
Therefore, we should get the driver-registered wcid in order
to notify the driver that the packet has been acked; otherwise,
the driver will be unable to match the TXed packet and its TXS.

Co-developed-by: Bo Jiao <Bo.Jiao@mediatek.com>
Signed-off-by: Bo Jiao <Bo.Jiao@mediatek.com>
Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>
---
 mt7996/mac.c    |  4 ++--
 mt7996/main.c   |  1 +
 mt7996/mt7996.h | 34 ++++++++++++++++++++++++++++++++++
 3 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/mt7996/mac.c b/mt7996/mac.c
index ec4d871f..5efbbcd5 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -1218,7 +1218,7 @@ mt7996_mac_add_txs_skb(struct mt7996_dev *dev, struct mt76_wcid *wcid,
 		struct ieee80211_sta *sta;
 		u8 tid;
 
-		sta = container_of((void *)wcid, struct ieee80211_sta, drv_priv);
+		sta = wcid_to_sta(wcid);
 		tid = FIELD_GET(MT_TXS0_TID, txs);
 		ieee80211_refresh_tx_agg_session_timer(sta, tid);
 	}
@@ -1358,7 +1358,7 @@ static void mt7996_mac_add_txs(struct mt7996_dev *dev, void *data)
 	if (!wcid->sta)
 		goto out;
 
-	mlink = container_of(wcid, struct mt7996_link_sta, wcid);
+	mlink = wcid_to_mlink(wcid);
 	spin_lock_bh(&dev->mt76.sta_poll_lock);
 	if (list_empty(&mlink->wcid.poll_list))
 		list_add_tail(&mlink->wcid.poll_list, &dev->mt76.sta_poll_list);
diff --git a/mt7996/main.c b/mt7996/main.c
index 565656e1..ee3ff921 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -2367,6 +2367,7 @@ mt7996_assign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	}
 
 	ctx->nbss_assigned++;
+	mvif->band_to_link[phy->mt76->band_idx] = link_id;
 
 	if (mt7996_hw_phy(hw) == phy)
 		mvif->master_link_id = link_id;
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 1491e952..1485b62a 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -369,6 +369,8 @@ struct mt7996_vif {
 	u8 master_link_id;
 	u8 group_mld_id;
 	u8 mld_remap_id;
+
+	u8 band_to_link[__MT_MAX_BAND];
 };
 
 /* crash-dump */
@@ -856,6 +858,38 @@ wcid_to_mlink(struct mt76_wcid *wcid)
 	return container_of(wcid, struct mt7996_link_sta, wcid);
 }
 
+static inline struct mt76_wcid *
+mt7996_get_link_wcid(struct mt7996_dev *dev, u16 idx, u8 band_idx)
+{
+	struct mt7996_link_sta *mlink;
+	struct mt76_wcid *wcid;
+	u8 link_id;
+
+	if (!idx || idx >= ARRAY_SIZE(dev->mt76.wcid))
+		return NULL;
+
+	if (!mt7996_band_valid(dev, band_idx))
+		return NULL;
+
+	wcid = rcu_dereference(dev->mt76.wcid[idx]);
+	if (!wcid)
+		return NULL;
+
+	if (wcid->phy_idx == band_idx)
+		return wcid;
+
+	mlink = wcid_to_mlink(wcid);
+	link_id = mlink->sta->vif->band_to_link[band_idx];
+	if (link_id == IEEE80211_LINK_UNSPECIFIED)
+		return wcid;
+
+	mlink = rcu_dereference(mlink->sta->link[link_id]);
+	if (!mlink)
+		return wcid;
+
+	return &mlink->wcid;
+}
+
 extern const struct ieee80211_ops mt7996_ops;
 extern struct pci_driver mt7996_pci_driver;
 extern struct pci_driver mt7996_hif_driver;
-- 
2.45.2

