From 2636c5f9a98b0bd25852183e7d956d8a62728668 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 2 Jul 2024 14:28:26 +0800
Subject: [PATCH 70/87] mtk: mac80211: Add STA site link add support

Trigger deauth & reconnect when all the valid links of the STA receive
the information of link addition.
(max simultaneous link num in ML IE > the simultaneous link num stored
after association success)
For example, when the MLD AP completes the CAC or adds an additional link
via the link reconfiguration command, SQC/autotest might assume that the
MLD STA to react to it rather than ignoring it.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>

Do not check ifmgd->reporting_add_links when the connection is not MLO.

This fixes the problem that an MLD STA cannot associate with an MLD AP.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 net/mac80211/ieee80211_i.h |  1 +
 net/mac80211/mlme.c        | 42 ++++++++++++++++++++++++++++++++++++++
 net/wireless/scan.c        |  5 ++---
 3 files changed, 45 insertions(+), 3 deletions(-)

diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 7ae03666..a528c342 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -602,6 +602,7 @@ struct ieee80211_if_managed {
 
 	struct wiphy_delayed_work ml_reconf_work;
 	u16 removed_links;
+	u16 reporting_add_links;
 
 	/* TID-to-link mapping support */
 	struct wiphy_delayed_work ttlm_work;
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index f95a95b9..1ed98fc1 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -3799,6 +3799,7 @@ static void ieee80211_set_disassoc(struct ieee80211_sub_if_data *sdata,
 	sdata->u.mgd.removed_links = 0;
 	wiphy_delayed_work_cancel(sdata->local->hw.wiphy,
 				  &sdata->u.mgd.ml_reconf_work);
+	sdata->u.mgd.reporting_add_links = 0;
 
 	wiphy_work_cancel(sdata->local->hw.wiphy,
 			  &ifmgd->teardown_ttlm_work);
@@ -6277,6 +6278,34 @@ static bool ieee80211_rx_our_beacon(const u8 *tx_bssid,
 	return ether_addr_equal(tx_bssid, bss->transmitted_bss->bssid);
 }
 
+static void ieee80211_ml_link_add(struct ieee80211_link_data *link,
+				  struct ieee802_11_elems *elems)
+{
+	struct ieee80211_sub_if_data *sdata = link->sdata;
+	struct ieee80211_if_managed *ifmgd = &sdata->u.mgd;
+	int max_simul_links, cur_simul_links;
+	u16 mld_capa_op;
+
+	if (!ieee80211_vif_is_mld(&sdata->vif) || !elems->ml_basic ||
+	    !ifmgd->associated)
+		return;
+
+	mld_capa_op = ieee80211_mle_get_mld_capa_op((const void *)elems->ml_basic);
+	if (!mld_capa_op)
+		return;
+
+	/* TODO: parse RNR to check the capability of STA before reconnecting */
+	max_simul_links = mld_capa_op & IEEE80211_MLD_CAP_OP_MAX_SIMUL_LINKS;
+	cur_simul_links = sdata->vif.cfg.mld_capa_op &
+			  IEEE80211_MLD_CAP_OP_MAX_SIMUL_LINKS;
+	if (max_simul_links > cur_simul_links) {
+		ifmgd->reporting_add_links |= BIT(link->link_id);
+		sdata_info(sdata,
+			   "MLO Reconfig: link %d: cur_simul_links=%d, max_simul_links=%d\n",
+			   link->link_id, cur_simul_links, max_simul_links);
+	}
+}
+
 static void ieee80211_ml_reconf_work(struct wiphy *wiphy,
 				     struct wiphy_work *work)
 {
@@ -7045,6 +7074,19 @@ static void ieee80211_rx_mgmt_beacon(struct ieee80211_link_data *link,
 
 	ieee80211_rx_bss_info(link, mgmt, len, rx_status);
 
+	ieee80211_ml_link_add(link, elems);
+	if (ieee80211_vif_is_mld(&sdata->vif) &&
+	    ifmgd->reporting_add_links == sdata->vif.valid_links) {
+		ieee80211_set_disassoc(sdata, IEEE80211_STYPE_DEAUTH,
+				       WLAN_REASON_DEAUTH_LEAVING,
+				       true, deauth_buf);
+		ieee80211_report_disconnect(sdata, deauth_buf,
+					    sizeof(deauth_buf), true,
+					    WLAN_REASON_DEAUTH_LEAVING,
+					    true);
+		goto free;
+	}
+
 	ieee80211_sta_process_chanswitch(link, rx_status->mactime,
 					 rx_status->device_timestamp,
 					 elems, elems,
diff --git a/net/wireless/scan.c b/net/wireless/scan.c
index e14f44e3..e0f36a9d 100644
--- a/net/wireless/scan.c
+++ b/net/wireless/scan.c
@@ -1880,9 +1880,8 @@ cfg80211_update_known_bss(struct cfg80211_registered_device *rdev,
 
 		rcu_assign_pointer(known->pub.beacon_ies, new->pub.beacon_ies);
 
-		/* Override IEs if they were from a beacon before */
-		if (old == rcu_access_pointer(known->pub.ies))
-			rcu_assign_pointer(known->pub.ies, new->pub.beacon_ies);
+		/* No points to keep pointing to the old data derived from probe resp */
+		rcu_assign_pointer(known->pub.ies, new->pub.beacon_ies);
 
 		cfg80211_update_hidden_bsses(known,
 					     rcu_access_pointer(new->pub.beacon_ies),
-- 
2.45.2

