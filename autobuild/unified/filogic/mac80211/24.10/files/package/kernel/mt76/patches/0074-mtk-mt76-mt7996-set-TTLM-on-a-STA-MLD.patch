From 51c9c76cc8a63e3106a020c4c0709265f5177395 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Mon, 13 Jan 2025 14:07:45 +0800
Subject: [PATCH 074/104] mtk: mt76: mt7996: set TTLM on a STA MLD

This patch adds support to set TTLM a STA MLD by following actions:
1. do not handle Adv-TTLM or Neg-TTLM in vif_cfg_changed since it
   does not return anything to it's caller.
2. add a new driver operation, mt7996_set_ttlm, where we remain a TODO
   that handles the relationship between adv-TTLM and neg-TTLM. For now,
   the function returns failure if Adv-TTLM and Neg-TTLM are active at
   the same time.
3. refactor mt7996_mcu_peer_ttlm_req() so that the function could focus
   on prepare and send unified command to FW without other TTLM-related
   handling.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 mt7996/main.c   | 56 +++++++++++++++++++++++++++++++++++++++++++++----
 mt7996/mcu.c    | 37 +++++++++++++++-----------------
 mt7996/mt7996.h |  3 ++-
 3 files changed, 71 insertions(+), 25 deletions(-)

diff --git a/mt7996/main.c b/mt7996/main.c
index 5acb6533..7cd8d2ba 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -953,10 +953,6 @@ static void mt7996_vif_cfg_changed(struct ieee80211_hw *hw,
 		}
 	}
 
-	if ((changed & BSS_CHANGED_MLD_VALID_LINKS) &&
-	    (changed & (BSS_CHANGED_MLD_ADV_TTLM | BSS_CHANGED_MLD_NEG_TTLM)))
-		mt7996_mcu_peer_mld_ttlm_req(dev, vif, changed);
-
 	mutex_unlock(&dev->mt76.mutex);
 }
 
@@ -2754,6 +2750,45 @@ out:
 	return ret;
 }
 
+static int
+mt7996_set_ttlm(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
+{
+	struct ieee80211_neg_ttlm merged_ttlm;
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct ieee80211_sta *sta;
+	int tid, ret;
+	u16 map = vif->valid_links;
+
+	/* TODO check the intersection between Adv-TTLM and Neg-TTLM */
+	if (vif->type != NL80211_IFTYPE_STATION ||
+	    (vif->adv_ttlm.active && vif->neg_ttlm.valid))
+		return -EOPNOTSUPP;
+
+	if (vif->adv_ttlm.active)
+		map &= vif->adv_ttlm.map;
+
+	sta = ieee80211_find_sta(vif, vif->cfg.ap_addr);
+	if (!sta)
+		return -EINVAL;
+
+	if (vif->neg_ttlm.valid) {
+		memcpy(merged_ttlm.downlink, vif->neg_ttlm.downlink,
+		       sizeof(merged_ttlm.downlink));
+		memcpy(merged_ttlm.uplink, vif->neg_ttlm.uplink,
+		       sizeof(merged_ttlm.uplink));
+	} else {
+		for (tid = 0; tid < IEEE80211_TTLM_NUM_TIDS; tid++) {
+			merged_ttlm.downlink[tid] = map;
+			merged_ttlm.uplink[tid] = map;
+		}
+	}
+
+	mutex_lock(&dev->mt76.mutex);
+	ret = mt7996_mcu_peer_mld_ttlm_req(dev, vif, sta, &merged_ttlm);
+	mutex_unlock(&dev->mt76.mutex);
+	return ret;
+}
+
 static int
 mt7996_set_attlm(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		 u16 disabled_links, u16 switch_time, u32 duration)
@@ -2767,6 +2802,17 @@ mt7996_set_attlm(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	return ret;
 }
 
+static enum ieee80211_neg_ttlm_res
+mt7996_can_neg_ttlm(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+		    struct ieee80211_neg_ttlm *neg_ttlm)
+{
+	/* TODO check intersection between adv-TTLM and neg-TTLM
+	 * For now, we reject all possible overlapping cases of Adv-TTLM and
+	 * Neg-TTLM
+	 */
+	return vif->adv_ttlm.active ? NEG_TTLM_RES_REJECT : NEG_TTLM_RES_ACCEPT;
+}
+
 static void
 mt7996_event_callback(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		      const struct ieee80211_event *event)
@@ -2923,4 +2969,6 @@ const struct ieee80211_ops mt7996_ops = {
 	.change_sta_links = mt7996_change_sta_links,
 	.set_qos_map = mt7996_set_qos_map,
 	.set_attlm = mt7996_set_attlm,
+	.can_neg_ttlm = mt7996_can_neg_ttlm,
+	.set_ttlm = mt7996_set_ttlm,
 };
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index bd40562d..8ea564ac 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -3945,10 +3945,10 @@ int mt7996_mcu_mld_set_attlm(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 }
 
 int mt7996_mcu_peer_mld_ttlm_req(struct mt7996_dev *dev, struct ieee80211_vif *vif,
-				 u64 changed)
+				 struct ieee80211_sta *sta,
+				 struct ieee80211_neg_ttlm *neg_ttlm)
 {
 	struct mt7996_sta_link *mlsta;
-	struct ieee80211_sta *sta;
 	struct mt7996_sta *msta;
 	struct peer_mld_req_hdr hdr = { .mld_idx = 0xff };
 	struct peer_mld_ttlm_req *req;
@@ -3956,17 +3956,14 @@ int mt7996_mcu_peer_mld_ttlm_req(struct mt7996_dev *dev, struct ieee80211_vif *v
 	struct tlv *tlv;
 	int len = sizeof(hdr) + sizeof(*req);
 	unsigned long valid_links = (unsigned long)vif->valid_links;
-	u8 link_id;
+	u8 link_id, tid;
 
-	if (vif->type != NL80211_IFTYPE_STATION)
-		return 0;
+	if (vif->type != NL80211_IFTYPE_STATION &&
+	    vif->type != NL80211_IFTYPE_AP)
+		return -EOPNOTSUPP;
 
-	rcu_read_lock();
-	sta = ieee80211_find_sta(vif, vif->cfg.ap_addr);
-	if (!sta) {
-		rcu_read_unlock();
+	if (!sta || !neg_ttlm)
 		return -EINVAL;
-	}
 
 	memcpy(hdr.peer_mld_addr, sta->addr, ETH_ALEN);
 	msta = (struct mt7996_sta *)sta->drv_priv;
@@ -3975,6 +3972,7 @@ int mt7996_mcu_peer_mld_ttlm_req(struct mt7996_dev *dev, struct ieee80211_vif *v
 	if (!skb)
 		return -ENOMEM;
 
+	dev_dbg(dev->mt76.dev, "Setup TTLM for %pM\n", sta->addr);
 	skb_put_data(skb, &hdr, sizeof(hdr));
 	tlv = mt7996_mcu_add_uni_tlv(skb, UNI_CMD_PEER_MLD_TTLM_REQ,
 				     sizeof(*req));
@@ -3982,24 +3980,23 @@ int mt7996_mcu_peer_mld_ttlm_req(struct mt7996_dev *dev, struct ieee80211_vif *v
 
 	memcpy(req->mld_addr, vif->addr, ETH_ALEN);
 	req->enabled_link_bitmap = cpu_to_le16(vif->valid_links);
+	rcu_read_lock();
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		mlsta = mlsta_dereference_protected(msta, link_id);
 		if (!mlsta)
 			continue;
 
 		req->link_to_wcid[link_id] = cpu_to_le16(mlsta->wcid.idx);
-
-		if (changed & BSS_CHANGED_MLD_ADV_TTLM) {
-			/* skip TTLM-disabled links */
-			if (vif->adv_ttlm.active &&
-			    !(vif->adv_ttlm.map & BIT(link_id)))
-				continue;
-
-			req->dl_tid_map[link_id] = 0xff;
-			req->ul_tid_map[link_id] = 0xff;
+		for (tid = 0; tid < IEEE80211_TTLM_NUM_TIDS; tid++) {
+			if (neg_ttlm->downlink[tid] & BIT(link_id))
+				req->dl_tid_map[link_id] |= BIT(tid);
+			if (neg_ttlm->uplink[tid] & BIT(link_id))
+				req->ul_tid_map[link_id] |= BIT(tid);
 		}
 
-		/* TODO apply negotiated TTLM */
+		dev_dbg(dev->mt76.dev, "link_id=%u, dl_bitmap=%u, ul_bitmap=%u\n",
+			link_id, req->dl_tid_map[link_id],
+			req->ul_tid_map[link_id]);
 	}
 
 	rcu_read_unlock();
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index ca043d1e..8675cce7 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -1350,7 +1350,8 @@ void mt7996_mcu_wmm_pbc_work(struct work_struct *work);
 int mt7996_mcu_mld_set_attlm(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 			     u16 disabled_links, u16 switch_time, u32 duration);
 int mt7996_mcu_peer_mld_ttlm_req(struct mt7996_dev *dev, struct ieee80211_vif *vif,
-				 u64 changed);
+				 struct ieee80211_sta *sta,
+				 struct ieee80211_neg_ttlm *neg_ttlm);
 int mt7996_mcu_mld_reconf_stop_link(struct mt7996_dev *dev,
 				    struct ieee80211_vif *vif, u16 removed_links);
 int mt7996_mcu_mld_link_oper(struct mt7996_phy *phy,
-- 
2.45.2

