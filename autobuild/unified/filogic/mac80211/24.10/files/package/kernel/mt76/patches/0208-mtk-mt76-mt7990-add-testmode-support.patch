From 7b8d0c5b6239e6b862b4f5849332b03ad2d0854e Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Thu, 5 Sep 2024 19:51:31 +0800
Subject: [PATCH 208/277] mtk: mt76: mt7990: add testmode support

mt7990 does not support mem dpd cal, so refactor prek flow to support
both of the following cases.
1. mt7996/mt7992: has mem dpd cal
2. mt7990: no mem dpd cal, use legacy dpd cal for BW > 20 instead

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mt7996/eeprom.c   |  7 +++++--
 mt7996/eeprom.h   | 17 ++++++++++++++++-
 mt7996/testmode.c | 18 ++++++++++++------
 testmode.c        |  2 +-
 4 files changed, 34 insertions(+), 10 deletions(-)

diff --git a/mt7996/eeprom.c b/mt7996/eeprom.c
index 910b95eb..48b0bc97 100644
--- a/mt7996/eeprom.c
+++ b/mt7996/eeprom.c
@@ -532,15 +532,18 @@ static void mt7996_eeprom_init_precal(struct mt7996_dev *dev)
 		dev->prek.dpd_ch_num[DPD_CH_NUM_BW320_6G] = ARRAY_SIZE(dpd_6g_ch_list_bw320);
 		break;
 	case MT7992_DEVICE_ID:
-		dev->prek.rev  = mt7992_prek_rev;
+		dev->prek.rev = mt7992_prek_rev;
 		dev->prek.dpd_ch_num[DPD_CH_NUM_BW80_5G] = ARRAY_SIZE(dpd_5g_ch_list_bw80);
 		/* 6g is not used in current sku */
 		dev->prek.dpd_ch_num[DPD_CH_NUM_BW20_6G] = 0;
 		dev->prek.dpd_ch_num[DPD_CH_NUM_BW80_6G] = 0;
 		dev->prek.dpd_ch_num[DPD_CH_NUM_BW160_6G] = 0;
 		break;
+	case MT7990_DEVICE_ID:
+		dev->prek.rev = mt7990_prek_rev;
+		break;
 	default:
-		dev->prek.rev  = mt7996_prek_rev;
+		dev->prek.rev = mt7996_prek_rev;
 		break;
 	}
 }
diff --git a/mt7996/eeprom.h b/mt7996/eeprom.h
index 15b6620d..e286a58b 100644
--- a/mt7996/eeprom.h
+++ b/mt7996/eeprom.h
@@ -95,6 +95,19 @@ static const u32 mt7992_prek_rev[] = {
 	[DPD_OTFG0_SIZE] =			2 * MT_EE_CAL_UNIT,
 };
 
+static const u32 mt7990_prek_rev[] = {
+	[GROUP_SIZE_2G] =			4 * MT_EE_CAL_UNIT,
+	[GROUP_SIZE_5G] =			45 * MT_EE_CAL_UNIT,
+	[GROUP_SIZE_6G] =			90 * MT_EE_CAL_UNIT,
+	[ADCDCOC_SIZE_2G] =			4 * 2,
+	[ADCDCOC_SIZE_5G] =			4 * 3,
+	[ADCDCOC_SIZE_6G] =			4 * 3,
+	[DPD_LEGACY_SIZE] =			5 * MT_EE_CAL_UNIT,
+	/* no mem dpd cal for mt7990, use legacy dpd cal instead */
+	[DPD_MEM_SIZE] =			0,
+	[DPD_OTFG0_SIZE] =			2 * MT_EE_CAL_UNIT,
+};
+
 extern const struct ieee80211_channel dpd_2g_ch_list_bw20[];
 extern const struct ieee80211_channel dpd_5g_skip_ch_list[];
 extern const struct ieee80211_channel dpd_5g_ch_list_bw80[];
@@ -109,7 +122,9 @@ extern const struct ieee80211_channel dpd_6g_ch_list_bw320[];
 						 PREK(GROUP_SIZE_6G) + PREK(ADCDCOC_SIZE_2G) + \
 						 PREK(ADCDCOC_SIZE_5G) + PREK(ADCDCOC_SIZE_6G))
 #define DPD_PER_CH_BW20_SIZE			(PREK(DPD_LEGACY_SIZE) + PREK(DPD_OTFG0_SIZE))
-#define DPD_PER_CH_GT_BW20_SIZE			(PREK(DPD_MEM_SIZE) + PREK(DPD_OTFG0_SIZE))
+#define DPD_PER_CH_GT_BW20_SIZE			(PREK(DPD_MEM_SIZE) ? PREK(DPD_MEM_SIZE) + \
+								      PREK(DPD_OTFG0_SIZE) : \
+								      DPD_PER_CH_BW20_SIZE)
 #define MT_EE_CAL_DPD_SIZE_2G			(DPD_CH_NUM(BW20_2G) * DPD_PER_CH_BW20_SIZE)
 #define MT_EE_CAL_DPD_SIZE_5G			(DPD_CH_NUM(BW20_5G) * DPD_PER_CH_BW20_SIZE + \
 						 DPD_CH_NUM(BW80_5G) * DPD_PER_CH_GT_BW20_SIZE + \
diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index cbd4f909..08d794b3 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -611,7 +611,7 @@ mt7996_tm_dpd_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 		},
 	};
 	u32 i, j, group_size, dpd_size, size, offs, *pre_cal;
-	u32 wait_on_prek_offset = 0;
+	u32 func_data, wait_on_prek_offset = 0;
 	u8 do_precal, *eeprom;
 	int ret = 0;
 
@@ -655,10 +655,13 @@ mt7996_tm_dpd_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 		wait_event_timeout(mdev->mcu.wait, dev->cur_prek_offset == wait_on_prek_offset,
 				   30 * HZ);
 
+		/* mt7990 does not support mem dpd cal */
+		func_data = PREK(DPD_MEM_SIZE) ? RF_DPD_FLAT_5G_MEM_CAL : RF_DPD_FLAT_5G_CAL;
+
 		/* 5g channel bw80 calibration */
 		ret = mt7996_tm_dpd_prek_send_req(phy, &req, dpd_5g_ch_list_bw80,
 						  DPD_CH_NUM(BW80_5G),
-						  NL80211_CHAN_WIDTH_80, RF_DPD_FLAT_5G_MEM_CAL);
+						  NL80211_CHAN_WIDTH_80, func_data);
 		if (ret)
 			return ret;
 		wait_on_prek_offset += DPD_CH_NUM(BW80_5G) * DPD_PER_CH_GT_BW20_SIZE;
@@ -668,7 +671,7 @@ mt7996_tm_dpd_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 		/* 5g channel bw160 calibration */
 		ret = mt7996_tm_dpd_prek_send_req(phy, &req, dpd_5g_ch_list_bw160,
 						  DPD_CH_NUM(BW160_5G),
-						  NL80211_CHAN_WIDTH_160, RF_DPD_FLAT_5G_MEM_CAL);
+						  NL80211_CHAN_WIDTH_160, func_data);
 		wait_on_prek_offset += DPD_CH_NUM(BW160_5G) * DPD_PER_CH_GT_BW20_SIZE;
 		wait_event_timeout(mdev->mcu.wait, dev->cur_prek_offset == wait_on_prek_offset,
 				   30 * HZ);
@@ -686,10 +689,13 @@ mt7996_tm_dpd_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 		wait_event_timeout(mdev->mcu.wait, dev->cur_prek_offset == wait_on_prek_offset,
 				   30 * HZ);
 
+		/* mt7990 does not support mem dpd cal */
+		func_data = PREK(DPD_MEM_SIZE) ? RF_DPD_FLAT_6G_MEM_CAL : RF_DPD_FLAT_6G_CAL;
+
 		/* 6g channel bw80 calibration */
 		ret = mt7996_tm_dpd_prek_send_req(phy, &req, dpd_6g_ch_list_bw80,
 						  DPD_CH_NUM(BW80_6G),
-						  NL80211_CHAN_WIDTH_80, RF_DPD_FLAT_6G_MEM_CAL);
+						  NL80211_CHAN_WIDTH_80, func_data);
 		if (ret)
 			return ret;
 		wait_on_prek_offset += DPD_CH_NUM(BW80_6G) * DPD_PER_CH_GT_BW20_SIZE;
@@ -699,7 +705,7 @@ mt7996_tm_dpd_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 		/* 6g channel bw160 calibration */
 		ret = mt7996_tm_dpd_prek_send_req(phy, &req, dpd_6g_ch_list_bw160,
 						  DPD_CH_NUM(BW160_6G),
-						  NL80211_CHAN_WIDTH_160, RF_DPD_FLAT_6G_MEM_CAL);
+						  NL80211_CHAN_WIDTH_160, func_data);
 		if (ret)
 			return ret;
 		wait_on_prek_offset += DPD_CH_NUM(BW160_6G) * DPD_PER_CH_GT_BW20_SIZE;
@@ -709,7 +715,7 @@ mt7996_tm_dpd_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 		/* 6g channel bw320 calibration */
 		ret = mt7996_tm_dpd_prek_send_req(phy, &req, dpd_6g_ch_list_bw320,
 						  DPD_CH_NUM(BW320_6G),
-						  NL80211_CHAN_WIDTH_320, RF_DPD_FLAT_6G_MEM_CAL);
+						  NL80211_CHAN_WIDTH_320, func_data);
 		wait_on_prek_offset += DPD_CH_NUM(BW320_6G) * DPD_PER_CH_GT_BW20_SIZE;
 		wait_event_timeout(mdev->mcu.wait, dev->cur_prek_offset == wait_on_prek_offset,
 				   30 * HZ);
diff --git a/testmode.c b/testmode.c
index 2834400f..e5c4e1d3 100644
--- a/testmode.c
+++ b/testmode.c
@@ -41,7 +41,7 @@ EXPORT_SYMBOL_GPL(mt76_tm_policy);
 
 static inline bool mt76_testmode_offload(struct mt76_dev *dev)
 {
-	return is_mt7996(dev) || is_mt7992(dev);
+	return is_mt799x(dev);
 }
 
 void mt76_testmode_tx_pending(struct mt76_phy *phy)
-- 
2.45.2

