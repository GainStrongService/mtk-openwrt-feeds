From 1c5c87577f3722485e0de7971e3d7a4c21c4f160 Mon Sep 17 00:00:00 2001
From: Howard Hsu <howard-yh.hsu@mediatek.com>
Date: Thu, 26 Jun 2025 16:11:19 +0800
Subject: [PATCH 103/115] mtk: mac80211: Add beamform caps in
 ieee80211_bss_conf for station interface

The beamform-related capabilities are assigned to ieee80211_bss_conf by
calling ieee80211_start_ap(). However, for the station interface, it
does not call ieee80211_start_ap, which causes the beamform capabilities
of the station interface to not be configured properly. Assign beamform
capabilities to ieee80211_bss_conf in ieee80211_assoc_config_link for
the station interface.

Signed-off-by: Howard Hsu <howard-yh.hsu@mediatek.com>
---
 net/mac80211/eht.c         | 20 ++++++++++++++++++++
 net/mac80211/he.c          | 20 ++++++++++++++++++++
 net/mac80211/ieee80211_i.h |  6 ++++++
 net/mac80211/mlme.c        |  7 +++++++
 4 files changed, 53 insertions(+)

diff --git a/net/mac80211/eht.c b/net/mac80211/eht.c
index fd41046e..85a0f377 100644
--- a/net/mac80211/eht.c
+++ b/net/mac80211/eht.c
@@ -102,3 +102,23 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(struct ieee80211_sub_if_data *sdata,
 
 	ieee80211_sta_recalc_aggregates(&link_sta->sta->sta);
 }
+
+void ieee80211_eht_su_beamform_support(struct ieee80211_sub_if_data *sdata,
+				       struct ieee80211_supported_band *sband,
+				       struct ieee80211_bss_conf *bss_conf)
+{
+	const struct ieee80211_sta_eht_cap *own_eht_cap_ptr;
+	struct ieee80211_sta_eht_cap own_eht_cap;
+
+	own_eht_cap_ptr =
+		ieee80211_get_eht_iftype_cap_vif(sband, &sdata->vif);
+	if (!own_eht_cap_ptr)
+		return;
+
+	own_eht_cap = *own_eht_cap_ptr;
+
+	bss_conf->eht_su_beamformer =
+		own_eht_cap.eht_cap_elem.phy_cap_info[0] & IEEE80211_EHT_PHY_CAP0_SU_BEAMFORMER;
+	bss_conf->eht_su_beamformee =
+		own_eht_cap.eht_cap_elem.phy_cap_info[0] & IEEE80211_EHT_PHY_CAP0_SU_BEAMFORMEE;
+}
diff --git a/net/mac80211/he.c b/net/mac80211/he.c
index 5792ef77..53cdbb1a 100644
--- a/net/mac80211/he.c
+++ b/net/mac80211/he.c
@@ -365,3 +365,23 @@ void ieee80211_finalize_rx_omi_bw(struct ieee80211_link_sta *pub_link_sta)
 	trace_api_return_void(local);
 }
 EXPORT_SYMBOL_GPL(ieee80211_finalize_rx_omi_bw);
+
+void ieee80211_he_su_beamform_support(struct ieee80211_sub_if_data *sdata,
+				      struct ieee80211_supported_band *sband,
+				      struct ieee80211_bss_conf *bss_conf)
+{
+	const struct ieee80211_sta_he_cap *own_he_cap_ptr;
+	struct ieee80211_sta_he_cap own_he_cap;
+
+	own_he_cap_ptr =
+		ieee80211_get_he_iftype_cap_vif(sband, &sdata->vif);
+	if (!own_he_cap_ptr)
+		return;
+
+	own_he_cap = *own_he_cap_ptr;
+
+	bss_conf->he_su_beamformer =
+		own_he_cap.he_cap_elem.phy_cap_info[3] & IEEE80211_HE_PHY_CAP3_SU_BEAMFORMER;
+	bss_conf->he_su_beamformee =
+		own_he_cap.he_cap_elem.phy_cap_info[4] & IEEE80211_HE_PHY_CAP4_SU_BEAMFORMEE;
+}
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 9ddbeb3d..56d76af2 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2310,6 +2310,9 @@ void
 ieee80211_he_spr_ie_to_bss_conf(struct ieee80211_vif *vif,
 				const struct ieee80211_he_spr *he_spr_ie_elem);
 
+void ieee80211_he_su_beamform_support(struct ieee80211_sub_if_data *sdata,
+				      struct ieee80211_supported_band *sband,
+				      struct ieee80211_bss_conf *bss_conf);
 void
 ieee80211_he_op_ie_to_bss_conf(struct ieee80211_vif *vif,
 			const struct ieee80211_he_operation *he_op_ie_elem);
@@ -2846,6 +2849,9 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(struct ieee80211_sub_if_data *sdata,
 				    const struct ieee80211_eht_cap_elem *eht_cap_ie_elem,
 				    u8 eht_cap_len,
 				    struct link_sta_info *link_sta);
+void ieee80211_eht_su_beamform_support(struct ieee80211_sub_if_data *sdata,
+				       struct ieee80211_supported_band *sband,
+				       struct ieee80211_bss_conf *bss_conf);
 void ieee80211_process_neg_ttlm_req(struct ieee80211_sub_if_data *sdata,
 				    struct ieee80211_mgmt *mgmt, size_t len);
 void ieee80211_process_neg_ttlm_res(struct ieee80211_sub_if_data *sdata,
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index 083f1438..7df9270a 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -5477,6 +5477,11 @@ static bool ieee80211_assoc_config_link(struct ieee80211_link_data *link,
 		ieee80211_vht_cap_ie_to_sta_vht_cap(sdata, sband,
 						    elems->vht_cap_elem,
 						    bss_vht_cap, link_sta);
+		bss_conf->vht_su_beamformer =
+			sband->vht_cap.cap & IEEE80211_VHT_CAP_SU_BEAMFORMER_CAPABLE;
+		bss_conf->vht_su_beamformee =
+			sband->vht_cap.cap & IEEE80211_VHT_CAP_SU_BEAMFORMEE_CAPABLE;
+
 		rcu_read_unlock();
 	}
 
@@ -5490,6 +5495,7 @@ static bool ieee80211_assoc_config_link(struct ieee80211_link_data *link,
 						  link_sta);
 
 		bss_conf->he_support = link_sta->pub->he_cap.has_he;
+		ieee80211_he_su_beamform_support(sdata, sband, bss_conf);
 		if (elems->rsnx && elems->rsnx_len &&
 		    (elems->rsnx[0] & WLAN_RSNX_CAPA_PROTECTED_TWT) &&
 		    wiphy_ext_feature_isset(local->hw.wiphy,
@@ -5522,6 +5528,7 @@ static bool ieee80211_assoc_config_link(struct ieee80211_link_data *link,
 			if (sdata->u.mgd.epcs.enabled &&
 			    !bss_conf->epcs_support)
 				ieee80211_epcs_teardown(sdata);
+			ieee80211_eht_su_beamform_support(sdata, sband, bss_conf);
 		} else {
 			bss_conf->eht_support = false;
 			bss_conf->epcs_support = false;
-- 
2.45.2

