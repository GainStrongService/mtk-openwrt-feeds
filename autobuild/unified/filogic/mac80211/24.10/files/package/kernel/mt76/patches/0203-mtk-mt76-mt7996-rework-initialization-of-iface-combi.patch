From 02cd55fed12d560b0ca1f1c232e451f872f39a9a Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 10 Sep 2024 10:18:34 +0800
Subject: [PATCH 203/277] mtk: mt76: mt7996: rework initialization of iface
 combinations

Rework the initialization flow the iface combinations to handle
different chips

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mt7996/init.c   | 155 +++++++++++++++++++++++++++---------------------
 mt7996/mt7996.h |  10 +++-
 2 files changed, 96 insertions(+), 69 deletions(-)

diff --git a/mt7996/init.c b/mt7996/init.c
index b0aa5432..1bc99783 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -14,51 +14,6 @@
 #include "coredump.h"
 #include "eeprom.h"
 
-static const struct ieee80211_iface_limit if_limits[] = {
-	{
-		.max = 16 * 3,
-		.types = BIT(NL80211_IFTYPE_AP)
-#ifdef CONFIG_MAC80211_MESH
-			 | BIT(NL80211_IFTYPE_MESH_POINT)
-#endif
-	}, {
-		.max = MT7996_MAX_INTERFACES * 3,
-		.types = BIT(NL80211_IFTYPE_STATION)
-	}
-};
-
-static const struct ieee80211_iface_combination if_comb[] = {
-	{
-		.limits = if_limits,
-		.n_limits = ARRAY_SIZE(if_limits),
-		.max_interfaces = MT7996_MAX_INTERFACES * 3,
-		.num_different_channels = 3,
-		.beacon_int_infra_match = true,
-		.radar_detect_widths = BIT(NL80211_CHAN_WIDTH_20_NOHT) |
-				       BIT(NL80211_CHAN_WIDTH_20) |
-				       BIT(NL80211_CHAN_WIDTH_40) |
-				       BIT(NL80211_CHAN_WIDTH_80) |
-				       BIT(NL80211_CHAN_WIDTH_160),
-		.beacon_int_min_gcd = 100,
-	}
-};
-
-static const struct ieee80211_iface_combination if_comb_7992[] = {
-	{
-		.limits = if_limits,
-		.n_limits = ARRAY_SIZE(if_limits),
-		.max_interfaces = MT7996_MAX_INTERFACES * 2,
-		.num_different_channels = 2,
-		.beacon_int_infra_match = true,
-		.radar_detect_widths = BIT(NL80211_CHAN_WIDTH_20_NOHT) |
-				       BIT(NL80211_CHAN_WIDTH_20) |
-				       BIT(NL80211_CHAN_WIDTH_40) |
-				       BIT(NL80211_CHAN_WIDTH_80) |
-				       BIT(NL80211_CHAN_WIDTH_160),
-		.beacon_int_min_gcd = 100,
-	}
-};
-
 static const u8 mt7996_if_types_ext_capa_ap[] = {
 	[0] = WLAN_EXT_CAPA1_EXT_CHANNEL_SWITCHING,
 	[2] = WLAN_EXT_CAPA3_MULTI_BSSID_SUPPORT,
@@ -417,7 +372,66 @@ mt7996_regd_notifier(struct wiphy *wiphy,
 	mt7996_dfs_init_radar_detector(phy);
 }
 
-static void
+static int
+mt7996_init_iface_combinations(struct ieee80211_hw *hw)
+{
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct wiphy *wiphy = hw->wiphy;
+	struct wiphy *single_wiphy = dev->mt76.hw->wiphy;
+	struct ieee80211_iface_combination *if_comb;
+	struct ieee80211_iface_limit *if_limits;
+	int band_num, n_limits = 2;
+
+	band_num = 1 + mt7996_band_valid(dev, MT_BAND1) +
+		   mt7996_band_valid(dev, MT_BAND2);
+
+	/* Avoid the iface_combinations of wiphy1 & wiphy2 to be NULL */
+	if (wiphy != single_wiphy) {
+		wiphy->iface_combinations = single_wiphy->iface_combinations;
+		goto out;
+	}
+
+	if_comb = kzalloc(sizeof(*if_comb), GFP_KERNEL);
+	if (!if_comb)
+		return -ENOMEM;
+
+	if_limits = kcalloc(n_limits, sizeof(*if_limits), GFP_KERNEL);
+	if (!if_limits) {
+		kfree(if_comb);
+		return -ENOMEM;
+	}
+
+	if_limits[0].max = 16 * band_num;
+	if_limits[0].types |= BIT(NL80211_IFTYPE_AP);
+#ifdef CONFIG_MAC80211_MESH
+	if_limits[0].types |= BIT(NL80211_IFTYPE_MESH_POINT);
+#endif
+
+	if_limits[1].max = mt7996_max_interface_num(dev);
+	if_limits[1].types |= BIT(NL80211_IFTYPE_STATION);
+
+	/* TODO: Handle per-radio iface combinations */
+	if_comb->limits = if_limits;
+	if_comb->n_limits = n_limits;
+	if_comb->max_interfaces = mt7996_max_interface_num(dev);
+	if_comb->num_different_channels = band_num;
+	if_comb->beacon_int_infra_match = true;
+	if_comb->beacon_int_min_gcd = 100;
+	if_comb->radar_detect_widths = BIT(NL80211_CHAN_WIDTH_20_NOHT) |
+				       BIT(NL80211_CHAN_WIDTH_20) |
+				       BIT(NL80211_CHAN_WIDTH_40) |
+				       BIT(NL80211_CHAN_WIDTH_80) |
+				       BIT(NL80211_CHAN_WIDTH_160);
+	wiphy->iface_combinations = if_comb;
+
+out:
+	wiphy->n_iface_combinations = 1;
+	wiphy->mbssid_max_interfaces = 16 * band_num;
+
+	return 0;
+}
+
+static int
 mt7996_init_wiphy(struct ieee80211_hw *hw, struct mtk_wed_device *wed)
 {
 	struct mt7996_phy *phy = mt7996_hw_phy(hw);
@@ -427,6 +441,7 @@ mt7996_init_wiphy(struct ieee80211_hw *hw, struct mtk_wed_device *wed)
 	struct wiphy *single_wiphy = mdev->phy.hw->wiphy;
 	u16 max_subframes = phy->dev->has_eht ? IEEE80211_MAX_AMPDU_BUF_EHT :
 						IEEE80211_MAX_AMPDU_BUF_HE;
+	int ret;
 
 	hw->queues = 4;
 	hw->max_rx_aggregation_subframes = max_subframes;
@@ -446,20 +461,9 @@ mt7996_init_wiphy(struct ieee80211_hw *hw, struct mtk_wed_device *wed)
 	hw->vif_data_size = sizeof(struct mt7996_vif);
 	hw->chanctx_data_size = sizeof(struct mt7996_chanctx);
 
-	switch (mt76_chip(mdev)) {
-	case MT7996_DEVICE_ID:
-		wiphy->iface_combinations = if_comb;
-		wiphy->n_iface_combinations = ARRAY_SIZE(if_comb);
-		wiphy->mbssid_max_interfaces = 16 * 3;
-		break;
-	case MT7992_DEVICE_ID:
-	case MT7990_DEVICE_ID:
-	default:
-		wiphy->iface_combinations = if_comb_7992;
-		wiphy->n_iface_combinations = ARRAY_SIZE(if_comb_7992);
-		wiphy->mbssid_max_interfaces = 16 * 2;
-		break;
-	}
+	ret = mt7996_init_iface_combinations(hw);
+	if (ret)
+		return ret;
 
 	wiphy->reg_notifier = mt7996_regd_notifier;
 	wiphy->flags |= WIPHY_FLAG_HAS_CHANNEL_SWITCH;
@@ -546,6 +550,8 @@ mt7996_init_wiphy(struct ieee80211_hw *hw, struct mtk_wed_device *wed)
 	wiphy->iftype_ext_capab = mt7996_iftypes_ext_capa;
 	wiphy->num_iftype_ext_capab = ARRAY_SIZE(mt7996_iftypes_ext_capa);
 	wiphy->features |= NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE;
+
+	return 0;
 }
 
 static void
@@ -812,7 +818,10 @@ static int mt7996_register_phy(struct mt7996_dev *dev, struct mt7996_phy *phy,
 	mt76_eeprom_override(mphy);
 
 	/* init wiphy according to mphy and phy */
-	mt7996_init_wiphy(mphy->hw, wed);
+	ret = mt7996_init_wiphy(mphy->hw, wed);
+	if (ret)
+		goto error;
+
 	ret = mt7996_init_tx_queues(mphy->priv,
 				    MT_TXQ_ID(band),
 				    MT7996_TX_RING_SIZE,
@@ -861,6 +870,7 @@ static int mt7996_register_phy(struct mt7996_dev *dev, struct mt7996_phy *phy,
 
 error:
 	mphy->dev->phys[band] = NULL;
+	mphy->hw->wiphy->iface_combinations = NULL;
 	ieee80211_free_hw(mphy->hw);
 	return ret;
 }
@@ -902,6 +912,7 @@ mt7996_unregister_phy(struct mt7996_phy *phy, enum mt76_band_id band)
 	mt7996_unregister_thermal(phy);
 
 	mphy = phy->dev->mt76.phys[band];
+	mphy->hw->wiphy->iface_combinations = NULL;
 	mt76_unregister_phy(mphy);
 	ieee80211_free_hw(mphy->hw);
 	phy->dev->mt76.phys[band] = NULL;
@@ -1762,7 +1773,9 @@ int mt7996_register_device(struct mt7996_dev *dev)
 	if (ret)
 		return ret;
 
-	mt7996_init_wiphy(hw, &dev->mt76.mmio.wed);
+	ret = mt7996_init_wiphy(hw, &dev->mt76.mmio.wed);
+	if (ret)
+		return ret;
 
 #ifdef CONFIG_NL80211_TESTMODE
 	dev->mt76.test_ops = &mt7996_testmode_ops;
@@ -1775,13 +1788,13 @@ int mt7996_register_device(struct mt7996_dev *dev)
 	ret = mt76_register_device(&dev->mt76, true, mt76_rates,
 				   ARRAY_SIZE(mt76_rates));
 	if (ret)
-		return ret;
+		goto error;
 
 	mt7996_init_chanctx(&dev->phy);
 
 	ret = mt7996_thermal_init(&dev->phy);
 	if (ret)
-		return ret;
+		goto error;
 
 	dev->mt76.token_threshold = MT7996_PER_BAND_TOKEN_SIZE;
 
@@ -1795,11 +1808,11 @@ int mt7996_register_device(struct mt7996_dev *dev)
 
 	ret = mt7996_register_phy(dev, mt7996_phy2(dev), MT_BAND1);
 	if (ret)
-		return ret;
+		goto error;
 
 	ret = mt7996_register_phy(dev, mt7996_phy3(dev), MT_BAND2);
 	if (ret)
-		return ret;
+		goto error;
 
 	hw->wiphy->bands[NL80211_BAND_2GHZ] = &dev->phy.mt76->sband_2g.sband;
 	if (mt7996_phy2(dev))
@@ -1825,6 +1838,11 @@ int mt7996_register_device(struct mt7996_dev *dev)
 
 error:
 	cancel_work_sync(&dev->init_work);
+	if (hw->wiphy->iface_combinations) {
+		kfree(hw->wiphy->iface_combinations[0].limits);
+		kfree(hw->wiphy->iface_combinations);
+		hw->wiphy->iface_combinations = NULL;
+	}
 
 	return ret;
 }
@@ -1834,6 +1852,11 @@ void mt7996_unregister_device(struct mt7996_dev *dev)
 	cancel_work_sync(&dev->wed_rro.work);
 	mt7996_unregister_thermal(&dev->phy);
 	mt7996_coredump_unregister(dev);
+	if (dev->mt76.hw->wiphy->iface_combinations) {
+		kfree(dev->mt76.hw->wiphy->iface_combinations[0].limits);
+		kfree(dev->mt76.hw->wiphy->iface_combinations);
+		dev->mt76.hw->wiphy->iface_combinations = NULL;
+	}
 	mt76_unregister_device(&dev->mt76);
 	mt7996_unregister_phy(mt7996_phy2(dev), MT_BAND1);
 	mt7996_unregister_phy(mt7996_phy3(dev), MT_BAND2);
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index fc359d93..5bccf903 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -14,7 +14,6 @@
 
 #define MT7996_MAX_INTERFACES		19	/* per-band */
 #define MT7996_MAX_WMM_SETS		4
-#define MT7996_WTBL_BMC_SIZE		(is_mt7992(&dev->mt76) ? 32 : 64)
 #define MT7996_WTBL_RESERVED		(mt7996_wtbl_size(dev) - 1)
 #define MT7996_WTBL_STA			(MT7996_WTBL_RESERVED - \
 					 mt7996_max_interface_num(dev))
@@ -1295,16 +1294,21 @@ int mt7996_mcu_mld_set_attlm(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 int mt7996_mcu_peer_mld_ttlm_req(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 				 u64 changed);
 
+static inline int mt7996_wtbl_bmc_size(struct mt7996_dev *dev)
+{
+	return is_mt7996(&dev->mt76) ? 64 : 32;
+}
+
 static inline u8 mt7996_max_interface_num(struct mt7996_dev *dev)
 {
 	return min(MT7996_MAX_INTERFACES * (1 + mt7996_band_valid(dev, MT_BAND1) +
 					    mt7996_band_valid(dev, MT_BAND2)),
-		   MT7996_WTBL_BMC_SIZE);
+		   mt7996_wtbl_bmc_size(dev));
 }
 
 static inline u16 mt7996_wtbl_size(struct mt7996_dev *dev)
 {
-	return (dev->wtbl_size_group << 8) + MT7996_WTBL_BMC_SIZE;
+	return (dev->wtbl_size_group << 8) + mt7996_wtbl_bmc_size(dev);
 }
 
 void mt7996_dual_hif_set_irq_mask(struct mt7996_dev *dev, bool write_reg,
-- 
2.45.2

