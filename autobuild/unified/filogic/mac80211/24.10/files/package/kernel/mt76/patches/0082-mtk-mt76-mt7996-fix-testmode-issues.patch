From bdc6e2d6f88910c8f33af87d27870b888eb17c34 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 21 Jan 2025 15:50:14 +0800
Subject: [PATCH 082/104] mtk: mt76: mt7996: fix testmode issues

Fix some testmode issues
1. Refactor code
2. Reset mt76_testmode_data when entering off state
Without this fix, ibf cal will fail to TX for second round.
bf_en is not cleared during deleting interface, so that the
mon. interface setup will use the wrong mac addr.
3. Fix ibf e2p_update bug
When 2G ibf is not calibrated (phase->status == 0), the offset
should start from 5G's first offset instead of TXBF_PHASE_EEPROM_START_OFFSET.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mt7996/testmode.c | 108 ++++++++++++++++++++++++++++++----------------
 1 file changed, 71 insertions(+), 37 deletions(-)

diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index d0e066b6..a42d4263 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -229,34 +229,42 @@ static void
 mt7996_tm_init(struct mt7996_phy *phy, bool en)
 {
 	struct mt7996_dev *dev = phy->dev;
-	struct mt7996_vif *mvif = (struct mt7996_vif *)phy->monitor_vif->drv_priv;
-	u8 rf_test_mode = en ? RF_OPER_RF_TEST : RF_OPER_NORMAL;
+	struct mt76_testmode_data *td = &phy->mt76->test;
+	struct ieee80211_vif *vif = phy->monitor_vif;
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_vif_link *deflink = &mvif->deflink;
+	u8 rf_test_mode;
 	int state;
 
 	if (!test_bit(MT76_STATE_RUNNING, &phy->mt76->state))
 		return;
 
+	if (en) {
+		rf_test_mode = RF_OPER_RF_TEST;
+		state = CONN_STATE_PORT_SECURE;
+		/* use firmware counter for RX stats */
+		td->flag |= MT_TM_FW_RX_COUNT;
+		INIT_DELAYED_WORK(&phy->ipi_work, mt7996_tm_ipi_work);
+	} else {
+		rf_test_mode = RF_OPER_NORMAL;
+		state = CONN_STATE_DISCONNECT;
+		memset(td, 0, sizeof(*td));
+		kfree(phy->mt76->lists);
+	}
+
 	mt7996_mcu_set_tx_power_ctrl(phy, POWER_CTRL(ATE_MODE), en);
 	mt7996_mcu_set_tx_power_ctrl(phy, POWER_CTRL(SKU_POWER_LIMIT), !en);
 	mt7996_mcu_set_tx_power_ctrl(phy, POWER_CTRL(BACKOFF_POWER_LIMIT), !en);
 
 	mt7996_tm_rf_switch_mode(dev, rf_test_mode);
 
-	mt7996_mcu_add_bss_info(phy, phy->monitor_vif, &phy->monitor_vif->bss_conf,
-				&mvif->deflink, &mvif->deflink.mlsta, en);
-	state = en ? CONN_STATE_PORT_SECURE : CONN_STATE_DISCONNECT;
-	mt7996_mcu_add_sta(dev, phy->monitor_vif, &phy->monitor_vif->bss_conf, &mvif->deflink,
-			   NULL, &mvif->deflink.mlsta, state, false);
-
-	mt7996_tm_set(dev, SET_ID(BAND_IDX), phy->mt76->band_idx);
-
-	/* use firmware counter for RX stats */
-	phy->mt76->test.flag |= MT_TM_FW_RX_COUNT;
+	mt7996_mcu_add_bss_info(phy, vif, &vif->bss_conf,
+				deflink, &deflink->mlsta, en);
+	mt7996_mcu_add_sta(dev, vif, &vif->bss_conf, deflink,
+			   NULL, &deflink->mlsta, state, false);
 
 	if (en)
-		INIT_DELAYED_WORK(&phy->ipi_work, mt7996_tm_ipi_work);
-	else
-		kfree(phy->mt76->lists);
+		mt7996_tm_set(dev, SET_ID(BAND_IDX), phy->mt76->band_idx);
 }
 
 void
@@ -1160,17 +1168,14 @@ mt7996_tm_txbf_init(struct mt7996_phy *phy, u16 *val)
 #define EBF_BBP_RX_ENABLE	(BIT(0) | BIT(15))
 	struct mt7996_dev *dev = phy->dev;
 	struct mt76_testmode_data *td = &phy->mt76->test;
-	bool enable = val[0];
+	struct ieee80211_vif *vif = phy->monitor_vif;
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_vif_link *deflink = &mvif->deflink;
+	enum nl80211_chan_width width = NL80211_CHAN_WIDTH_20;
 	void *phase_cal, *pfmu_data, *pfmu_tag;
 	u8 nss, band_idx = phy->mt76->band_idx;
-	enum nl80211_chan_width width = NL80211_CHAN_WIDTH_20;
-	u8 sub_addr = td->is_txbf_dut ? TXBF_DUT_MAC_SUBADDR : TXBF_GOLDEN_MAC_SUBADDR;
-	u8 peer_addr = td->is_txbf_dut ? TXBF_GOLDEN_MAC_SUBADDR : TXBF_DUT_MAC_SUBADDR;
-	u8 bss_addr = TXBF_DUT_MAC_SUBADDR;
-	u8 addr[ETH_ALEN] = {0x00, sub_addr, sub_addr, sub_addr, sub_addr, sub_addr};
-	u8 bssid[ETH_ALEN] = {0x00, bss_addr, bss_addr, bss_addr, bss_addr, bss_addr};
-	u8 peer_addrs[ETH_ALEN] = {0x00, peer_addr, peer_addr, peer_addr, peer_addr, peer_addr};
-	struct mt7996_vif *mvif = (struct mt7996_vif *)phy->monitor_vif->drv_priv;
+	u8 addr, peer_addr, bss_addr;
+	bool enable = val[0];
 
 	if (!enable) {
 		td->bf_en = false;
@@ -1210,17 +1215,31 @@ mt7996_tm_txbf_init(struct mt7996_phy *phy, u16 *val)
 
 	td->bf_en = true;
 	dev->ibf = td->ibf;
-	memcpy(td->addr[0], peer_addrs, ETH_ALEN);
-	memcpy(td->addr[1], addr, ETH_ALEN);
-	memcpy(td->addr[2], bssid, ETH_ALEN);
-	memcpy(phy->monitor_vif->addr, addr, ETH_ALEN);
+
+	/* 00:11:11:11:11:11 for golden/instrument (own mac addr)
+	 * 00:22:22:22:22:22 for DUT (own mac addr)
+	 * 00:22:22:22:22:22 for bssid
+	 */
+	bss_addr = TXBF_DUT_MAC_SUBADDR;
+	if (td->is_txbf_dut) {
+		addr = TXBF_DUT_MAC_SUBADDR;
+		peer_addr = TXBF_GOLDEN_MAC_SUBADDR;
+	} else {
+		addr = TXBF_GOLDEN_MAC_SUBADDR;
+		peer_addr = TXBF_DUT_MAC_SUBADDR;
+	}
+	memset(td->addr, 0, sizeof(td->addr));
+	memset(td->addr[0] + 1, peer_addr, ETH_ALEN - 1);
+	memset(td->addr[1] + 1, addr, ETH_ALEN - 1);
+	memset(td->addr[2] + 1, bss_addr, ETH_ALEN - 1);
+	memcpy(vif->addr, td->addr[1], ETH_ALEN);
 	mt7996_tm_set_mac_addr(dev, td->addr[0], SET_ID(DA));
 	mt7996_tm_set_mac_addr(dev, td->addr[1], SET_ID(SA));
 	mt7996_tm_set_mac_addr(dev, td->addr[2], SET_ID(BSSID));
 
-	mt7996_mcu_add_dev_info(phy, &phy->monitor_vif->bss_conf, &mvif->deflink, true);
-	mt7996_mcu_add_bss_info(phy, phy->monitor_vif, &phy->monitor_vif->bss_conf,
-				&mvif->deflink, &mvif->deflink.mlsta, true);
+	mt7996_mcu_add_dev_info(phy, &vif->bss_conf, deflink, true);
+	mt7996_mcu_add_bss_info(phy, vif, &vif->bss_conf, deflink,
+				&deflink->mlsta, true);
 
 	if (td->ibf) {
 		if (td->is_txbf_dut) {
@@ -1334,6 +1353,9 @@ mt7996_tm_txbf_phase_comp(struct mt7996_phy *phy, u16 *val)
 	struct mt7996_txbf_phase *phase = (struct mt7996_txbf_phase *)dev->test.txbf_phase_cal;
 	int group = val[2];
 
+	if (!phase)
+		return -EINVAL;
+
 	wait_event_timeout(dev->mt76.tx_wait, phase[group].status != 0, HZ);
 	mt7996_tm_txbf_phase_copy(dev, req.phase_comp.buf, phase[group].buf, group);
 
@@ -1462,6 +1484,9 @@ mt7996_tm_txbf_profile_update(struct mt7996_phy *phy, u16 *val, bool ebf)
 	int ret;
 	bool is_atenl = val[5];
 
+	if (!tag)
+		return -EINVAL;
+
 	if (td->tx_antenna_mask == 3)
 		nr = 1;
 	else if (td->tx_antenna_mask == 7)
@@ -1547,6 +1572,9 @@ mt7996_tm_txbf_phase_cal(struct mt7996_phy *phy, u16 *val)
 	};
 	struct mt7996_txbf_phase *phase = (struct mt7996_txbf_phase *)dev->test.txbf_phase_cal;
 
+	if (!phase)
+		return -EINVAL;
+
 	/* reset phase status before update phase cal data */
 	phase[req.phase_cal.group].status = 0;
 
@@ -1570,7 +1598,8 @@ mt7996_tm_txbf_profile_update_all(struct mt7996_phy *phy, u16 *val)
 	s16 *pfmu_data;
 	int offs = subc_id * sizeof(struct mt7996_pfmu_data) / sizeof(*pfmu_data);
 
-	if (subc_id > MT7996_TXBF_SUBCAR_NUM - 1)
+	if (!dev->test.txbf_pfmu_data ||
+	    subc_id > MT7996_TXBF_SUBCAR_NUM - 1)
 		return -EINVAL;
 
 	if (nss == 2) {
@@ -1645,14 +1674,16 @@ mt7996_tm_txbf_e2p_update(struct mt7996_phy *phy)
 
 	offset = TXBF_PHASE_EEPROM_START_OFFSET;
 	phase = (struct mt7996_txbf_phase *)dev->test.txbf_phase_cal;
+	if (!phase)
+		return -EINVAL;
+
 	for (i = 0; i < MAX_PHASE_GROUP_NUM; i++) {
 		p = &phase[i];
 
-		if (!p->status)
-			continue;
+		/* copy valid phase cal data to eeprom */
+		if (p->status)
+			mt7996_tm_txbf_phase_copy(dev, eeprom + offset, p->buf, i);
 
-		/* copy phase cal data to eeprom */
-		mt7996_tm_txbf_phase_copy(dev, eeprom + offset, p->buf, i);
 		if (get_ibf_version(dev) == IBF_VER_1)
 			offset += TXBF_PHASE_GROUP_EEPROM_OFFSET_VER_1;
 		else
@@ -1690,6 +1721,9 @@ mt7996_tm_txbf_set_tx(struct mt7996_phy *phy, u16 *val)
 	struct mt7996_pfmu_tag *tag = dev->test.txbf_pfmu_tag;
 	struct mt76_testmode_data *td = &phy->mt76->test;
 
+	if (!tag)
+		return -EINVAL;
+
 	if (bf_on) {
 		mt7996_tm_set_rx_frames(phy, false);
 		mt7996_tm_set_tx_frames(phy, false);
@@ -1828,7 +1862,7 @@ mt7996_tm_set_txbf(struct mt7996_phy *phy)
 		if (!tag) {
 			dev_err(dev->mt76.dev,
 				"pfmu tag is not initialized!\n");
-			return 0;
+			return -EINVAL;
 		}
 
 		if (td->txbf_act == MT76_TM_TXBF_ACT_PROFILE_TAG_WRITE)
-- 
2.45.2

