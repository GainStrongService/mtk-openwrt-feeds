From 633611956368249b1e7627fa43a784667d300475 Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Mon, 7 Apr 2025 18:00:04 +0800
Subject: [PATCH 099/107] mtk: mac80211: refactor BSS color change & collision
 detection

1. add the check for color change to unavailable color
2. fix AP MLD color collision detection on incorrect link.
   When AP MLD receives beacons from other BSSes, the link ID in RX
   status might not be correct because driver is unable to determine
   the interface to handle the beacon and the corresponding link id.
   This change makes sure that the beacon is handled by correct link
   on the band specified in the RX status, and skip the beacon color
   collision detection on the interface if the interface does not
   have link on the band.
3. Reset used_color_bitmpa after color change so that the colors that
   are not in used can be release.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 net/mac80211/cfg.c         |  8 ++++++
 net/mac80211/ieee80211_i.h |  1 +
 net/mac80211/rx.c          | 53 +++++++++++++++++++++++++++++++++-----
 3 files changed, 56 insertions(+), 6 deletions(-)

diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 0e5ccee4..b71a0827 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -4969,6 +4969,9 @@ static int ieee80211_color_change_finalize(struct ieee80211_link_data *link)
 
 	link->conf->color_change_active = false;
 
+	/* Clear tha map after color change so that colors can be released */
+	link->conf->used_color_bitmap = 0;
+
 	err = ieee80211_set_after_color_change_beacon(link, &changed);
 	if (err) {
 		cfg80211_color_change_aborted_notify(sdata->dev, link->link_id);
@@ -5115,6 +5118,11 @@ ieee80211_color_change(struct wiphy *wiphy, struct net_device *dev,
 		goto out;
 	}
 
+	if (BIT_ULL(params->color) & link_conf->used_color_bitmap) {
+		err = -EINVAL;
+		goto out;
+	}
+
 	err = ieee80211_set_color_change_beacon(link, params, &changed);
 	if (err)
 		goto out;
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 4937379e..a37cb4bd 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -211,6 +211,7 @@ enum ieee80211_packet_rx_flags {
  */
 enum ieee80211_rx_flags {
 	IEEE80211_RX_BEACON_REPORTED	= BIT(0),
+	IEEE80211_RX_BEACON_COLOR_COLLISION_CHECKED	= BIT(1),
 };
 
 struct ieee80211_rx_data {
diff --git a/net/mac80211/rx.c b/net/mac80211/rx.c
index 5c9bd3de..2c3df2ec 100644
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -3434,13 +3434,12 @@ ieee80211_rx_h_mgmt_check(struct ieee80211_rx_data *rx)
 	    rx->skb->len < IEEE80211_MIN_ACTION_SIZE)
 		return RX_DROP_U_RUNT_ACTION;
 
-	if (rx->sdata->vif.type == NL80211_IFTYPE_AP &&
-	    ieee80211_is_beacon(mgmt->frame_control) &&
-	    !(rx->flags & IEEE80211_RX_BEACON_REPORTED)) {
-		int sig = 0;
+	if (rx->sdata->vif.type != NL80211_IFTYPE_AP ||
+	    !ieee80211_is_beacon(mgmt->frame_control))
+		goto skip_beacon_report;
 
-		/* sw bss color collision detection */
-		ieee80211_rx_check_bss_color_collision(rx);
+	if (!(rx->flags & IEEE80211_RX_BEACON_REPORTED)) {
+		int sig = 0;
 
 		if (ieee80211_hw_check(&rx->local->hw, SIGNAL_DBM) &&
 		    !(status->flag & RX_FLAG_NO_SIGNAL_VAL))
@@ -3453,6 +3452,48 @@ ieee80211_rx_h_mgmt_check(struct ieee80211_rx_data *rx)
 		rx->flags |= IEEE80211_RX_BEACON_REPORTED;
 	}
 
+	if (!(rx->flags & IEEE80211_RX_BEACON_COLOR_COLLISION_CHECKED)) {
+		struct ieee80211_sub_if_data *sdata = rx->sdata;
+		struct ieee80211_supported_band *sband;
+
+		/* Make sure that the beacon is handled by the correct link */
+		if (ieee80211_vif_is_mld(&sdata->vif)) {
+			unsigned int link_id;
+			struct ieee80211_link_data *link, *orig_link;
+
+			orig_link = rx->link;
+			rx->link = NULL;
+			for_each_valid_link(&sdata->wdev, link_id) {
+				link = sdata_dereference(sdata->link[link_id], sdata);
+				if (!link)
+					continue;
+
+				sband = ieee80211_get_link_sband(link);
+				if (!sband)
+					continue;
+
+				if (status->band == sband->band) {
+					rx->link = link;
+					break;
+				}
+			}
+
+			if (!rx->link) {
+				rx->link = orig_link;
+				goto skip_beacon_report;
+			}
+		} else {
+			sband = ieee80211_get_link_sband(rx->link);
+			if (!sband || status->band != sband->band)
+				goto skip_beacon_report;
+		}
+
+		/* sw bss color collision detection */
+		ieee80211_rx_check_bss_color_collision(rx);
+		rx->flags |= IEEE80211_RX_BEACON_COLOR_COLLISION_CHECKED;
+	}
+
+skip_beacon_report:
 	return ieee80211_drop_unencrypted_mgmt(rx);
 }
 
-- 
2.45.2

