From 2980088bef2eaee68a6fc23cab70ccc2a08d9d71 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Thu, 5 Jun 2025 23:25:59 +0800
Subject: [PATCH 100/123] mtk: mt76: mt7996: add 5th rx rssi dump support

Dump the rssi of 5th rx for mt7990 6G 4T5R & mt7992 5G 5T5R

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>

/home/mtk21047/ws/openwrt/20250610/openwrt/openwrt/build_dir/target-aarch64_cortex-a53_mus
l/linux-mediatek_filogic/mt76-2025.06.01~79dd14f2/mt76.h:865:1: note: offset of packed bit
-field 'band' has changed in GCC 4.4
  865 | } __packed;
      | ^

Change to u16 to get rid of this compiler note.

Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>

When there is no STA connected, the RSSI signal of a frame calculated
by mt76_rx_signal becomes 0, as the RSSI of the 5th RX is set to 0.
Therefore, set the RSSI of the 5th RX to the mininum value = -128 to avoid
polluting the RSSI signal.
For example, the auth and assoc resp frame sent from the STA will have
an RSSI of 0, which causes the rssi_reject_assoc_rssi
check to fail due to inaccurate rssi values.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mt76.h           | 13 ++++++-----
 mt7996/debugfs.c | 56 ++++++++++++++++++++++++++++++++++++------------
 mt7996/mac.c     | 13 ++++++++---
 mt7996/mcu.c     | 33 +++++++++++++++++++---------
 mt7996/mcu.h     |  7 +++---
 mt7996/mt7996.h  |  2 ++
 6 files changed, 87 insertions(+), 37 deletions(-)

diff --git a/mt76.h b/mt76.h
index 55c65a5b..7ec4af3b 100644
--- a/mt76.h
+++ b/mt76.h
@@ -822,6 +822,7 @@ struct mt76_mmio {
 	struct completion wed_reset_complete;
 };
 
+/* at most 48 bytes to fit in skb->cb */
 struct mt76_rx_status {
 	union {
 		struct mt76_wcid *wcid;
@@ -835,12 +836,10 @@ struct mt76_rx_status {
 
 	u8 iv[6];
 
-	u8 phy_idx:2;
-	u8 aggr:1;
+	u16 freq:13, phy_idx:2, aggr:1;
 	u8 qos_ctl;
 	u16 seqno;
 
-	u16 freq;
 	u32 flag;
 	u8 enc_flags;
 	u8 encoding:3, bw:4;
@@ -856,13 +855,13 @@ struct mt76_rx_status {
 		} eht;
 	};
 
-	u8 amsdu:1, first_amsdu:1, last_amsdu:1;
-	u8 rate_idx;
-	u8 nss:5, band:3;
+	u16 amsdu:1, first_amsdu:1, last_amsdu:1;
+	u16 nss:3, band:3;
+	u16 rate_idx:7;
 	s8 signal;
 	u8 chains;
 	s8 chain_signal[IEEE80211_MAX_CHAINS];
-};
+} __packed;
 
 struct mt76_freq_range_power {
 	const struct cfg80211_sar_freq_ranges *range;
diff --git a/mt7996/debugfs.c b/mt7996/debugfs.c
index 39c4e6a7..ee935928 100644
--- a/mt7996/debugfs.c
+++ b/mt7996/debugfs.c
@@ -1718,36 +1718,64 @@ mt7996_link_sta_info_show(struct seq_file *file, void *data)
 {
 	struct ieee80211_link_sta *link_sta = file->private;
 	struct mt7996_sta *msta = (struct mt7996_sta *)link_sta->sta->drv_priv;
+	struct mt7996_dev *dev = msta->vif->dev;
 	struct mt7996_sta_link *msta_link;
 	struct mt76_sta_stats *stats;
 	struct mt76_wcid *wcid;
+	struct mt7996_phy *phy;
+	unsigned long rx_mask;
 	char buf[100];
 	u8 ac;
 
-	mutex_lock(&msta->vif->dev->mt76.mutex);
+	mutex_lock(&dev->mt76.mutex);
 
-	msta_link = mt76_dereference(msta->link[link_sta->link_id], &msta->vif->dev->mt76);
+	msta_link = mt76_dereference(msta->link[link_sta->link_id], &dev->mt76);
 	if (!msta_link) {
-		mutex_unlock(&msta->vif->dev->mt76.mutex);
+		mutex_unlock(&dev->mt76.mutex);
 		return -EINVAL;
 	}
 	wcid = &msta_link->wcid;
 	stats = &wcid->stats;
+	phy = __mt7996_phy(dev, wcid->phy_idx);
+	rx_mask = mt7996_rx_chainmask(phy);
 
 	seq_printf(file, "WCID: %hu\n", wcid->idx);
 	seq_printf(file, "Link ID: %hhu\n", link_sta->link_id);
 	seq_printf(file, "Link Address: %pM\n", link_sta->addr);
 	seq_printf(file, "Status:\n");
-	seq_printf(file, "\tRSSI: %d [%hhd, %hhd, %hhd, %hhd] dBm\n",
-		   msta_link->signal, msta_link->chain_signal[0], msta_link->chain_signal[1],
-		   msta_link->chain_signal[2], msta_link->chain_signal[3]);
-	seq_printf(file, "\tACK RSSI: %d [%hhd, %hhd, %hhd, %hhd] dBm\n",
-		   msta_link->ack_signal, msta_link->chain_ack_signal[0],
-		   msta_link->chain_ack_signal[1], msta_link->chain_ack_signal[2],
-		   msta_link->chain_ack_signal[3]);
-	seq_printf(file, "\tACK SNR: [%hhd, %hhd, %hhd, %hhd] dBm\n",
-		   msta_link->chain_ack_snr[0], msta_link->chain_ack_snr[1],
-		   msta_link->chain_ack_snr[2], msta_link->chain_ack_snr[3]);
+
+#define dump_chain_signal(type, buf, buflen, sta_link, rx_mask)			\
+	do {									\
+		char *pos = (buf);						\
+		int chain;							\
+		size_t left = (buflen);						\
+		int n;								\
+		n = snprintf(pos, left, "[");					\
+		pos += n; left -= n;						\
+		for_each_set_bit(chain, &(rx_mask), IEEE80211_MAX_CHAINS) {	\
+			if (chain) {						\
+				n = snprintf(pos, left, ", ");			\
+				pos += n; left -= n;				\
+			}							\
+			n = snprintf(pos, left, "%hhd",				\
+				(sta_link)->chain_##type[(chain)]);		\
+			pos += n; left -= n;					\
+		}								\
+		snprintf(pos, left, "] dBm\n");					\
+	} while (0)
+
+	dump_chain_signal(signal, buf, sizeof(buf), msta_link, rx_mask);
+	seq_printf(file, "\tRSSI: %d %s", msta_link->signal, buf);
+
+	dump_chain_signal(ack_signal, buf, sizeof(buf), msta_link, rx_mask);
+	seq_printf(file, "\tACK RSSI: %d %s", msta_link->ack_signal, buf);
+
+	/* SNR of 5th rx is not supported */
+	rx_mask &= ~BIT(4);
+	dump_chain_signal(ack_snr, buf, sizeof(buf), msta_link, rx_mask);
+	seq_printf(file, "\tACK SNR: %s", buf);
+#undef dump_chain_signal
+
 	seq_printf(file, "Rate:\n");
 
 	mt7996_parse_rate(&wcid->rate, buf, sizeof(buf));
@@ -1779,7 +1807,7 @@ mt7996_link_sta_info_show(struct seq_file *file, void *data)
 		   stats->rx_mpdus ? stats->rx_fcs_err * 1000 / stats->rx_mpdus % 10 : 0);
 	seq_printf(file, "\t\tAirtime: %llu (unit: 1.024 us)\n", stats->rx_airtime);
 
-	mutex_unlock(&msta->vif->dev->mt76.mutex);
+	mutex_unlock(&dev->mt76.mutex);
 
 	return 0;
 }
diff --git a/mt7996/mac.c b/mt7996/mac.c
index a5084ca9..2b91eab7 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -554,21 +554,28 @@ mt7996_mac_fill_rx(struct mt7996_dev *dev, enum mt76_rxq_id q,
 
 		v3 = le32_to_cpu(rxv[3]);
 
-		status->chains = mphy->antenna_mask;
+		status->chains = mt7996_rx_chainmask(phy);
 		status->chain_signal[0] = to_rssi(MT_PRXV_RCPI0, v3);
 		status->chain_signal[1] = to_rssi(MT_PRXV_RCPI1, v3);
 		status->chain_signal[2] = to_rssi(MT_PRXV_RCPI2, v3);
 		status->chain_signal[3] = to_rssi(MT_PRXV_RCPI3, v3);
+		/* no 5th rx info in rxd for data frame */
+		status->chain_signal[4] = -128;
 
 		if (msta_link) {
+			u16 rx_mask = status->chains;
 			int i;
 
+			/* use the value read from rxv for 5th rx */
+			if (rx_mask & BIT(4))
+				status->chain_signal[4] = msta_link->chain_signal_wf4;
+
 			memcpy(msta_link->chain_signal, status->chain_signal,
 			       IEEE80211_MAX_CHAINS);
-			msta_link->signal = mt76_rx_signal(mphy->antenna_mask,
+			msta_link->signal = mt76_rx_signal(rx_mask,
 							   msta_link->chain_signal);
 
-			for (i = 0; i < IEEE80211_MAX_CHAINS; ++i)
+			for (i = 0; i < hweight16(rx_mask); ++i)
 				ewma_avg_signal_add(msta_link->chain_signal_avg + i,
 						    -msta_link->chain_signal[i]);
 			ewma_avg_signal_add(&msta_link->signal_avg, -msta_link->signal);
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 6460a760..d1710e19 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -7246,20 +7246,33 @@ int mt7996_mcu_get_per_sta_info(struct mt76_dev *dev, u16 tag,
 	switch (tag) {
 	case UNI_PER_STA_RSSI:
 		for (i = 0; i < sta_num; ++i) {
-			wlan_idx = le16_to_cpu(res->rssi[i].wlan_idx);
+			struct per_sta_rssi *rssi = &res->rssi[i];
+			struct mt76_phy *mphy;
+			struct mt7996_phy *phy;
+			u8 *rcpi = rssi->rcpi;
+			u16 rx_mask;
+
+			wlan_idx = le16_to_cpu(rssi->wlan_idx);
 			wcid = rcu_dereference(dev->wcid[wlan_idx]);
 			msta_link = container_of(wcid, struct mt7996_sta_link, wcid);
-			if (msta_link) {
-				struct mt76_phy *phy = dev->phys[wcid->phy_idx];
-				u8 *rcpi = res->rssi[i].rcpi;
+			if (!msta_link)
+				continue;
 
-				for (j = 0; j < IEEE80211_MAX_CHAINS; ++j)
-					msta_link->chain_ack_signal[j] = to_rssi(MT_PRXV_RCPI0, rcpi[j]);
+			mphy = dev->phys[wcid->phy_idx];
+			phy = mphy->priv;
+			rx_mask = mt7996_rx_chainmask(phy);
 
-				msta_link->ack_signal = mt76_rx_signal(phy->antenna_mask,
-								       msta_link->chain_ack_signal);
-				ewma_avg_signal_add(&msta_link->avg_ack_signal, -msta_link->ack_signal);
+			for (j = 0; j < ARRAY_SIZE(rssi->rcpi); ++j)
+				msta_link->chain_ack_signal[j] = to_rssi(MT_PRXV_RCPI0, rcpi[j]);
+			if (rx_mask & BIT(4)) {
+				msta_link->chain_signal_wf4 = to_rssi(MT_PRXV_RCPI0,
+								      rssi->rcpi_wf4);
+				msta_link->chain_ack_signal[4] = msta_link->chain_signal_wf4;
 			}
+
+			msta_link->ack_signal = mt76_rx_signal(rx_mask,
+							       msta_link->chain_ack_signal);
+			ewma_avg_signal_add(&msta_link->avg_ack_signal, -msta_link->ack_signal);
 		}
 		break;
 	case UNI_PER_STA_SNR:
@@ -7269,7 +7282,7 @@ int mt7996_mcu_get_per_sta_info(struct mt76_dev *dev, u16 tag,
 			msta_link = container_of(wcid, struct mt7996_sta_link, wcid);
 			if (msta_link)
 				memcpy(msta_link->chain_ack_snr, res->snr[i].val,
-				       IEEE80211_MAX_CHAINS);
+				       sizeof(res->snr[i].val));
 		}
 		break;
 	case UNI_PER_STA_PKT_CNT:
diff --git a/mt7996/mcu.h b/mt7996/mcu.h
index c4f4724c..18456f17 100644
--- a/mt7996/mcu.h
+++ b/mt7996/mcu.h
@@ -231,14 +231,15 @@ struct mt7996_mcu_mib {
 
 struct per_sta_rssi {
 	__le16 wlan_idx;
-	u8 __rsv[2];
-	u8 rcpi[IEEE80211_MAX_CHAINS];
+	u8 rcpi_wf4;
+	u8 __rsv;
+	u8 rcpi[4];
 } __packed;
 
 struct per_sta_snr {
 	__le16 wlan_idx;
 	u8 __rsv[2];
-	s8 val[IEEE80211_MAX_CHAINS];
+	s8 val[4];
 } __packed;
 
 struct per_sta_msdu_cnt {
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index ec1ad0b6..50205792 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -434,6 +434,8 @@ struct mt7996_sta_link {
 	int ack_signal;
 	struct ewma_avg_signal avg_ack_signal;
 
+	s8 chain_signal_wf4;
+
 	s8 chain_ack_snr[IEEE80211_MAX_CHAINS];
 
 	unsigned long changed;
-- 
2.45.2

