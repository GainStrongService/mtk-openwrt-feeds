From 81baa2629876206d110149abd84bf54b5b5f1a72 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 5 Nov 2024 10:37:14 +0800
Subject: [PATCH 135/146] mtk: mt76: mt7996: add listmode support

Add listmode support
1. mt76-test phy0 set list_act=tx_seg tx_length=...
2. mt76-test phy0 set list_act=tx_start/tx_stop/...
3. mt76-test phy0 set list_act=rx_stat/dut_stat
4. mt76-test phy0 set list_act=dump_seg/clear_seg

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mt76.h            |  39 +++++++
 mt7996/testmode.c | 269 ++++++++++++++++++++++++++++++++++++++++++++++
 mt7996/testmode.h | 129 ++++++++++++++++++++++
 testmode.c        | 187 ++++++++++++++++++++++++++++++++
 testmode.h        |  49 +++++++++
 tools/fields.c    |  26 +++++
 6 files changed, 699 insertions(+)

diff --git a/mt76.h b/mt76.h
index 0d7107e2..b6a466b3 100644
--- a/mt76.h
+++ b/mt76.h
@@ -805,6 +805,8 @@ struct mt76_testmode_ops {
 	void (*tx_stop)(struct mt76_phy *phy);
 	int (*set_eeprom)(struct mt76_phy *phy, u32 offset, u8 *val, u8 action);
 	int (*dump_precal)(struct mt76_phy *mphy, struct sk_buff *msg, int flag, int type);
+	int (*set_list_mode)(struct mt76_phy *phy, int seg_idx,
+			     enum mt76_testmode_list_act list_act);
 };
 
 #define MT_TM_FW_RX_COUNT	BIT(0)
@@ -881,6 +883,41 @@ struct mt76_testmode_data {
 	u8 ipi_reset;
 };
 
+enum {
+	LM_SEG_TYPE_TX,
+	LM_SEG_TYPE_RX,
+};
+
+struct mt76_list_mode_data {
+	/* seg settings */
+	u8 seg_type;
+	u32 ant_swap;
+	u32 seg_timeout;
+	/* rf settings */
+	u8 addr[3][ETH_ALEN];
+	u8 tx_antenna_mask;
+	u8 rx_antenna_mask;
+	u8 center_ch1;
+	u8 center_ch2;
+	u8 system_bw;
+	u8 data_bw;
+	u8 pri_sel;
+	/* tx settings */
+	u16 tx_mpdu_len;
+	u32 tx_count;
+	u8 tx_power;
+	u8 tx_rate_mode;
+	u8 tx_rate_idx;
+	u8 tx_rate_stbc;
+	u8 tx_rate_ldpc;
+	u32 tx_ipg;
+	u8 tx_rate_sgi;
+	u8 tx_rate_nss;
+	u8 hw_tx_mode;
+	/* rx settings */
+	u32 sta_idx;
+};
+
 struct mt76_vif {
 	u8 idx;
 	u8 omac_idx;
@@ -964,6 +1001,8 @@ struct mt76_phy {
 
 #ifdef CONFIG_NL80211_TESTMODE
 	struct mt76_testmode_data test;
+	struct mt76_list_mode_data *lists;
+	int seg_num;
 #endif
 
 	struct delayed_work mac_work;
diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index c7d87b1a..48ba2e9c 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -255,6 +255,8 @@ mt7996_tm_init(struct mt7996_phy *phy, bool en)
 
 	if (en)
 		INIT_DELAYED_WORK(&phy->ipi_work, mt7996_tm_ipi_work);
+	else
+		kfree(phy->mt76->lists);
 }
 
 void
@@ -2348,6 +2350,272 @@ mt7996_tm_set_eeprom(struct mt76_phy *mphy, u32 offset, u8 *val, u8 action)
 	return ret;
 }
 
+static int
+mt7996_tm_dump_seg_list(struct mt7996_phy *phy)
+{
+	struct mt7996_dev *dev = phy->dev;
+	struct mt76_list_mode_data *list;
+	static const char * const testmode_tx_mode[] = {
+		[MT76_TM_TX_MODE_CCK] = "cck",
+		[MT76_TM_TX_MODE_OFDM] = "ofdm",
+		[MT76_TM_TX_MODE_HT] = "ht",
+		[MT76_TM_TX_MODE_VHT] = "vht",
+		[MT76_TM_TX_MODE_HE_SU] = "he_su",
+		[MT76_TM_TX_MODE_HE_EXT_SU] = "he_ext_su",
+		[MT76_TM_TX_MODE_HE_TB] = "he_tb",
+		[MT76_TM_TX_MODE_HE_MU] = "he_mu",
+		[MT76_TM_TX_MODE_EHT_SU] = "eht_su",
+		[MT76_TM_TX_MODE_EHT_TRIG] = "eht_tb",
+		[MT76_TM_TX_MODE_EHT_MU] = "eht_mu",
+	};
+	int i, cbw, dbw;
+
+	if (!phy->mt76->lists) {
+		dev_info(dev->mt76.dev, "No available segment list\n");
+		return 0;
+	}
+
+	dev_info(dev->mt76.dev, "Total Segment Number %d:\n", phy->mt76->seg_num);
+	for (i = 0; i < phy->mt76->seg_num; i++) {
+		list = &phy->mt76->lists[i];
+
+		dev_info(dev->mt76.dev, "%s Segment %d:\n",
+			 list->seg_type == LM_SEG_TYPE_TX ? "TX" : "RX", i);
+		dev_info(dev->mt76.dev, "\tantenna swap: %d\n", list->ant_swap);
+		dev_info(dev->mt76.dev, "\tsegment timeout: %d\n", list->seg_timeout);
+		dev_info(dev->mt76.dev, "\ttx antenna mask: %d\n", list->tx_antenna_mask);
+		dev_info(dev->mt76.dev, "\trx antenna mask: %d\n", list->rx_antenna_mask);
+		dev_info(dev->mt76.dev, "\tcenter ch1: %d\n", list->center_ch1);
+		dev_info(dev->mt76.dev, "\tcenter ch2: %d\n", list->center_ch2);
+		cbw = mt7996_tm_bw_mapping(list->system_bw, BW_MAP_NL_TO_MHZ);
+		dbw = mt7996_tm_bw_mapping(list->data_bw, BW_MAP_NL_TO_MHZ);
+		dev_info(dev->mt76.dev, "\tsystem bw: %d MH\n", cbw);
+		dev_info(dev->mt76.dev, "\tdata bw: %d MHz\n", dbw);
+		dev_info(dev->mt76.dev, "\tprimary selection: %d\n", list->pri_sel);
+		if (list->seg_type == LM_SEG_TYPE_TX) {
+			dev_info(dev->mt76.dev, "\tda: %pM\n", list->addr[0]);
+			dev_info(dev->mt76.dev, "\tsa: %pM\n", list->addr[1]);
+			dev_info(dev->mt76.dev, "\tbssid: %pM\n", list->addr[2]);
+			dev_info(dev->mt76.dev, "\ttx mpdu len: %d\n", list->tx_mpdu_len);
+			dev_info(dev->mt76.dev, "\ttx count: %d\n", list->tx_count);
+			dev_info(dev->mt76.dev, "\ttx power: %d\n", list->tx_power);
+			dev_info(dev->mt76.dev, "\ttx rate mode: %s\n",
+				 testmode_tx_mode[list->tx_rate_mode]);
+			dev_info(dev->mt76.dev, "\ttx rate idx: %d\n", list->tx_rate_idx);
+			dev_info(dev->mt76.dev, "\ttx rate stbc: %d\n", list->tx_rate_stbc);
+			dev_info(dev->mt76.dev, "\ttx rate ldpc: %d\n", list->tx_rate_ldpc);
+			dev_info(dev->mt76.dev, "\ttx ipg: %d\n", list->tx_ipg);
+			dev_info(dev->mt76.dev, "\ttx rate sgi: %d\n", list->tx_rate_sgi);
+			dev_info(dev->mt76.dev, "\ttx rate nss: %d\n", list->tx_rate_nss);
+			dev_info(dev->mt76.dev, "\thw tx mode: %d\n", list->hw_tx_mode);
+		} else {
+			dev_info(dev->mt76.dev, "\town addr: %pM\n", list->addr[0]);
+			dev_info(dev->mt76.dev, "\tsta idx: %d\n", list->sta_idx);
+		}
+		dev_info(dev->mt76.dev, "\n");
+	}
+
+	return 0;
+}
+
+static int
+mt7996_tm_get_list_mode_rx_stat(struct mt7996_dev *dev, int ext_id)
+{
+	struct mt7996_tm_list_req req = {
+		.tag = cpu_to_le16(UNI_RF_TEST_LIST_MODE),
+		.len = cpu_to_le16(sizeof(req.seg)),
+		.seg.rx_stat.ext_id = cpu_to_le32(ext_id),
+	};
+	int seg_idx, total_seg, seg_read_num, ret;
+	struct mt7996_tm_list_event *event;
+	struct sk_buff *skb;
+
+	for (seg_idx = 0; seg_idx < LIST_SEG_MAX_NUM;) {
+		struct lm_rx_status *rx_stat;
+		int i;
+
+		req.seg.rx_stat.seg_start_idx = cpu_to_le32(seg_idx);
+		ret = mt76_mcu_send_and_get_msg(&dev->mt76, MCU_WM_UNI_CMD_QUERY(TESTMODE_CTRL),
+						&req, sizeof(req), true, &skb);
+		if (ret)
+			break;
+
+		event = (struct mt7996_tm_list_event *)skb->data;
+		total_seg = le32_to_cpu(event->total_seg);
+		seg_read_num = le32_to_cpu(event->seg_read_num);
+		if (seg_idx == 0)
+			dev_info(dev->mt76.dev,
+				 "ext_id: %d, status: %d, total_seg: %d, seg_read_num: %d\n",
+				 le32_to_cpu(event->ext_id), le16_to_cpu(event->status),
+				 total_seg, seg_read_num);
+
+		if (!seg_read_num)
+			break;
+
+		for (i = 0; i < seg_read_num; i++) {
+			rx_stat = &event->rx_stats[i];
+			dev_info(dev->mt76.dev, "seg_idx: %u, rx_ok: %u, fcs_err: %u\n",
+				 seg_idx + i, le32_to_cpu(rx_stat->rx_ok),
+				 le32_to_cpu(rx_stat->fcs_err));
+			dev_info(dev->mt76.dev, "rssi: %d, %d, %d, %d, %d\n",
+				 le32_to_cpu(rx_stat->rssi0), le32_to_cpu(rx_stat->rssi1),
+				 le32_to_cpu(rx_stat->rssi2), le32_to_cpu(rx_stat->rssi3),
+				 le32_to_cpu(rx_stat->rssi4));
+		}
+
+		seg_idx += seg_read_num;
+		if (seg_idx >= total_seg)
+			break;
+	}
+
+	return 0;
+}
+
+static int
+mt7996_tm_set_list_mode(struct mt76_phy *mphy, int seg_idx,
+			enum mt76_testmode_list_act list_act)
+{
+	struct mt76_list_mode_data *list = &mphy->lists[seg_idx];
+	struct mt7996_phy *phy = mphy->priv;
+	struct mt7996_dev *dev = phy->dev;
+	struct cfg80211_chan_def *chandef = &mphy->chandef;
+	struct ieee80211_channel *chan = chandef->chan;
+	struct mt7996_tm_list_req req = {
+		.tag = cpu_to_le16(UNI_RF_TEST_LIST_MODE),
+		.len = cpu_to_le16(sizeof(req.seg)),
+	};
+	static const u8 ch_band[] = {
+		[NL80211_BAND_2GHZ] = 0,
+		[NL80211_BAND_5GHZ] = 1,
+		[NL80211_BAND_6GHZ] = 2,
+	};
+	static const u8 lm_ext_id[] = {
+		[MT76_TM_LM_ACT_SET_TX_SEGMENT] = 16,
+		[MT76_TM_LM_ACT_TX_START] = 17,
+		[MT76_TM_LM_ACT_TX_STOP] = 19,
+		[MT76_TM_LM_ACT_SET_RX_SEGMENT] = 20,
+		[MT76_TM_LM_ACT_RX_START] = 21,
+		[MT76_TM_LM_ACT_RX_STOP] = 23,
+		[MT76_TM_LM_ACT_SWITCH_SEGMENT] = 25,
+		[MT76_TM_LM_ACT_RX_STATUS] = 22,
+		[MT76_TM_LM_ACT_DUT_STATUS] = 24,
+	};
+	static const char * const lm_state[] = {
+		[LM_STATE_IDLE] = "idle",
+		[LM_STATE_DPD_CAL] = "dpd cal",
+		[LM_STATE_TX] = "tx ongoing",
+		[LM_STATE_RX] = "rx ongoing",
+	};
+	int seg_param_num = sizeof(req.seg.tx_seg.rf) / sizeof(u32);
+	int ret, state, band = ch_band[chan->band];
+	struct mt7996_tm_list_event *event;
+	struct sk_buff *skb;
+	u8 cbw, dbw;
+
+	switch (list_act) {
+	case MT76_TM_LM_ACT_SET_TX_SEGMENT:
+		req.seg.tx_seg.hdr.ext_id = cpu_to_le32(lm_ext_id[list_act]);
+		req.seg.tx_seg.hdr.frame_control = cpu_to_le32(0x8);
+		req.seg.tx_seg.hdr.duration = cpu_to_le32(0);
+		req.seg.tx_seg.hdr.seq_id = cpu_to_le32(0);
+		req.seg.tx_seg.hdr.tx_mpdu_len = cpu_to_le32(list->tx_mpdu_len);
+		memcpy(req.seg.tx_seg.hdr.da, list->addr[0], ETH_ALEN);
+		memcpy(req.seg.tx_seg.hdr.sa, list->addr[1], ETH_ALEN);
+		memcpy(req.seg.tx_seg.hdr.bssid, list->addr[2], ETH_ALEN);
+		req.seg.tx_seg.hdr.tx_rate_stbc = cpu_to_le32(list->tx_rate_stbc);
+		req.seg.tx_seg.hdr.seg_num = cpu_to_le32(1);
+		seg_param_num += sizeof(req.seg.tx_seg.tx) / sizeof(u32);
+		req.seg.tx_seg.hdr.seg_param_num = cpu_to_le32(seg_param_num);
+		req.seg.tx_seg.rf.seg_idx = cpu_to_le32(seg_idx);
+		req.seg.tx_seg.rf.band = cpu_to_le32(band);
+		req.seg.tx_seg.rf.band_idx = cpu_to_le32(mphy->band_idx);
+		req.seg.tx_seg.rf.tx_antenna_mask = cpu_to_le32(list->tx_antenna_mask);
+		req.seg.tx_seg.rf.rx_antenna_mask = cpu_to_le32(list->rx_antenna_mask);
+		req.seg.tx_seg.rf.center_ch1 = cpu_to_le32(list->center_ch1);
+		req.seg.tx_seg.rf.center_ch2 = cpu_to_le32(list->center_ch2);
+		cbw = mt7996_tm_bw_mapping(list->system_bw, BW_MAP_NL_TO_TM);
+		dbw = mt7996_tm_bw_mapping(list->data_bw, BW_MAP_NL_TO_TM);
+		req.seg.tx_seg.rf.system_bw = cpu_to_le32(cbw);
+		req.seg.tx_seg.rf.data_bw = cpu_to_le32(dbw);
+		req.seg.tx_seg.rf.pri_sel = cpu_to_le32(list->pri_sel);
+		req.seg.tx_seg.tx.ch_band = cpu_to_le32(band);
+		req.seg.tx_seg.tx.tx_mpdu_len = cpu_to_le32(list->tx_mpdu_len);
+		req.seg.tx_seg.tx.tx_count = cpu_to_le32(list->tx_count);
+		req.seg.tx_seg.tx.tx_power = cpu_to_le32(list->tx_power);
+		req.seg.tx_seg.tx.tx_rate_mode = cpu_to_le32(list->tx_rate_mode);
+		req.seg.tx_seg.tx.tx_rate_idx = cpu_to_le32(list->tx_rate_idx);
+		req.seg.tx_seg.tx.tx_rate_ldpc = cpu_to_le32(list->tx_rate_ldpc);
+		req.seg.tx_seg.tx.tx_ipg = cpu_to_le32(list->tx_ipg);
+		req.seg.tx_seg.tx.tx_rate_sgi = cpu_to_le32(list->tx_rate_sgi);
+		req.seg.tx_seg.tx.tx_rate_nss = cpu_to_le32(list->tx_rate_nss);
+		req.seg.tx_seg.tx.hw_tx_mode = cpu_to_le32(0);
+		req.seg.tx_seg.tx.ant_swap = cpu_to_le32(0);
+		req.seg.tx_seg.tx.seg_timeout = cpu_to_le32(list->seg_timeout);
+		break;
+	case MT76_TM_LM_ACT_SET_RX_SEGMENT:
+		req.seg.rx_seg.hdr.ext_id = cpu_to_le32(lm_ext_id[list_act]);
+		memcpy(req.seg.rx_seg.hdr.addr, list->addr[0], ETH_ALEN);
+		req.seg.rx_seg.hdr.seg_num = cpu_to_le32(1);
+		seg_param_num += sizeof(req.seg.rx_seg.rx) / sizeof(u32);
+		req.seg.rx_seg.hdr.seg_param_num = cpu_to_le32(seg_param_num);
+		req.seg.rx_seg.rf.seg_idx = cpu_to_le32(seg_idx);
+		req.seg.rx_seg.rf.band = cpu_to_le32(band);
+		req.seg.rx_seg.rf.band_idx = cpu_to_le32(mphy->band_idx);
+		req.seg.rx_seg.rf.tx_antenna_mask = cpu_to_le32(list->tx_antenna_mask);
+		req.seg.rx_seg.rf.rx_antenna_mask = cpu_to_le32(list->rx_antenna_mask);
+		req.seg.rx_seg.rf.center_ch1 = cpu_to_le32(list->center_ch1);
+		req.seg.rx_seg.rf.center_ch2 = cpu_to_le32(list->center_ch2);
+		cbw = mt7996_tm_bw_mapping(list->system_bw, BW_MAP_NL_TO_TM);
+		dbw = mt7996_tm_bw_mapping(list->data_bw, BW_MAP_NL_TO_TM);
+		req.seg.rx_seg.rf.system_bw = cpu_to_le32(cbw);
+		req.seg.rx_seg.rf.data_bw = cpu_to_le32(dbw);
+		req.seg.rx_seg.rf.pri_sel = cpu_to_le32(list->pri_sel);
+		req.seg.rx_seg.rx.sta_idx = cpu_to_le32(list->sta_idx);
+		req.seg.rx_seg.rx.ch_band = cpu_to_le32(band);
+		req.seg.rx_seg.rx.ant_swap = cpu_to_le32(0);
+		req.seg.rx_seg.rx.seg_timeout = cpu_to_le32(list->seg_timeout);
+		break;
+	case MT76_TM_LM_ACT_TX_START:
+	case MT76_TM_LM_ACT_TX_STOP:
+	case MT76_TM_LM_ACT_RX_START:
+	case MT76_TM_LM_ACT_RX_STOP:
+	case MT76_TM_LM_ACT_SWITCH_SEGMENT:
+	case MT76_TM_LM_ACT_DUT_STATUS:
+		req.seg.ext_id = cpu_to_le32(lm_ext_id[list_act]);
+		break;
+	case MT76_TM_LM_ACT_RX_STATUS:
+		return mt7996_tm_get_list_mode_rx_stat(dev, lm_ext_id[list_act]);
+	case MT76_TM_LM_ACT_CLEAR_SEGMENT:
+		kfree(mphy->lists);
+		mphy->lists = NULL;
+		mphy->seg_num = 0;
+		return 0;
+	case MT76_TM_LM_ACT_DUMP_SEGMENT:
+		return mt7996_tm_dump_seg_list(phy);
+	default:
+		return -EINVAL;
+	}
+
+	ret = mt76_mcu_send_and_get_msg(&dev->mt76, MCU_WM_UNI_CMD_QUERY(TESTMODE_CTRL),
+					&req, sizeof(req), true, &skb);
+	if (ret)
+		return ret;
+
+	event = (struct mt7996_tm_list_event *)skb->data;
+	dev_info(dev->mt76.dev, "ext_id: %u, status: %u, total_seg: %u, seg_read_num: %u\n",
+		 le32_to_cpu(event->ext_id), le16_to_cpu(event->status),
+		 le32_to_cpu(event->total_seg), le32_to_cpu(event->seg_read_num));
+
+	state = le32_to_cpu(event->event_state.state);
+	if (list_act == MT76_TM_LM_ACT_DUT_STATUS && state < LM_STATE_NUM)
+		dev_info(dev->mt76.dev, "Event seg_idx: %u, state: %s\n",
+			 le32_to_cpu(event->event_state.seg_idx), lm_state[state]);
+
+	dev_kfree_skb(skb);
+
+	return ret;
+}
+
 const struct mt76_testmode_ops mt7996_testmode_ops = {
 	.set_state = mt7996_tm_set_state,
 	.set_params = mt7996_tm_set_params,
@@ -2356,4 +2624,5 @@ const struct mt76_testmode_ops mt7996_testmode_ops = {
 	.tx_stop = mt7996_tm_tx_stop,
 	.set_eeprom = mt7996_tm_set_eeprom,
 	.dump_precal = mt7996_tm_dump_precal,
+	.set_list_mode = mt7996_tm_set_list_mode,
 };
diff --git a/mt7996/testmode.h b/mt7996/testmode.h
index 154392dc..2dc9760e 100644
--- a/mt7996/testmode.h
+++ b/mt7996/testmode.h
@@ -123,6 +123,7 @@ enum {
 
 enum {
 	UNI_RF_TEST_CTRL,
+	UNI_RF_TEST_LIST_MODE,
 };
 
 #define RF_CMD(cmd)		RF_TEST_CMD_##cmd
@@ -369,4 +370,132 @@ struct efuse_region {
 	u16 prot_mask;
 };
 
+/* list mode */
+
+struct lm_tx_seg_hdr {
+	__le32 ext_id;
+	__le32 frame_control;
+	__le32 duration;
+	__le32 seq_id;
+	__le32 tx_mpdu_len;
+	u8 da[ETH_ALEN];
+	u8 sa[ETH_ALEN];
+	u8 bssid[ETH_ALEN];
+	__le32 tx_rate_stbc;
+	__le32 seg_num;
+	__le32 seg_param_num;
+} __packed;
+
+struct lm_rx_seg_hdr {
+	__le32 ext_id;
+	u8 addr[ETH_ALEN];
+	__le32 seg_num;
+	__le32 seg_param_num;
+} __packed;
+
+struct lm_rf_setting {
+	__le32 seg_idx;
+	__le32 band;
+	__le32 band_idx;
+	__le32 tx_antenna_mask;
+	__le32 rx_antenna_mask;
+	__le32 center_ch1;
+	__le32 center_ch2;
+	__le32 system_bw;
+	__le32 data_bw;
+	__le32 pri_sel;
+} __packed;
+
+struct lm_tx_setting {
+	__le32 ch_band;
+	__le32 tx_mpdu_len;
+	__le32 tx_count;
+	__le32 tx_power;
+	__le32 tx_rate_mode;
+	__le32 tx_rate_idx;
+	__le32 tx_rate_ldpc;
+	__le32 tx_ipg;
+	__le32 tx_rate_sgi;
+	__le32 tx_rate_nss;
+	__le32 hw_tx_mode;
+	__le32 ant_swap;
+	__le32 seg_timeout;
+} __packed;
+
+struct lm_rx_setting {
+	__le32 sta_idx;
+	__le32 ch_band;
+	__le32 ant_swap;
+	__le32 seg_timeout;
+} __packed;
+
+struct mt7996_tm_list_tx_seg {
+	struct lm_tx_seg_hdr hdr;
+	struct lm_rf_setting rf;
+	struct lm_tx_setting tx;
+};
+
+struct mt7996_tm_list_rx_seg {
+	struct lm_rx_seg_hdr hdr;
+	struct lm_rf_setting rf;
+	struct lm_rx_setting rx;
+};
+
+struct mt7996_tm_list_rx_stat {
+	__le32 ext_id;
+	__le32 seg_start_idx;
+} __packed;
+
+struct mt7996_tm_list_req {
+	u8 _rsv[4];
+
+	__le16 tag;
+	__le16 len;
+	union {
+		struct mt7996_tm_list_tx_seg tx_seg;
+		struct mt7996_tm_list_rx_seg rx_seg;
+		struct mt7996_tm_list_rx_stat rx_stat;
+		__le32 ext_id;
+	} seg;
+} __packed;
+
+enum lm_state {
+	LM_STATE_IDLE,
+	LM_STATE_DPD_CAL,
+	LM_STATE_TX,
+	LM_STATE_RX,
+	LM_STATE_NUM,
+};
+
+struct lm_event_state {
+	enum lm_state state;
+	__le32 seg_idx;
+} __packed;
+
+struct lm_rx_status {
+	__le32 rx_ok;
+	__le32 fcs_err;
+	s32 rssi0;
+	s32 rssi1;
+	s32 rssi2;
+	s32 rssi3;
+	s32 rssi4;
+} __packed;
+
+struct mt7996_tm_list_event {
+	/* FIXME: the actual event data has two extra byte */
+	u8 rsv[2];
+
+	__le16 status;
+	__le32 ext_id;
+	__le32 total_seg;
+	__le32 seg_read_num;
+	union {
+		DECLARE_FLEX_ARRAY(__le32, tx_stats);
+		DECLARE_FLEX_ARRAY(struct lm_rx_status, rx_stats);
+		struct lm_event_state event_state;
+		u8 event[1024];
+	};
+} __packed;
+
 #endif
diff --git a/testmode.c b/testmode.c
index 8ac85844..47325cbf 100644
--- a/testmode.c
+++ b/testmode.c
@@ -36,6 +36,12 @@ const struct nla_policy mt76_tm_policy[NUM_MT76_TM_ATTRS] = {
 	[MT76_TM_ATTR_IPI_THRESHOLD] = { .type = NLA_U8 },
 	[MT76_TM_ATTR_IPI_PERIOD] = { .type = NLA_U32 },
 	[MT76_TM_ATTR_IPI_RESET] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_ACT] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_SEG_IDX] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_CENTER_CH] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_CBW] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_STA_IDX] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_SEG_TIMEOUT] = { .type = NLA_U32 },
 };
 EXPORT_SYMBOL_GPL(mt76_tm_policy);
 
@@ -524,6 +530,182 @@ mt76_tm_get_u8(struct nlattr *attr, u8 *dest, u8 min, u8 max)
 	return 0;
 }
 
+static void
+mt76_testmode_list_init_defaults(struct mt76_phy *phy, u8 seg_idx, u8 seg_type)
+{
+	struct mt76_list_mode_data *list = &phy->lists[seg_idx];
+	u8 addr[ETH_ALEN] = {phy->band_idx, 0x11, 0x22, 0x33, 0x44, 0x55};
+
+	list->seg_type = seg_type;
+	list->seg_timeout = 200;
+	/* rf settings */
+	memcpy(list->addr[0], addr, ETH_ALEN);
+	memcpy(list->addr[1], addr, ETH_ALEN);
+	memcpy(list->addr[2], addr, ETH_ALEN);
+	list->tx_antenna_mask = phy->antenna_mask;
+	list->rx_antenna_mask = phy->antenna_mask;
+	if (phy->chandef.chan)
+		list->center_ch1 = phy->chandef.chan->hw_value;
+
+	/* tx settings */
+	list->tx_mpdu_len = 1024;
+	list->tx_count = 1000;
+	list->tx_power = 23;
+	list->tx_rate_mode = MT76_TM_TX_MODE_OFDM;
+	list->tx_rate_idx = 7;
+	list->tx_rate_nss = 1;
+	list->tx_ipg = 50;
+}
+
+static int
+mt76_testmode_set_list_mode(struct mt76_phy *phy, struct nlattr **tb)
+{
+	struct mt76_dev *dev = phy->dev;
+	struct mt76_list_mode_data *list;
+	u8 list_act, seg_idx, seg_type;
+	u8 min_ch, max_ch;
+	int err;
+
+	if (!dev->test_ops->set_list_mode)
+		return -EOPNOTSUPP;
+
+	err = mt76_tm_get_u8(tb[MT76_TM_ATTR_LM_ACT], &list_act, 0, MT76_TM_LM_ACT_MAX);
+	if (err)
+		return err;
+
+	if (list_act != MT76_TM_LM_ACT_SET_TX_SEGMENT &&
+	    list_act != MT76_TM_LM_ACT_SET_RX_SEGMENT)
+		return dev->test_ops->set_list_mode(phy, 0, list_act);
+
+	if (!tb[MT76_TM_ATTR_LM_SEG_IDX] ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_LM_SEG_IDX], &seg_idx, 0, LIST_SEG_MAX_NUM) ||
+	    seg_idx > phy->seg_num)
+		return -EINVAL;
+
+	if (list_act == MT76_TM_LM_ACT_SET_TX_SEGMENT)
+		seg_type = LM_SEG_TYPE_TX;
+	else
+		seg_type = LM_SEG_TYPE_RX;
+
+	if (!phy->lists) {
+		phy->lists = kzalloc(sizeof(*phy->lists), GFP_KERNEL);
+		if (!phy->lists)
+			return -ENOMEM;
+
+		phy->seg_num = 1;
+		mt76_testmode_list_init_defaults(phy, seg_idx, seg_type);
+	} else {
+		/* mixed segment type is not allowed */
+		if (phy->lists[0].seg_type != seg_type)
+			return -EINVAL;
+		if (seg_idx == phy->seg_num) {
+			unsigned long size;
+			void *tmp;
+
+			phy->seg_num++;
+			size = sizeof(*phy->lists) * phy->seg_num;
+			tmp = krealloc((void *)phy->lists, size, GFP_KERNEL);
+			if (!tmp)
+				return -ENOMEM;
+
+			phy->lists = (struct mt76_list_mode_data *)tmp;
+			mt76_testmode_list_init_defaults(phy, seg_idx, seg_type);
+		}
+	}
+
+	list = &phy->lists[seg_idx];
+
+	if (tb[MT76_TM_ATTR_LM_CENTER_CH]) {
+		struct ieee80211_supported_band *sband = NULL;
+		int n_channels;
+
+		if (phy->cap.has_2ghz)
+			sband = &phy->sband_2g.sband;
+		if (phy->cap.has_5ghz)
+			sband = &phy->sband_5g.sband;
+		if (phy->cap.has_6ghz)
+			sband = &phy->sband_6g.sband;
+		if (!sband)
+			return -EINVAL;
+
+		n_channels = sband->n_channels;
+		min_ch = sband->channels[0].hw_value;
+		max_ch = sband->channels[n_channels - 1].hw_value;
+	}
+
+	if (mt76_tm_get_u8(tb[MT76_TM_ATTR_TX_ANTENNA], &list->tx_antenna_mask, 0, 0xff) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_TX_ANTENNA], &list->rx_antenna_mask, 0, 0xff) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_LM_CBW], &list->system_bw,
+			   NL80211_CHAN_WIDTH_20_NOHT, NL80211_CHAN_WIDTH_320) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_TX_PKT_BW], &list->data_bw,
+			   NL80211_CHAN_WIDTH_20_NOHT, NL80211_CHAN_WIDTH_320) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_TX_PRI_SEL], &list->pri_sel, 0, 15) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_TX_RATE_MODE], &list->tx_rate_mode,
+			   0, MT76_TM_TX_MODE_MAX) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_TX_RATE_NSS], &list->tx_rate_nss,
+			   1, hweight8(phy->antenna_mask)) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_TX_RATE_SGI], &list->tx_rate_sgi, 0, 2) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_TX_RATE_LDPC], &list->tx_rate_ldpc, 0, 1) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_TX_RATE_STBC], &list->tx_rate_stbc, 0, 1) ||
+	    mt76_tm_get_u8(tb[MT76_TM_ATTR_LM_CENTER_CH], &list->center_ch1, min_ch, max_ch))
+		return -EINVAL;
+
+	if (tb[MT76_TM_ATTR_MAC_ADDRS]) {
+		struct nlattr *cur;
+		int idx = 0;
+		int rem;
+
+		nla_for_each_nested(cur, tb[MT76_TM_ATTR_MAC_ADDRS], rem) {
+			if (nla_len(cur) != ETH_ALEN || idx >= ARRAY_SIZE(list->addr))
+				return -EINVAL;
+
+			memcpy(list->addr[idx], nla_data(cur), ETH_ALEN);
+			idx++;
+		}
+	}
+
+	if (tb[MT76_TM_ATTR_TX_POWER]) {
+		struct nlattr *cur;
+		int idx = 0;
+		int rem;
+
+		nla_for_each_nested(cur, tb[MT76_TM_ATTR_TX_POWER], rem) {
+			if (nla_len(cur) != 1 || idx >= 1)
+				return -EINVAL;
+
+			err = mt76_tm_get_u8(cur, &list->tx_power, 0, 63);
+			if (err)
+				return err;
+			idx++;
+		}
+	}
+
+	if (tb[MT76_TM_ATTR_TX_LENGTH]) {
+		u32 val = nla_get_u32(tb[MT76_TM_ATTR_TX_LENGTH]);
+
+		if (val > mt76_testmode_max_mpdu_len(phy, list->tx_rate_mode) ||
+		    val < sizeof(struct ieee80211_hdr))
+			return -EINVAL;
+
+		list->tx_mpdu_len = val;
+	}
+
+	if (tb[MT76_TM_ATTR_TX_COUNT])
+		list->tx_count = nla_get_u32(tb[MT76_TM_ATTR_TX_COUNT]);
+	if (tb[MT76_TM_ATTR_TX_RATE_IDX])
+		list->tx_rate_idx = nla_get_u8(tb[MT76_TM_ATTR_TX_RATE_IDX]);
+	if (tb[MT76_TM_ATTR_TX_IPG])
+		list->tx_ipg = nla_get_u32(tb[MT76_TM_ATTR_TX_IPG]);
+	if (tb[MT76_TM_ATTR_LM_STA_IDX])
+		list->sta_idx = nla_get_u8(tb[MT76_TM_ATTR_LM_STA_IDX]);
+	if (tb[MT76_TM_ATTR_LM_SEG_TIMEOUT])
+		list->seg_timeout = nla_get_u32(tb[MT76_TM_ATTR_LM_SEG_TIMEOUT]);
+
+	err = dev->test_ops->set_list_mode(phy, seg_idx, list_act);
+
+	return err;
+}
+
 static int
 mt76_testmode_set_eeprom(struct mt76_phy *phy, struct nlattr **tb)
 {
@@ -623,6 +805,11 @@ int mt76_testmode_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	mutex_lock(&dev->mutex);
 
+	if (tb[MT76_TM_ATTR_LM_ACT]) {
+		err = mt76_testmode_set_list_mode(phy, tb);
+		goto out;
+	}
+
 	if (tb[MT76_TM_ATTR_EEPROM_ACTION]) {
 		err = mt76_testmode_set_eeprom(phy, tb);
 		goto out;
diff --git a/testmode.h b/testmode.h
index 8e751bbf..f4c0cb5f 100644
--- a/testmode.h
+++ b/testmode.h
@@ -81,6 +81,13 @@
  *				    the histogram of specific IPI index (u8)
  * @MT76_TM_ATTR_IPI_RESET: Reset the IPI counter
  *
+ * @MT76_TM_ATTR_LM_ACT: list mode setting actions (u8)
+ * @MT76_TM_ATTR_LM_SEG_IDX: segment index used in list mode (u8)
+ * @MT76_TM_ATTR_LM_CENTER_CH: center channel used in list mode (u8)
+ * @MT76_TM_ATTR_LM_CBW: system index used in list mode (u8)
+ * @MT76_TM_ATTR_LM_STA_IDX: station index used in list mode (u8)
+ * @MT76_TM_ATTR_LM_SEG_TIMEOUT: TX/RX segment timeout used in list mode (u8)
+ *
  */
 enum mt76_testmode_attr {
 	MT76_TM_ATTR_UNSPEC,
@@ -147,6 +154,13 @@ enum mt76_testmode_attr {
 	MT76_TM_ATTR_IPI_ANTENNA_INDEX,
 	MT76_TM_ATTR_IPI_RESET,
 
+	MT76_TM_ATTR_LM_ACT,
+	MT76_TM_ATTR_LM_SEG_IDX,
+	MT76_TM_ATTR_LM_CENTER_CH,
+	MT76_TM_ATTR_LM_CBW,
+	MT76_TM_ATTR_LM_STA_IDX,
+	MT76_TM_ATTR_LM_SEG_TIMEOUT,
+
 	/* keep last */
 	NUM_MT76_TM_ATTRS,
 	MT76_TM_ATTR_MAX = NUM_MT76_TM_ATTRS - 1,
@@ -347,4 +361,39 @@ enum mt76_testmode_txbf_act {
 	MT76_TM_TXBF_ACT_MAX = NUM_MT76_TM_TXBF_ACT - 1,
 };
 
+#define LIST_SEG_MAX_NUM	100
+
+/**
+ * enum mt76_testmode_list_act - list mode action
+ *
+ * @MT76_TM_LM_ACT_SET_TX_SEGMENT: set the config of a TX segment
+ * @MT76_TM_LM_ACT_TX_START: start list TX
+ * @MT76_TM_LM_ACT_TX_STOP: stop list TX
+ * @MT76_TM_LM_ACT_SET_RX_SEGMENT: set the config of a RX segment
+ * @MT76_TM_LM_ACT_RX_START: start list RX
+ * @MT76_TM_LM_ACT_RX_STOP: stop list RX
+ * @MT76_TM_LM_ACT_SWITCH_SEGMENT: switch TX/RX segment
+ * @MT76_TM_LM_ACT_RX_STATUS: get RX status
+ * @MT76_TM_LM_ACT_DUT_STATUS: get DUT status
+ * @MT76_TM_LM_ACT_CLEAR_SEGMENT: clear all the TX/RX segments
+ * @MT76_TM_LM_ACT_DUMP_SEGMENT: dump all the TX/RX segment settings
+ */
+enum mt76_testmode_list_act {
+	MT76_TM_LM_ACT_SET_TX_SEGMENT,
+	MT76_TM_LM_ACT_TX_START,
+	MT76_TM_LM_ACT_TX_STOP,
+	MT76_TM_LM_ACT_SET_RX_SEGMENT,
+	MT76_TM_LM_ACT_RX_START,
+	MT76_TM_LM_ACT_RX_STOP,
+	MT76_TM_LM_ACT_SWITCH_SEGMENT,
+	MT76_TM_LM_ACT_RX_STATUS,
+	MT76_TM_LM_ACT_DUT_STATUS,
+	MT76_TM_LM_ACT_CLEAR_SEGMENT,
+	MT76_TM_LM_ACT_DUMP_SEGMENT,
+
+	/* keep last */
+	NUM_MT76_TM_LM_ACT,
+	MT76_TM_LM_ACT_MAX = NUM_MT76_TM_LM_ACT - 1,
+};
+
 #endif
diff --git a/tools/fields.c b/tools/fields.c
index 8b372602..549c3433 100644
--- a/tools/fields.c
+++ b/tools/fields.c
@@ -76,6 +76,20 @@ static const char * const testmode_txbf_act[] = {
 	[MT76_TM_TXBF_ACT_TXCMD] = "txcmd",
 };
 
+static const char * const testmode_list_act[] = {
+	[MT76_TM_LM_ACT_SET_TX_SEGMENT] = "tx_seg",
+	[MT76_TM_LM_ACT_TX_START] = "tx_start",
+	[MT76_TM_LM_ACT_TX_STOP] = "tx_stop",
+	[MT76_TM_LM_ACT_SET_RX_SEGMENT] = "rx_seg",
+	[MT76_TM_LM_ACT_RX_START] = "rx_start",
+	[MT76_TM_LM_ACT_RX_STOP] = "rx_stop",
+	[MT76_TM_LM_ACT_SWITCH_SEGMENT] = "switch_seg",
+	[MT76_TM_LM_ACT_RX_STATUS] = "rx_stat",
+	[MT76_TM_LM_ACT_DUT_STATUS] = "dut_stat",
+	[MT76_TM_LM_ACT_CLEAR_SEGMENT] = "clear_seg",
+	[MT76_TM_LM_ACT_DUMP_SEGMENT] = "dump_seg",
+};
+
 static void print_enum(const struct tm_field *field, struct nlattr *attr)
 {
 	unsigned int i = nla_get_u8(attr);
@@ -452,6 +466,12 @@ static const struct tm_field testdata_fields[NUM_MT76_TM_ATTRS] = {
 	FIELD(u8, IPI_THRESHOLD, "ipi_threshold"),
 	FIELD(u32, IPI_PERIOD, "ipi_period"),
 	FIELD(u8, IPI_RESET, "ipi_reset"),
+	FIELD_ENUM(LM_ACT, "list_act", testmode_list_act),
+	FIELD(u8, LM_SEG_IDX, "lm_seg_idx"),
+	FIELD(u8, LM_CENTER_CH, "lm_center_ch"),
+	FIELD_ENUM(LM_CBW, "lm_cbw", testmode_bw),
+	FIELD(u8, LM_STA_IDX, "lm_sta_idx"),
+	FIELD(u32, LM_SEG_TIMEOUT, "lm_seg_timeout"),
 	FIELD_MAC(MAC_ADDRS, "mac_addrs"),
 	FIELD_NESTED_RO(STATS, stats, "",
 			.print_extra = print_extra_stats),
@@ -494,6 +514,12 @@ static struct nla_policy testdata_policy[NUM_MT76_TM_ATTRS] = {
 	[MT76_TM_ATTR_IPI_PERIOD] = { .type = NLA_U32 },
 	[MT76_TM_ATTR_IPI_ANTENNA_INDEX] = { .type = NLA_U8 },
 	[MT76_TM_ATTR_IPI_RESET] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_ACT] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_SEG_IDX] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_CENTER_CH] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_CBW] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_STA_IDX] = { .type = NLA_U8 },
+	[MT76_TM_ATTR_LM_SEG_TIMEOUT] = { .type = NLA_U32 },
 };
 
 const struct tm_field msg_field = {
-- 
2.45.2

