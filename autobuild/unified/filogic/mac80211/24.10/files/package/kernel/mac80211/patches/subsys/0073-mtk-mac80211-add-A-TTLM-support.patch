From d17c14302e5dcd3a5e0fe679ab16abc24cc6cf5f Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Wed, 3 Jul 2024 17:05:01 +0800
Subject: [PATCH 73/87] mtk: mac80211: add A-TTLM support

There are 3 A-TTLM events from the driver, and mac80211 just forward
them
1. A-TTLM started: the switch time in TSF is also sent.
2. A-TTLM switch time expired
3. A-TTLM ended

1. move NL80211_ATTR_MLO_LINK_DISABLED_BMP to MTK internal
2. change the order of NL80211_ATTR_MLO_ATTLM_EVENT
3. add comment for Adv-TTLM related attributes

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 include/net/cfg80211.h       | 11 ++++++
 include/net/mac80211.h       | 12 ++++++
 include/uapi/linux/nl80211.h | 43 +++++++++++++++++++++
 net/mac80211/cfg.c           | 23 +++++++++++
 net/wireless/nl80211.c       | 75 ++++++++++++++++++++++++++++++++++++
 net/wireless/rdev-ops.h      | 18 +++++++++
 net/wireless/trace.h         | 45 ++++++++++++++++++++++
 7 files changed, 227 insertions(+)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index ce564e3a..bab00f02 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -5035,6 +5035,8 @@ struct cfg80211_ops {
 				    struct link_station_del_parameters *params);
 	int	(*set_hw_timestamp)(struct wiphy *wiphy, struct net_device *dev,
 				    struct cfg80211_set_hw_timestamp *hwts);
+	int	(*set_attlm)(struct wiphy *wiphy, struct net_device *dev,
+			     u16 disabled_links, u16 switch_time, u32 duration);
 	int	(*set_ttlm)(struct wiphy *wiphy, struct net_device *dev,
 			    struct cfg80211_ttlm_params *params);
 	u32	(*get_radio_mask)(struct wiphy *wiphy, struct net_device *dev);
@@ -9751,6 +9753,15 @@ int cfg80211_bss_color_notify(struct net_device *dev,
 			      enum nl80211_commands cmd, u8 count,
 			      u64 color_bitmap, u8 link_id);
 
+/**
+ * cfg80211_attlm_notify - notify about Advertised Tid-to-Link Mapping
+ * @wdev: the wireless device to check.
+ * @switch_time_tsf_tu: switch time TSF in unit of TUs that is reported by driver.
+ * @event: A-TTLM event
+ * @gfp: allocation flags
+ */
+void cfg80211_attlm_notify(struct wireless_dev *wdev, u16 switch_time_tsf_tu,
+			   enum nl80211_attlm_event event, gfp_t gfp);
 /**
  * cfg80211_obss_color_collision_notify - notify about bss color collision
  * @dev: network device
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 0ded3480..1a29425c 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -4887,6 +4887,8 @@ struct ieee80211_ops {
 			    struct net_device *dev,
 			    enum tc_setup_type type,
 			    void *type_data);
+	int (*set_attlm)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+			 u16 disabled_links, u16 switch_time, u32 druation);
 	enum ieee80211_neg_ttlm_res
 	(*can_neg_ttlm)(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			struct ieee80211_neg_ttlm *ttlm);
@@ -7812,6 +7814,16 @@ int ieee80211_emulate_switch_vif_chanctx(struct ieee80211_hw *hw,
 					 int n_vifs,
 					 enum ieee80211_chanctx_switch_mode mode);
 
+/**
+ * ieee80211_attlm_notify - notify Advertised Tid-to-Link-Mapping
+ * @vif: interface to be notified
+ * @switch_time_tsf_tu: switch time TSF in unit of TUs that is reported by driver.
+ * @event: A-TTLM event
+ * @gfp: allocation flags
+ */
+void ieee80211_attlm_notify(struct ieee80211_vif *vif, u16 switch_time_tsf_tu,
+			    enum nl80211_attlm_event event, gfp_t gfp);
+
 /**
  * ieee80211_links_removed - notify removed links
  * @vif: interface to be notified
diff --git a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
index 34601c99..932a1474 100644
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -1588,6 +1588,10 @@ enum nl80211_commands {
 
 	/* add new commands above here */
 
+	/* MTK internal */
+	NL80211_CMD_ATTLM_EVENT,
+	NL80211_CMD_SET_ATTLM,
+
 	/* used to define NL80211_CMD_MAX below */
 	__NL80211_CMD_AFTER_LAST,
 	NL80211_CMD_MAX = __NL80211_CMD_AFTER_LAST - 1
@@ -2874,6 +2878,25 @@ enum nl80211_commands {
  *	switch or color change counters in the per-STA profile corresponding to
  *	the affected AP.
  *
+ * @NL80211_ATTR_MLO_LINK_DISABLED_BMP: u16 bitmap of A-TTLM disabled links for
+ * 	the %NL80211_CMD_SET_ATTLM.
+ *
+ * @NL80211_ATTR_MLO_ATTLM_SWITCH_TIME: u16 attribute specifying the time for
+ * 	how long the Adv-TTLM is established.
+ *
+ * @NL80211_ATTR_MLO_ATTLM_DURATION: u32 attribute specifying the duration
+ * 	of the Adv-TTLM.
+ *
+ * @NL80211_ATTR_MLO_ATTLM_EVENT: Type of Adv-TTLM event for notification to
+ * 	userspace, contains a value of enum nl80211_attlm_event (u32).
+ *
+ * @NL80211_ATTR_MLO_ATTLM_SWITCH_TIME_TSF_TU: u16 attribute reported by the
+ * 	driver to speciffy the switch time in TU at which the Adv-TTLM is
+ * 	established.
+ *
+ * @NL80211_ATTR_CRTI_UPDATE_EVENT: Type of critical update event for notification
+ *	to userspace, contains a value of enum nl80211_crit_update_event (u8).
+ *
  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
  * @NL80211_ATTR_MAX: highest attribute number currently defined
  * @__NL80211_ATTR_AFTER_LAST: internal use
@@ -3429,6 +3452,12 @@ enum nl80211_attrs {
 	/* MTK internal */
 	NL80211_ATTR_CNTDWN_OFFS_STA_PROF,
 
+	NL80211_ATTR_MLO_LINK_DISABLED_BMP,
+	NL80211_ATTR_MLO_ATTLM_SWITCH_TIME,
+	NL80211_ATTR_MLO_ATTLM_DURATION,
+	NL80211_ATTR_MLO_ATTLM_EVENT,
+	NL80211_ATTR_MLO_ATTLM_SWITCH_TIME_TSF_TU,
+
 	__NL80211_ATTR_AFTER_LAST,
 	NUM_NL80211_ATTR = __NL80211_ATTR_AFTER_LAST,
 	NL80211_ATTR_MAX = __NL80211_ATTR_AFTER_LAST - 1
@@ -8100,4 +8129,18 @@ enum nl80211_wiphy_radio_freq_range {
 	NL80211_WIPHY_RADIO_FREQ_ATTR_MAX = __NL80211_WIPHY_RADIO_FREQ_ATTR_LAST - 1,
 };
 
+/**
+ * enum nl80211_attlm_event - type of events for Advertised Tid-to-Link
+ * Mapping operations
+ *
+ * @NL80211_ATTLM_STARTED: A A-TTLM request has been set and start to count down.
+ * @NL80211_ATTLM_SWITCH_TIME_EXPIRED: The switch time of A-TTLM has expired.
+ * @NL80211ATTLM_END: The A-TTLM has been done.
+ */
+enum nl80211_attlm_event {
+	NL80211_ATTLM_STARTED,
+	NL80211_ATTLM_SWITCH_TIME_EXPIRED,
+	NL80211_ATTLM_END,
+};
+
 #endif /* __LINUX_NL80211_H */
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 91b70566..0136ef34 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -5264,6 +5264,20 @@ static int ieee80211_set_hw_timestamp(struct wiphy *wiphy,
 	return local->ops->set_hw_timestamp(&local->hw, &sdata->vif, hwts);
 }
 
+static int
+ieee80211_set_attlm(struct wiphy *wiphy, struct net_device *dev,
+		    u16 disabled_links, u16 switch_time, u32 duration)
+{
+	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+	struct ieee80211_local *local = sdata->local;
+
+	if (!local->ops->set_attlm)
+		return -EOPNOTSUPP;
+
+	return local->ops->set_attlm(&local->hw, &sdata->vif, disabled_links,
+				     switch_time, duration);
+}
+
 static int
 ieee80211_set_ttlm(struct wiphy *wiphy, struct net_device *dev,
 		   struct cfg80211_ttlm_params *params)
@@ -5303,6 +5317,14 @@ ieee80211_skip_cac(struct wireless_dev *wdev, unsigned int link_id)
 	}
 }
 
+void ieee80211_attlm_notify(struct ieee80211_vif *vif, u16 switch_time_tsf_tu,
+			   enum nl80211_attlm_event event, gfp_t gfp)
+{
+	cfg80211_attlm_notify(ieee80211_vif_to_wdev(vif), switch_time_tsf_tu,
+			      event, gfp);
+}
+EXPORT_SYMBOL_GPL(ieee80211_attlm_notify);
+
 void ieee80211_links_removed(struct ieee80211_vif *vif, u16 removed_links)
 {
 	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
@@ -5425,6 +5447,7 @@ const struct cfg80211_ops mac80211_config_ops = {
 	.mod_link_station = ieee80211_mod_link_station,
 	.del_link_station = ieee80211_del_link_station,
 	.set_hw_timestamp = ieee80211_set_hw_timestamp,
+	.set_attlm = ieee80211_set_attlm,
 	.set_ttlm = ieee80211_set_ttlm,
 	.get_radio_mask = ieee80211_get_radio_mask,
 	.skip_cac = ieee80211_skip_cac,
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 7e0e35b0..5604aa11 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -850,6 +850,10 @@ static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
 	[NL80211_ATTR_HW_TIMESTAMP_ENABLED] = { .type = NLA_FLAG },
 	[NL80211_ATTR_EMA_RNR_ELEMS] = { .type = NLA_NESTED },
 	[NL80211_ATTR_MLO_LINK_DISABLED] = { .type = NLA_FLAG },
+	[NL80211_ATTR_MLO_LINK_DISABLED_BMP] = { .type = NLA_U16 },
+	[NL80211_ATTR_MLO_ATTLM_SWITCH_TIME] = { .type = NLA_U16 },
+	[NL80211_ATTR_MLO_ATTLM_DURATION] = { .type = NLA_U32 },
+	[NL80211_ATTR_MLO_ATTLM_SWITCH_TIME_TSF_TU] = { .type = NLA_U16 },
 	[NL80211_ATTR_BSS_DUMP_INCLUDE_USE_DATA] = { .type = NLA_FLAG },
 	[NL80211_ATTR_MLO_TTLM_DLINK] = NLA_POLICY_EXACT_LEN(sizeof(u16) * 8),
 	[NL80211_ATTR_MLO_TTLM_ULINK] = NLA_POLICY_EXACT_LEN(sizeof(u16) * 8),
@@ -16684,6 +16688,30 @@ static int nl80211_set_hw_timestamp(struct sk_buff *skb,
 	return rdev_set_hw_timestamp(rdev, dev, &hwts);
 }
 
+static int
+nl80211_set_attlm(struct sk_buff *skb, struct genl_info *info)
+{
+	struct cfg80211_registered_device *rdev = info->user_ptr[0];
+	struct net_device *dev = info->user_ptr[1];
+	struct wireless_dev *wdev = dev->ieee80211_ptr;
+	u16 switch_time, disabled_links;
+	u32 duration;
+
+	if (wdev->iftype != NL80211_IFTYPE_AP)
+		return -EOPNOTSUPP;
+
+	if (!info->attrs[NL80211_ATTR_MLO_LINK_DISABLED_BMP] ||
+	    !info->attrs[NL80211_ATTR_MLO_ATTLM_SWITCH_TIME] ||
+	    !info->attrs[NL80211_ATTR_MLO_ATTLM_DURATION])
+		return -EINVAL;
+
+	disabled_links = nla_get_u16(info->attrs[NL80211_ATTR_MLO_LINK_DISABLED_BMP]);
+	switch_time = nla_get_u16(info->attrs[NL80211_ATTR_MLO_ATTLM_SWITCH_TIME]);
+	duration = nla_get_u32(info->attrs[NL80211_ATTR_MLO_ATTLM_DURATION]);
+
+	return rdev_set_attlm(rdev, dev, disabled_links, switch_time, duration);
+}
+
 static int
 nl80211_set_ttlm(struct sk_buff *skb, struct genl_info *info)
 {
@@ -17913,6 +17941,12 @@ static const struct genl_small_ops nl80211_small_ops[] = {
 		.flags = GENL_UNS_ADMIN_PERM,
 		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP),
 	},
+	{
+		.cmd = NL80211_CMD_SET_ATTLM,
+		.doit = nl80211_set_attlm,
+		.flags = GENL_UNS_ADMIN_PERM,
+		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP),
+	},
 	{
 		.cmd = NL80211_CMD_SET_TID_TO_LINK_MAPPING,
 		.doit = nl80211_set_ttlm,
@@ -19944,6 +19978,47 @@ nla_put_failure:
 }
 EXPORT_SYMBOL(cfg80211_bss_color_notify);
 
+void cfg80211_attlm_notify(struct wireless_dev *wdev, u16 switch_time_tsf_tu,
+			   enum nl80211_attlm_event event, gfp_t gfp)
+{
+	struct wiphy *wiphy = wdev->wiphy;
+	struct net_device *netdev = wdev->netdev;
+	struct sk_buff *msg;
+	void *hdr;
+
+	trace_cfg80211_attlm_notify(wiphy, netdev, event, switch_time_tsf_tu);
+
+	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, gfp);
+	if (!msg)
+		return;
+
+	hdr = nl80211hdr_put(msg, 0, 0, 0, NL80211_CMD_ATTLM_EVENT);
+	if (!hdr) {
+		nlmsg_free(msg);
+		return;
+	}
+
+	if (nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex))
+		goto nla_put_failure;
+
+	if (nla_put_u32(msg, NL80211_ATTR_MLO_ATTLM_EVENT, event))
+		goto nla_put_failure;
+
+	if (nla_put_u16(msg, NL80211_ATTR_MLO_ATTLM_SWITCH_TIME_TSF_TU,
+			switch_time_tsf_tu))
+		goto nla_put_failure;
+
+	genlmsg_end(msg, hdr);
+
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(wiphy), msg, 0,
+				NL80211_MCGRP_MLME, gfp);
+	return;
+
+nla_put_failure:
+	nlmsg_free(msg);
+}
+EXPORT_SYMBOL(cfg80211_attlm_notify);
+
 void
 nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 		     const struct cfg80211_chan_def *chandef,
diff --git a/net/wireless/rdev-ops.h b/net/wireless/rdev-ops.h
index a73bd79d..187e34a8 100644
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -1537,6 +1537,24 @@ rdev_set_hw_timestamp(struct cfg80211_registered_device *rdev,
 	return ret;
 }
 
+static inline int
+rdev_set_attlm(struct cfg80211_registered_device *rdev, struct net_device *dev,
+	       u16 disabled_links, u16 switch_time, u32 duration)
+{
+	struct wiphy *wiphy = &rdev->wiphy;
+	int ret;
+
+	if (!rdev->ops->set_attlm)
+		return -EOPNOTSUPP;
+
+	trace_rdev_set_attlm(wiphy, dev, disabled_links, switch_time, duration);
+	ret = rdev->ops->set_attlm(wiphy, dev, disabled_links, switch_time,
+				   duration);
+	trace_rdev_return_int(wiphy, ret);
+
+	return ret;
+}
+
 static inline int
 rdev_set_ttlm(struct cfg80211_registered_device *rdev,
 	      struct net_device *dev,
diff --git a/net/wireless/trace.h b/net/wireless/trace.h
index 36a71071..d1536891 100644
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -3030,6 +3030,30 @@ TRACE_EVENT(rdev_set_hw_timestamp,
 		  __entry->enable)
 );
 
+TRACE_EVENT(rdev_set_attlm,
+	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
+		 u16 disabled_links, u16 switch_time, u32 duration),
+	TP_ARGS(wiphy, netdev, disabled_links, switch_time, duration),
+	TP_STRUCT__entry(
+		WIPHY_ENTRY
+		NETDEV_ENTRY
+		__field(u16, disabled_links)
+		__field(u16, switch_time)
+		__field(u32, duration)
+	),
+	TP_fast_assign(
+		WIPHY_ASSIGN;
+		NETDEV_ASSIGN;
+		__entry->disabled_links = disabled_links;
+		__entry->switch_time = switch_time;
+		__entry->duration = duration;
+	),
+	TP_printk(WIPHY_PR_FMT ", " NETDEV_PR_FMT ", disabled_link: %u"
+		  ", switch_time=%u, duration=%u",
+		  WIPHY_PR_ARG, NETDEV_PR_ARG, __entry->disabled_links,
+		  __entry->switch_time, __entry->duration)
+);
+
 TRACE_EVENT(rdev_set_ttlm,
 	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
 		 struct cfg80211_ttlm_params *params),
@@ -4000,6 +4024,27 @@ TRACE_EVENT(cfg80211_bss_color_notify,
 		  __entry->color_bitmap)
 );
 
+TRACE_EVENT(cfg80211_attlm_notify,
+	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
+		 enum nl80211_attlm_event event, u16 switch_time_tsf_tu),
+	TP_ARGS(wiphy, netdev, event, switch_time_tsf_tu),
+	TP_STRUCT__entry(
+		WIPHY_ENTRY
+		NETDEV_ENTRY
+		__field(u32, event)
+		__field(u16, switch_time_tsf_tu)
+	),
+	TP_fast_assign(
+		WIPHY_ASSIGN;
+		NETDEV_ASSIGN;
+		__entry->event = event;
+		__entry->switch_time_tsf_tu = switch_time_tsf_tu;
+	),
+	TP_printk(WIPHY_PR_FMT ", " NETDEV_PR_FMT ", event: %x, switch_time_tsf_tu: %u",
+		  WIPHY_PR_ARG, NETDEV_PR_ARG, __entry->event,
+		  __entry->switch_time_tsf_tu)
+);
+
 TRACE_EVENT(cfg80211_assoc_comeback,
 	TP_PROTO(struct wireless_dev *wdev, const u8 *ap_addr, u32 timeout),
 	TP_ARGS(wdev, ap_addr, timeout),
-- 
2.45.2

