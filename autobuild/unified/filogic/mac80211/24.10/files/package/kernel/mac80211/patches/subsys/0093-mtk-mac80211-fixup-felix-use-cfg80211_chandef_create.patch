From a13be778c04e25fe074526a62f6b30f4d792719f Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 11 Feb 2025 15:10:19 +0800
Subject: [PATCH 093/107] mtk: mac80211: fixup felix: use
 cfg80211_chandef_create

If the chandef->center_freq1 is not set, then
cfg80211_radio_chandef_valid will return true to all the radios.
Therefore, add a cfg80211_chandef_valid check to make sure the
chandef is valid.
Also, use cfg80211_chandef_create to create chandef in the radio
mask helper function to make sure the center_freq1 is set.

This will be merged in felix's upstream patch.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 net/mac80211/offchannel.c | 13 ++++++-------
 net/mac80211/scan.c       |  6 ++++--
 net/wireless/util.c       |  3 +++
 3 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/net/mac80211/offchannel.c b/net/mac80211/offchannel.c
index 5d394ff4..16afffe7 100644
--- a/net/mac80211/offchannel.c
+++ b/net/mac80211/offchannel.c
@@ -170,18 +170,19 @@ void ieee80211_offchannel_return(struct ieee80211_local *local)
 
 u32 ieee80211_offchannel_radio_mask(struct ieee80211_local *local)
 {
-	struct cfg80211_chan_def chandef = {};
 	const struct wiphy_radio *radio;
 	struct ieee80211_roc_work *roc;
 	u32 mask = 0;
 	int r;
 
-	chandef.width = NL80211_CHAN_WIDTH_20_NOHT;
 	for (r = 0; r < local->hw.wiphy->n_radio; r++) {
 		radio = &local->hw.wiphy->radio[r];
 
 		list_for_each_entry(roc, &local->roc_list, list) {
-			chandef.chan = roc->chan;
+			struct cfg80211_chan_def chandef = {};
+
+			cfg80211_chandef_create(&chandef, roc->chan,
+						NL80211_CHAN_NO_HT);
 			if (!cfg80211_radio_chandef_valid(radio, &chandef))
 				continue;
 
@@ -591,10 +592,7 @@ static int ieee80211_start_roc_work(struct ieee80211_local *local,
 				    enum ieee80211_roc_type type)
 {
 	struct ieee80211_roc_work *roc, *tmp;
-	struct cfg80211_chan_def chandef = {
-		.width = NL80211_CHAN_WIDTH_20_NOHT,
-		.chan = channel
-	};
+	struct cfg80211_chan_def chandef = {};
 	bool queued = false, combine_started = true;
 	u32 radio_mask;
 	int ret;
@@ -642,6 +640,7 @@ static int ieee80211_start_roc_work(struct ieee80211_local *local,
 		roc->mgmt_tx_cookie = *cookie;
 	}
 
+	cfg80211_chandef_create(&chandef, channel, NL80211_CHAN_NO_HT);
 	radio_mask = ieee80211_chandef_radio_mask(local, &chandef);
 
 	/* if there's no need to queue, handle it immediately */
diff --git a/net/mac80211/scan.c b/net/mac80211/scan.c
index 724c3d96..e538cb80 100644
--- a/net/mac80211/scan.c
+++ b/net/mac80211/scan.c
@@ -574,17 +574,19 @@ static int ieee80211_start_sw_scan(struct ieee80211_local *local,
 u32 ieee80211_scan_req_radio_mask(struct ieee80211_local *local,
 				  struct cfg80211_scan_request *req)
 {
-	struct cfg80211_chan_def chandef = {};
 	const struct wiphy_radio *radio;
 	u32 mask = 0;
 	int i, r;
 
-	chandef.width = NL80211_CHAN_WIDTH_20_NOHT;
 	for (r = 0; r < local->hw.wiphy->n_radio; r++) {
 		radio = &local->hw.wiphy->radio[r];
 
 		for (i = 0; i < req->n_channels; i++) {
+			struct cfg80211_chan_def chandef = {};
+
 			chandef.chan = req->channels[i];
+			cfg80211_chandef_create(&chandef, req->channels[i],
+						NL80211_CHAN_NO_HT);
 			if (!cfg80211_radio_chandef_valid(radio, &chandef))
 				continue;
 
diff --git a/net/wireless/util.c b/net/wireless/util.c
index 62eef73f..6f28fc60 100644
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -2915,6 +2915,9 @@ bool cfg80211_radio_chandef_valid(const struct wiphy_radio *radio,
 {
 	u32 freq, width;
 
+	if (!cfg80211_chandef_valid(chandef))
+		return false;
+
 	freq = ieee80211_chandef_to_khz(chandef);
 	width = cfg80211_chandef_get_width(chandef);
 	if (!ieee80211_radio_freq_range_valid(radio, freq, width))
-- 
2.45.2

