From 58e7b9e91c14568d35c6e9ec8ec424ea6655b635 Mon Sep 17 00:00:00 2001
From: Shayne Chen <shayne.chen@mediatek.com>
Date: Mon, 30 Dec 2024 11:21:32 +0800
Subject: [PATCH 73/75] mtk: mt76: rework chanctx/scan/roc for mlo support

Main changes:
sync some channel/scan/roc API
add chanctx state
use mt76_add_chanctx
use mt76_remove_chanctx
use mt76_change_chanctx
use mt76_hw_scan
use mt76_unassign_vif_chanctx
use mt76_assign_vif_chanctx
use mt76_switch_vif_chanctx
replace some phy->chanctx statement with main_chandef
use mt76_scan_work
remove mt7996_vif pointer from mt7996_vif_link
use mt76_remain_on_channel
integrate mt7996_init_chanctx to mt76_init_sband
do some cleanup in add_chanctx and remove_chanctx
remove rcu_head in mt7996_vif_link

Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>
---
 Makefile        |   2 +-
 channel.c       | 197 +++++++++++----
 mac80211.c      |  27 ++-
 mt76.h          |  79 +++++-
 mt7996/init.c   |  21 --
 mt7996/mac.c    | 175 +-------------
 mt7996/main.c   | 627 +++---------------------------------------------
 mt7996/mcu.c    |   4 +-
 mt7996/mmio.c   |   2 +
 mt7996/mt7996.h |  14 --
 scan.c          | 123 +++++++++-
 11 files changed, 399 insertions(+), 872 deletions(-)

diff --git a/Makefile b/Makefile
index a5e7e162..e681298d 100644
--- a/Makefile
+++ b/Makefile
@@ -12,7 +12,7 @@ obj-$(CONFIG_MT792x_USB) += mt792x-usb.o
 
 mt76-y := \
 	mmio.o util.o trace.o dma.o mac80211.o debugfs.o eeprom.o \
-	tx.o agg-rx.o mcu.o wed.o debug.o
+	tx.o agg-rx.o mcu.o wed.o scan.o channel.o debug.o
 
 mt76-$(CONFIG_PCI) += pci.o
 mt76-$(CONFIG_NL80211_TESTMODE) += testmode.o
diff --git a/channel.c b/channel.c
index e7b839e7..d903578a 100644
--- a/channel.c
+++ b/channel.c
@@ -41,10 +41,17 @@ int mt76_add_chanctx(struct ieee80211_hw *hw,
 	if (WARN_ON_ONCE(!phy))
 		return ret;
 
+	mt76_dbg(dev, MT76_DBG_CHAN, "%s: add %u on mt76 band %d\n",
+		 __func__, conf->def.chan->hw_value, phy->band_idx);
+
 	if (dev->scan.phy == phy)
 		mt76_abort_scan(dev);
 
 	mutex_lock(&dev->mutex);
+
+	ctx->assigned = true;
+	ctx->chandef = conf->def;
+	ctx->state = MT76_CHANCTX_STATE_ADD;
 	if (!phy->chanctx)
 		ret = mt76_phy_update_channel(phy, conf);
 	else
@@ -66,12 +73,19 @@ void mt76_remove_chanctx(struct ieee80211_hw *hw,
 	if (WARN_ON_ONCE(!phy))
 		return;
 
+	mt76_dbg(dev, MT76_DBG_CHAN, "%s: remove %u\n",
+		 __func__, conf->def.chan->hw_value);
+	cancel_delayed_work_sync(&phy->mac_work);
+
 	if (dev->scan.phy == phy)
 		mt76_abort_scan(dev);
 
 	mutex_lock(&dev->mutex);
-	if (phy->chanctx == ctx)
+	ctx->assigned = false;
+	if (phy->chanctx == ctx) {
 		phy->chanctx = NULL;
+		phy->radar_enabled = false;
+	}
 	mutex_unlock(&dev->mutex);
 }
 EXPORT_SYMBOL_GPL(mt76_remove_chanctx);
@@ -88,9 +102,14 @@ void mt76_change_chanctx(struct ieee80211_hw *hw,
 			 IEEE80211_CHANCTX_CHANGE_RADAR)))
 		return;
 
+	mt76_dbg(dev, MT76_DBG_CHAN, "%s: change to %u, 0x%x\n",
+		 __func__, conf->def.chan->hw_value, changed);
+
 	cancel_delayed_work_sync(&phy->mac_work);
 
 	mutex_lock(&dev->mutex);
+	ctx->chandef = conf->def;
+	ctx->state = MT76_CHANCTX_STATE_CHANGE;
 	mt76_phy_update_channel(phy, conf);
 	mutex_unlock(&dev->mutex);
 }
@@ -108,9 +127,11 @@ int mt76_assign_vif_chanctx(struct ieee80211_hw *hw,
 	int link_id = link_conf->link_id;
 	struct mt76_phy *phy = ctx->phy;
 	struct mt76_dev *dev = phy->dev;
-	bool mlink_alloc = false;
 	int ret = 0;
 
+	mt76_dbg(dev, MT76_DBG_CHAN, "%s: assign link_id %u to %d MHz\n",
+		 __func__, link_id, conf->def.chan->center_freq);
+
 	if (dev->scan.vif == vif)
 		mt76_abort_scan(dev);
 
@@ -120,26 +141,21 @@ int mt76_assign_vif_chanctx(struct ieee80211_hw *hw,
 	    is_zero_ether_addr(vif->addr))
 		goto out;
 
-	mlink = mt76_vif_conf_link(dev, vif, link_conf);
-	if (!mlink) {
-		mlink = mt76_alloc_mlink(dev, mvif);
-		if (!mlink) {
-			ret = -ENOMEM;
-			goto out;
-		}
-		mlink_alloc = true;
-	}
+	mlink = mt76_vif_link(dev, vif, link_id);
+	/* Remove bss conf when change non-MLO interface to MLO interface */
+	if (ieee80211_vif_is_mld(vif) && mlink == (struct mt76_vif_link *)vif->drv_priv)
+		dev->drv->vif_link_remove(phy, vif, NULL, mlink);
 
-	mlink->ctx = conf;
-	ret = dev->drv->vif_link_add(phy, vif, link_conf, mlink);
-	if (ret) {
-		if (mlink_alloc)
-			kfree(mlink);
+	ret = dev->drv->vif_link_add(phy, vif, link_conf, NULL);
+	if (ret)
 		goto out;
-	}
 
-	if (link_conf != &vif->bss_conf)
-		rcu_assign_pointer(mvif->link[link_id], mlink);
+	mlink = mt76_vif_link(dev, vif, link_id);
+	ctx->nbss_assigned++;
+	mvif->band_to_link[phy->band_idx] = link_id;
+
+	if (hw->priv == phy)
+		mvif->deflink_id = link_id;
 
 out:
 	mutex_unlock(&dev->mutex);
@@ -154,12 +170,13 @@ void mt76_unassign_vif_chanctx(struct ieee80211_hw *hw,
 			       struct ieee80211_chanctx_conf *conf)
 {
 	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
-	struct mt76_vif_link *mlink = (struct mt76_vif_link *)vif->drv_priv;
-	struct mt76_vif_data *mvif = mlink->mvif;
 	int link_id = link_conf->link_id;
 	struct mt76_phy *phy = ctx->phy;
 	struct mt76_dev *dev = phy->dev;
 
+	mt76_dbg(dev, MT76_DBG_CHAN, "%s, remove link %u from %d MHz\n",
+		 __func__, link_id, conf->def.chan->center_freq);
+
 	if (dev->scan.vif == vif)
 		mt76_abort_scan(dev);
 
@@ -169,18 +186,7 @@ void mt76_unassign_vif_chanctx(struct ieee80211_hw *hw,
 	    is_zero_ether_addr(vif->addr))
 		goto out;
 
-	mlink = mt76_vif_conf_link(dev, vif, link_conf);
-	if (!mlink)
-		goto out;
-
-	if (link_conf != &vif->bss_conf)
-		rcu_assign_pointer(mvif->link[link_id], NULL);
-
-	dev->drv->vif_link_remove(phy, vif, link_conf, mlink);
-	mlink->ctx = NULL;
-
-	if (link_conf != &vif->bss_conf)
-		kfree_rcu(mlink, rcu_head);
+	ctx->nbss_assigned--;
 
 out:
 	mutex_unlock(&dev->mutex);
@@ -199,7 +205,6 @@ int mt76_switch_vif_chanctx(struct ieee80211_hw *hw,
 	struct mt76_phy *phy = hw->priv;
 	struct mt76_dev *dev = phy->dev;
 	struct mt76_vif_link *mlink;
-	bool update_chan;
 	int i, ret = 0;
 
 	if (mode == CHANCTX_SWMODE_SWAP_CONTEXTS)
@@ -209,13 +214,10 @@ int mt76_switch_vif_chanctx(struct ieee80211_hw *hw,
 	if (!phy)
 		return -EINVAL;
 
-	update_chan = phy->chanctx != new_ctx;
-	if (update_chan) {
-		if (dev->scan.phy == phy)
-			mt76_abort_scan(dev);
+	if (dev->scan.phy == phy)
+		mt76_abort_scan(dev);
 
-		cancel_delayed_work_sync(&phy->mac_work);
-	}
+	cancel_delayed_work_sync(&phy->mac_work);
 
 	mutex_lock(&dev->mutex);
 
@@ -223,9 +225,41 @@ int mt76_switch_vif_chanctx(struct ieee80211_hw *hw,
 	    phy != old_phy && old_phy->chanctx == old_ctx)
 		old_phy->chanctx = NULL;
 
-	if (update_chan)
-		ret = mt76_phy_update_channel(phy, vifs->new_ctx);
+	for (i = 0; i < n_vifs; i++) {
+		if (vifs[i].old_ctx == vifs[i].new_ctx)
+			continue;
+
+		mt76_dbg(dev, MT76_DBG_CHAN,
+			 "%s: chan=%d->%d, width=%d->%d, punct_bitmap=0x%04x->0x%04x, link=%u\n",
+			 __func__,
+			 vifs[i].old_ctx->def.chan->hw_value,
+			 vifs[i].new_ctx->def.chan->hw_value,
+			 vifs[i].old_ctx->def.width,
+			 vifs[i].new_ctx->def.width,
+			 vifs[i].old_ctx->def.punctured,
+			 vifs[i].new_ctx->def.punctured,
+			 vifs[i].link_conf->link_id);
+
+		old_ctx = (struct mt76_chanctx *)vifs[i].old_ctx->drv_priv;
+		new_ctx = (struct mt76_chanctx *)vifs[i].new_ctx->drv_priv;
+		if (new_ctx->nbss_assigned && phy->chanctx == new_ctx) {
+			new_ctx->nbss_assigned++;
+			continue;
+		}
+
+		new_ctx->phy = phy;
+		new_ctx->nbss_assigned++;
+		new_ctx->assigned = true;
+		new_ctx->chandef = vifs[i].new_ctx->def;
+		new_ctx->state = MT76_CHANCTX_STATE_SWITCH;
 
+		if (vifs[i].vif->type == NL80211_IFTYPE_AP)
+			new_ctx->has_ap = true;
+		else if (vifs[i].vif->type == NL80211_IFTYPE_STATION)
+			new_ctx->has_sta = true;
+	}
+
+	ret = mt76_phy_update_channel(phy, vifs->new_ctx);
 	if (ret)
 		goto out;
 
@@ -236,10 +270,8 @@ int mt76_switch_vif_chanctx(struct ieee80211_hw *hw,
 		mlink = mt76_vif_conf_link(dev, vifs[i].vif, vifs[i].link_conf);
 		if (!mlink)
 			continue;
-
 		dev->drv->vif_link_remove(old_phy, vifs[i].vif,
 					  vifs[i].link_conf, mlink);
-
 		ret = dev->drv->vif_link_add(phy, vifs[i].vif,
 					     vifs[i].link_conf, mlink);
 		if (ret)
@@ -314,19 +346,32 @@ void mt76_put_vif_phy_link(struct mt76_phy *phy, struct ieee80211_vif *vif,
 
 static void mt76_roc_complete(struct mt76_phy *phy)
 {
+	struct ieee80211_vif *vif = phy->roc_vif;
 	struct mt76_vif_link *mlink = phy->roc_link;
+	struct mt76_dev *dev = phy->dev;
 
-	if (!phy->roc_vif)
+	if (!vif)
 		return;
 
 	if (mlink)
 		mlink->mvif->roc_phy = NULL;
-	if (phy->main_chandef.chan)
+	if (phy->main_chandef.chan) {
+		mutex_unlock(&dev->mutex);
 		mt76_set_channel(phy, &phy->main_chandef, false);
-	mt76_put_vif_phy_link(phy, phy->roc_vif, phy->roc_link);
+		mutex_lock(&dev->mutex);
+	}
+
+	if (ieee80211_vif_is_mld(phy->roc_vif)) {
+		if (mlink && mlink == (struct mt76_vif_link *)vif->drv_priv)
+			dev->drv->vif_link_remove(phy, vif, NULL, mlink);
+	}
+
 	phy->roc_vif = NULL;
 	phy->roc_link = NULL;
 	ieee80211_remain_on_channel_expired(phy->hw);
+
+	mt76_dbg(dev, MT76_DBG_CHAN, "finish roc work, go back to freq=%u\n",
+		 phy->main_chandef.chan->center_freq);
 }
 
 void mt76_roc_complete_work(struct work_struct *work)
@@ -357,13 +402,17 @@ int mt76_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	struct cfg80211_chan_def chandef = {};
 	struct mt76_phy *phy = hw->priv;
 	struct mt76_dev *dev = phy->dev;
-	struct mt76_vif_link *mlink;
+	struct mt76_vif_link *mlink = (struct mt76_vif_link *)vif->drv_priv;
+	struct mt76_vif_data *mvif = mlink->mvif;
 	int ret = 0;
 
 	phy = dev->band_phys[chan->band];
 	if (!phy)
 		return -EINVAL;
 
+	mt76_dbg(dev, MT76_DBG_CHAN, "start roc work on freq=%u\n",
+		 chan->center_freq);
+
 	mutex_lock(&dev->mutex);
 
 	if (phy->roc_vif || dev->scan.phy == phy) {
@@ -371,20 +420,64 @@ int mt76_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		goto out;
 	}
 
-	mlink = mt76_get_vif_phy_link(phy, vif);
-	if (IS_ERR(mlink)) {
-		ret = PTR_ERR(mlink);
-		goto out;
+	if (!ieee80211_vif_is_mld(vif)) {
+		mlink = mt76_vif_link(dev, vif, 0);
+		if (!mlink || mlink->band_idx != phy->band_idx) {
+			ret = -EINVAL;
+			goto out;
+		}
+	} else {
+		unsigned long valid_links = vif->valid_links;
+		unsigned int link_id;
+		bool found = false;
+
+		for_each_set_bit(link_id, &valid_links,
+				 IEEE80211_MLD_MAX_NUM_LINKS) {
+			mlink = mt76_vif_link(dev, vif, link_id);
+			if (mlink && mlink->band_idx == phy->band_idx) {
+				found = true;
+				break;
+			}
+		}
+
+		if (!found) {
+			if (vif->type != NL80211_IFTYPE_STATION) {
+				ret = -ENOLINK;
+				goto out;
+			}
+
+			/* Try to find an empty link, which is later used to scan. */
+			for (link_id = 0;
+			     link_id < IEEE80211_MLD_MAX_NUM_LINKS;
+			     link_id++) {
+				if (!rcu_access_pointer(mvif->link[link_id]))
+					break;
+			}
+
+			if (link_id == IEEE80211_MLD_MAX_NUM_LINKS) {
+				ret = -ENOLINK;
+				goto out;
+			}
+
+			vif->bss_conf.link_id = link_id;
+			ret = dev->drv->vif_link_add(phy, vif, &vif->bss_conf, NULL);
+			if (ret)
+				goto out;
+		}
+
 	}
 
 	mlink->mvif->roc_phy = phy;
 	phy->roc_vif = vif;
 	phy->roc_link = mlink;
 	cfg80211_chandef_create(&chandef, chan, NL80211_CHAN_HT20);
+	mutex_unlock(&dev->mutex);
+
 	mt76_set_channel(phy, &chandef, true);
 	ieee80211_ready_on_channel(hw);
 	ieee80211_queue_delayed_work(phy->hw, &phy->roc_work,
 				     msecs_to_jiffies(duration));
+	return 0;
 
 out:
 	mutex_unlock(&dev->mutex);
diff --git a/mac80211.c b/mac80211.c
index 0000df2e..0cefa3d5 100644
--- a/mac80211.c
+++ b/mac80211.c
@@ -318,6 +318,11 @@ mt76_init_sband(struct mt76_phy *phy, struct mt76_sband *msband,
 	sband->bitrates = rates;
 	sband->n_bitrates = n_rates;
 
+	/* init parking channel */
+	cfg80211_chandef_create(&phy->chandef, &sband->channels[0],
+				NL80211_CHAN_HT20);
+	phy->main_chandef = phy->chandef;
+
 	if (!ht)
 		return 0;
 
@@ -420,6 +425,7 @@ mt76_phy_init(struct mt76_phy *phy, struct ieee80211_hw *hw)
 
 	INIT_LIST_HEAD(&phy->tx_list);
 	spin_lock_init(&phy->tx_lock);
+	INIT_DELAYED_WORK(&phy->roc_work, mt76_roc_complete_work);
 	spin_lock_init(&phy->tx_dbg_stats.lock);
 	spin_lock_init(&phy->rx_dbg_stats.lock);
 
@@ -705,6 +711,7 @@ mt76_alloc_device(struct device *pdev, unsigned int size,
 	INIT_LIST_HEAD(&dev->txwi_cache);
 	INIT_LIST_HEAD(&dev->rxwi_cache);
 	dev->token_size = dev->drv->token_size;
+	INIT_DELAYED_WORK(&dev->scan_work, mt76_scan_work);
 	dev->rx_token_size = dev->drv->rx_token_size;
 
 	for (i = 0; i < ARRAY_SIZE(dev->q_rx); i++)
@@ -957,17 +964,14 @@ void mt76_update_survey(struct mt76_phy *phy)
 }
 EXPORT_SYMBOL_GPL(mt76_update_survey);
 
-int mt76_set_channel(struct mt76_phy *phy, struct cfg80211_chan_def *chandef,
-		     bool offchannel)
+int __mt76_set_channel(struct mt76_phy *phy, struct cfg80211_chan_def *chandef,
+		       bool offchannel)
 {
 	struct mt76_dev *dev = phy->dev;
 	int timeout = HZ / 5;
 	int ret;
 	unsigned long was_scanning = ieee80211_get_scanning(phy->hw);
 
-	cancel_delayed_work_sync(&phy->mac_work);
-
-	mutex_lock(&dev->mutex);
 	set_bit(MT76_RESET, &phy->state);
 
 	mt76_worker_disable(&dev->tx_worker);
@@ -994,6 +998,19 @@ int mt76_set_channel(struct mt76_phy *phy, struct cfg80211_chan_def *chandef,
 	mt76_worker_enable(&dev->tx_worker);
 	mt76_worker_schedule(&dev->tx_worker);
 
+	return ret;
+}
+
+int mt76_set_channel(struct mt76_phy *phy, struct cfg80211_chan_def *chandef,
+		     bool offchannel)
+{
+	struct mt76_dev *dev = phy->dev;
+	int ret;
+
+	cancel_delayed_work_sync(&phy->mac_work);
+
+	mutex_lock(&dev->mutex);
+	ret = __mt76_set_channel(phy, chandef, offchannel);
 	mutex_unlock(&dev->mutex);
 
 	return ret;
diff --git a/mt76.h b/mt76.h
index 5fa918b0..df50450a 100644
--- a/mt76.h
+++ b/mt76.h
@@ -81,6 +81,8 @@ struct mt76_dev;
 struct mt76_phy;
 struct mt76_wcid;
 struct mt76s_intr;
+struct mt76_chanctx;
+struct mt76_vif_link;
 
 struct mt76_reg_pair {
 	u32 reg;
@@ -585,6 +587,9 @@ struct mt76_driver_ops {
 	u16 txwi_size;
 	u16 token_size;
 	u8 mcs_rates;
+
+	unsigned int link_data_size;
+
 	u16 rx_token_size;
 
 	void (*update_survey)(struct mt76_phy *phy);
@@ -622,6 +627,15 @@ struct mt76_driver_ops {
 
 	void (*sta_remove)(struct mt76_dev *dev, struct ieee80211_vif *vif,
 			   struct ieee80211_sta *sta);
+
+	int (*vif_link_add)(struct mt76_phy *phy, struct ieee80211_vif *vif,
+			    struct ieee80211_bss_conf *link_conf,
+			    struct mt76_vif_link *mlink);
+
+	void (*vif_link_remove)(struct mt76_phy *phy,
+				struct ieee80211_vif *vif,
+				struct ieee80211_bss_conf *link_conf,
+				struct mt76_vif_link *mlink);
 };
 
 struct mt76_channel_state {
@@ -1001,6 +1015,10 @@ struct mt76_phy {
 	bool offchannel;
 	bool radar_enabled;
 
+	struct delayed_work roc_work;
+	struct ieee80211_vif *roc_vif;
+	struct mt76_vif_link *roc_link;
+
 	struct mt76_chanctx *chanctx;
 
 	struct mt76_channel_state *chan_state;
@@ -1047,10 +1065,6 @@ struct mt76_phy {
 	struct mt76_tx_debug tx_dbg_stats;
 	struct mt76_rx_debug rx_dbg_stats;
 	int tokens;
-
-	/* intermediate used */
-	struct delayed_work scan_work;
-	struct delayed_work roc_complete_work;
 };
 
 struct mt76_dev {
@@ -1142,6 +1156,16 @@ struct mt76_dev {
 
 	u32 rxfilter;
 
+	struct delayed_work scan_work;
+	struct {
+		struct cfg80211_scan_request *req;
+		struct ieee80211_channel *chan;
+		struct ieee80211_vif *vif;
+		struct mt76_vif_link *mlink;
+		struct mt76_phy *phy;
+		int chan_idx;
+	} scan;
+
 	bool lpi_psd;
 	bool lpi_bcn_enhance;
 	bool mgmt_pwr_enhance;
@@ -1290,12 +1314,22 @@ struct mt76_ethtool_worker_info {
 	int sta_count;
 };
 
+enum mt76_chanctx_state {
+	MT76_CHANCTX_STATE_UNSPEC,
+	MT76_CHANCTX_STATE_ADD,
+	MT76_CHANCTX_STATE_CHANGE,
+	MT76_CHANCTX_STATE_SWITCH,
+};
+
 struct mt76_chanctx {
 	struct cfg80211_chan_def chandef;
 	struct mt76_phy *phy;
 
 	bool assigned;
 	u8 nbss_assigned;
+	enum mt76_chanctx_state state;
+	bool has_ap:1;
+	bool has_sta:1;
 };
 
 #define CCK_RATE(_idx, _rate) {					\
@@ -1730,11 +1764,38 @@ void mt76_insert_ccmp_hdr(struct sk_buff *skb, u8 key_id);
 int mt76_get_rate(struct mt76_dev *dev,
 		  struct ieee80211_supported_band *sband,
 		  int idx, bool cck);
+int mt76_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+		 struct ieee80211_scan_request *hw_req);
+void mt76_cancel_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
 void mt76_sw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		  const u8 *mac);
 void mt76_sw_scan_complete(struct ieee80211_hw *hw,
 			   struct ieee80211_vif *vif);
 enum mt76_dfs_state mt76_phy_dfs_state(struct mt76_phy *phy);
+int mt76_add_chanctx(struct ieee80211_hw *hw,
+		     struct ieee80211_chanctx_conf *conf);
+void mt76_remove_chanctx(struct ieee80211_hw *hw,
+			 struct ieee80211_chanctx_conf *conf);
+void mt76_change_chanctx(struct ieee80211_hw *hw,
+			 struct ieee80211_chanctx_conf *conf,
+			 u32 changed);
+int mt76_assign_vif_chanctx(struct ieee80211_hw *hw,
+			    struct ieee80211_vif *vif,
+			    struct ieee80211_bss_conf *link_conf,
+			    struct ieee80211_chanctx_conf *conf);
+void mt76_unassign_vif_chanctx(struct ieee80211_hw *hw,
+			       struct ieee80211_vif *vif,
+			       struct ieee80211_bss_conf *link_conf,
+			       struct ieee80211_chanctx_conf *conf);
+int mt76_switch_vif_chanctx(struct ieee80211_hw *hw,
+			    struct ieee80211_vif_chanctx_switch *vifs,
+			    int n_vifs,
+			    enum ieee80211_chanctx_switch_mode mode);
+int mt76_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+			   struct ieee80211_channel *chan, int duration,
+			   enum ieee80211_roc_type type);
+int mt76_cancel_remain_on_channel(struct ieee80211_hw *hw,
+				  struct ieee80211_vif *vif);
 int mt76_testmode_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		      void *data, int len);
 int mt76_testmode_dump(struct ieee80211_hw *hw, struct sk_buff *skb,
@@ -1800,8 +1861,18 @@ void mt76_rx_aggr_reorder(struct mt76_dev *dev, struct sk_buff *skb,
 void mt76_testmode_tx_pending(struct mt76_phy *phy);
 void mt76_queue_tx_complete(struct mt76_dev *dev, struct mt76_queue *q,
 			    struct mt76_queue_entry *e);
+int __mt76_set_channel(struct mt76_phy *phy, struct cfg80211_chan_def *chandef,
+		       bool offchannel);
 int mt76_set_channel(struct mt76_phy *phy, struct cfg80211_chan_def *chandef,
 		     bool offchannel);
+void mt76_scan_work(struct work_struct *work);
+void mt76_abort_scan(struct mt76_dev *dev);
+void mt76_roc_complete_work(struct work_struct *work);
+void mt76_abort_roc(struct mt76_phy *phy);
+struct mt76_vif_link *mt76_get_vif_phy_link(struct mt76_phy *phy,
+					    struct ieee80211_vif *vif);
+void mt76_put_vif_phy_link(struct mt76_phy *phy, struct ieee80211_vif *vif,
+			   struct mt76_vif_link *mlink);
 
 /* usb */
 static inline bool mt76u_urb_error(struct urb *urb)
diff --git a/mt7996/init.c b/mt7996/init.c
index 5738aefe..29eae3e7 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -795,22 +795,6 @@ static int mt7996_vow_init(struct mt7996_phy *phy)
 	return mt7996_mcu_set_vow_feature_ctrl(phy);
 }
 
-static void mt7996_init_chanctx(struct mt7996_phy *phy)
-{
-	struct ieee80211_supported_band *sband;
-	struct ieee80211_channel *chan;
-
-	if (phy->mt76->band_idx == MT_BAND2)
-		sband = &phy->mt76->sband_6g.sband;
-	else if (phy->mt76->band_idx == MT_BAND1)
-		sband = &phy->mt76->sband_5g.sband;
-	else
-		sband = &phy->mt76->sband_2g.sband;
-
-	chan = &sband->channels[0];
-	cfg80211_chandef_create(&phy->mt76->chandef, chan, NL80211_CHAN_HT20);
-}
-
 static int mt7996_register_phy(struct mt7996_dev *dev, enum mt76_band_id band)
 {
 	struct mt7996_phy *phy;
@@ -851,8 +835,6 @@ static int mt7996_register_phy(struct mt7996_dev *dev, enum mt76_band_id band)
 	mphy->dev->phys[band] = mphy;
 
 	INIT_DELAYED_WORK(&mphy->mac_work, mt7996_mac_work);
-	INIT_DELAYED_WORK(&mphy->scan_work, mt7996_scan_work);
-	INIT_DELAYED_WORK(&mphy->roc_complete_work, mt7996_roc_complete_work);
 
 	ret = mt7996_eeprom_parse_hw_cap(dev, phy);
 	if (ret)
@@ -1800,8 +1782,6 @@ int mt7996_register_device(struct mt7996_dev *dev)
 	dev->mt76.phy.priv = &dev->phy;
 	INIT_WORK(&dev->rc_work, mt7996_mac_sta_rc_work);
 	INIT_DELAYED_WORK(&dev->mphy.mac_work, mt7996_mac_work);
-	INIT_DELAYED_WORK(&dev->phy.mt76->scan_work, mt7996_scan_work);
-	INIT_DELAYED_WORK(&dev->phy.mt76->roc_complete_work, mt7996_roc_complete_work);
 	INIT_DELAYED_WORK(&dev->scs_work, mt7996_mcu_scs_sta_poll);
 	INIT_LIST_HEAD(&dev->sta_rc_list);
 	INIT_LIST_HEAD(&dev->twt_list);
@@ -1845,7 +1825,6 @@ int mt7996_register_device(struct mt7996_dev *dev)
 		goto error;
 
 	mt7996_for_each_phy(dev, phy) {
-		mt7996_init_chanctx(phy);
 		mt7996_thermal_init(phy);
 		ret = mt7996_init_band_debugfs(phy);
 		if (ret)
diff --git a/mt7996/mac.c b/mt7996/mac.c
index 3855f9ca..5d95b598 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -3360,91 +3360,10 @@ void mt7996_mac_twt_teardown_flow(struct mt7996_dev *dev,
 	dev->twt.n_agrt--;
 }
 
-static void
-mt7996_scan_send_probe(struct mt7996_phy *phy, struct cfg80211_ssid *ssid,
-		       const u8 *dst)
-{
-	struct cfg80211_scan_request *req = phy->scan_req;
-	struct ieee80211_vif *vif = phy->scan_vif;
-	struct ieee80211_bss_conf *conf;
-	struct mt7996_vif *mvif;
-	struct mt7996_sta_link *mlsta;
-	struct ieee80211_tx_info *info;
-	struct ieee80211_hw *hw;
-	struct sk_buff *skb;
-	unsigned long valid_links;
-	unsigned int link_id;
-
-	if (!req || !vif)
-		return;
-
-	valid_links = vif->valid_links ?: BIT(0);
-	mvif = (struct mt7996_vif *)vif->drv_priv;
-	hw = phy->mt76->hw;
-
-	rcu_read_lock();
-
-	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
-		conf = rcu_dereference(vif->link_conf[link_id]);
-		mlsta = rcu_dereference(mvif->sta.link[link_id]);
-		if (mlsta->wcid.phy_idx != phy->mt76->band_idx)
-			continue;
-	}
-
-	if (unlikely(!conf))
-		goto unlock;
-
-	skb = ieee80211_probereq_get(hw, conf->addr,
-				     ssid->ssid, ssid->ssid_len, req->ie_len);
-	if (!skb)
-		goto unlock;
-
-	if (is_unicast_ether_addr(dst)) {
-		struct ieee80211_hdr_3addr *hdr =
-			(struct ieee80211_hdr_3addr *)skb->data;
-		memcpy(hdr->addr1, dst, ETH_ALEN);
-		memcpy(hdr->addr3, dst, ETH_ALEN);
-	}
-
-	info = IEEE80211_SKB_CB(skb);
-	info->control.flags |= IEEE80211_TX_CTRL_DONT_USE_RATE_MASK;
-	if (req->no_cck)
-		info->flags |= IEEE80211_TX_CTL_NO_CCK_RATE;
-
-	if (req->ie_len)
-		skb_put_data(skb, req->ie, req->ie_len);
-
-	skb_set_queue_mapping(skb, IEEE80211_AC_VO);
-
-	if (!ieee80211_tx_prepare_skb(hw, vif, skb,
-				      phy->scan_chan->band, NULL)) {
-		rcu_read_unlock();
-		ieee80211_free_txskb(hw, skb);
-		return;
-	}
-
-	local_bh_disable();
-	mt76_tx(phy->mt76, NULL, &mlsta->wcid, skb);
-	local_bh_enable();
-
-unlock:
-	rcu_read_unlock();
-}
-
-static void mt7996_active_scan(struct mt7996_phy *phy)
-{
-	struct cfg80211_scan_request *req = phy->scan_req;
-	int i;
-
-	mutex_lock(&phy->dev->mt76.mutex);
-	for (i = 0; i < req->n_ssids; i++)
-		mt7996_scan_send_probe(phy, &req->ssids[i], req->bssid);
-	mutex_unlock(&phy->dev->mt76.mutex);
-}
-
 static void mt7996_scan_rx(struct mt7996_phy *phy)
 {
-	struct ieee80211_vif *vif = phy->scan_vif;
+	struct mt76_dev *dev = &phy->dev->mt76;
+	struct ieee80211_vif *vif = dev->scan.vif;
 	struct mt7996_vif *mvif;
 
 	if (!vif || !test_bit(MT76_SCANNING, &phy->mt76->state))
@@ -3453,92 +3372,11 @@ static void mt7996_scan_rx(struct mt7996_phy *phy)
 	if (test_and_clear_bit(MT76_SCANNING_WAIT_BEACON, &phy->mt76->state)) {
 		mvif = (struct mt7996_vif *)vif->drv_priv;
 		set_bit(MT76_SCANNING_BEACON_DONE, &phy->mt76->state);
-		cancel_delayed_work(&phy->mt76->scan_work);
-		ieee80211_queue_delayed_work(phy->mt76->hw, &phy->mt76->scan_work, 0);
+		cancel_delayed_work(&dev->scan_work);
+		ieee80211_queue_delayed_work(phy->mt76->hw, &dev->scan_work, 0);
 	}
 }
 
-void mt7996_scan_work(struct work_struct *work)
-{
-	struct mt76_phy *mphy = container_of(work, struct mt76_phy, scan_work.work);
-	struct mt7996_phy *phy = mphy->priv;
-	struct ieee80211_hw *hw = phy->mt76->hw;
-	struct cfg80211_scan_request *req = phy->scan_req;
-	struct cfg80211_chan_def chandef = {};
-	int duration;
-	bool active_scan = false;
-
-	mutex_lock(&phy->dev->mt76.mutex);
-
-	clear_bit(MT76_SCANNING_WAIT_BEACON, &phy->mt76->state);
-
-	if (phy->scan_chan_idx >= req->n_channels) {
-		mt7996_scan_complete(phy, false);
-		mutex_unlock(&phy->dev->mt76.mutex);
-
-		if (phy->mt76->chanctx)
-			mt76_set_channel(phy->mt76, &phy->mt76->chanctx->chandef, false);
-		else
-			mt76_set_channel(phy->mt76, &phy->mt76->chandef, false);
-
-		return;
-	}
-
-	/* move to active scan for the current scanning channel */
-	if (test_and_clear_bit(MT76_SCANNING_BEACON_DONE, &phy->mt76->state)) {
-		mutex_unlock(&phy->dev->mt76.mutex);
-
-		mt7996_active_scan(phy);
-		ieee80211_queue_delayed_work(hw, &phy->mt76->scan_work, HZ / 16);
-		mt76_dbg(&phy->dev->mt76, MT76_DBG_SCAN,
-			 "%s: move to active scan on channel %d\n",
-			 __func__, phy->mt76->chanctx ? phy->mt76->chanctx->chandef.center_freq1 :
-							phy->mt76->chandef.center_freq1);
-		return;
-	}
-
-	/* go back to operating channel */
-	if (phy->mt76->num_sta && phy->scan_chan) {
-		phy->scan_chan = NULL;
-		mutex_unlock(&phy->dev->mt76.mutex);
-
-		if (phy->mt76->chanctx)
-			mt76_set_channel(phy->mt76, &phy->mt76->chanctx->chandef, false);
-		else
-			mt76_set_channel(phy->mt76, &phy->mt76->chandef, false);
-
-		ieee80211_queue_delayed_work(hw, &phy->mt76->scan_work, HZ / 10);
-
-		return;
-	}
-
-	phy->scan_chan = req->channels[phy->scan_chan_idx++];
-
-	if (!req->n_ssids ||
-	    (phy->scan_chan->flags & (IEEE80211_CHAN_NO_IR |
-				      IEEE80211_CHAN_RADAR))) {
-		/* allow active scan on radar/no-IR channels
-		 * if beacons from other APs are received
-		 */
-		if (req->n_ssids)
-			set_bit(MT76_SCANNING_WAIT_BEACON, &phy->mt76->state);
-		duration = HZ / 9; /* ~110 ms */
-	} else {
-		duration = HZ / 16; /* ~60 ms */
-		active_scan = true;
-	}
-
-	cfg80211_chandef_create(&chandef, phy->scan_chan, NL80211_CHAN_HT20);
-	mutex_unlock(&phy->dev->mt76.mutex);
-
-	mt76_set_channel(phy->mt76, &chandef, true);
-
-	if (active_scan)
-		mt7996_active_scan(phy);
-
-	ieee80211_queue_delayed_work(hw, &phy->mt76->scan_work, duration);
-}
-
 static int
 mt7996_beacon_mon_send_probe(struct mt7996_phy *phy, struct mt7996_vif *mvif,
 			     struct ieee80211_bss_conf *conf, unsigned int link_id)
@@ -3587,10 +3425,7 @@ mt7996_beacon_mon_send_probe(struct mt7996_phy *phy, struct mt7996_vif *mvif,
 	if (ieee80211_vif_is_mld(vif))
 		info->control.flags |= u32_encode_bits(link_id, IEEE80211_TX_CTRL_MLO_LINK);
 
-	if (phy->mt76->chanctx)
-		band = phy->mt76->chanctx->chandef.chan->band;
-	else
-		band = phy->mt76->chandef.chan->band;
+	band = phy->mt76->main_chandef.chan->band;
 
 	skb_set_queue_mapping(skb, IEEE80211_AC_VO);
 	if (!ieee80211_tx_prepare_skb(hw, vif, skb, band, NULL)) {
diff --git a/mt7996/main.c b/mt7996/main.c
index 48b5a6d0..91327507 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -123,14 +123,9 @@ static void mt7996_stop_phy(struct mt7996_phy *phy)
 		return;
 
 	cancel_delayed_work_sync(&phy->mt76->mac_work);
-	cancel_delayed_work_sync(&phy->mt76->scan_work);
-	cancel_delayed_work_sync(&phy->mt76->roc_complete_work);
 
 	mutex_lock(&dev->mt76.mutex);
 
-	if (test_bit(MT76_SCANNING, &phy->mt76->state))
-		mt7996_scan_complete(phy, true);
-
 	mt7996_mcu_set_radio_en(phy, false);
 
 	clear_bit(MT76_STATE_RUNNING, &phy->mt76->state);
@@ -297,7 +292,7 @@ void mt7996_vif_link_remove(struct mt76_phy *mphy, struct ieee80211_vif *vif,
 	mt76_wcid_cleanup(&dev->mt76, &mlsta->wcid);
 
 	if (mconf != &mvif->deflink)
-		kfree_rcu(mconf, rcu_head);
+		kfree_rcu(mconf, mt76.rcu_head);
 }
 
 int mt7996_vif_link_add(struct mt76_phy *mphy, struct ieee80211_vif *vif,
@@ -355,7 +350,6 @@ int mt7996_vif_link_add(struct mt76_phy *mphy, struct ieee80211_vif *vif,
 	}
 
 	mconf->mt76.omac_idx = idx;
-	mconf->vif = mvif;
 	mconf->phy = phy;
 	mconf->mt76.band_idx = band_idx;
 	mconf->mt76.wmm_idx = vif->type == NL80211_IFTYPE_AP ? 0 : 3;
@@ -384,6 +378,7 @@ int mt7996_vif_link_add(struct mt76_phy *mphy, struct ieee80211_vif *vif,
 	mlsta->sta = &mvif->sta;
 	mlsta->sta->vif = mvif;
 	mt76_wcid_init(&mlsta->wcid, band_idx);
+	mconf->mt76.wcid = &mlsta->wcid;
 
 	mt7996_mac_wtbl_update(dev, idx,
 			       MT_WTBL_UPDATE_ADM_COUNT_CLEAR);
@@ -565,15 +560,10 @@ static void mt7996_remove_interface(struct ieee80211_hw *hw,
 	ieee80211_iterate_active_interfaces_mtx(hw, 0, mt7996_remove_iter,
 						&rdata);
 
-	cancel_delayed_work_sync(&phy->mt76->scan_work);
-	cancel_delayed_work_sync(&phy->mt76->roc_complete_work);
 	cancel_delayed_work(&mvif->beacon_mon_work);
 
 	mutex_lock(&dev->mt76.mutex);
 
-	if (test_bit(MT76_SCANNING, &phy->mt76->state))
-		mt7996_scan_complete(phy, true);
-
 	conf = link_conf_dereference_protected(vif, 0);
 	mconf = mt7996_vif_link(dev, vif, 0);
 	if (!mconf || !conf)
@@ -615,6 +605,29 @@ int mt7996_set_channel(struct mt76_phy *mphy)
 	struct mt7996_phy *phy = mphy->priv;
 	int ret = 0;
 
+	if (mphy->chanctx && mphy->chanctx->state == MT76_CHANCTX_STATE_ADD) {
+		if (!mt76_testmode_enabled(phy->mt76) && !phy->mt76->test.bf_en) {
+			ret = mt7996_mcu_edcca_enable(phy, true);
+			if (ret)
+				goto out;
+		}
+
+		ret = mt7996_mcu_set_pp_en(phy, PP_USR_MODE,
+					   mphy->chanctx->chandef.punctured);
+		if (ret)
+			goto out;
+	} else if (mphy->chanctx && mphy->chanctx->state == MT76_CHANCTX_STATE_SWITCH) {
+		if (mphy->chanctx->has_ap && phy->pp_mode == PP_USR_MODE) {
+			ret = mt7996_mcu_set_pp_en(phy, PP_USR_MODE,
+						   mphy->main_chandef.punctured);
+		} else if (mphy->chanctx->has_sta) {
+			u8 omac_idx = get_omac_idx(NL80211_IFTYPE_STATION,
+				      phy->omac_mask);
+			ret = mt7996_mcu_set_pp_sta_dscb(phy, &mphy->main_chandef,
+							 omac_idx);
+		}
+	}
+
 	if (phy->dev->cal) {
 		ret = mt7996_mcu_apply_tx_dpd(phy);
 		if (ret)
@@ -2590,572 +2603,6 @@ mt7996_net_fill_forward_path(struct ieee80211_hw *hw,
 
 #endif
 
-void mt7996_scan_complete(struct mt7996_phy *phy, bool aborted)
-{
-	struct ieee80211_vif *vif = phy->scan_vif;
-	struct mt7996_vif *mvif;
-	struct cfg80211_scan_info info = {
-		.aborted = aborted,
-	};
-	int i;
-
-	if (!vif)
-		return;
-
-	mvif = (struct mt7996_vif *)vif->drv_priv;
-	if (ieee80211_vif_is_mld(vif)) {
-		struct mt7996_vif_link *mconf;
-
-		for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++) {
-			mconf = mt7996_vif_link(phy->dev, vif, i);
-
-			if (mconf && mconf->phy == phy && mconf == &mvif->deflink)
-				mt7996_vif_link_remove(phy->mt76, vif, NULL, &mvif->deflink.mt76);
-		}
-	}
-
-	ieee80211_scan_completed(phy->mt76->hw, &info);
-	phy->scan_chan = NULL;
-	phy->scan_req = NULL;
-	phy->scan_vif = NULL;
-	clear_bit(MT76_SCANNING, &phy->mt76->state);
-	clear_bit(MT76_SCANNING_WAIT_BEACON, &phy->mt76->state);
-	clear_bit(MT76_SCANNING_BEACON_DONE, &phy->mt76->state);
-}
-
-static int
-mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
-	       struct ieee80211_scan_request *hw_req)
-{
-	struct cfg80211_scan_request *req = &hw_req->req;
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_phy *phy = mt7996_band_phy(dev, req->channels[0]->band);
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_vif_link *mconf;
-	int ret;
-
-	mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s: trigger scan on mt76 band %u\n",
-		 __func__, phy->mt76->band_idx);
-	mutex_lock(&phy->dev->mt76.mutex);
-	if (WARN_ON(phy->scan_req || phy->scan_chan ||
-		    test_bit(MT76_STATE_ROC, &phy->mt76->state))) {
-		mutex_unlock(&phy->dev->mt76.mutex);
-		return -EBUSY;
-	}
-
-	phy->scan_req = req;
-	phy->scan_vif = vif;
-	phy->scan_chan_idx = 0;
-
-	if (!ieee80211_vif_is_mld(vif)) {
-		mconf = mt7996_vif_link(dev, vif, 0);
-
-		if (mconf && mconf->phy != phy) {
-			mt7996_vif_link_remove(phy->mt76, vif, NULL, &mvif->deflink.mt76);
-			mconf = NULL;
-		}
-
-		if (!mconf) {
-			ret = mt7996_vif_link_add(phy->mt76, vif, &vif->bss_conf, NULL);
-			if (ret) {
-				mutex_unlock(&phy->dev->mt76.mutex);
-				return ret;
-			}
-		}
-	} else {
-		struct ieee80211_bss_conf *link_conf;
-		unsigned long valid_links = vif->valid_links;
-		unsigned int link_id;
-		bool found = false;
-
-		for_each_set_bit(link_id, &valid_links,
-				 IEEE80211_MLD_MAX_NUM_LINKS) {
-			mconf = mt7996_vif_link(dev, vif, link_id);
-			if (mconf && mconf->phy == phy) {
-				found = true;
-				break;
-			}
-
-			link_conf = link_conf_dereference_protected(vif, link_id);
-			if (link_conf && !mconf) {
-				/* The link is added in mac80211, but not yet
-				 * initialized and assigned to a chanctx.
-				 * Here we use the default link to perform scan.
-				 */
-				memcpy(&vif->bss_conf, link_conf, sizeof(struct ieee80211_bss_conf));
-				ret = mt7996_vif_link_add(phy->mt76, vif, &vif->bss_conf, NULL);
-				found = true;
-				break;
-			}
-		}
-
-		if (!found) {
-			if (vif->type != NL80211_IFTYPE_STATION) {
-				/* Only allowed STA MLD to scan full-band when
-				 * there is no valid link on the band.
-				 * (For example, when connecting by 2 links
-				 * (2+5 GHz), an AP MLD is not allowed to scan
-				 * full-band (2+5+6 GHz), while a STA MLD is.)
-				 */
-				mt7996_scan_complete(phy, 0);
-				mutex_unlock(&phy->dev->mt76.mutex);
-				return 0;
-			}
-
-			/* Try to find an empty link, which is later used to scan. */
-			for (link_id = 0;
-			     link_id < IEEE80211_MLD_MAX_NUM_LINKS;
-			     link_id++) {
-				if (!rcu_access_pointer(mvif->mt76.link[link_id]))
-					break;
-			}
-
-			if (link_id == IEEE80211_MLD_MAX_NUM_LINKS) {
-				mutex_unlock(&phy->dev->mt76.mutex);
-				return -ENOLINK;
-			}
-
-			vif->bss_conf.link_id = link_id;
-			ret = mt7996_vif_link_add(phy->mt76, vif, &vif->bss_conf, NULL);
-			if (ret) {
-				mutex_unlock(&phy->dev->mt76.mutex);
-				return ret;
-			}
-		}
-	}
-
-	set_bit(MT76_SCANNING, &phy->mt76->state);
-	mutex_unlock(&phy->dev->mt76.mutex);
-
-	ieee80211_queue_delayed_work(phy->mt76->hw, &phy->mt76->scan_work, 0);
-
-	return 0;
-}
-
-static void
-mt7996_cancel_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
-{
-	// struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	int band;
-
-	for (band = 0; band < NUM_NL80211_BANDS; band++) {
-		struct mt7996_phy *phy;
-
-		if (!hw->wiphy->bands[band])
-			continue;
-
-		phy = mt7996_band_phy(dev, band);
-		if (!test_bit(MT76_SCANNING, &phy->mt76->state))
-			continue;
-
-		cancel_delayed_work_sync(&phy->mt76->scan_work);
-
-		mutex_lock(&phy->dev->mt76.mutex);
-		mt7996_scan_complete(phy, true);
-		// if (vif->type == NL80211_IFTYPE_STATION && !ieee80211_vif_is_mld(vif) &&
-		//     (phy->mt76 != mvif->deflink.phy->mt76))
-		// 	phy->mt76->main_phy = NULL;
-		mutex_unlock(&phy->dev->mt76.mutex);
-	}
-}
-
-void mt7996_roc_complete_work(struct work_struct *work)
-{
-	struct cfg80211_chan_def *chandef;
-	struct ieee80211_vif *vif;
-	struct ieee80211_hw *hw;
-	struct mt7996_vif *mvif;
-	struct mt7996_phy *phy;
-	struct mt76_phy *mphy;
-	int i;
-
-	mphy = container_of(work, struct mt76_phy, roc_complete_work.work);
-	phy = mphy->priv;
-	vif = phy->roc_vif;
-	mvif = (struct mt7996_vif *)vif->drv_priv;
-	hw = phy->mt76->hw;
-
-	mutex_lock(&phy->dev->mt76.mutex);
-
-	if (!test_bit(MT76_STATE_ROC, &phy->mt76->state)) {
-		mutex_unlock(&phy->dev->mt76.mutex);
-		return;
-	}
-
-	phy->roc_vif = NULL;
-	phy->roc_chan = NULL;
-	clear_bit(MT76_STATE_ROC, &phy->mt76->state);
-
-	if (ieee80211_vif_is_mld(vif)) {
-		struct mt7996_vif_link *mconf;
-
-		for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++) {
-			mconf = mt7996_vif_link(phy->dev, vif, i);
-
-			if (mconf && mconf->phy == phy && mconf == &mvif->deflink) {
-				mt7996_vif_link_remove(phy->mt76, vif, NULL, &mvif->deflink.mt76);
-				break;
-			}
-		}
-	}
-
-	mutex_unlock(&phy->dev->mt76.mutex);
-
-	chandef = phy->mt76->chanctx ? &phy->mt76->chanctx->chandef : &phy->mt76->chandef;
-	wiphy_info(hw->wiphy, "finish roc work, go back to freq=%u\n",
-			chandef->chan->center_freq);
-	mt76_set_channel(phy->mt76, chandef, false);
-	ieee80211_remain_on_channel_expired(hw);
-}
-
-static int
-mt7996_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
-			 struct ieee80211_channel *chan, int duration,
-			 enum ieee80211_roc_type type)
-{
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct cfg80211_chan_def chandef = {};
-	struct mt7996_vif_link *mconf;
-	struct mt7996_vif *mvif;
-	struct mt7996_phy *phy;
-	int ret;
-
-	if (!chan)
-		return -EINVAL;
-
-	phy = mt7996_band_phy(dev, chan->band);
-
-	if (!phy)
-		return -EINVAL;
-
-	mvif = (struct mt7996_vif *)vif->drv_priv;
-	mutex_lock(&phy->dev->mt76.mutex);
-
-	if (test_bit(MT76_STATE_ROC, &phy->mt76->state) ||
-	    test_bit(MT76_SCANNING, &phy->mt76->state)) {
-		ret = -EBUSY;
-		goto error_unlock;
-	}
-
-	if (!ieee80211_vif_is_mld(vif)) {
-		mconf = mt7996_vif_link(dev, vif, 0);
-		if (!mconf || mconf->phy != phy) {
-			ret = -EINVAL;
-			goto error_unlock;
-		}
-	} else {
-		unsigned long valid_links = vif->valid_links;
-		unsigned int link_id;
-		bool found = false;
-
-		for_each_set_bit(link_id, &valid_links,
-				 IEEE80211_MLD_MAX_NUM_LINKS) {
-			mconf = mt7996_vif_link(dev, vif, link_id);
-			if (mconf && mconf->phy == phy) {
-				found = true;
-				break;
-			}
-		}
-
-		if (!found) {
-			if (vif->type != NL80211_IFTYPE_STATION) {
-				ret = -ENOLINK;
-				goto error_unlock;
-			}
-
-			/* Try to find an empty link, which is later used to scan. */
-			for (link_id = 0;
-			     link_id < IEEE80211_MLD_MAX_NUM_LINKS;
-			     link_id++) {
-				if (!rcu_access_pointer(mvif->mt76.link[link_id]))
-					break;
-			}
-
-			if (link_id == IEEE80211_MLD_MAX_NUM_LINKS) {
-				ret = -ENOLINK;
-				goto error_unlock;
-			}
-
-			vif->bss_conf.link_id = link_id;
-			ret = mt7996_vif_link_add(phy->mt76, vif, &vif->bss_conf, NULL);
-			if (ret)
-				goto error_unlock;
-		}
-
-	}
-	wiphy_info(hw->wiphy, "start roc work on freq=%u\n",
-			chan->center_freq);
-
-	set_bit(MT76_STATE_ROC, &phy->mt76->state);
-	phy->roc_vif = vif;
-	phy->roc_chan = chan;
-	mutex_unlock(&phy->dev->mt76.mutex);
-
-	cfg80211_chandef_create(&chandef, chan, NL80211_CHAN_HT20);
-	mt76_set_channel(phy->mt76, &chandef, true);
-	ieee80211_ready_on_channel(hw);
-
-	ieee80211_queue_delayed_work(phy->mt76->hw, &phy->mt76->roc_complete_work,
-				     msecs_to_jiffies(duration));
-
-	return 0;
-
-error_unlock:
-	mutex_unlock(&phy->dev->mt76.mutex);
-	return ret;
-}
-
-static int
-mt7996_cancel_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
-{
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	int band;
-	struct mt7996_phy *phy;
-
-	for (band = 0; band < NUM_NL80211_BANDS; band++) {
-		if (!hw->wiphy->bands[band])
-			continue;
-
-		phy = mt7996_band_phy(dev, band);
-		if (!phy || !test_bit(MT76_STATE_ROC, &phy->mt76->state))
-			continue;
-
-		cancel_delayed_work_sync(&phy->mt76->roc_complete_work);
-		ieee80211_queue_delayed_work(phy->mt76->hw, &phy->mt76->roc_complete_work, 0);
-	}
-	return 0;
-}
-
-static int
-mt7996_add_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
-{
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_phy *phy = mt7996_band_phy(dev, conf->def.chan->band);
-	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
-	int ret;
-
-	mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s: add %u on mt76 band %d\n",
-		 __func__, conf->def.chan->hw_value, phy->mt76->band_idx);
-	mutex_lock(&phy->dev->mt76.mutex);
-
-	if (ctx->assigned) {
-		mutex_unlock(&phy->dev->mt76.mutex);
-		return -ENOSPC;
-	}
-
-	ctx->assigned = true;
-	ctx->chandef = conf->def;
-	ctx->phy = phy->mt76;
-	if (phy->mt76->chanctx) {
-		mutex_unlock(&phy->dev->mt76.mutex);
-		return 0;
-	}
-
-	phy->mt76->chanctx = ctx;
-	phy->mt76->radar_enabled = conf->radar_enabled;
-	mutex_unlock(&phy->dev->mt76.mutex);
-
-	if (!mt76_testmode_enabled(phy->mt76) && !phy->mt76->test.bf_en) {
-		ret = mt7996_mcu_edcca_enable(phy, true);
-		if (ret)
-			return ret;
-	}
-
-	ret = mt7996_mcu_set_pp_en(phy, PP_USR_MODE, ctx->chandef.punctured);
-	if (ret)
-		return ret;
-
-	return mt76_set_channel(phy->mt76, &ctx->chandef, false);
-}
-
-static void
-mt7996_remove_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
-{
-	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
-	struct mt7996_phy *phy = ctx->phy->priv;
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-
-	mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s: remove %u\n",
-		 __func__, conf->def.chan->hw_value);
-	cancel_delayed_work_sync(&phy->mt76->scan_work);
-	cancel_delayed_work_sync(&phy->mt76->roc_complete_work);
-	cancel_delayed_work_sync(&phy->mt76->mac_work);
-
-	mutex_lock(&phy->dev->mt76.mutex);
-	ctx->assigned = false;
-	if (ctx == phy->mt76->chanctx) {
-		phy->mt76->chanctx = NULL;
-		phy->mt76->radar_enabled = false;
-	}
-	mutex_unlock(&phy->dev->mt76.mutex);
-}
-
-static void
-mt7996_change_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf,
-		      u32 changed)
-{
-	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_phy *phy = ctx->phy->priv;
-
-	if (changed & IEEE80211_CHANCTX_CHANGE_WIDTH ||
-	    changed & IEEE80211_CHANCTX_CHANGE_RADAR) {
-		ctx->chandef = conf->def;
-		phy->mt76->radar_enabled = conf->radar_enabled;
-
-		mt76_set_channel(phy->mt76, &ctx->chandef, false);
-
-		mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s: change to %u, 0x%x\n",
-			 __func__, conf->def.chan->hw_value, changed);
-	}
-}
-
-static int
-mt7996_assign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
-			  struct ieee80211_bss_conf *link_conf,
-			  struct ieee80211_chanctx_conf *conf)
-{
-	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_phy *phy = ctx->phy->priv;
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_vif_link *mconf;
-	u8 link_id = link_conf->link_id;
-	int ret;
-
-	mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s: assign link_id %u to %d MHz\n",
-		 __func__, link_conf->link_id, conf->def.chan->center_freq);
-
-	mutex_lock(&phy->dev->mt76.mutex);
-
-	mconf = mt7996_vif_link(dev, vif, link_id);
-
-	/* Remove bss conf when change non-MLO interface to MLO interface */
-	if (ieee80211_vif_is_mld(vif) && mconf == &mvif->deflink)
-		mt7996_vif_link_remove(phy->mt76, vif, NULL, &mconf->mt76);
-	else if (mconf && phy != mconf->phy)
-		dev_err(phy->dev->mt76.dev,
-			"%s: error: change link[%d] from phy%d to phy%d",
-			__func__, link_id, mconf->phy->mt76->band_idx,
-			phy->mt76->band_idx);
-
-	ret = mt7996_vif_link_add(phy->mt76, vif, link_conf, NULL);
-	if (ret) {
-		mutex_unlock(&phy->dev->mt76.mutex);
-		return ret;
-	}
-
-	ctx->nbss_assigned++;
-	mvif->mt76.band_to_link[phy->mt76->band_idx] = link_id;
-
-	if (mt7996_hw_phy(hw) == phy)
-		mvif->mt76.deflink_id = link_id;
-
-	mutex_unlock(&phy->dev->mt76.mutex);
-
-	return 0;
-}
-
-static void
-mt7996_unassign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
-			    struct ieee80211_bss_conf *link_conf,
-			    struct ieee80211_chanctx_conf *conf)
-{
-	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
-	struct mt7996_phy *phy = ctx->phy->priv;
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-
-	mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s, remove link %u from %d MHz\n",
-		 __func__, link_conf->link_id, conf->def.chan->center_freq);
-	cancel_delayed_work_sync(&phy->mt76->scan_work);
-	cancel_delayed_work_sync(&phy->mt76->roc_complete_work);
-
-	mutex_lock(&phy->dev->mt76.mutex);
-
-	if (test_bit(MT76_SCANNING, &phy->mt76->state))
-		mt7996_scan_complete(phy, true);
-
-	ctx->nbss_assigned--;
-
-	mutex_unlock(&phy->dev->mt76.mutex);
-}
-
-static int
-mt7996_switch_vif_chanctx(struct ieee80211_hw *hw,
-			  struct ieee80211_vif_chanctx_switch *vifs,
-			  int n_vifs,
-			  enum ieee80211_chanctx_switch_mode mode)
-{
-	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt76_chanctx *old_ctx;
-	struct mt76_chanctx *new_ctx;
-	struct mt7996_phy *phy;
-	int i, ret = 0;
-	u8 omac_idx;
-
-	for (i = 0; i < n_vifs; i++) {
-		if (vifs[i].old_ctx == vifs[i].new_ctx)
-			continue;
-
-		mt76_dbg(&dev->mt76, MT76_DBG_CHAN,
-			 "%s: chan=%d->%d, width=%d->%d, punct_bitmap=0x%04x->0x%04x, link=%u\n",
-			 __func__,
-			 vifs[i].old_ctx->def.chan->hw_value,
-			 vifs[i].new_ctx->def.chan->hw_value,
-			 vifs[i].old_ctx->def.width,
-			 vifs[i].new_ctx->def.width,
-			 vifs[i].old_ctx->def.punctured,
-			 vifs[i].new_ctx->def.punctured,
-			 vifs[i].link_conf->link_id);
-
-		mutex_lock(&dev->mt76.mutex);
-
-		old_ctx = (struct mt76_chanctx *)vifs[i].old_ctx->drv_priv;
-		new_ctx = (struct mt76_chanctx *)vifs[i].new_ctx->drv_priv;
-		phy = old_ctx->phy->priv;
-
-		if (new_ctx->nbss_assigned && phy->mt76->chanctx == new_ctx) {
-			new_ctx->nbss_assigned++;
-			mutex_unlock(&dev->mt76.mutex);
-			continue;
-		}
-
-		if (WARN_ON(old_ctx != phy->mt76->chanctx)) {
-			ret = -EINVAL;
-			mutex_unlock(&dev->mt76.mutex);
-			goto out;
-		}
-
-		phy->mt76->chanctx = new_ctx;
-		phy->mt76->radar_enabled = vifs[i].new_ctx->radar_enabled;
-		new_ctx->assigned = true;
-		new_ctx->chandef = vifs[i].new_ctx->def;
-		new_ctx->phy = phy->mt76;
-		new_ctx->nbss_assigned++;
-
-		mutex_unlock(&dev->mt76.mutex);
-
-		if (vifs->vif->type == NL80211_IFTYPE_AP && phy->pp_mode == PP_USR_MODE)
-			ret = mt7996_mcu_set_pp_en(phy, PP_USR_MODE,
-						   new_ctx->chandef.punctured);
-		else if (vifs->vif->type == NL80211_IFTYPE_STATION) {
-			omac_idx = get_omac_idx(NL80211_IFTYPE_STATION, phy->omac_mask);
-			ret = mt7996_mcu_set_pp_sta_dscb(phy, &new_ctx->chandef, omac_idx);
-		}
-
-		if (ret)
-			goto out;
-
-		ret = mt76_set_channel(phy->mt76, &new_ctx->chandef, false);
-		if (ret)
-			goto out;
-	}
-
-out:
-	return ret;
-}
-
 static int
 mt7996_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			u16 old_links, u16 new_links,
@@ -3403,10 +2850,12 @@ mt7996_set_qos_map(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 }
 
 const struct ieee80211_ops mt7996_ops = {
-	.add_chanctx = ieee80211_emulate_add_chanctx,
-	.remove_chanctx = ieee80211_emulate_remove_chanctx,
-	.change_chanctx = ieee80211_emulate_change_chanctx,
-	.switch_vif_chanctx = ieee80211_emulate_switch_vif_chanctx,
+	.add_chanctx = mt76_add_chanctx,
+	.remove_chanctx = mt76_remove_chanctx,
+	.change_chanctx = mt76_change_chanctx,
+	.assign_vif_chanctx = mt76_assign_vif_chanctx,
+	.unassign_vif_chanctx = mt76_unassign_vif_chanctx,
+	.switch_vif_chanctx = mt76_switch_vif_chanctx,
 	.tx = mt7996_tx,
 	.start = mt7996_start,
 	.stop = mt7996_stop,
@@ -3424,10 +2873,10 @@ const struct ieee80211_ops mt7996_ops = {
 	.ampdu_action = mt7996_ampdu_action,
 	.set_rts_threshold = mt7996_set_rts_threshold,
 	.wake_tx_queue = mt76_wake_tx_queue,
-	.hw_scan = mt7996_hw_scan,
-	.cancel_hw_scan = mt7996_cancel_hw_scan,
-	.remain_on_channel = mt7996_remain_on_channel,
-	.cancel_remain_on_channel = mt7996_cancel_remain_on_channel,
+	.hw_scan = mt76_hw_scan,
+	.cancel_hw_scan = mt76_cancel_hw_scan,
+	.remain_on_channel = mt76_remain_on_channel,
+	.cancel_remain_on_channel = mt76_cancel_remain_on_channel,
 	.release_buffered_frames = mt76_release_buffered_frames,
 	.get_txpower = mt7996_get_txpower,
 	.channel_switch_beacon = mt7996_channel_switch_beacon,
@@ -3464,12 +2913,6 @@ const struct ieee80211_ops mt7996_ops = {
 	.net_setup_tc = mt76_wed_net_setup_tc,
 #endif
 	.event_callback = mt7996_event_callback,
-	.add_chanctx = mt7996_add_chanctx,
-	.remove_chanctx = mt7996_remove_chanctx,
-	.change_chanctx = mt7996_change_chanctx,
-	.assign_vif_chanctx = mt7996_assign_vif_chanctx,
-	.unassign_vif_chanctx = mt7996_unassign_vif_chanctx,
-	.switch_vif_chanctx = mt7996_switch_vif_chanctx,
 	.change_vif_links = mt7996_change_vif_links,
 	.change_sta_links = mt7996_change_sta_links,
 	.set_qos_map = mt7996_set_qos_map,
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index c65fb051..cce808b9 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -5482,7 +5482,7 @@ int mt7996_mcu_set_chan_info(struct mt7996_phy *phy, u16 tag, bool sta)
 		req.switch_reason = CH_SWITCH_NORMAL;
 	else if (phy->mt76->offchannel ||
 		 phy->mt76->hw->conf.flags & IEEE80211_CONF_IDLE ||
-		 phy->scan_chan)
+		 dev->mt76.scan.chan)
 		req.switch_reason = CH_SWITCH_SCAN_BYPASS_DPD;
 	else if (!cfg80211_reg_can_beacon(phy->mt76->hw->wiphy, chandef, iftype))
 		req.switch_reason = CH_SWITCH_DFS;
@@ -8507,7 +8507,7 @@ int mt7996_mcu_set_qos_map(struct mt7996_dev *dev, struct mt7996_vif_link *mconf
 		}
 	}
 
-	memcpy(mconf->vif->qos_map, req.data.qos_map, IP_DSCP_NUM);
+	memcpy(mconf->mlsta.sta->vif->qos_map, req.data.qos_map, IP_DSCP_NUM);
 
 	if (!mt7996_has_wa(dev))
 		return mt76_mcu_send_msg(&dev->mt76, MCU_WA_UNI_CMD(SDO),
diff --git a/mt7996/mmio.c b/mt7996/mmio.c
index 4b815ab3..b9f59a41 100644
--- a/mt7996/mmio.c
+++ b/mt7996/mmio.c
@@ -829,6 +829,7 @@ struct mt7996_dev *mt7996_mmio_probe(struct device *pdev,
 	static const struct mt76_driver_ops drv_ops = {
 		/* txwi_size = txd size + txp size */
 		.txwi_size = MT_TXD_SIZE + sizeof(struct mt76_connac_fw_txp),
+		.link_data_size = sizeof(struct mt7996_vif_link),
 		.drv_flags = MT_DRV_TXWI_NO_FREE |
 			     MT_DRV_AMSDU_OFFLOAD |
 			     MT_DRV_HW_MGMT_TXQ,
@@ -849,6 +850,7 @@ struct mt7996_dev *mt7996_mmio_probe(struct device *pdev,
 		.update_survey = mt7996_update_channel,
 		.set_channel = mt7996_set_channel,
 		.vif_link_add = mt7996_vif_link_add,
+		.vif_link_remove = mt7996_vif_link_remove,
 	};
 	struct mt7996_dev *dev;
 	struct mt76_dev *mdev;
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 0e3c8f3e..9f814bd4 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -435,11 +435,9 @@ struct mt7996_sta {
 
 struct mt7996_vif_link {
 	struct mt76_vif_link mt76; /* must be first */
-	struct rcu_head rcu_head;
 
 	struct mt7996_sta_link mlsta;
 
-	struct mt7996_vif *vif;
 	struct mt7996_phy *phy;
 	struct ieee80211_tx_queue_params queue_params[IEEE80211_NUM_ACS];
 	struct cfg80211_bitrate_mask bitrate_mask;
@@ -719,18 +717,9 @@ struct mt7996_phy {
 	u8 pp_mode;
 	u16 punct_bitmap;
 
-	/* for hw_scan */
-	struct ieee80211_channel *scan_chan;
-	struct cfg80211_scan_request *scan_req;
-	struct ieee80211_vif *scan_vif;
-	int scan_chan_idx;
-
 	struct mt7996_scs_ctrl scs_ctrl;
 	u32 red_drop;
 
-	struct ieee80211_vif *roc_vif;
-	struct ieee80211_channel *roc_chan;
-
 	bool sku_limit_en;
 	bool sku_path_en;
 
@@ -1470,9 +1459,6 @@ int mt7996_rro_fill_msdu_page(struct mt76_dev *mdev, struct mt76_queue *q,
 			      dma_addr_t p, void *data);
 bool mt7996_rx_check(struct mt76_dev *mdev, void *data, int len);
 void mt7996_stats_work(struct work_struct *work);
-void mt7996_scan_work(struct work_struct *work);
-void mt7996_scan_complete(struct mt7996_phy *phy, bool aborted);
-void mt7996_roc_complete_work(struct work_struct *work);
 void mt7996_beacon_mon_work(struct work_struct *work);
 int mt76_dfs_start_rdd(struct mt7996_dev *dev, bool force);
 int mt7996_dfs_init_radar_detector(struct mt7996_phy *phy);
diff --git a/scan.c b/scan.c
index 9b20ccbe..afac1260 100644
--- a/scan.c
+++ b/scan.c
@@ -7,26 +7,31 @@
 static void mt76_scan_complete(struct mt76_dev *dev, bool abort)
 {
 	struct mt76_phy *phy = dev->scan.phy;
+	struct ieee80211_vif *vif = dev->scan.vif;
 	struct cfg80211_scan_info info = {
 		.aborted = abort,
 	};
 
-	if (!phy)
+	if (!phy || !vif)
 		return;
 
-	clear_bit(MT76_SCANNING, &phy->state);
+	if (ieee80211_vif_is_mld(vif))
+		if (dev->scan.mlink == (struct mt76_vif_link *)vif->drv_priv)
+			dev->drv->vif_link_remove(phy, vif, NULL, dev->scan.mlink);
 
-	if (dev->scan.chan && phy->main_chandef.chan)
-		mt76_set_channel(phy, &phy->main_chandef, false);
-	mt76_put_vif_phy_link(phy, dev->scan.vif, dev->scan.mlink);
-	memset(&dev->scan, 0, sizeof(dev->scan));
 	ieee80211_scan_completed(phy->hw, &info);
+	memset(&dev->scan, 0, sizeof(dev->scan));
+	clear_bit(MT76_SCANNING, &phy->state);
+	clear_bit(MT76_SCANNING_WAIT_BEACON, &phy->state);
+	clear_bit(MT76_SCANNING_BEACON_DONE, &phy->state);
 }
 
 void mt76_abort_scan(struct mt76_dev *dev)
 {
 	cancel_delayed_work_sync(&dev->scan_work);
+	mutex_lock(&dev->mutex);
 	mt76_scan_complete(dev, true);
+	mutex_unlock(&dev->mutex);
 }
 
 static void
@@ -86,8 +91,29 @@ void mt76_scan_work(struct work_struct *work)
 	int duration = HZ / 9; /* ~110 ms */
 	int i;
 
+	clear_bit(MT76_SCANNING_WAIT_BEACON, &phy->state);
+
 	if (dev->scan.chan_idx >= req->n_channels) {
+		mutex_lock(&dev->mutex);
 		mt76_scan_complete(dev, false);
+		mutex_unlock(&dev->mutex);
+
+		mt76_set_channel(phy, &phy->main_chandef, false);
+
+		return;
+	}
+
+	/* move to active scan for the current scanning channel */
+	if (test_and_clear_bit(MT76_SCANNING_BEACON_DONE, &phy->state)) {
+		local_bh_disable();
+		for (i = 0; i < req->n_ssids; i++)
+			mt76_scan_send_probe(dev, &req->ssids[i]);
+		local_bh_enable();
+		ieee80211_queue_delayed_work(phy->hw, &dev->scan_work, HZ / 16);
+		mt76_dbg(dev, MT76_DBG_SCAN,
+			 "%s: move to active scan on channel %d\n",
+			 __func__, phy->chanctx ? phy->chanctx->chandef.center_freq1 :
+						  phy->chandef.center_freq1);
 		return;
 	}
 
@@ -128,7 +154,8 @@ int mt76_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 {
 	struct mt76_phy *phy = hw->priv;
 	struct mt76_dev *dev = phy->dev;
-	struct mt76_vif_link *mlink;
+	struct mt76_vif_link *mlink = (struct mt76_vif_link *)vif->drv_priv;
+	struct mt76_vif_data *mvif = mlink->mvif;
 	int ret = 0;
 
 	if (hw->wiphy->n_radio > 1) {
@@ -137,6 +164,9 @@ int mt76_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			return -EINVAL;
 	}
 
+	mt76_dbg(dev, MT76_DBG_CHAN, "%s: trigger scan on mt76 band %u\n",
+		 __func__, phy->band_idx);
+
 	mutex_lock(&dev->mutex);
 
 	if (dev->scan.req || phy->roc_vif) {
@@ -144,10 +174,80 @@ int mt76_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		goto out;
 	}
 
-	mlink = mt76_get_vif_phy_link(phy, vif);
-	if (IS_ERR(mlink)) {
-		ret = PTR_ERR(mlink);
-		goto out;
+	if (!ieee80211_vif_is_mld(vif)) {
+		mlink = mt76_vif_link(dev, vif, 0);
+
+		if (mlink && mlink->band_idx != phy->band_idx) {
+			dev->drv->vif_link_remove(phy, vif, NULL, mlink);
+			mlink = NULL;
+		}
+
+		if (!mlink) {
+			mlink = (struct mt76_vif_link *)vif->drv_priv;
+			ret = dev->drv->vif_link_add(phy, vif, &vif->bss_conf, NULL);
+			if (ret)
+				goto out;
+		}
+	} else {
+		struct ieee80211_bss_conf *link_conf;
+		unsigned long valid_links = vif->valid_links;
+		unsigned int link_id;
+		bool found = false;
+
+		for_each_set_bit(link_id, &valid_links,
+				 IEEE80211_MLD_MAX_NUM_LINKS) {
+			mlink = mt76_vif_link(dev, vif, link_id);
+			if (mlink && mlink->band_idx == phy->band_idx) {
+				found = true;
+				break;
+			}
+
+			link_conf = link_conf_dereference_protected(vif, link_id);
+			if (link_conf && !mlink) {
+				/* The link is added in mac80211, but not yet
+				 * initialized and assigned to a chanctx.
+				 * Here we use the default link to perform scan.
+				 */
+				memcpy(&vif->bss_conf, link_conf, sizeof(struct ieee80211_bss_conf));
+				ret = dev->drv->vif_link_add(phy, vif, &vif->bss_conf, NULL);
+				if (ret)
+					goto out;
+				found = true;
+				break;
+			}
+		}
+
+		if (!found) {
+			if (vif->type != NL80211_IFTYPE_STATION) {
+				/* Only allowed STA MLD to scan full-band when
+				 * there is no valid link on the band.
+				 * (For example, when connecting by 2 links
+				 * (2+5 GHz), an AP MLD is not allowed to scan
+				 * full-band (2+5+6 GHz), while a STA MLD is.)
+				 */
+				mt76_scan_complete(dev, 0);
+				goto out;
+			}
+
+			/* Try to find an empty link, which is later used to scan. */
+			for (link_id = 0;
+			     link_id < IEEE80211_MLD_MAX_NUM_LINKS;
+			     link_id++) {
+				if (!rcu_access_pointer(mvif->link[link_id]))
+					break;
+			}
+
+			if (link_id == IEEE80211_MLD_MAX_NUM_LINKS) {
+				ret = -ENOLINK;
+				goto out;
+			}
+
+			vif->bss_conf.link_id = link_id;
+			mlink = (struct mt76_vif_link *)vif->drv_priv;
+			ret = dev->drv->vif_link_add(phy, vif, &vif->bss_conf, NULL);
+			if (ret)
+				goto out;
+		}
 	}
 
 	memset(&dev->scan, 0, sizeof(dev->scan));
@@ -155,6 +255,7 @@ int mt76_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	dev->scan.vif = vif;
 	dev->scan.phy = phy;
 	dev->scan.mlink = mlink;
+	set_bit(MT76_SCANNING, &phy->state);
 	ieee80211_queue_delayed_work(dev->phy.hw, &dev->scan_work, 0);
 
 out:
-- 
2.45.2

