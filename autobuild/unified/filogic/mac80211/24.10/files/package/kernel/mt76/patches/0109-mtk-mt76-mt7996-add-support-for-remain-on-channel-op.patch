From 4444afdc6b10fe4d9517821719ef6fe9b452e84f Mon Sep 17 00:00:00 2001
From: Michael-CY Lee <michael-cy.lee@mediatek.com>
Date: Fri, 7 Jun 2024 15:24:00 +0800
Subject: [PATCH 109/146] mtk: mt76: mt7996: add support for remain-on-channel
 operation

Remain-on-channel operation allows interface to temporarily leave the
operating channel and go to another channel for listening or TX skbs.
It is not allowed to conduct a scan and a remain-on-channel at the same
time, since they both require a bss/link to jump to another channel.

The constrains for interfaces about remain-on-channel operation:
1. The legacy interfaces can only remain on channels that is in the same
   band with the original channel.
2. The MLD AP can only remain on channels that in the same band with one
   of its operating links.
3. The MLd STA can remain on full-band channels even if it does not have
   connection on that band. In such case, the default link is used.

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 mt7996/init.c   |   4 ++
 mt7996/main.c   | 175 +++++++++++++++++++++++++++++++++++++++++++++++-
 mt7996/mt7996.h |   5 ++
 3 files changed, 182 insertions(+), 2 deletions(-)

diff --git a/mt7996/init.c b/mt7996/init.c
index 43467f42..c5785560 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -580,6 +580,8 @@ mt7996_init_wiphy(struct ieee80211_hw *hw, struct mtk_wed_device *wed)
 	wiphy->max_scan_ssids = 4;
 	wiphy->max_scan_ie_len = IEEE80211_MAX_DATA_LEN;
 
+	wiphy->max_remain_on_channel_duration = 5000;
+
 	/* enable MLO support */
 	wiphy->flags |= WIPHY_FLAG_SUPPORTS_MLO;
 	wiphy->iftype_ext_capab = mt7996_iftypes_ext_capa;
@@ -821,6 +823,7 @@ static int mt7996_register_phy(struct mt7996_dev *dev, enum mt76_band_id band)
 
 	INIT_DELAYED_WORK(&mphy->mac_work, mt7996_mac_work);
 	INIT_DELAYED_WORK(&phy->scan_work, mt7996_scan_work);
+	INIT_DELAYED_WORK(&phy->roc_complete_work, mt7996_roc_complete_work);
 
 	ret = mt7996_eeprom_parse_hw_cap(dev, phy);
 	if (ret)
@@ -1767,6 +1770,7 @@ int mt7996_register_device(struct mt7996_dev *dev)
 	INIT_WORK(&dev->rc_work, mt7996_mac_sta_rc_work);
 	INIT_DELAYED_WORK(&dev->mphy.mac_work, mt7996_mac_work);
 	INIT_DELAYED_WORK(&dev->phy.scan_work, mt7996_scan_work);
+	INIT_DELAYED_WORK(&dev->phy.roc_complete_work, mt7996_roc_complete_work);
 	INIT_DELAYED_WORK(&dev->scs_work, mt7996_mcu_scs_sta_poll);
 	INIT_LIST_HEAD(&dev->sta_rc_list);
 	INIT_LIST_HEAD(&dev->twt_list);
diff --git a/mt7996/main.c b/mt7996/main.c
index d0e54b6e..3efea2be 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -617,7 +617,7 @@ static void ___mt7996_set_channel(struct mt7996_phy *phy,
 {
 	struct mt76_dev *mdev = phy->mt76->dev;
 	struct mt76_phy *mphy = phy->mt76;
-	bool offchannel = phy->scan_chan != NULL;
+	bool offchannel = phy->scan_chan != NULL || phy->roc_chan != NULL;
 	int timeout = HZ / 5;
 	unsigned long was_scanning = ieee80211_get_scanning(mphy->hw);
 
@@ -2594,7 +2594,8 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	mt7996_dbg(dev, MT7996_DBG_CHAN, "%s: trigger scan on mt76 band %u\n",
 		   __func__, phy->mt76->band_idx);
 	mutex_lock(&phy->dev->mt76.mutex);
-	if (WARN_ON(phy->scan_req || phy->scan_chan)) {
+	if (WARN_ON(phy->scan_req || phy->scan_chan ||
+		    test_bit(MT76_STATE_ROC, &phy->mt76->state))) {
 		mutex_unlock(&phy->dev->mt76.mutex);
 		return -EBUSY;
 	}
@@ -2716,6 +2717,172 @@ mt7996_cancel_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
 	}
 }
 
+void mt7996_roc_complete_work(struct work_struct *work)
+{
+	struct cfg80211_chan_def *chandef;
+	struct ieee80211_vif *vif;
+	struct ieee80211_hw *hw;
+	struct mt7996_vif *mvif;
+	struct mt7996_phy *phy;
+	int i;
+
+	phy = container_of(work, struct mt7996_phy, roc_complete_work.work);
+	vif = phy->roc_vif;
+	mvif = (struct mt7996_vif *)vif->drv_priv;
+	hw = phy->mt76->hw;
+
+	mutex_lock(&phy->dev->mt76.mutex);
+
+	if (!test_bit(MT76_STATE_ROC, &phy->mt76->state)) {
+		mutex_unlock(&phy->dev->mt76.mutex);
+		return;
+	}
+
+	phy->roc_vif = NULL;
+	phy->roc_chan = NULL;
+	clear_bit(MT76_STATE_ROC, &phy->mt76->state);
+
+	if (ieee80211_vif_is_mld(vif)) {
+		struct mt7996_bss_conf *mconf;
+
+		for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++) {
+			mconf = mconf_dereference_protected(mvif, i);
+
+			if (mconf && mconf->phy == phy && mconf == &mvif->deflink) {
+				mt7996_remove_bss_conf(vif, &vif->bss_conf,
+						       &mvif->deflink);
+				break;
+			}
+		}
+	}
+
+	mutex_unlock(&phy->dev->mt76.mutex);
+
+	chandef = phy->chanctx ? &phy->chanctx->chandef : &phy->mt76->chandef;
+	wiphy_info(hw->wiphy, "finish roc work, go back to freq=%u\n",
+			chandef->chan->center_freq);
+	mt7996_set_channel(phy, chandef);
+	ieee80211_remain_on_channel_expired(hw);
+}
+
+static int
+mt7996_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+			 struct ieee80211_channel *chan, int duration,
+			 enum ieee80211_roc_type type)
+{
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct cfg80211_chan_def chandef = {};
+	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif *mvif;
+	struct mt7996_phy *phy;
+	int ret;
+
+	if (!chan)
+		return -EINVAL;
+
+	phy = mt7996_band_phy(dev, chan->band);
+
+	if (!phy)
+		return -EINVAL;
+
+	mvif = (struct mt7996_vif *)vif->drv_priv;
+	mutex_lock(&phy->dev->mt76.mutex);
+
+	if (test_bit(MT76_STATE_ROC, &phy->mt76->state) ||
+	    test_bit(MT76_SCANNING, &phy->mt76->state)) {
+		ret = -EBUSY;
+		goto error_unlock;
+	}
+
+	if (!ieee80211_vif_is_mld(vif)) {
+		mconf = mconf_dereference_protected(mvif, 0);
+		if (!mconf || mconf->phy != phy) {
+			ret = -EINVAL;
+			goto error_unlock;
+		}
+	} else {
+		unsigned long valid_links = vif->valid_links;
+		unsigned int link_id;
+		bool found = false;
+
+		for_each_set_bit(link_id, &valid_links,
+				 IEEE80211_MLD_MAX_NUM_LINKS) {
+			mconf = mconf_dereference_protected(mvif, link_id);
+			if (mconf && mconf->phy == phy) {
+				found = true;
+				break;
+			}
+		}
+
+		if (!found) {
+			if (vif->type != NL80211_IFTYPE_STATION) {
+				ret = -ENOLINK;
+				goto error_unlock;
+			}
+
+			/* Try to find an empty link, which is later used to scan. */
+			for (link_id = 0;
+			     link_id < IEEE80211_MLD_MAX_NUM_LINKS;
+			     link_id++) {
+				if (!rcu_access_pointer(mvif->link[link_id]))
+					break;
+			}
+
+			if (link_id == IEEE80211_MLD_MAX_NUM_LINKS) {
+				ret = -ENOLINK;
+				goto error_unlock;
+			}
+
+			vif->bss_conf.link_id = link_id;
+			ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+			if (ret)
+				goto error_unlock;
+		}
+
+	}
+	wiphy_info(hw->wiphy, "start roc work on freq=%u\n",
+			chan->center_freq);
+
+	set_bit(MT76_STATE_ROC, &phy->mt76->state);
+	phy->roc_vif = vif;
+	phy->roc_chan = chan;
+	mutex_unlock(&phy->dev->mt76.mutex);
+
+	cfg80211_chandef_create(&chandef, chan, NL80211_CHAN_HT20);
+	mt7996_set_channel(phy, &chandef);
+	ieee80211_ready_on_channel(hw);
+
+	ieee80211_queue_delayed_work(phy->mt76->hw, &phy->roc_complete_work,
+				     msecs_to_jiffies(duration));
+
+	return 0;
+
+error_unlock:
+	mutex_unlock(&phy->dev->mt76.mutex);
+	return ret;
+}
+
+static int
+mt7996_cancel_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
+{
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	int band;
+	struct mt7996_phy *phy;
+
+	for (band = 0; band < NUM_NL80211_BANDS; band++) {
+		if (!hw->wiphy->bands[band])
+			continue;
+
+		phy = mt7996_band_phy(dev, band);
+		if (!phy || !test_bit(MT76_STATE_ROC, &phy->mt76->state))
+			continue;
+
+		cancel_delayed_work_sync(&phy->roc_complete_work);
+		ieee80211_queue_delayed_work(phy->mt76->hw, &phy->roc_complete_work, 0);
+	}
+	return 0;
+}
+
 static int
 mt7996_add_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
 {
@@ -2768,6 +2935,7 @@ mt7996_remove_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *co
 	mt7996_dbg(dev, MT7996_DBG_CHAN, "%s: remove %u\n",
 		   __func__, conf->def.chan->hw_value);
 	cancel_delayed_work_sync(&phy->scan_work);
+	cancel_delayed_work_sync(&phy->roc_complete_work);
 	cancel_delayed_work_sync(&phy->mt76->mac_work);
 
 	mutex_lock(&phy->dev->mt76.mutex);
@@ -2857,6 +3025,7 @@ mt7996_unassign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	mt7996_dbg(dev, MT7996_DBG_CHAN, "%s, remove link %u from %d MHz\n",
 		   __func__, link_conf->link_id, conf->def.chan->center_freq);
 	cancel_delayed_work_sync(&phy->scan_work);
+	cancel_delayed_work_sync(&phy->roc_complete_work);
 
 	mutex_lock(&phy->dev->mt76.mutex);
 
@@ -3130,6 +3299,8 @@ const struct ieee80211_ops mt7996_ops = {
 	.wake_tx_queue = mt76_wake_tx_queue,
 	.hw_scan = mt7996_hw_scan,
 	.cancel_hw_scan = mt7996_cancel_hw_scan,
+	.remain_on_channel = mt7996_remain_on_channel,
+	.cancel_remain_on_channel = mt7996_cancel_remain_on_channel,
 	.release_buffered_frames = mt76_release_buffered_frames,
 	.get_txpower = mt7996_get_txpower,
 	.channel_switch_beacon = mt7996_channel_switch_beacon,
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index a33ec041..80ca7fd8 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -614,6 +614,10 @@ struct mt7996_phy {
 	struct mt7996_scs_ctrl scs_ctrl;
 	u32 red_drop;
 
+	struct delayed_work roc_complete_work;
+	struct ieee80211_vif *roc_vif;
+	struct ieee80211_channel *roc_chan;
+
 	bool sku_limit_en;
 	bool sku_path_en;
 
@@ -1252,6 +1256,7 @@ bool mt7996_rx_check(struct mt76_dev *mdev, void *data, int len);
 void mt7996_stats_work(struct work_struct *work);
 void mt7996_scan_work(struct work_struct *work);
 void mt7996_scan_complete(struct mt7996_phy *phy, bool aborted);
+void mt7996_roc_complete_work(struct work_struct *work);
 void mt7996_beacon_mon_work(struct work_struct *work);
 int mt76_dfs_start_rdd(struct mt7996_dev *dev, bool force);
 int mt7996_dfs_init_radar_detector(struct mt7996_phy *phy);
-- 
2.45.2

