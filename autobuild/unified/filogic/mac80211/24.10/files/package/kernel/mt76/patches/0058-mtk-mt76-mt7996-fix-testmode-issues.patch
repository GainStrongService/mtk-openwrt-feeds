From 120d40c199e454cdfcc1b766d1757aa659f8699a Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 21 Jan 2025 15:50:14 +0800
Subject: [PATCH 58/95] mtk: mt76: mt7996: fix testmode issues

Fix some testmode issues
1. Refactor code
2. Reset mt76_testmode_data when entering off state
Without this fix, ibf cal will fail to TX for second round.
bf_en is not cleared during deleting interface, so that the
mon. interface setup will use the wrong mac addr.
3. Fix ibf e2p_update bug
When 2G ibf is not calibrated (phase->status == 0), the offset
should start from 5G's first offset instead of TXBF_PHASE_EEPROM_START_OFFSET.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>

mtk: mt76: mt7996: add the missing testmode compilation flag

Add the missing testmode compilation flag to prevent build error when
CONFIG_NL80211_TESTMODE is not defined.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mt76.h               |   9 ++++
 mt7996/main.c        |   8 +++-
 mt7996/mcu.c         |  11 +++--
 mt7996/mtk_debugfs.c |   2 +-
 mt7996/testmode.c    | 105 ++++++++++++++++++++++++++++---------------
 5 files changed, 90 insertions(+), 45 deletions(-)

diff --git a/mt76.h b/mt76.h
index e4bae2a9..e2b916f4 100644
--- a/mt76.h
+++ b/mt76.h
@@ -1695,6 +1695,15 @@ static inline bool mt76_testmode_enabled(struct mt76_phy *phy)
 #endif
 }
 
+static inline bool mt76_testmode_bf_enabled(struct mt76_phy *phy)
+{
+#ifdef CONFIG_NL80211_TESTMODE
+	return phy->test.bf_en;
+#else
+	return false;
+#endif
+}
+
 static inline bool mt76_is_testmode_skb(struct mt76_dev *dev,
 					struct sk_buff *skb,
 					struct ieee80211_hw **hw)
diff --git a/mt7996/main.c b/mt7996/main.c
index 388a908e..2a5bf30d 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -12,6 +12,7 @@
 
 static void mt7996_testmode_disable_all(struct mt7996_dev *dev)
 {
+#ifdef CONFIG_NL80211_TESTMODE
 	struct mt7996_phy *phy;
 	int i;
 
@@ -20,6 +21,7 @@ static void mt7996_testmode_disable_all(struct mt7996_dev *dev)
 		if (phy)
 			mt76_testmode_set_state(phy->mt76, MT76_TM_STATE_OFF);
 	}
+#endif
 }
 
 int mt7996_run(struct mt7996_phy *phy)
@@ -603,8 +605,10 @@ static void mt7996_remove_interface(struct ieee80211_hw *hw,
 		if (vif == phy->mt76->monitor_vif) {
 			phy->mt76->monitor_vif = NULL;
 
+#ifdef CONFIG_NL80211_TESTMODE
 			if (dev->testmode_enable)
 				kfree(phy->mt76->lists);
+#endif
 		}
 	}
 
@@ -630,7 +634,7 @@ int mt7996_set_channel(struct mt76_phy *mphy)
 	int ret = 0;
 
 	if (mphy->chanctx && mphy->chanctx->state == MT76_CHANCTX_STATE_ADD) {
-		if (!mt76_testmode_enabled(phy->mt76) && !phy->mt76->test.bf_en) {
+		if (!mt76_testmode_enabled(mphy) && !mt76_testmode_bf_enabled(mphy)) {
 			ret = mt7996_mcu_edcca_enable(phy, true);
 			if (ret)
 				goto out;
@@ -658,7 +662,7 @@ int mt7996_set_channel(struct mt76_phy *mphy)
 			goto out;
 	}
 
-	if (mt76_testmode_enabled(phy->mt76) || phy->mt76->test.bf_en) {
+	if (mt76_testmode_enabled(mphy) || mt76_testmode_bf_enabled(mphy)) {
 		mt7996_tm_update_channel(phy);
 		goto out;
 	}
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index b6f6365d..60dc389d 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -1968,12 +1968,11 @@ mt7996_mcu_bss_basic_tlv(struct sk_buff *skb,
 	bss->hw_bss_idx = idx;
 
 	if (vif->type == NL80211_IFTYPE_MONITOR) {
-		struct mt76_testmode_data *td = &phy->test;
-
-		if (!td->bf_en)
-			memcpy(bss->bssid, phy->macaddr, ETH_ALEN);
-		else
-			memcpy(bss->bssid, td->addr[2], ETH_ALEN);
+		memcpy(bss->bssid, phy->macaddr, ETH_ALEN);
+#ifdef CONFIG_NL80211_TESTMODE
+		if (mt76_testmode_bf_enabled(phy))
+			memcpy(bss->bssid, phy->test.addr[2], ETH_ALEN);
+#endif
 		return 0;
 	}
 
diff --git a/mt7996/mtk_debugfs.c b/mt7996/mtk_debugfs.c
index 3b32282b..789c8168 100644
--- a/mt7996/mtk_debugfs.c
+++ b/mt7996/mtk_debugfs.c
@@ -2907,8 +2907,8 @@ static const struct file_operations mt7996_txpower_path_fops = {
 static int mt7996_show_eeprom_mode(struct seq_file *s, void *data)
 {
 	struct mt7996_dev *dev = dev_get_drvdata(s->private);
-	struct mt76_dev *mdev = &dev->mt76;
 #ifdef CONFIG_NL80211_TESTMODE
+	struct mt76_dev *mdev = &dev->mt76;
 	const char *mtd_name = mdev->test_mtd.name;
 	u32 mtd_offset = mdev->test_mtd.offset;
 #else
diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index 81a769cc..906bb02c 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -230,34 +230,42 @@ mt7996_tm_init(struct mt7996_phy *phy, bool en)
 {
 	struct ieee80211_vif *vif = phy->mt76->monitor_vif;
 	struct mt7996_dev *dev = phy->dev;
+	struct mt76_testmode_data *td = &phy->mt76->test;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	u8 rf_test_mode = en ? RF_OPER_RF_TEST : RF_OPER_NORMAL;
+	struct mt7996_vif_link *deflink = &mvif->deflink;
+	u8 rf_test_mode;
 	int state;
 
 	if (!test_bit(MT76_STATE_RUNNING, &phy->mt76->state))
 		return;
 
+	if (en) {
+		rf_test_mode = RF_OPER_RF_TEST;
+		state = CONN_STATE_PORT_SECURE;
+		/* use firmware counter for RX stats */
+		td->flag |= MT_TM_FW_RX_COUNT;
+		INIT_DELAYED_WORK(&phy->ipi_work, mt7996_tm_ipi_work);
+	} else {
+		rf_test_mode = RF_OPER_NORMAL;
+		state = CONN_STATE_DISCONNECT;
+		memset(td, 0, sizeof(*td));
+		kfree(phy->mt76->lists);
+		phy->mt76->lists = NULL;
+	}
+
 	mt7996_mcu_set_tx_power_ctrl(phy, POWER_CTRL(ATE_MODE), en);
 	mt7996_mcu_set_tx_power_ctrl(phy, POWER_CTRL(SKU_POWER_LIMIT), !en);
 	mt7996_mcu_set_tx_power_ctrl(phy, POWER_CTRL(BACKOFF_POWER_LIMIT), !en);
 
 	mt7996_tm_rf_switch_mode(dev, rf_test_mode);
 
-	mt7996_mcu_add_bss_info(phy, vif, &vif->bss_conf, &mvif->deflink,
-				&mvif->sta.deflink, en);
-	state = en ? CONN_STATE_PORT_SECURE : CONN_STATE_DISCONNECT;
-	mt7996_mcu_add_sta(dev, vif, &vif->bss_conf, &mvif->deflink,
-			   NULL, &mvif->sta.deflink, state, false);
-
-	mt7996_tm_set(dev, SET_ID(BAND_IDX), phy->mt76->band_idx);
-
-	/* use firmware counter for RX stats */
-	phy->mt76->test.flag |= MT_TM_FW_RX_COUNT;
+	mt7996_mcu_add_bss_info(phy, vif, &vif->bss_conf,
+				&deflink->mt76, &deflink->msta_link, en);
+	mt7996_mcu_add_sta(dev, vif, &vif->bss_conf, NULL, deflink,
+			   &deflink->msta_link, state, false);
 
 	if (en)
-		INIT_DELAYED_WORK(&phy->ipi_work, mt7996_tm_ipi_work);
-	else
-		kfree(phy->mt76->lists);
+		mt7996_tm_set(dev, SET_ID(BAND_IDX), phy->mt76->band_idx);
 }
 
 void
@@ -1161,18 +1169,14 @@ mt7996_tm_txbf_init(struct mt7996_phy *phy, u16 *val)
 #define EBF_BBP_RX_ENABLE	(BIT(0) | BIT(15))
 	struct mt7996_dev *dev = phy->dev;
 	struct mt76_testmode_data *td = &phy->mt76->test;
-	bool enable = val[0];
-	void *phase_cal, *pfmu_data, *pfmu_tag;
-	u8 nss, band_idx = phy->mt76->band_idx;
-	enum nl80211_chan_width width = NL80211_CHAN_WIDTH_20;
-	u8 sub_addr = td->is_txbf_dut ? TXBF_DUT_MAC_SUBADDR : TXBF_GOLDEN_MAC_SUBADDR;
-	u8 peer_addr = td->is_txbf_dut ? TXBF_GOLDEN_MAC_SUBADDR : TXBF_DUT_MAC_SUBADDR;
-	u8 bss_addr = TXBF_DUT_MAC_SUBADDR;
-	u8 addr[ETH_ALEN] = {0x00, sub_addr, sub_addr, sub_addr, sub_addr, sub_addr};
-	u8 bssid[ETH_ALEN] = {0x00, bss_addr, bss_addr, bss_addr, bss_addr, bss_addr};
-	u8 peer_addrs[ETH_ALEN] = {0x00, peer_addr, peer_addr, peer_addr, peer_addr, peer_addr};
 	struct ieee80211_vif *vif = phy->mt76->monitor_vif;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_vif_link *deflink = &mvif->deflink;
+	enum nl80211_chan_width width = NL80211_CHAN_WIDTH_20;
+	void *phase_cal, *pfmu_data, *pfmu_tag;
+	u8 nss, band_idx = phy->mt76->band_idx;
+	u8 addr, peer_addr, bss_addr;
+	bool enable = val[0];
 
 	if (!enable) {
 		td->bf_en = false;
@@ -1212,17 +1216,31 @@ mt7996_tm_txbf_init(struct mt7996_phy *phy, u16 *val)
 
 	td->bf_en = true;
 	dev->ibf = td->ibf;
-	memcpy(td->addr[0], peer_addrs, ETH_ALEN);
-	memcpy(td->addr[1], addr, ETH_ALEN);
-	memcpy(td->addr[2], bssid, ETH_ALEN);
-	memcpy(phy->mt76->monitor_vif->addr, addr, ETH_ALEN);
+
+	/* 00:11:11:11:11:11 for golden/instrument (own mac addr)
+	 * 00:22:22:22:22:22 for DUT (own mac addr)
+	 * 00:22:22:22:22:22 for bssid
+	 */
+	bss_addr = TXBF_DUT_MAC_SUBADDR;
+	if (td->is_txbf_dut) {
+		addr = TXBF_DUT_MAC_SUBADDR;
+		peer_addr = TXBF_GOLDEN_MAC_SUBADDR;
+	} else {
+		addr = TXBF_GOLDEN_MAC_SUBADDR;
+		peer_addr = TXBF_DUT_MAC_SUBADDR;
+	}
+	memset(td->addr, 0, sizeof(td->addr));
+	memset(td->addr[0] + 1, peer_addr, ETH_ALEN - 1);
+	memset(td->addr[1] + 1, addr, ETH_ALEN - 1);
+	memset(td->addr[2] + 1, bss_addr, ETH_ALEN - 1);
+	memcpy(vif->addr, td->addr[1], ETH_ALEN);
 	mt7996_tm_set_mac_addr(dev, td->addr[0], SET_ID(DA));
 	mt7996_tm_set_mac_addr(dev, td->addr[1], SET_ID(SA));
 	mt7996_tm_set_mac_addr(dev, td->addr[2], SET_ID(BSSID));
 
 	mt7996_mcu_add_dev_info(phy, phy->mt76->monitor_vif, &phy->mt76->monitor_vif->bss_conf, &mvif->deflink.mt76, true);
-	mt7996_mcu_add_bss_info(phy, vif, &vif->bss_conf, &mvif->deflink,
-				&mvif->sta.deflink, true);
+	mt7996_mcu_add_bss_info(phy, vif, &vif->bss_conf, &deflink->mt76,
+				&deflink->msta_link, true);
 
 	if (td->ibf) {
 		if (td->is_txbf_dut) {
@@ -1336,6 +1354,9 @@ mt7996_tm_txbf_phase_comp(struct mt7996_phy *phy, u16 *val)
 	struct mt7996_txbf_phase *phase = (struct mt7996_txbf_phase *)dev->test.txbf_phase_cal;
 	int group = val[2];
 
+	if (!phase)
+		return -EINVAL;
+
 	wait_event_timeout(dev->mt76.tx_wait, phase[group].status != 0, HZ);
 	mt7996_tm_txbf_phase_copy(dev, req.phase_comp.buf, phase[group].buf, group);
 
@@ -1464,6 +1485,9 @@ mt7996_tm_txbf_profile_update(struct mt7996_phy *phy, u16 *val, bool ebf)
 	int ret;
 	bool is_atenl = val[5];
 
+	if (!tag)
+		return -EINVAL;
+
 	if (td->tx_antenna_mask == 3)
 		nr = 1;
 	else if (td->tx_antenna_mask == 7)
@@ -1549,6 +1573,9 @@ mt7996_tm_txbf_phase_cal(struct mt7996_phy *phy, u16 *val)
 	};
 	struct mt7996_txbf_phase *phase = (struct mt7996_txbf_phase *)dev->test.txbf_phase_cal;
 
+	if (!phase)
+		return -EINVAL;
+
 	/* reset phase status before update phase cal data */
 	phase[req.phase_cal.group].status = 0;
 
@@ -1572,7 +1599,8 @@ mt7996_tm_txbf_profile_update_all(struct mt7996_phy *phy, u16 *val)
 	s16 *pfmu_data;
 	int offs = subc_id * sizeof(struct mt7996_pfmu_data) / sizeof(*pfmu_data);
 
-	if (subc_id > MT7996_TXBF_SUBCAR_NUM - 1)
+	if (!dev->test.txbf_pfmu_data ||
+	    subc_id > MT7996_TXBF_SUBCAR_NUM - 1)
 		return -EINVAL;
 
 	if (nss == 2) {
@@ -1647,14 +1675,16 @@ mt7996_tm_txbf_e2p_update(struct mt7996_phy *phy)
 
 	offset = TXBF_PHASE_EEPROM_START_OFFSET;
 	phase = (struct mt7996_txbf_phase *)dev->test.txbf_phase_cal;
+	if (!phase)
+		return -EINVAL;
+
 	for (i = 0; i < MAX_PHASE_GROUP_NUM; i++) {
 		p = &phase[i];
 
-		if (!p->status)
-			continue;
+		/* copy valid phase cal data to eeprom */
+		if (p->status)
+			mt7996_tm_txbf_phase_copy(dev, eeprom + offset, p->buf, i);
 
-		/* copy phase cal data to eeprom */
-		mt7996_tm_txbf_phase_copy(dev, eeprom + offset, p->buf, i);
 		if (get_ibf_version(dev) == IBF_VER_1)
 			offset += TXBF_PHASE_GROUP_EEPROM_OFFSET_VER_1;
 		else
@@ -1692,6 +1722,9 @@ mt7996_tm_txbf_set_tx(struct mt7996_phy *phy, u16 *val)
 	struct mt7996_pfmu_tag *tag = dev->test.txbf_pfmu_tag;
 	struct mt76_testmode_data *td = &phy->mt76->test;
 
+	if (!tag)
+		return -EINVAL;
+
 	if (bf_on) {
 		mt7996_tm_set_rx_frames(phy, false);
 		mt7996_tm_set_tx_frames(phy, false);
@@ -1830,7 +1863,7 @@ mt7996_tm_set_txbf(struct mt7996_phy *phy)
 		if (!tag) {
 			dev_err(dev->mt76.dev,
 				"pfmu tag is not initialized!\n");
-			return 0;
+			return -EINVAL;
 		}
 
 		if (td->txbf_act == MT76_TM_TXBF_ACT_PROFILE_TAG_WRITE)
-- 
2.45.2

