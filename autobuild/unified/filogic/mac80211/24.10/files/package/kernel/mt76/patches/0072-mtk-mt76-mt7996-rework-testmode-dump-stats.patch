From 47ed35ae21a8f3bfd5bd7fdc18bb5be374265a63 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Thu, 13 Mar 2025 09:29:02 +0800
Subject: [PATCH 72/95] mtk: mt76: mt7996: rework testmode dump stats

Rework testmode dump stats for dump order
Originally, the dump order is determined by the order of MT76 testmode
attribute enums, and the order of the attribute enum cannot be exchanged.
If a new attribute which is related to the previous attribute, the dump
info of these two attributes will be separated.
Therefore, use nla_for_each_nested instead of for loop to dump info, so
that the dump order will be determined by the order of nla_put
in driver.

Additionally, adjust the dump stats flow to adjust the order of dump
info.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mt76.h            | 10 ++++++
 mt7996/mt7996.h   | 14 --------
 mt7996/testmode.c | 83 ++++++++++++-----------------------------------
 testmode.c        | 65 ++++++++++++++++++++++++++++++++++++-
 tools/fields.c    | 19 ++++++-----
 5 files changed, 105 insertions(+), 86 deletions(-)

diff --git a/mt76.h b/mt76.h
index 8451eca2..c9dad30e 100644
--- a/mt76.h
+++ b/mt76.h
@@ -902,6 +902,16 @@ struct mt76_testmode_data {
 	} rx_stats[__MT_RXQ_MAX];
 	u8 flag;
 
+	struct {
+		s32 freq_offset;
+		u8 path;
+		u8 *rcpi;
+		s8 *rssi;
+		s8 *ib_rssi;
+		s8 *wb_rssi;
+		u8 snr;
+	} last_rx;
+
 	struct {
 		u8 type;
 		u8 enable;
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index ae92e601..c6cadda2 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -751,20 +751,6 @@ struct mt7996_phy {
 
 	u8 muru_onoff;
 
-#ifdef CONFIG_NL80211_TESTMODE
-	struct {
-		u32 *reg_backup;
-
-		s32 last_freq_offset;
-		u8 last_rcpi[5];
-		s8 last_rssi[5];
-		s8 last_ib_rssi[5];
-		s8 last_wb_rssi[5];
-		u8 last_snr;
-
-		u8 spe_idx;
-	} test;
-#endif
 #ifdef CONFIG_MTK_VENDOR
 	u8 rts_bw_sig;
 	spinlock_t amnt_lock;
diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index 6873711b..ee64b4bc 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -2190,13 +2190,13 @@ mt7996_tm_get_rx_stats(struct mt7996_phy *phy)
 	rx_stats = (struct mt7996_tm_rx_event *)skb->data;
 	rx_stats_all = &rx_stats->rx_stat_all;
 
-	phy->test.last_freq_offset = le32_to_cpu(rx_stats_all->user_info[0].freq_offset);
-	phy->test.last_snr = le32_to_cpu(rx_stats_all->user_info[0].snr);
-	for (i = 0; i < ARRAY_SIZE(phy->test.last_rcpi); i++) {
-		phy->test.last_rcpi[i] = le16_to_cpu(rx_stats_all->rxv_info[i].rcpi);
-		phy->test.last_rssi[i] = le16_to_cpu(rx_stats_all->rxv_info[i].rssi);
-		phy->test.last_ib_rssi[i] = rx_stats_all->fagc[i].ib_rssi;
-		phy->test.last_wb_rssi[i] = rx_stats_all->fagc[i].wb_rssi;
+	td->last_rx.freq_offset = le32_to_cpu(rx_stats_all->user_info[0].freq_offset);
+	td->last_rx.snr = le32_to_cpu(rx_stats_all->user_info[0].snr);
+	for (i = 0; i < td->last_rx.path; i++) {
+		td->last_rx.rcpi[i] = le16_to_cpu(rx_stats_all->rxv_info[i].rcpi);
+		td->last_rx.rssi[i] = le16_to_cpu(rx_stats_all->rxv_info[i].rssi);
+		td->last_rx.ib_rssi[i] = rx_stats_all->fagc[i].ib_rssi;
+		td->last_rx.wb_rssi[i] = rx_stats_all->fagc[i].wb_rssi;
 	}
 
 	if (phy->mt76->band_idx == MT_BAND2)
@@ -2251,66 +2251,25 @@ mt7996_tm_get_tx_stats(struct mt7996_phy *phy)
 static int
 mt7996_tm_dump_stats(struct mt76_phy *mphy, struct sk_buff *msg)
 {
+	struct mt76_testmode_data *td = &mphy->test;
 	struct mt7996_phy *phy = mphy->priv;
-	void *rx, *rssi;
-	int i;
+	struct mt7996_dev *dev = phy->dev;
+	int band_idx = mphy->band_idx;
 
-	mt7996_tm_set(phy->dev, SET_ID(BAND_IDX), mphy->band_idx);
+	if (!td->last_rx.path) {
+		td->last_rx.path = hweight32(mphy->chainmask >> dev->chainshift[band_idx]);
+		if (phy->has_aux_rx)
+			td->last_rx.path++;
+		td->last_rx.rcpi = devm_kzalloc(dev->mt76.dev, td->last_rx.path, GFP_KERNEL);
+		td->last_rx.rssi = devm_kzalloc(dev->mt76.dev, td->last_rx.path, GFP_KERNEL);
+		td->last_rx.ib_rssi = devm_kzalloc(dev->mt76.dev, td->last_rx.path, GFP_KERNEL);
+		td->last_rx.wb_rssi = devm_kzalloc(dev->mt76.dev, td->last_rx.path, GFP_KERNEL);
+	}
+
+	mt7996_tm_set(dev, SET_ID(BAND_IDX), band_idx);
 	mt7996_tm_get_rx_stats(phy);
 	mt7996_tm_get_tx_stats(phy);
 
-	rx = nla_nest_start(msg, MT76_TM_STATS_ATTR_LAST_RX);
-	if (!rx)
-		return -ENOMEM;
-
-	if (nla_put_s32(msg, MT76_TM_RX_ATTR_FREQ_OFFSET, phy->test.last_freq_offset))
-		return -ENOMEM;
-
-	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_RCPI);
-	if (!rssi)
-		return -ENOMEM;
-
-	for (i = 0; i < ARRAY_SIZE(phy->test.last_rcpi); i++)
-		if (nla_put_u8(msg, i, phy->test.last_rcpi[i]))
-			return -ENOMEM;
-
-	nla_nest_end(msg, rssi);
-
-	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_RSSI);
-	if (!rssi)
-		return -ENOMEM;
-
-	for (i = 0; i < ARRAY_SIZE(phy->test.last_rssi); i++)
-		if (nla_put_s8(msg, i, phy->test.last_rssi[i]))
-			return -ENOMEM;
-
-	nla_nest_end(msg, rssi);
-
-	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_IB_RSSI);
-	if (!rssi)
-		return -ENOMEM;
-
-	for (i = 0; i < ARRAY_SIZE(phy->test.last_ib_rssi); i++)
-		if (nla_put_s8(msg, i, phy->test.last_ib_rssi[i]))
-			return -ENOMEM;
-
-	nla_nest_end(msg, rssi);
-
-	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_WB_RSSI);
-	if (!rssi)
-		return -ENOMEM;
-
-	for (i = 0; i < ARRAY_SIZE(phy->test.last_wb_rssi); i++)
-		if (nla_put_s8(msg, i, phy->test.last_wb_rssi[i]))
-			return -ENOMEM;
-
-	nla_nest_end(msg, rssi);
-
-	if (nla_put_u8(msg, MT76_TM_RX_ATTR_SNR, phy->test.last_snr))
-		return -ENOMEM;
-
-	nla_nest_end(msg, rx);
-
 	return 0;
 }
 
diff --git a/testmode.c b/testmode.c
index 4c4504f4..f2b0bf2b 100644
--- a/testmode.c
+++ b/testmode.c
@@ -1008,6 +1008,68 @@ out:
 }
 EXPORT_SYMBOL(mt76_testmode_cmd);
 
+static int
+mt76_testmode_dump_last_rx_stats(struct mt76_phy *phy, struct sk_buff *msg)
+{
+	struct mt76_testmode_data *td = &phy->test;
+	void *rx, *rssi;
+	int i;
+
+	rx = nla_nest_start(msg, MT76_TM_STATS_ATTR_LAST_RX);
+	if (!rx)
+		return -ENOMEM;
+
+	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_RSSI);
+	if (!rssi)
+		return -ENOMEM;
+
+	for (i = 0; i < td->last_rx.path; i++)
+		if (nla_put_s8(msg, i, td->last_rx.rssi[i]))
+			return -ENOMEM;
+
+	nla_nest_end(msg, rssi);
+
+	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_RCPI);
+	if (!rssi)
+		return -ENOMEM;
+
+	for (i = 0; i < td->last_rx.path; i++)
+		if (nla_put_u8(msg, i, td->last_rx.rcpi[i]))
+			return -ENOMEM;
+
+	nla_nest_end(msg, rssi);
+
+	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_IB_RSSI);
+	if (!rssi)
+		return -ENOMEM;
+
+	for (i = 0; i < td->last_rx.path; i++)
+		if (nla_put_s8(msg, i, td->last_rx.ib_rssi[i]))
+			return -ENOMEM;
+
+	nla_nest_end(msg, rssi);
+
+	rssi = nla_nest_start(msg, MT76_TM_RX_ATTR_WB_RSSI);
+	if (!rssi)
+		return -ENOMEM;
+
+	for (i = 0; i < td->last_rx.path; i++)
+		if (nla_put_s8(msg, i, td->last_rx.wb_rssi[i]))
+			return -ENOMEM;
+
+	nla_nest_end(msg, rssi);
+
+	if (nla_put_s32(msg, MT76_TM_RX_ATTR_FREQ_OFFSET, td->last_rx.freq_offset))
+		return -ENOMEM;
+
+	if (nla_put_u8(msg, MT76_TM_RX_ATTR_SNR, td->last_rx.snr))
+		return -ENOMEM;
+
+	nla_nest_end(msg, rx);
+
+	return 0;
+}
+
 static int
 mt76_testmode_dump_stats(struct mt76_phy *phy, struct sk_buff *msg)
 {
@@ -1047,7 +1109,7 @@ mt76_testmode_dump_stats(struct mt76_phy *phy, struct sk_buff *msg)
 			      MT76_TM_STATS_ATTR_PAD))
 		return -EMSGSIZE;
 
-	return 0;
+	return mt76_testmode_dump_last_rx_stats(phy, msg);
 }
 
 int mt76_testmode_dump(struct ieee80211_hw *hw, struct sk_buff *msg,
@@ -1101,6 +1163,7 @@ int mt76_testmode_dump(struct ieee80211_hw *hw, struct sk_buff *msg,
 		goto out;
 	}
 
+	/* the dump order follows the order of nla_put for each attribute */
 	if (tb[MT76_TM_ATTR_STATS]) {
 		err = -EINVAL;
 
diff --git a/tools/fields.c b/tools/fields.c
index 3deac4a5..e44be0e0 100644
--- a/tools/fields.c
+++ b/tools/fields.c
@@ -240,17 +240,14 @@ static void print_array(const struct tm_field *field, struct nlattr *attr)
 
 static void print_nested(const struct tm_field *field, struct nlattr *attr)
 {
-	struct nlattr **tb = alloca(field->len * sizeof(struct nlattr *));
 	const struct tm_field *fields = field->fields;
-	int i;
+	struct nlattr *cur;
+	int i, rem;
 
-	nla_parse_nested(tb, field->len - 1, attr, field->policy);
-	for (i = 0; i < field->len; i++) {
+	nla_for_each_nested(cur, attr, rem) {
 		int prefix_len = 0;
 
-		if (!tb[i])
-			continue;
-
+		i = nla_type(cur);
 		if (!fields[i].print)
 			continue;
 
@@ -263,7 +260,7 @@ static void print_nested(const struct tm_field *field, struct nlattr *attr)
 				sizeof(prefix) - prefix_len - 1);
 		}
 
-		fields[i].print(&fields[i], tb[i]);
+		fields[i].print(&fields[i], cur);
 		if (fields[i].prefix)
 			prefix[prefix_len] = 0;
 
@@ -271,8 +268,12 @@ static void print_nested(const struct tm_field *field, struct nlattr *attr)
 			printf("\n");
 	}
 
-	if (field->print_extra)
+	if (field->print_extra) {
+		struct nlattr **tb = alloca(field->len * sizeof(struct nlattr *));
+
+		nla_parse_nested(tb, field->len - 1, attr, field->policy);
 		field->print_extra(field, tb);
+	}
 }
 
 static void print_extra_stats(const struct tm_field *field, struct nlattr **tb)
-- 
2.45.2

