From 63d5e4bba10facbb50fb957dc3d5c2df5481151a Mon Sep 17 00:00:00 2001
From: Shayne Chen <shayne.chen@mediatek.com>
Date: Wed, 13 Dec 2023 16:58:31 +0800
Subject: [PATCH 086/146] mtk: mt76: mt7996: rework scanning parts for MLD STA
 support

During the first scanning, the STA VIF is still a legacy interface,
and at the moment it doesn't know if it's MLD or not. So do dome tricks
here to let the legacy interface be abled to scan all bands.
This is a preliminary patch to add MLO support for mt7996 chipsets.

mtk: mt76: remove the limitation for legacy AP sacn

The limitation was used to prevent resource conflict in multiple wiphys
architecture. It becomes single wiphy and the limitation seems to be
useless.

Furthermore, legacy APs need to scan due to features like ACS, so remove
the limitations

Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>
---
 mt7996/mac.c  | 43 +++++++++++++++++++++++--------------------
 mt7996/main.c | 35 ++++++++++++++++++++++++++++++++++-
 2 files changed, 57 insertions(+), 21 deletions(-)

diff --git a/mt7996/mac.c b/mt7996/mac.c
index 00a1a27a..a1034214 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -2789,23 +2789,40 @@ static void
 mt7996_scan_send_probe(struct mt7996_phy *phy, struct cfg80211_ssid *ssid,
 		       const u8 *dst)
 {
-	struct ieee80211_hw *hw = phy->mt76->hw;
 	struct cfg80211_scan_request *req = phy->scan_req;
 	struct ieee80211_vif *vif = phy->scan_vif;
+	struct ieee80211_bss_conf *conf;
 	struct mt7996_vif *mvif;
 	struct mt7996_link_sta *mlink;
 	struct ieee80211_tx_info *info;
+	struct ieee80211_hw *hw;
 	struct sk_buff *skb;
+	unsigned long valid_links;
+	unsigned int link_id;
 
 	if (!req || !vif)
 		return;
 
+	valid_links = vif->valid_links ?: BIT(0);
 	mvif = (struct mt7996_vif *)vif->drv_priv;
+	hw = phy->mt76->hw;
+
+	rcu_read_lock();
+
+	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+		conf = rcu_dereference(vif->link_conf[link_id]);
+		mlink = rcu_dereference(mvif->sta.link[link_id]);
+		if (mlink->wcid.phy_idx != phy->mt76->band_idx)
+			continue;
+	}
+
+	if (unlikely(!conf))
+		goto unlock;
 
-	skb = ieee80211_probereq_get(hw, vif->addr,
+	skb = ieee80211_probereq_get(hw, conf->addr,
 				     ssid->ssid, ssid->ssid_len, req->ie_len);
 	if (!skb)
-		return;
+		goto unlock;
 
 	if (is_unicast_ether_addr(dst)) {
 		struct ieee80211_hdr_3addr *hdr =
@@ -2823,36 +2840,21 @@ mt7996_scan_send_probe(struct mt7996_phy *phy, struct cfg80211_ssid *ssid,
 
 	skb_set_queue_mapping(skb, IEEE80211_AC_VO);
 
-	rcu_read_lock();
 	if (!ieee80211_tx_prepare_skb(hw, vif, skb,
-				      phy->scan_chan->band,
-				      NULL)) {
+				      phy->scan_chan->band, NULL)) {
 		rcu_read_unlock();
 		ieee80211_free_txskb(hw, skb);
 		return;
 	}
 
 	local_bh_disable();
-	mlink = rcu_dereference(mvif->sta.link[0]);
 	mt76_tx(phy->mt76, NULL, &mlink->wcid, skb);
 	local_bh_enable();
 
+unlock:
 	rcu_read_unlock();
 }
 
-void mt7996_scan_complete(struct mt7996_phy *phy, bool aborted)
-{
-	struct cfg80211_scan_info info = {
-		.aborted = aborted,
-	};
-
-	ieee80211_scan_completed(phy->mt76->hw, &info);
-	phy->scan_chan = NULL;
-	phy->scan_req = NULL;
-	phy->scan_vif = NULL;
-	clear_bit(MT76_SCANNING, &phy->mt76->state);
-}
-
 static void mt7996_scan_check_sta(void *data, struct ieee80211_sta *sta)
 {
 	bool *has_sta = data;
@@ -2872,6 +2874,7 @@ void mt7996_scan_work(struct work_struct *work)
 	bool has_sta = false, active_scan = false;
 
 	mutex_lock(&phy->dev->mt76.mutex);
+
 	if (phy->scan_chan_idx >= req->n_channels) {
 		mt7996_scan_complete(phy, false);
 		mutex_unlock(&phy->dev->mt76.mutex);
diff --git a/mt7996/main.c b/mt7996/main.c
index 68408209..b00aefa8 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -2216,12 +2216,28 @@ mt7996_net_fill_forward_path(struct ieee80211_hw *hw,
 
 #endif
 
+void mt7996_scan_complete(struct mt7996_phy *phy, bool aborted)
+{
+	struct mt7996_vif *mvif = (struct mt7996_vif *)phy->scan_vif->drv_priv;
+	struct cfg80211_scan_info info = {
+		.aborted = aborted,
+	};
+
+	ieee80211_scan_completed(phy->mt76->hw, &info);
+	phy->scan_chan = NULL;
+	phy->scan_req = NULL;
+	phy->scan_vif = NULL;
+	clear_bit(MT76_SCANNING, &phy->mt76->state);
+}
+
 static int
 mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	       struct ieee80211_scan_request *hw_req)
 {
 	struct cfg80211_scan_request *req = &hw_req->req;
 	struct mt7996_phy *phy = mt7996_band_phy(hw, req->channels[0]->band);
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	int ret;
 
 	mutex_lock(&phy->dev->mt76.mutex);
 	if (WARN_ON(phy->scan_req || phy->scan_chan)) {
@@ -2229,10 +2245,23 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		return -EBUSY;
 	}
 
-	set_bit(MT76_SCANNING, &phy->mt76->state);
 	phy->scan_req = req;
 	phy->scan_vif = vif;
 	phy->scan_chan_idx = 0;
+
+	if (vif->type == NL80211_IFTYPE_STATION && !ieee80211_vif_is_mld(vif) &&
+	    (phy->mt76 != mvif->deflink.phy->mt76)) {
+		phy->mt76->main_phy = hw->priv;
+		mt7996_remove_bss_conf(vif, &vif->bss_conf, &mvif->deflink);
+
+		ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+		if (ret) {
+			mutex_unlock(&phy->dev->mt76.mutex);
+			return ret;
+		}
+	}
+
+	set_bit(MT76_SCANNING, &phy->mt76->state);
 	mutex_unlock(&phy->dev->mt76.mutex);
 
 	ieee80211_queue_delayed_work(hw, &phy->scan_work, 0);
@@ -2243,6 +2272,7 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 static void
 mt7996_cancel_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
 {
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	int band;
 
 	for (band = 0; band < NUM_NL80211_BANDS; band++) {
@@ -2259,6 +2289,9 @@ mt7996_cancel_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
 
 		mutex_lock(&phy->dev->mt76.mutex);
 		mt7996_scan_complete(phy, true);
+		if (vif->type == NL80211_IFTYPE_STATION && !ieee80211_vif_is_mld(vif) &&
+		    (phy->mt76 != mvif->deflink.phy->mt76))
+			phy->mt76->main_phy = NULL;
 		mutex_unlock(&phy->dev->mt76.mutex);
 	}
 }
-- 
2.45.2

