From e0baf9072760e0b83a2b5c17737006c8188df636 Mon Sep 17 00:00:00 2001
From: Rex Lu <rex.lu@mediatek.com>
Date: Fri, 13 Sep 2024 10:22:52 +0800
Subject: [PATCH 207/277] mtk: mt76: mt7996: Fix add ba issue on tid not equal
 to zero

Fix add ba issue
when we received first free done event, we start addba and failed.
Driver will not retry to add ba again because of the traffic are all go through hwpath and will make very low throughput.
So change the hw path binding criteria, only add ba successful traffic can go through hw path.

Signed-off-by: Rex Lu <rex.lu@mediatek.com>
---
 mt76.h        |  6 ++++++
 mt7996/main.c | 11 +++++++++--
 2 files changed, 15 insertions(+), 2 deletions(-)

diff --git a/mt76.h b/mt76.h
index 6eb72364..f2e8cbfd 100644
--- a/mt76.h
+++ b/mt76.h
@@ -74,6 +74,8 @@
 #define MT_WED_RRO_Q_MSDU_PG(_n)	__MT_WED_RRO_Q(MT76_WED_RRO_Q_MSDU_PG, _n)
 #define MT_WED_RRO_Q_IND	__MT_WED_RRO_Q(MT76_WED_RRO_Q_IND, 0)
 
+#define AMPDU_ADDBA_SUCC_SHFT IEEE80211_NUM_TIDS
+
 struct mt76_dev;
 struct mt76_phy;
 struct mt76_wcid;
@@ -413,6 +415,10 @@ struct mt76_wcid {
 
 	struct rate_info rate;
 	struct rate_info rx_rate;
+	/*
+	 *Bit 0 - 15: ADDBA of TID n started
+	 *Bit 16 - 31: ADDBA of TID n succeeded
+	 */
 	unsigned long ampdu_state;
 
 	u16 idx;
diff --git a/mt7996/main.c b/mt7996/main.c
index ec9786b2..84b8479f 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -1618,12 +1618,14 @@ mt7996_ampdu_action(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	case IEEE80211_AMPDU_TX_OPERATIONAL:
 		mtxq->aggr = true;
 		mtxq->send_bar = false;
+		set_bit((tid + AMPDU_ADDBA_SUCC_SHFT), &mlink->wcid.ampdu_state);
 		ret = mt7996_mcu_add_tx_ba(dev, params, true);
 		break;
 	case IEEE80211_AMPDU_TX_STOP_FLUSH:
 	case IEEE80211_AMPDU_TX_STOP_FLUSH_CONT:
 		mtxq->aggr = false;
 		clear_bit(tid, &mlink->wcid.ampdu_state);
+		clear_bit((tid + AMPDU_ADDBA_SUCC_SHFT), &mlink->wcid.ampdu_state);
 		ret = mt7996_mcu_add_tx_ba(dev, params, false);
 		break;
 	case IEEE80211_AMPDU_TX_START:
@@ -1633,6 +1635,7 @@ mt7996_ampdu_action(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	case IEEE80211_AMPDU_TX_STOP_CONT:
 		mtxq->aggr = false;
 		clear_bit(tid, &mlink->wcid.ampdu_state);
+		clear_bit((tid + AMPDU_ADDBA_SUCC_SHFT), &mlink->wcid.ampdu_state);
 		ret = mt7996_mcu_add_tx_ba(dev, params, false);
 		ieee80211_stop_tx_ba_cb_irqsafe(vif, sta->addr, tid);
 		break;
@@ -2489,7 +2492,7 @@ mt7996_net_fill_forward_path(struct ieee80211_hw *hw,
 	struct mtk_wed_device *wed = &dev->mt76.mmio.wed;
 	struct mt7996_bss_conf *mconf;
 	struct mt7996_link_sta *mlink;
-	u8 link_id;
+	u8 link_id, dscp = path->mtk_wdma.tid >> 2;
 
 	if (dev->hif2) {
 		switch (dev->option_type) {
@@ -2516,6 +2519,10 @@ mt7996_net_fill_forward_path(struct ieee80211_hw *hw,
 	if (mlink->wcid.idx > MT7996_WTBL_STA)
 		return -EIO;
 
+	if (!test_bit((mvif->qos_map[dscp] + AMPDU_ADDBA_SUCC_SHFT),
+	    &mlink->wcid.ampdu_state))
+		return -EAGAIN;
+
 	path->type = DEV_PATH_MTK_WDMA;
 	path->dev = ctx->dev;
 	path->mtk_wdma.wdma_idx = wed->wdma_idx;
@@ -2532,7 +2539,7 @@ mt7996_net_fill_forward_path(struct ieee80211_hw *hw,
 	ctx->dev = NULL;
 
 	if (path->mtk_wdma.amsdu)
-		path->mtk_wdma.tid = mvif->qos_map[path->mtk_wdma.tid >> 2];
+		path->mtk_wdma.tid = mvif->qos_map[dscp];
 
 	return 0;
 }
-- 
2.45.2

