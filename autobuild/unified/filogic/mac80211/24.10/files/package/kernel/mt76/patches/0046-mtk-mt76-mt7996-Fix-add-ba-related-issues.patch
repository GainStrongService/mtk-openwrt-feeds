From ff17592c54d0d61220fee9d2cadcad408c1528c8 Mon Sep 17 00:00:00 2001
From: Rex Lu <rex.lu@mediatek.com>
Date: Fri, 13 Sep 2024 10:22:52 +0800
Subject: [PATCH 46/75] mtk: mt76: mt7996: Fix add ba related issues

mtk: mt76: mt7996: Fix add ba issue on tid not equal to zero

Fix add ba issue
when we received first free done event, we start addba and failed.
Driver will not retry to add ba again because of the traffic are all go through hwpath and will make very low throughput.
So change the hw path binding criteria, only add ba successful traffic can go through hw path.

mtk: mt76: mt7996: check addba api return value

Clear amptu_stat bit if ieee80211_start_tx_ba_session return fail.
Without this patch, driver does not know ba is not established and would
not send addba anymore.

mtk: mt76: mt7996: refactor check for TX BA sesstion status

Now mt76 checks TX BA session status under following cases
1. receive TxS with no fixed rated
2. receive TxFree from QoS data

The status check includes
1. if the TX BA session has existed, refresh the timer
2. if the TX BA session does not exist, try to create the TX BA session
   and record the current time
3. do not retry the TX BA session request within ADDBA_RETRY_PERIOD
   seconds

Signed-off-by: Rex Lu <rex.lu@mediatek.com>
Signed-off-by: Peter Chiu <chui-hao.chiu@mediatek.com>
Signed-off-by: Michael-CY Lee <michael-cy.lee@mediatek.com>
---
 mt76.h          |  6 ++++++
 mt7996/mac.c    | 51 +++++++++++++++++++++++++++++++++----------------
 mt7996/main.c   |  7 +++++--
 mt7996/mt7996.h |  3 +++
 4 files changed, 49 insertions(+), 18 deletions(-)

diff --git a/mt76.h b/mt76.h
index 72ab2eb2..c85651ec 100644
--- a/mt76.h
+++ b/mt76.h
@@ -74,6 +74,8 @@
 #define MT_WED_RRO_Q_MSDU_PG(_n)	__MT_WED_RRO_Q(MT76_WED_RRO_Q_MSDU_PG, _n)
 #define MT_WED_RRO_Q_IND	__MT_WED_RRO_Q(MT76_WED_RRO_Q_IND, 0)
 
+#define AMPDU_ADDBA_SUCC_SHFT IEEE80211_NUM_TIDS
+
 struct mt76_dev;
 struct mt76_phy;
 struct mt76_wcid;
@@ -413,6 +415,10 @@ struct mt76_wcid {
 
 	struct rate_info rate;
 	struct rate_info rx_rate;
+	/*
+	 *Bit 0 - 15: ADDBA of TID n started
+	 *Bit 16 - 31: ADDBA of TID n succeeded
+	 */
 	unsigned long ampdu_state;
 
 	u16 idx;
diff --git a/mt7996/mac.c b/mt7996/mac.c
index a14470cd..989d857d 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -1112,16 +1112,17 @@ u32 mt7996_wed_init_buf(void *ptr, dma_addr_t phys, int token_id)
 }
 
 static void
-mt7996_tx_check_aggr(struct ieee80211_sta *sta, struct sk_buff *skb,
-		     struct mt76_wcid *wcid)
+mt7996_check_tx_ba_status(struct mt76_wcid *wcid, u8 tid)
 {
+	struct ieee80211_sta *sta;
 	struct mt7996_sta *msta;
-	struct mt7996_link_sta *mlink;
 	struct ieee80211_link_sta *link_sta;
-	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
-	bool is_8023 = info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP;
-	u16 fc, tid;
 
+	if (!wcid)
+		return;
+
+	sta = wcid_to_sta(wcid);
+	msta = (struct mt7996_sta *)sta->drv_priv;
 	link_sta = rcu_dereference(sta->link[wcid->link_id]);
 	if (!link_sta)
 		return;
@@ -1129,6 +1130,28 @@ mt7996_tx_check_aggr(struct ieee80211_sta *sta, struct sk_buff *skb,
 	if (!sta->mlo && !(link_sta->ht_cap.ht_supported || link_sta->he_cap.has_he))
 		return;
 
+	if (test_bit(tid, &wcid->ampdu_state)) {
+		ieee80211_refresh_tx_agg_session_timer(sta, tid);
+		return;
+	}
+
+	if (!msta->last_addba_req_time[tid] ||
+	    time_after(jiffies, msta->last_addba_req_time[tid] + ADDBA_RETRY_PERIOD)) {
+		set_bit(tid, &wcid->ampdu_state);
+		if (ieee80211_start_tx_ba_session(sta, tid, 0) < 0)
+			clear_bit(tid, &wcid->ampdu_state);
+		msta->last_addba_req_time[tid] = jiffies;
+	}
+}
+
+static void
+mt7996_tx_check_aggr(struct ieee80211_sta *sta, struct sk_buff *skb,
+		     struct mt76_wcid *wcid)
+{
+	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
+	bool is_8023 = info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP;
+	u16 fc, tid;
+
 	tid = skb->priority & IEEE80211_QOS_CTL_TID_MASK;
 
 	if (is_8023) {
@@ -1149,10 +1172,7 @@ mt7996_tx_check_aggr(struct ieee80211_sta *sta, struct sk_buff *skb,
 	if (unlikely(fc != (IEEE80211_FTYPE_DATA | IEEE80211_STYPE_QOS_DATA)))
 		return;
 
-	msta = (struct mt7996_sta *)sta->drv_priv;
-	mlink = rcu_dereference(msta->link[msta->pri_link]);
-	if (!test_and_set_bit(tid, &mlink->wcid.ampdu_state))
-		ieee80211_start_tx_ba_session(sta, tid, 0);
+	mt7996_check_tx_ba_status(wcid, tid);
 }
 
 static void
@@ -1361,12 +1381,11 @@ mt7996_mac_add_txs_skb(struct mt7996_dev *dev, struct mt76_wcid *wcid,
 	}
 
 	if (mtk_wed_device_active(&dev->mt76.mmio.wed) && wcid->sta) {
-		struct ieee80211_sta *sta;
-		u8 tid;
-
-		sta = wcid_to_sta(wcid);
-		tid = FIELD_GET(MT_TXS0_TID, txs);
-		ieee80211_refresh_tx_agg_session_timer(sta, tid);
+		/* Do not check TX BA status for mgmt frames which are sent at a
+		 * fixed rate
+		 */
+		if (!le32_get_bits(txs_data[3], MT_TXS3_FIXED_RATE))
+			mt7996_check_tx_ba_status(wcid, FIELD_GET(MT_TXS0_TID, txs));
 	}
 
 	txrate = FIELD_GET(MT_TXS0_TX_RATE, txs);
diff --git a/mt7996/main.c b/mt7996/main.c
index 0d2a0b4c..5e7eb387 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -1678,12 +1678,14 @@ mt7996_ampdu_action(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	case IEEE80211_AMPDU_TX_OPERATIONAL:
 		mtxq->aggr = true;
 		mtxq->send_bar = false;
+		set_bit((tid + AMPDU_ADDBA_SUCC_SHFT), &mlink->wcid.ampdu_state);
 		ret = mt7996_mcu_add_tx_ba(dev, params, true);
 		break;
 	case IEEE80211_AMPDU_TX_STOP_FLUSH:
 	case IEEE80211_AMPDU_TX_STOP_FLUSH_CONT:
 		mtxq->aggr = false;
 		clear_bit(tid, &mlink->wcid.ampdu_state);
+		clear_bit((tid + AMPDU_ADDBA_SUCC_SHFT), &mlink->wcid.ampdu_state);
 		ret = mt7996_mcu_add_tx_ba(dev, params, false);
 		break;
 	case IEEE80211_AMPDU_TX_START:
@@ -1693,6 +1695,7 @@ mt7996_ampdu_action(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	case IEEE80211_AMPDU_TX_STOP_CONT:
 		mtxq->aggr = false;
 		clear_bit(tid, &mlink->wcid.ampdu_state);
+		clear_bit((tid + AMPDU_ADDBA_SUCC_SHFT), &mlink->wcid.ampdu_state);
 		ret = mt7996_mcu_add_tx_ba(dev, params, false);
 		ieee80211_stop_tx_ba_cb_irqsafe(vif, sta->addr, tid);
 		break;
@@ -2547,7 +2550,7 @@ mt7996_net_fill_forward_path(struct ieee80211_hw *hw,
 	struct mtk_wed_device *wed = &dev->mt76.mmio.wed;
 	struct mt7996_bss_conf *mconf;
 	struct mt7996_link_sta *mlink;
-	u8 link_id;
+	u8 link_id, dscp = path->mtk_wdma.tid >> 2;
 
 	link_id = msta->pri_link;
 	mconf = rcu_dereference(mvif->link[link_id]);
@@ -2594,7 +2597,7 @@ mt7996_net_fill_forward_path(struct ieee80211_hw *hw,
 	ctx->dev = NULL;
 
 	if (path->mtk_wdma.amsdu)
-		path->mtk_wdma.tid = mvif->qos_map[path->mtk_wdma.tid >> 2];
+		path->mtk_wdma.tid = mvif->qos_map[dscp];
 
 	return 0;
 }
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index eb98b870..d17910b2 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -163,6 +163,7 @@
 #define MT7996_MAX_PROBE_TRIES		2
 
 #define IP_DSCP_NUM			64
+#define ADDBA_RETRY_PERIOD		(5 * HZ)
 
 struct mt7996_vif;
 struct mt7996_sta;
@@ -424,6 +425,8 @@ struct mt7996_sta {
 	struct mt7996_vif *vif;
 	u8 pri_link;
 	u8 sec_link;
+
+	unsigned long last_addba_req_time[IEEE80211_NUM_TIDS];
 };
 
 struct mt7996_bss_conf {
-- 
2.45.2

