From 45e5b29d5806fdc31eb2c5af683ccd198031c67f Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Thu, 13 Feb 2025 14:26:17 +0800
Subject: [PATCH 096/107] mtk: mac80211: fixup felix: refactor the radar
 condition for offchannel

In the current design, if a user add a 5G ROC when the 5G radio is
on a DFS channel, the ROC request will be queued in roc_list and never
started, which blocks the subsequent 2G/6G ROC requests.
Therefore, if it is not allowed to perform ROC due to DFS regulatory
restrictions, return EBUSY.
Also, change the condition from ieee80211_is_radar_required to
ieee80211_can_leave_ch, so that the 5G ROC can be permitted if pre-CAC
is allowed.

This will be merged in felix's upstream patch.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 net/mac80211/cfg.c         | 10 +++++-----
 net/mac80211/ieee80211_i.h |  4 ++++
 net/mac80211/offchannel.c  | 12 +++++++-----
 net/mac80211/scan.c        |  8 ++++----
 4 files changed, 20 insertions(+), 14 deletions(-)

diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index ded185be..0e5ccee4 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -3553,8 +3553,8 @@ static int ieee80211_set_bitrate_mask(struct wiphy *wiphy,
 	return 0;
 }
 
-static bool ieee80211_scanning_busy(struct ieee80211_local *local,
-				    struct ieee80211_chan_req *chanreq)
+bool ieee80211_scanning_busy(struct ieee80211_local *local,
+			     struct cfg80211_chan_def *chandef)
 {
 	struct cfg80211_scan_request *scan_req;
 	struct wiphy *wiphy = local->hw.wiphy;
@@ -3571,7 +3571,7 @@ static bool ieee80211_scanning_busy(struct ieee80211_local *local,
 	if (scan_req)
 		mask |= ieee80211_scan_req_radio_mask(local, scan_req);
 
-	return mask & ieee80211_chandef_radio_mask(local, &chanreq->oper);
+	return mask & ieee80211_chandef_radio_mask(local, chandef);
 }
 
 static int ieee80211_start_radar_detection(struct wiphy *wiphy,
@@ -3587,7 +3587,7 @@ static int ieee80211_start_radar_detection(struct wiphy *wiphy,
 
 	lockdep_assert_wiphy(local->hw.wiphy);
 
-	if (ieee80211_scanning_busy(local, &chanreq))
+	if (ieee80211_scanning_busy(local, chandef))
 		return -EBUSY;
 
 	link_data = sdata_dereference(sdata->link[link_id], sdata);
@@ -4127,7 +4127,7 @@ __ieee80211_channel_switch(struct wiphy *wiphy, struct net_device *dev,
 
 	lockdep_assert_wiphy(local->hw.wiphy);
 
-	if (ieee80211_scanning_busy(local, &chanreq))
+	if (ieee80211_scanning_busy(local, &params->chandef))
 		return -EBUSY;
 
 	if (WARN_ON(link_id >= IEEE80211_MLD_MAX_NUM_LINKS))
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index b6c240f7..cece8826 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1970,6 +1970,10 @@ int ieee80211_mesh_finish_csa(struct ieee80211_sub_if_data *sdata,
 /* scan/BSS handling */
 u32 ieee80211_scan_req_radio_mask(struct ieee80211_local *local,
 				  struct cfg80211_scan_request *req);
+bool ieee80211_scanning_busy(struct ieee80211_local *local,
+			     struct cfg80211_chan_def *chandef);
+bool ieee80211_can_leave_ch(struct ieee80211_sub_if_data *sdata,
+			    u32 radio_mask);
 void ieee80211_scan_work(struct wiphy *wiphy, struct wiphy_work *work);
 int ieee80211_request_ibss_scan(struct ieee80211_sub_if_data *sdata,
 				const u8 *ssid, u8 ssid_len,
diff --git a/net/mac80211/offchannel.c b/net/mac80211/offchannel.c
index faa3ac01..4c2421c1 100644
--- a/net/mac80211/offchannel.c
+++ b/net/mac80211/offchannel.c
@@ -609,6 +609,12 @@ static int ieee80211_start_roc_work(struct ieee80211_local *local,
 	if (!local->emulate_chanctx && !local->ops->remain_on_channel)
 		return -EOPNOTSUPP;
 
+	cfg80211_chandef_create(&chandef, channel, NL80211_CHAN_NO_HT);
+	radio_mask = ieee80211_chandef_radio_mask(local, &chandef);
+	if (!ieee80211_can_leave_ch(sdata, radio_mask) &&
+	    !ieee80211_scanning_busy(local, &chandef))
+		return -EBUSY;
+
 	roc = kzalloc(sizeof(*roc), GFP_KERNEL);
 	if (!roc)
 		return -ENOMEM;
@@ -643,12 +649,8 @@ static int ieee80211_start_roc_work(struct ieee80211_local *local,
 		roc->mgmt_tx_cookie = *cookie;
 	}
 
-	cfg80211_chandef_create(&chandef, channel, NL80211_CHAN_NO_HT);
-	radio_mask = ieee80211_chandef_radio_mask(local, &chandef);
-
 	/* if there's no need to queue, handle it immediately */
-	if (list_empty(&local->roc_list) &&
-	    !local->scanning && !ieee80211_is_radar_required(local, radio_mask)) {
+	if (list_empty(&local->roc_list) && !local->scanning) {
 		/* if not HW assist, just queue & schedule work */
 		if (!local->ops->remain_on_channel) {
 			list_add_tail(&roc->list, &local->roc_list);
diff --git a/net/mac80211/scan.c b/net/mac80211/scan.c
index e538cb80..5c839c36 100644
--- a/net/mac80211/scan.c
+++ b/net/mac80211/scan.c
@@ -598,8 +598,8 @@ u32 ieee80211_scan_req_radio_mask(struct ieee80211_local *local,
 	return mask;
 }
 
-static bool __ieee80211_can_leave_ch(struct ieee80211_sub_if_data *sdata,
-				     u32 radio_mask)
+bool ieee80211_can_leave_ch(struct ieee80211_sub_if_data *sdata,
+			    u32 radio_mask)
 {
 	struct ieee80211_local *local = sdata->local;
 	struct ieee80211_sub_if_data *sdata_iter;
@@ -671,7 +671,7 @@ void ieee80211_run_deferred_scan(struct ieee80211_local *local)
 
 	radio_mask = ieee80211_scan_req_radio_mask(local, req);
 	sdata = wiphy_dereference(local->hw.wiphy, local->scan_sdata);
-	if (!__ieee80211_can_leave_ch(sdata, radio_mask))
+	if (!ieee80211_can_leave_ch(sdata, radio_mask))
 		return;
 
 	if (!ieee80211_can_scan(local, sdata, radio_mask))
@@ -773,7 +773,7 @@ static int __ieee80211_start_scan(struct ieee80211_sub_if_data *sdata,
 		return -EINVAL;
 
 	radio_mask = ieee80211_scan_req_radio_mask(local, req);
-	if (!__ieee80211_can_leave_ch(sdata, radio_mask))
+	if (!ieee80211_can_leave_ch(sdata, radio_mask))
 		return -EBUSY;
 
 	if (!ieee80211_can_scan(local, sdata, radio_mask)) {
-- 
2.45.2

