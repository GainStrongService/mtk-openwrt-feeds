From bed7634429bbe377b132f43a5b4cdd6ab23941ff Mon Sep 17 00:00:00 2001
From: Shayne Chen <shayne.chen@mediatek.com>
Date: Thu, 19 Dec 2024 11:56:31 +0800
Subject: [PATCH 72/75] mtk: mt76: rework VIF data structures

Main changes:
rename mt76_vif to mt76_vif_link
rename mt7996_bss_conf to mt7996_vif_link
change main_chan to main_chandef
change mt7996_chanctx to mt76_chanctx
move scan_work from mt7996_phy to mt76_phy
move roc_complete_work from mt7996_phy to mt76_phy
sync mt76_wcid_init and cleanup wcid_phy_mask
use mt76_vif_data
remove valid_links from mt7996_vif and use mt76_vif_data
remove link_id from mt7996_vif_link
remove mt7996_config_channel
use phy->num_sta to check if sta exists during scanning
move band_to_link from mt7996_vif to mt76_vif_data
remove master_link_id from mt7996_vif
rename to mt7996_vif_link_add and remove
use mt7996_vif_link for dereference
sync param of mt7996_vif_link_add and mt7996_vif_link_remove

Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>
---
 mac80211.c        |  32 ++--
 mt76.h            |  84 +++++++++-
 mt76_connac_mac.c |   2 +-
 mt76_connac_mcu.c |  52 +++----
 mt76_connac_mcu.h |  12 +-
 mt7996/debugfs.c  |  22 +--
 mt7996/init.c     |  10 +-
 mt7996/mac.c      |  75 ++++-----
 mt7996/main.c     | 380 ++++++++++++++++++++++------------------------
 mt7996/mcu.c      | 162 ++++++++++----------
 mt7996/mmio.c     |   1 +
 mt7996/mt7996.h   | 113 +++++++-------
 mt7996/vendor.c   |  20 +--
 util.c            |  10 +-
 14 files changed, 510 insertions(+), 465 deletions(-)

diff --git a/mac80211.c b/mac80211.c
index 271fc501..0000df2e 100644
--- a/mac80211.c
+++ b/mac80211.c
@@ -728,7 +728,7 @@ int mt76_register_device(struct mt76_dev *dev, bool vht,
 	int ret;
 
 	dev_set_drvdata(dev->dev, dev);
-	mt76_wcid_init(&dev->global_wcid);
+	mt76_wcid_init(&dev->global_wcid, phy->band_idx);
 	ret = mt76_phy_init(phy, hw);
 	if (ret)
 		return ret;
@@ -983,9 +983,9 @@ int mt76_set_channel(struct mt76_phy *phy, struct cfg80211_chan_def *chandef,
 	phy->offchannel = offchannel;
 
 	if (!offchannel)
-		phy->main_chan = chandef->chan;
+		phy->main_chandef = *chandef;
 
-	if (chandef->chan != phy->main_chan || was_scanning)
+	if (chandef->chan != phy->main_chandef.chan || was_scanning)
 		memset(phy->chan_state, 0, sizeof(*phy->chan_state));
 
 	ret = dev->drv->set_channel(phy);
@@ -1533,21 +1533,20 @@ mt76_sta_add(struct mt76_phy *phy, struct ieee80211_vif *vif,
 	}
 
 	ewma_signal_init(&wcid->rssi);
-	if (phy->band_idx == MT_BAND1)
-		mt76_wcid_mask_set(dev->wcid_phy_mask, wcid->idx);
-	wcid->phy_idx = phy->band_idx;
 	rcu_assign_pointer(dev->wcid[wcid->idx], wcid);
+	phy->num_sta++;
 
-	mt76_wcid_init(wcid);
+	mt76_wcid_init(wcid, phy->band_idx);
 out:
 	mutex_unlock(&dev->mutex);
 
 	return ret;
 }
 
-void __mt76_sta_remove(struct mt76_dev *dev, struct ieee80211_vif *vif,
+void __mt76_sta_remove(struct mt76_phy *phy, struct ieee80211_vif *vif,
 		       struct ieee80211_sta *sta)
 {
+	struct mt76_dev *dev = phy->dev;
 	struct mt76_wcid *wcid = (struct mt76_wcid *)sta->drv_priv;
 	int i, idx = wcid->idx;
 
@@ -1563,16 +1562,18 @@ void __mt76_sta_remove(struct mt76_dev *dev, struct ieee80211_vif *vif,
 	mt76_wcid_cleanup(dev, wcid);
 
 	mt76_wcid_mask_clear(dev->wcid_mask, idx);
-	mt76_wcid_mask_clear(dev->wcid_phy_mask, idx);
+	phy->num_sta--;
 }
 EXPORT_SYMBOL_GPL(__mt76_sta_remove);
 
 static void
-mt76_sta_remove(struct mt76_dev *dev, struct ieee80211_vif *vif,
+mt76_sta_remove(struct mt76_phy *phy, struct ieee80211_vif *vif,
 		struct ieee80211_sta *sta)
 {
+	struct mt76_dev *dev = phy->dev;
+
 	mutex_lock(&dev->mutex);
-	__mt76_sta_remove(dev, vif, sta);
+	__mt76_sta_remove(phy, vif, sta);
 	mutex_unlock(&dev->mutex);
 }
 
@@ -1591,7 +1592,7 @@ int mt76_sta_state(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	if (old_state == IEEE80211_STA_NONE &&
 	    new_state == IEEE80211_STA_NOTEXIST)
-		mt76_sta_remove(dev, vif, sta);
+		mt76_sta_remove(phy, vif, sta);
 
 	if (!dev->drv->sta_event)
 		return 0;
@@ -1627,14 +1628,19 @@ void mt76_sta_pre_rcu_remove(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 }
 EXPORT_SYMBOL_GPL(mt76_sta_pre_rcu_remove);
 
-void mt76_wcid_init(struct mt76_wcid *wcid)
+void mt76_wcid_init(struct mt76_wcid *wcid, u8 band_idx)
 {
+	wcid->hw_key_idx = -1;
+	wcid->phy_idx = band_idx;
+
 	INIT_LIST_HEAD(&wcid->tx_list);
 	skb_queue_head_init(&wcid->tx_pending);
 	skb_queue_head_init(&wcid->tx_offchannel);
 
 	INIT_LIST_HEAD(&wcid->list);
 	idr_init(&wcid->pktid);
+
+	INIT_LIST_HEAD(&wcid->poll_list);
 }
 EXPORT_SYMBOL_GPL(mt76_wcid_init);
 
diff --git a/mt76.h b/mt76.h
index 9459e02a..5fa918b0 100644
--- a/mt76.h
+++ b/mt76.h
@@ -922,7 +922,7 @@ struct mt76_list_mode_data {
 	u32 sta_idx;
 };
 
-struct mt76_vif {
+struct mt76_vif_link {
 	u8 idx;
 	u8 omac_idx;
 	u8 band_idx;
@@ -942,6 +942,12 @@ struct mt76_vif {
 struct mt76_vif_data {
 	struct mt76_vif_link __rcu *link[IEEE80211_MLD_MAX_NUM_LINKS];
 	struct mt76_vif_link __rcu *offchannel_link;
+
+	struct mt76_phy *roc_phy;
+	u16 valid_links;
+	u8 deflink_id;
+
+	u8 band_to_link[__MT_MAX_BAND];
 };
 
 enum {
@@ -983,6 +989,7 @@ struct mt76_phy {
 	void *priv;
 
 	unsigned long state;
+	unsigned int num_sta;
 	u8 band_idx;
 
 	spinlock_t tx_lock;
@@ -990,12 +997,14 @@ struct mt76_phy {
 	struct mt76_queue *q_tx[__MT_TXQ_MAX];
 
 	struct cfg80211_chan_def chandef;
-	struct ieee80211_channel *main_chan;
+	struct cfg80211_chan_def main_chandef;
 	bool offchannel;
+	bool radar_enabled;
+
+	struct mt76_chanctx *chanctx;
 
 	struct mt76_channel_state *chan_state;
 	enum mt76_dfs_state dfs_state;
-	bool radar_enabled;
 	ktime_t survey_time;
 
 	u32 aggr_stats[32];
@@ -1038,6 +1047,10 @@ struct mt76_phy {
 	struct mt76_tx_debug tx_dbg_stats;
 	struct mt76_rx_debug rx_dbg_stats;
 	int tokens;
+
+	/* intermediate used */
+	struct delayed_work scan_work;
+	struct delayed_work roc_complete_work;
 };
 
 struct mt76_dev {
@@ -1100,7 +1113,6 @@ struct mt76_dev {
 	spinlock_t status_lock;
 
 	u32 wcid_mask[DIV_ROUND_UP(MT76_N_WCIDS, 32)];
-	u32 wcid_phy_mask[DIV_ROUND_UP(MT76_N_WCIDS, 32)];
 
 	u64 vif_mask;
 
@@ -1278,6 +1290,14 @@ struct mt76_ethtool_worker_info {
 	int sta_count;
 };
 
+struct mt76_chanctx {
+	struct cfg80211_chan_def chandef;
+	struct mt76_phy *phy;
+
+	bool assigned;
+	u8 nbss_assigned;
+};
+
 #define CCK_RATE(_idx, _rate) {					\
 	.bitrate = _rate,					\
 	.flags = IEEE80211_RATE_SHORT_PREAMBLE,			\
@@ -1399,6 +1419,10 @@ static inline int mt76_wed_dma_setup(struct mt76_dev *dev, struct mt76_queue *q,
 	for (i = 0; i < ARRAY_SIZE((dev)->q_rx); i++)	\
 		if ((dev)->q_rx[i].ndesc)
 
+
+#define mt76_dereference(p, dev) \
+	rcu_dereference_protected(p, lockdep_is_held(&(dev)->mutex))
+
 struct mt76_dev *mt76_alloc_device(struct device *pdev, unsigned int size,
 				   const struct ieee80211_ops *ops,
 				   const struct mt76_driver_ops *drv_ops);
@@ -1682,12 +1706,12 @@ int mt76_sta_state(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		   struct ieee80211_sta *sta,
 		   enum ieee80211_sta_state old_state,
 		   enum ieee80211_sta_state new_state);
-void __mt76_sta_remove(struct mt76_dev *dev, struct ieee80211_vif *vif,
+void __mt76_sta_remove(struct mt76_phy *phy, struct ieee80211_vif *vif,
 		       struct ieee80211_sta *sta);
 void mt76_sta_pre_rcu_remove(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			     struct ieee80211_sta *sta);
 
-int mt76_get_min_avg_rssi(struct mt76_dev *dev, bool ext_phy);
+int mt76_get_min_avg_rssi(struct mt76_dev *dev, u8 phy_idx);
 
 int mt76_get_txpower(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		     int *dbm);
@@ -2017,8 +2041,54 @@ mt76_token_put(struct mt76_dev *dev, int token)
 	return txwi;
 }
 
-void mt76_wcid_init(struct mt76_wcid *wcid);
+void mt76_wcid_init(struct mt76_wcid *wcid, u8 band_idx);
 void mt76_wcid_cleanup(struct mt76_dev *dev, struct mt76_wcid *wcid);
 void mt76_wcid_add_poll(struct mt76_dev *dev, struct mt76_wcid *wcid);
 
+static inline void
+mt76_vif_init(struct ieee80211_vif *vif, struct mt76_vif_data *mvif)
+{
+	struct mt76_vif_link *mlink = (struct mt76_vif_link *)vif->drv_priv;
+
+	mlink->mvif = mvif;
+	rcu_assign_pointer(mvif->link[0], mlink);
+}
+
+void mt76_vif_cleanup(struct mt76_dev *dev, struct ieee80211_vif *vif);
+
+static inline struct mt76_vif_link *
+mt76_vif_link(struct mt76_dev *dev, struct ieee80211_vif *vif, int link_id)
+{
+	struct mt76_vif_link *mlink = (struct mt76_vif_link *)vif->drv_priv;
+	struct mt76_vif_data *mvif = mlink->mvif;
+
+	return mt76_dereference(mvif->link[link_id], dev);
+}
+
+static inline struct mt76_vif_link *
+mt76_vif_conf_link(struct mt76_dev *dev, struct ieee80211_vif *vif,
+		   struct ieee80211_bss_conf *link_conf)
+{
+	struct mt76_vif_link *mlink = (struct mt76_vif_link *)vif->drv_priv;
+	struct mt76_vif_data *mvif = mlink->mvif;
+
+	if (link_conf == &vif->bss_conf)
+		return mlink;
+
+	return mt76_dereference(mvif->link[link_conf->link_id], dev);
+}
+
+static inline struct mt76_phy *
+mt76_vif_link_phy(struct mt76_vif_link *mlink)
+{
+	struct mt76_chanctx *ctx;
+
+	if (!mlink->ctx)
+		return NULL;
+
+	ctx = (struct mt76_chanctx *)mlink->ctx->drv_priv;
+
+	return ctx->phy;
+}
+
 #endif
diff --git a/mt76_connac_mac.c b/mt76_connac_mac.c
index 71840069..46e0cf22 100644
--- a/mt76_connac_mac.c
+++ b/mt76_connac_mac.c
@@ -507,7 +507,7 @@ void mt76_connac2_mac_write_txwi(struct mt76_dev *dev, __le32 *txwi,
 	bool amsdu_en = wcid->amsdu;
 
 	if (vif) {
-		struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+		struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 
 		omac_idx = mvif->omac_idx;
 		wmm_idx = mvif->wmm_idx;
diff --git a/mt76_connac_mcu.c b/mt76_connac_mcu.c
index e9807348..3398e388 100644
--- a/mt76_connac_mcu.c
+++ b/mt76_connac_mcu.c
@@ -188,7 +188,7 @@ EXPORT_SYMBOL_GPL(mt76_connac_mcu_set_mac_enable);
 
 int mt76_connac_mcu_set_vif_ps(struct mt76_dev *dev, struct ieee80211_vif *vif)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct {
 		u8 bss_idx;
 		u8 ps_state; /* 0: device awake
@@ -231,7 +231,7 @@ EXPORT_SYMBOL_GPL(mt76_connac_mcu_set_rts_thresh);
 void mt76_connac_mcu_beacon_loss_iter(void *priv, u8 *mac,
 				      struct ieee80211_vif *vif)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct mt76_connac_beacon_loss_event *event = priv;
 
 	if (mvif->idx != event->bss_idx)
@@ -272,7 +272,7 @@ mt76_connac_mcu_add_nested_tlv(struct sk_buff *skb, int tag, int len,
 EXPORT_SYMBOL_GPL(mt76_connac_mcu_add_nested_tlv);
 
 struct sk_buff *
-__mt76_connac_mcu_alloc_sta_req(struct mt76_dev *dev, struct mt76_vif *mvif,
+__mt76_connac_mcu_alloc_sta_req(struct mt76_dev *dev, struct mt76_vif_link *mvif,
 				struct mt76_wcid *wcid, int len)
 {
 	struct sta_req_hdr hdr = {
@@ -328,7 +328,7 @@ EXPORT_SYMBOL_GPL(mt76_connac_mcu_alloc_wtbl_req);
 void mt76_connac_mcu_bss_omac_tlv(struct sk_buff *skb,
 				  struct ieee80211_vif *vif)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	u8 omac_idx = mvif->omac_idx;
 	struct bss_info_omac *omac;
 	struct tlv *tlv;
@@ -496,7 +496,7 @@ int mt76_connac_mcu_sta_update_hdr_trans(struct mt76_dev *dev,
 					 struct ieee80211_vif *vif,
 					 struct mt76_wcid *wcid, int cmd)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct wtbl_req_hdr *wtbl_hdr;
 	struct tlv *sta_wtbl;
 	struct sk_buff *skb;
@@ -544,7 +544,7 @@ void mt76_connac_mcu_wtbl_generic_tlv(struct mt76_dev *dev,
 				      struct ieee80211_sta *sta,
 				      void *sta_wtbl, void *wtbl_tlv)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct wtbl_generic *generic;
 	struct wtbl_rx *rx;
 	struct wtbl_spe *spe;
@@ -848,7 +848,7 @@ void mt76_connac_mcu_sta_tlv(struct mt76_phy *mphy, struct sk_buff *skb,
 			     struct ieee80211_vif *vif,
 			     u8 rcpi, u8 sta_state)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct cfg80211_chan_def *chandef = mvif->ctx ?
 					    &mvif->ctx->def : &mphy->chandef;
 	enum nl80211_band band = chandef->chan->band;
@@ -1040,7 +1040,7 @@ EXPORT_SYMBOL_GPL(mt76_connac_mcu_wtbl_ht_tlv);
 int mt76_connac_mcu_sta_cmd(struct mt76_phy *phy,
 			    struct mt76_sta_cmd_info *info)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)info->vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)info->vif->drv_priv;
 	struct ieee80211_link_sta *link_sta;
 	struct mt76_dev *dev = phy->dev;
 	struct wtbl_req_hdr *wtbl_hdr;
@@ -1265,7 +1265,7 @@ int mt76_connac_mcu_sta_wed_update(struct mt76_dev *dev, struct sk_buff *skb)
 }
 EXPORT_SYMBOL_GPL(mt76_connac_mcu_sta_wed_update);
 
-int mt76_connac_mcu_sta_ba(struct mt76_dev *dev, struct mt76_vif *mvif,
+int mt76_connac_mcu_sta_ba(struct mt76_dev *dev, struct mt76_vif_link *mvif,
 			   struct ieee80211_ampdu_params *params,
 			   int cmd, bool enable, bool tx)
 {
@@ -1403,7 +1403,7 @@ EXPORT_SYMBOL_GPL(mt76_connac_get_phy_mode_ext);
 const struct ieee80211_sta_he_cap *
 mt76_connac_get_he_phy_cap(struct mt76_phy *phy, struct ieee80211_vif *vif)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct cfg80211_chan_def *chandef = mvif->ctx ?
 					    &mvif->ctx->def : &phy->chandef;
 	enum nl80211_band band = chandef->chan->band;
@@ -1452,7 +1452,7 @@ mt76_connac_mcu_uni_bss_he_tlv(struct mt76_phy *phy, struct ieee80211_vif *vif,
 	he->max_nss_mcs[CMD_HE_MCS_BW8080] = cap->he_mcs_nss_supp.tx_mcs_80p80;
 }
 
-int mt76_connac_mcu_uni_set_chctx(struct mt76_phy *phy, struct mt76_vif *mvif,
+int mt76_connac_mcu_uni_set_chctx(struct mt76_phy *phy, struct mt76_vif_link *mvif,
 				  struct ieee80211_chanctx_conf *ctx)
 {
 	struct cfg80211_chan_def *chandef = ctx ? &ctx->def : &phy->chandef;
@@ -1540,7 +1540,7 @@ int mt76_connac_mcu_uni_add_bss(struct mt76_phy *phy,
 				bool enable,
 				struct ieee80211_chanctx_conf *ctx)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct cfg80211_chan_def *chandef = ctx ? &ctx->def : &phy->chandef;
 	enum nl80211_band band = chandef->chan->band;
 	struct mt76_dev *mdev = phy->dev;
@@ -1666,7 +1666,7 @@ EXPORT_SYMBOL_GPL(mt76_connac_mcu_uni_add_bss);
 int mt76_connac_mcu_hw_scan(struct mt76_phy *phy, struct ieee80211_vif *vif,
 			    struct ieee80211_scan_request *scan_req)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct cfg80211_scan_request *sreq = &scan_req->req;
 	int n_ssids = 0, err, i, duration;
 	int ext_channels_num = max_t(int, sreq->n_channels - 32, 0);
@@ -1772,7 +1772,7 @@ EXPORT_SYMBOL_GPL(mt76_connac_mcu_hw_scan);
 int mt76_connac_mcu_cancel_hw_scan(struct mt76_phy *phy,
 				   struct ieee80211_vif *vif)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct {
 		u8 seq_num;
 		u8 is_ext_channel;
@@ -1798,7 +1798,7 @@ int mt76_connac_mcu_sched_scan_req(struct mt76_phy *phy,
 				   struct ieee80211_vif *vif,
 				   struct cfg80211_sched_scan_request *sreq)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct ieee80211_channel **scan_list = sreq->channels;
 	struct mt76_connac_mcu_scan_channel *chan;
 	struct mt76_connac_sched_scan_req *req;
@@ -2210,7 +2210,7 @@ int mt76_connac_mcu_set_rate_txpower(struct mt76_phy *phy)
 EXPORT_SYMBOL_GPL(mt76_connac_mcu_set_rate_txpower);
 
 int mt76_connac_mcu_update_arp_filter(struct mt76_dev *dev,
-				      struct mt76_vif *vif,
+				      struct mt76_vif_link *vif,
 				      struct ieee80211_bss_conf *info)
 {
 	struct ieee80211_vif *mvif = container_of(info, struct ieee80211_vif,
@@ -2253,7 +2253,7 @@ EXPORT_SYMBOL_GPL(mt76_connac_mcu_update_arp_filter);
 int mt76_connac_mcu_set_p2p_oppps(struct ieee80211_hw *hw,
 				  struct ieee80211_vif *vif)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	int ct_window = vif->bss_conf.p2p_noa_attr.oppps_ctwindow;
 	struct mt76_phy *phy = hw->priv;
 	struct {
@@ -2320,7 +2320,7 @@ int mt76_connac_mcu_update_gtk_rekey(struct ieee80211_hw *hw,
 				     struct ieee80211_vif *vif,
 				     struct cfg80211_gtk_rekey_data *key)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct mt76_connac_gtk_rekey_tlv *gtk_tlv;
 	struct mt76_phy *phy = hw->priv;
 	struct sk_buff *skb;
@@ -2361,7 +2361,7 @@ static int
 mt76_connac_mcu_set_arp_filter(struct mt76_dev *dev, struct ieee80211_vif *vif,
 			       bool suspend)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct {
 		struct {
 			u8 bss_idx;
@@ -2387,7 +2387,7 @@ int
 mt76_connac_mcu_set_gtk_rekey(struct mt76_dev *dev, struct ieee80211_vif *vif,
 			      bool suspend)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct {
 		struct {
 			u8 bss_idx;
@@ -2416,7 +2416,7 @@ mt76_connac_mcu_set_suspend_mode(struct mt76_dev *dev,
 				 bool enable, u8 mdtim,
 				 bool wow_suspend)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct {
 		struct {
 			u8 bss_idx;
@@ -2447,7 +2447,7 @@ mt76_connac_mcu_set_wow_pattern(struct mt76_dev *dev,
 				u8 index, bool enable,
 				struct cfg80211_pkt_pattern *pattern)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct mt76_connac_wow_pattern_tlv *ptlv;
 	struct sk_buff *skb;
 	struct req_hdr {
@@ -2479,7 +2479,7 @@ int
 mt76_connac_mcu_set_wow_ctrl(struct mt76_phy *phy, struct ieee80211_vif *vif,
 			     bool suspend, struct cfg80211_wowlan *wowlan)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct mt76_dev *dev = phy->dev;
 	struct {
 		struct {
@@ -2688,7 +2688,7 @@ int mt76_connac_mcu_add_key(struct mt76_dev *dev, struct ieee80211_vif *vif,
 			    struct ieee80211_key_conf *key, int mcu_cmd,
 			    struct mt76_wcid *wcid, enum set_key_cmd cmd)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	struct sk_buff *skb;
 	int ret;
 
@@ -2710,7 +2710,7 @@ EXPORT_SYMBOL_GPL(mt76_connac_mcu_add_key);
 
 /* SIFS 20us + 512 byte beacon transmitted by 1Mbps (3906us) */
 #define BCN_TX_ESTIMATE_TIME (4096 + 20)
-void mt76_connac_mcu_bss_ext_tlv(struct sk_buff *skb, struct mt76_vif *mvif)
+void mt76_connac_mcu_bss_ext_tlv(struct sk_buff *skb, struct mt76_vif_link *mvif)
 {
 	struct bss_info_ext_bss *ext;
 	int ext_bss_idx, tsf_offset;
@@ -2734,7 +2734,7 @@ int mt76_connac_mcu_bss_basic_tlv(struct sk_buff *skb,
 				  struct mt76_phy *phy, u16 wlan_idx,
 				  bool enable)
 {
-	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
+	struct mt76_vif_link *mvif = (struct mt76_vif_link *)vif->drv_priv;
 	u32 type = vif->p2p ? NETWORK_P2P : NETWORK_INFRA;
 	struct bss_info_basic *bss;
 	struct tlv *tlv;
diff --git a/mt76_connac_mcu.h b/mt76_connac_mcu.h
index a9bfc6ed..b6f835ad 100644
--- a/mt76_connac_mcu.h
+++ b/mt76_connac_mcu.h
@@ -1938,10 +1938,10 @@ mt76_connac_mcu_get_wlan_idx(struct mt76_dev *dev, struct mt76_wcid *wcid,
 }
 
 struct sk_buff *
-__mt76_connac_mcu_alloc_sta_req(struct mt76_dev *dev, struct mt76_vif *mvif,
+__mt76_connac_mcu_alloc_sta_req(struct mt76_dev *dev, struct mt76_vif_link *mvif,
 				struct mt76_wcid *wcid, int len);
 static inline struct sk_buff *
-mt76_connac_mcu_alloc_sta_req(struct mt76_dev *dev, struct mt76_vif *mvif,
+mt76_connac_mcu_alloc_sta_req(struct mt76_dev *dev, struct mt76_vif_link *mvif,
 			      struct mt76_wcid *wcid)
 {
 	return __mt76_connac_mcu_alloc_sta_req(dev, mvif, wcid,
@@ -2004,11 +2004,11 @@ int mt76_connac_mcu_uni_add_dev(struct mt76_phy *phy,
 				struct mt76_vif_link *mvif,
 				struct mt76_wcid *wcid,
 				bool enable);
-int mt76_connac_mcu_sta_ba(struct mt76_dev *dev, struct mt76_vif *mvif,
+int mt76_connac_mcu_sta_ba(struct mt76_dev *dev, struct mt76_vif_link *mvif,
 			   struct ieee80211_ampdu_params *params,
 			   int cmd, bool enable, bool tx);
 int mt76_connac_mcu_uni_set_chctx(struct mt76_phy *phy,
-				  struct mt76_vif *vif,
+				  struct mt76_vif_link *vif,
 				  struct ieee80211_chanctx_conf *ctx);
 int mt76_connac_mcu_uni_add_bss(struct mt76_phy *phy,
 				struct ieee80211_vif *vif,
@@ -2039,7 +2039,7 @@ int mt76_connac_mcu_sched_scan_enable(struct mt76_phy *phy,
 				      struct ieee80211_vif *vif,
 				      bool enable);
 int mt76_connac_mcu_update_arp_filter(struct mt76_dev *dev,
-				      struct mt76_vif *vif,
+				      struct mt76_vif_link *vif,
 				      struct ieee80211_bss_conf *info);
 int mt76_connac_mcu_set_gtk_rekey(struct mt76_dev *dev, struct ieee80211_vif *vif,
 				  bool suspend);
@@ -2086,7 +2086,7 @@ int mt76_connac_mcu_add_key(struct mt76_dev *dev, struct ieee80211_vif *vif,
 			    struct ieee80211_key_conf *key, int mcu_cmd,
 			    struct mt76_wcid *wcid, enum set_key_cmd cmd);
 
-void mt76_connac_mcu_bss_ext_tlv(struct sk_buff *skb, struct mt76_vif *mvif);
+void mt76_connac_mcu_bss_ext_tlv(struct sk_buff *skb, struct mt76_vif_link *mvif);
 void mt76_connac_mcu_bss_omac_tlv(struct sk_buff *skb,
 				  struct ieee80211_vif *vif);
 int mt76_connac_mcu_bss_basic_tlv(struct sk_buff *skb,
diff --git a/mt7996/debugfs.c b/mt7996/debugfs.c
index 5b7319fd..fbd1128e 100644
--- a/mt7996/debugfs.c
+++ b/mt7996/debugfs.c
@@ -1120,7 +1120,7 @@ mt7996_airtime_read(struct seq_file *s, void *data)
 	struct ieee80211_sta *sta;
 	struct mt7996_sta_link *mlsta;
 	struct mt76_wcid *wcid;
-	struct mt76_vif *vif;
+	struct mt76_vif_link *vif;
 	u16 i;
 
 	seq_printf(s, "VoW Airtime Information:\n");
@@ -1472,7 +1472,7 @@ mt7996_vif_links_info_show(struct seq_file *s, void *data)
 	struct ieee80211_vif *vif = s->private;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_dev *dev = mvif->dev;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_sta_link *mlsta;
 	unsigned long valid_links;
 	u8 link_id, i;
@@ -1489,35 +1489,35 @@ mt7996_vif_links_info_show(struct seq_file *s, void *data)
 		[NL80211_CHAN_WIDTH_320] = "320",
 	};
 
-	seq_printf(s, "master link id = %d\n", mvif->master_link_id);
+	seq_printf(s, "master link id = %d\n", mvif->mt76.deflink_id);
 	seq_printf(s, "group mld id = %d\n", mvif->group_mld_id);
 	seq_printf(s, "mld remap id = %d\n", mvif->mld_remap_id);
 
 	seq_printf(s, "valid links = 0x%x\n", vif->valid_links);
 	for (i = 0; i < __MT_MAX_BAND; i++)
-		seq_printf(s, "band%d_link_id = %d\n", i, mvif->band_to_link[i]);
+		seq_printf(s, "band%d_link_id = %d\n", i, mvif->mt76.band_to_link[i]);
 
 	mutex_lock(&dev->mt76.mutex);
 	valid_links = vif->valid_links ?: BIT(0);
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
-		mconf = mconf_dereference_protected(mvif, link_id);
+		mconf = mt7996_vif_link(dev, vif, link_id);
 		mlsta = mlsta_dereference_protected(&mvif->sta, link_id);
 
 		if (!mconf || !mlsta)
 			continue;
 
 		seq_printf(s, "- link[%02d]: bss_idx = %d, wcid = %d\n",
-			   mconf->link_id, mconf->mt76.idx, mlsta->wcid.idx);
+			   mlsta->wcid.link_id, mconf->mt76.idx, mlsta->wcid.idx);
 		seq_printf(s, "            omac_idx = %d, own_mld_id=%d\n",
 			   mconf->mt76.omac_idx, mconf->own_mld_id);
 
-		if (!mconf->phy->chanctx)
+		if (!mconf->phy->mt76->chanctx)
 			continue;
 
 		seq_printf(s, "            band_idx=%d, channel=%d, bw%s\n",
 			   mconf->mt76.band_idx,
-			   mconf->phy->chanctx->chandef.chan->hw_value,
-			   width_to_bw[mconf->phy->chanctx->chandef.width]);
+			   mconf->phy->mt76->chanctx->chandef.chan->hw_value,
+			   width_to_bw[mconf->phy->mt76->chanctx->chandef.width]);
 	}
 	mutex_unlock(&dev->mt76.mutex);
 
@@ -1701,14 +1701,14 @@ mt7996_link_info_show(struct seq_file *file, void *data)
 	struct ieee80211_bss_conf *conf = file->private;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)conf->vif->drv_priv;
 	struct mt7996_sta *msta = &mvif->sta;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_sta_link *mlsta;
 	struct mt7996_dev *dev = mvif->dev;
 	struct rate_info *r;
 
 	mutex_lock(&dev->mt76.mutex);
 
-	mconf = mconf_dereference_protected(mvif, conf->link_id);
+	mconf = mt7996_vif_link(dev, conf->vif, conf->link_id);
 	mlsta = mlsta_dereference_protected(msta, conf->link_id);
 	if (!mconf || !mlsta) {
 		mutex_unlock(&dev->mt76.mutex);
diff --git a/mt7996/init.c b/mt7996/init.c
index 8efd670d..5738aefe 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -528,7 +528,7 @@ mt7996_init_wiphy(struct ieee80211_hw *hw, struct mtk_wed_device *wed)
 
 	hw->sta_data_size = sizeof(struct mt7996_sta);
 	hw->vif_data_size = sizeof(struct mt7996_vif);
-	hw->chanctx_data_size = sizeof(struct mt7996_chanctx);
+	hw->chanctx_data_size = sizeof(struct mt76_chanctx);
 
 	wiphy->iface_combinations = &if_comb_global;
 	wiphy->n_iface_combinations = 1;
@@ -851,8 +851,8 @@ static int mt7996_register_phy(struct mt7996_dev *dev, enum mt76_band_id band)
 	mphy->dev->phys[band] = mphy;
 
 	INIT_DELAYED_WORK(&mphy->mac_work, mt7996_mac_work);
-	INIT_DELAYED_WORK(&phy->scan_work, mt7996_scan_work);
-	INIT_DELAYED_WORK(&phy->roc_complete_work, mt7996_roc_complete_work);
+	INIT_DELAYED_WORK(&mphy->scan_work, mt7996_scan_work);
+	INIT_DELAYED_WORK(&mphy->roc_complete_work, mt7996_roc_complete_work);
 
 	ret = mt7996_eeprom_parse_hw_cap(dev, phy);
 	if (ret)
@@ -1800,8 +1800,8 @@ int mt7996_register_device(struct mt7996_dev *dev)
 	dev->mt76.phy.priv = &dev->phy;
 	INIT_WORK(&dev->rc_work, mt7996_mac_sta_rc_work);
 	INIT_DELAYED_WORK(&dev->mphy.mac_work, mt7996_mac_work);
-	INIT_DELAYED_WORK(&dev->phy.scan_work, mt7996_scan_work);
-	INIT_DELAYED_WORK(&dev->phy.roc_complete_work, mt7996_roc_complete_work);
+	INIT_DELAYED_WORK(&dev->phy.mt76->scan_work, mt7996_scan_work);
+	INIT_DELAYED_WORK(&dev->phy.mt76->roc_complete_work, mt7996_roc_complete_work);
 	INIT_DELAYED_WORK(&dev->scs_work, mt7996_mcu_scs_sta_poll);
 	INIT_LIST_HEAD(&dev->sta_rc_list);
 	INIT_LIST_HEAD(&dev->twt_list);
diff --git a/mt7996/mac.c b/mt7996/mac.c
index dfbb1cca..3855f9ca 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -800,7 +800,7 @@ void mt7996_mac_write_txwi(struct mt7996_dev *dev, __le32 *txwi,
 	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 	struct ieee80211_vif *vif = info->control.vif;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	u8 band_idx = (info->hw_queue & MT_TX_HW_QUEUE_PHY) >> 2;
 	u8 p_fmt, q_idx, omac_idx = 0, wmm_idx = 0;
 	u8 link_id;
@@ -817,7 +817,7 @@ void mt7996_mac_write_txwi(struct mt7996_dev *dev, __le32 *txwi,
 	else
 		link_id = u32_get_bits(info->control.flags, IEEE80211_TX_CTRL_MLO_LINK);
 
-	mconf = rcu_dereference(mvif->link[link_id]);
+	mconf = (struct mt7996_vif_link *)rcu_dereference(mvif->mt76.link[link_id]);
 	if (mconf) {
 		omac_idx = mconf->mt76.omac_idx;
 		wmm_idx = mconf->mt76.wmm_idx;
@@ -946,7 +946,7 @@ int mt7996_tx_prepare_skb(struct mt76_dev *mdev, void *txwi_ptr,
 	struct ieee80211_vif *vif = info->control.vif;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_sta *msta;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt76_connac_txp_common *txp;
 	struct mt76_txwi_cache *t;
 	int id, i, pid, nbuf = tx_info->nbuf - 1;
@@ -987,7 +987,7 @@ int mt7996_tx_prepare_skb(struct mt76_dev *mdev, void *txwi_ptr,
 			wcid = &mlsta->wcid;
 	}
 
-	mconf = rcu_dereference(mvif->link[wcid->link_id]);
+	mconf = (struct mt7996_vif_link *)rcu_dereference(mvif->mt76.link[wcid->link_id]);
 	if (!mconf) {
 		mdev->tx_dbg_stats.tx_drop[MT_TX_DROP_INVALID_LINK]++;
 		return -ENOLINK;
@@ -2077,7 +2077,6 @@ mt7996_update_vif_beacon(void *priv, u8 *mac, struct ieee80211_vif *vif)
 {
 	struct ieee80211_hw *hw = priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	unsigned long update = vif->valid_links ?: BIT(0);
 	unsigned int link_id;
 
@@ -2087,8 +2086,8 @@ mt7996_update_vif_beacon(void *priv, u8 *mac, struct ieee80211_vif *vif)
 	case NL80211_IFTYPE_ADHOC:
 	case NL80211_IFTYPE_AP:
 		for_each_set_bit(link_id, &update, IEEE80211_MLD_MAX_NUM_LINKS) {
-			struct mt7996_bss_conf *mconf =
-					mconf_dereference_protected(mvif, link_id);
+			struct mt7996_vif_link *mconf =
+					mt7996_vif_link(dev, vif, link_id);
 			struct ieee80211_bss_conf *conf =
 					link_conf_dereference_protected(vif, link_id);
 
@@ -2840,7 +2839,7 @@ void mt7996_mac_sta_rc_work(struct work_struct *work)
 	struct ieee80211_vif *vif;
 	struct ieee80211_bss_conf *conf;
 	struct ieee80211_link_sta *link_sta;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_sta_link *mlsta;
 	u32 changed;
 	LIST_HEAD(list);
@@ -2862,7 +2861,7 @@ void mt7996_mac_sta_rc_work(struct work_struct *work)
 
 		vif = container_of((void *)mlsta->sta->vif, struct ieee80211_vif, drv_priv);
 		conf = rcu_dereference(vif->link_conf[link_id]);
-		mconf = rcu_dereference(mlsta->sta->vif->link[link_id]);
+		mconf = (struct mt7996_vif_link *)rcu_dereference(mlsta->sta->vif->mt76.link[link_id]);
 		sta = wcid_to_sta(&mlsta->wcid);
 		link_sta = rcu_dereference(sta->link[link_id]);
 
@@ -3338,8 +3337,10 @@ out:
 void mt7996_mac_twt_teardown_flow(struct mt7996_dev *dev,
 				  struct mt7996_sta_link *mlsta, u8 flowid)
 {
+	struct ieee80211_vif *vif =
+		container_of((void *)mlsta->sta->vif, struct ieee80211_vif, drv_priv);
 	struct mt7996_twt_flow *flow;
-	struct mt7996_bss_conf *mconf = mconf_dereference_protected(mlsta->sta->vif, 0);
+	struct mt7996_vif_link *mconf = mt7996_vif_link(dev, vif, 0);
 
 	lockdep_assert_held(&dev->mt76.mutex);
 
@@ -3430,15 +3431,6 @@ unlock:
 	rcu_read_unlock();
 }
 
-static void mt7996_scan_check_sta(void *data, struct ieee80211_sta *sta)
-{
-	bool *has_sta = data;
-
-	if (*has_sta)
-		return;
-	*has_sta = true;
-}
-
 static void mt7996_active_scan(struct mt7996_phy *phy)
 {
 	struct cfg80211_scan_request *req = phy->scan_req;
@@ -3461,19 +3453,20 @@ static void mt7996_scan_rx(struct mt7996_phy *phy)
 	if (test_and_clear_bit(MT76_SCANNING_WAIT_BEACON, &phy->mt76->state)) {
 		mvif = (struct mt7996_vif *)vif->drv_priv;
 		set_bit(MT76_SCANNING_BEACON_DONE, &phy->mt76->state);
-		cancel_delayed_work(&phy->scan_work);
-		ieee80211_queue_delayed_work(phy->mt76->hw, &phy->scan_work, 0);
+		cancel_delayed_work(&phy->mt76->scan_work);
+		ieee80211_queue_delayed_work(phy->mt76->hw, &phy->mt76->scan_work, 0);
 	}
 }
 
 void mt7996_scan_work(struct work_struct *work)
 {
-	struct mt7996_phy *phy = container_of(work, struct mt7996_phy, scan_work.work);
+	struct mt76_phy *mphy = container_of(work, struct mt76_phy, scan_work.work);
+	struct mt7996_phy *phy = mphy->priv;
 	struct ieee80211_hw *hw = phy->mt76->hw;
 	struct cfg80211_scan_request *req = phy->scan_req;
 	struct cfg80211_chan_def chandef = {};
 	int duration;
-	bool has_sta = false, active_scan = false;
+	bool active_scan = false;
 
 	mutex_lock(&phy->dev->mt76.mutex);
 
@@ -3483,10 +3476,10 @@ void mt7996_scan_work(struct work_struct *work)
 		mt7996_scan_complete(phy, false);
 		mutex_unlock(&phy->dev->mt76.mutex);
 
-		if (phy->chanctx)
-			mt7996_config_channel(phy, &phy->chanctx->chandef);
+		if (phy->mt76->chanctx)
+			mt76_set_channel(phy->mt76, &phy->mt76->chanctx->chandef, false);
 		else
-			mt7996_config_channel(phy, &phy->mt76->chandef);
+			mt76_set_channel(phy->mt76, &phy->mt76->chandef, false);
 
 		return;
 	}
@@ -3496,27 +3489,25 @@ void mt7996_scan_work(struct work_struct *work)
 		mutex_unlock(&phy->dev->mt76.mutex);
 
 		mt7996_active_scan(phy);
-		ieee80211_queue_delayed_work(hw, &phy->scan_work, HZ / 16);
+		ieee80211_queue_delayed_work(hw, &phy->mt76->scan_work, HZ / 16);
 		mt76_dbg(&phy->dev->mt76, MT76_DBG_SCAN,
 			 "%s: move to active scan on channel %d\n",
-			 __func__, phy->chanctx ? phy->chanctx->chandef.center_freq1 :
-						  phy->mt76->chandef.center_freq1);
+			 __func__, phy->mt76->chanctx ? phy->mt76->chanctx->chandef.center_freq1 :
+							phy->mt76->chandef.center_freq1);
 		return;
 	}
 
-	ieee80211_iterate_stations_atomic(hw, mt7996_scan_check_sta, &has_sta);
-
 	/* go back to operating channel */
-	if (has_sta && phy->scan_chan) {
+	if (phy->mt76->num_sta && phy->scan_chan) {
 		phy->scan_chan = NULL;
 		mutex_unlock(&phy->dev->mt76.mutex);
 
-		if (phy->chanctx)
-			mt7996_config_channel(phy, &phy->chanctx->chandef);
+		if (phy->mt76->chanctx)
+			mt76_set_channel(phy->mt76, &phy->mt76->chanctx->chandef, false);
 		else
-			mt7996_config_channel(phy, &phy->mt76->chandef);
+			mt76_set_channel(phy->mt76, &phy->mt76->chandef, false);
 
-		ieee80211_queue_delayed_work(hw, &phy->scan_work, HZ / 10);
+		ieee80211_queue_delayed_work(hw, &phy->mt76->scan_work, HZ / 10);
 
 		return;
 	}
@@ -3540,12 +3531,12 @@ void mt7996_scan_work(struct work_struct *work)
 	cfg80211_chandef_create(&chandef, phy->scan_chan, NL80211_CHAN_HT20);
 	mutex_unlock(&phy->dev->mt76.mutex);
 
-	mt7996_config_channel(phy, &chandef);
+	mt76_set_channel(phy->mt76, &chandef, true);
 
 	if (active_scan)
 		mt7996_active_scan(phy);
 
-	ieee80211_queue_delayed_work(hw, &phy->scan_work, duration);
+	ieee80211_queue_delayed_work(hw, &phy->mt76->scan_work, duration);
 }
 
 static int
@@ -3596,8 +3587,8 @@ mt7996_beacon_mon_send_probe(struct mt7996_phy *phy, struct mt7996_vif *mvif,
 	if (ieee80211_vif_is_mld(vif))
 		info->control.flags |= u32_encode_bits(link_id, IEEE80211_TX_CTRL_MLO_LINK);
 
-	if (phy->chanctx)
-		band = phy->chanctx->chandef.chan->band;
+	if (phy->mt76->chanctx)
+		band = phy->mt76->chanctx->chandef.chan->band;
 	else
 		band = phy->mt76->chandef.chan->band;
 
@@ -3640,14 +3631,14 @@ void mt7996_beacon_mon_work(struct work_struct *work)
 
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		struct ieee80211_bss_conf *conf;
-		struct mt7996_bss_conf *mconf;
+		struct mt7996_vif_link *mconf;
 		struct mt7996_phy *phy;
 		unsigned long timeout, loss_duration;
 		int band_idx;
 		enum monitor_state state = MON_STATE_BEACON_MON;
 
 		conf = link_conf_dereference_protected(vif, link_id);
-		mconf = mconf_dereference_protected(mvif, link_id);
+		mconf = mt7996_vif_link(dev, vif, link_id);
 		if (!conf || !mconf)
 			continue;
 
diff --git a/mt7996/main.c b/mt7996/main.c
index dcc5255e..48b5a6d0 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -123,8 +123,8 @@ static void mt7996_stop_phy(struct mt7996_phy *phy)
 		return;
 
 	cancel_delayed_work_sync(&phy->mt76->mac_work);
-	cancel_delayed_work_sync(&phy->scan_work);
-	cancel_delayed_work_sync(&phy->roc_complete_work);
+	cancel_delayed_work_sync(&phy->mt76->scan_work);
+	cancel_delayed_work_sync(&phy->mt76->roc_complete_work);
 
 	mutex_lock(&dev->mt76.mutex);
 
@@ -234,7 +234,7 @@ static int get_mld_remap_idx(u64 mask)
 	return -1;
 }
 
-static void mt7996_init_bitrate_mask(struct mt7996_bss_conf *mconf)
+static void mt7996_init_bitrate_mask(struct mt7996_vif_link *mconf)
 {
 	int i;
 
@@ -252,18 +252,16 @@ static void mt7996_init_bitrate_mask(struct mt7996_bss_conf *mconf)
 	}
 }
 
-static void mt7996_remove_bss_conf(struct ieee80211_vif *vif,
-				   struct mt7996_bss_conf *mconf,
-				   int link_id)
+void mt7996_vif_link_remove(struct mt76_phy *mphy, struct ieee80211_vif *vif,
+			    struct ieee80211_bss_conf *link_conf,
+			    struct mt76_vif_link *mlink)
 {
 	struct mt7996_phy *phy;
 	struct mt7996_dev *dev;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_sta_link *mlsta =
-		mlsta_dereference_protected(&mvif->sta, link_id);
-
-	if (!mlsta || !mconf)
-		return;
+	struct mt7996_vif_link *mconf = (struct mt7996_vif_link *)mlink;
+	struct mt7996_sta_link *mlsta = &mconf->mlsta;
+	int link_id = mlsta->wcid.link_id;
 
 	phy = mconf->phy;
 	dev = phy->dev;
@@ -271,7 +269,7 @@ static void mt7996_remove_bss_conf(struct ieee80211_vif *vif,
 	mt76_dbg(&dev->mt76, MT76_DBG_BSS,
 		 "%s: band=%u, bss_idx=%u, link_id=%u, wcid=%u\n",
 		 __func__, mconf->phy->mt76->band_idx, mconf->mt76.idx,
-		 mconf->link_id, mlsta->wcid.idx);
+		 mlsta->wcid.link_id, mlsta->wcid.idx);
 
 	mt7996_mcu_add_sta(dev, vif, NULL, mconf, NULL, mlsta, CONN_STATE_DISCONNECT,
 			   false);
@@ -279,14 +277,14 @@ static void mt7996_remove_bss_conf(struct ieee80211_vif *vif,
 	mt7996_mcu_add_dev_info(phy, NULL, mconf, false);
 
 	rcu_assign_pointer(dev->mt76.wcid[mlsta->wcid.idx], NULL);
-	rcu_assign_pointer(mvif->link[link_id], NULL);
+	rcu_assign_pointer(mvif->mt76.link[link_id], NULL);
 	rcu_assign_pointer(mvif->sta.link[link_id], NULL);
 	if (mconf->mbssid_idx != 0 && mconf->mbssid_idx < MT7996_MAX_MBSSID) {
 		rcu_assign_pointer(phy->mbssid_conf[mconf->mbssid_idx], NULL);
 		mconf->mbssid_idx = 0;
 	}
 
-	mvif->valid_links &= ~BIT(link_id);
+	mvif->mt76.valid_links &= ~BIT(link_id);
 	dev->mt76.vif_mask &= ~BIT_ULL(mconf->mt76.idx);
 	dev->mld_id_mask &= ~BIT_ULL(mconf->own_mld_id);
 	phy->omac_mask &= ~BIT_ULL(mconf->mt76.omac_idx);
@@ -302,23 +300,24 @@ static void mt7996_remove_bss_conf(struct ieee80211_vif *vif,
 		kfree_rcu(mconf, rcu_head);
 }
 
-static int mt7996_add_bss_conf(struct mt7996_phy *phy,
-			       struct ieee80211_vif *vif,
-			       struct ieee80211_bss_conf *conf)
+int mt7996_vif_link_add(struct mt76_phy *mphy, struct ieee80211_vif *vif,
+			struct ieee80211_bss_conf *link_conf,
+			struct mt76_vif_link *mlink)
 {
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_phy *phy = mphy->priv;
 	struct mt7996_dev *dev = phy->dev;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_sta_link *mlsta;
 	struct mt76_txq *mtxq;
 	u8 band_idx = phy->mt76->band_idx;
-	u8 link_id = conf->link_id;
+	u8 link_id = link_conf->link_id;
 	int idx, ret;
 
-	if (rcu_access_pointer(mvif->link[link_id]))
+	if (rcu_access_pointer(mvif->mt76.link[link_id]))
 		return 0;
 
-	if (conf != &vif->bss_conf) {
+	if (link_conf != &vif->bss_conf) {
 		mconf = kzalloc(sizeof(*mconf), GFP_KERNEL);
 		if (!mconf)
 			return -ENOMEM;
@@ -360,12 +359,12 @@ static int mt7996_add_bss_conf(struct mt7996_phy *phy,
 	mconf->phy = phy;
 	mconf->mt76.band_idx = band_idx;
 	mconf->mt76.wmm_idx = vif->type == NL80211_IFTYPE_AP ? 0 : 3;
-	mconf->link_id = link_id;
 	mconf->bpcc = 0;
 	memset(mconf->tsf_offset, 0, sizeof(mconf->tsf_offset));
-	mvif->valid_links |= BIT(link_id);
+	mconf->mt76.mvif = &mvif->mt76;
+	mvif->mt76.valid_links |= BIT(link_id);
 
-	ret = mt7996_mcu_add_dev_info(phy, conf, mconf, true);
+	ret = mt7996_mcu_add_dev_info(phy, link_conf, mconf, true);
 	if (ret)
 		goto error;
 
@@ -377,17 +376,14 @@ static int mt7996_add_bss_conf(struct mt7996_phy *phy,
 	idx = MT7996_WTBL_RESERVED - mconf->mt76.idx;
 
 	INIT_LIST_HEAD(&mlsta->rc_list);
-	INIT_LIST_HEAD(&mlsta->wcid.poll_list);
 	mlsta->wcid.idx = idx;
-	mlsta->wcid.phy_idx = band_idx;
-	mlsta->wcid.hw_key_idx = -1;
 	mlsta->wcid.tx_info |= MT_WCID_TX_INFO_SET;
 	rcu_assign_pointer(mlsta->wcid.def_wcid, &mvif->sta.deflink.wcid);
 	mlsta->wcid.link_id = link_id;
 	mlsta->wcid.link_valid = ieee80211_vif_is_mld(vif);
 	mlsta->sta = &mvif->sta;
 	mlsta->sta->vif = mvif;
-	mt76_wcid_init(&mlsta->wcid);
+	mt76_wcid_init(&mlsta->wcid, band_idx);
 
 	mt7996_mac_wtbl_update(dev, idx,
 			       MT_WTBL_UPDATE_ADM_COUNT_CLEAR);
@@ -408,31 +404,31 @@ static int mt7996_add_bss_conf(struct mt7996_phy *phy,
 		mconf->mt76.basic_rates_idx = MT7996_BASIC_RATES_TBL;
 	mt7996_init_bitrate_mask(mconf);
 
-	mt7996_mcu_add_bss_info(phy, vif, conf, mconf, mlsta, true);
+	mt7996_mcu_add_bss_info(phy, vif, link_conf, mconf, mlsta, true);
 	/* defer the first STA_REC of BMC entry to BSS_CHANGED_BSSID for STA
 	 * interface, since firmware only records BSSID when the entry is new
 	 */
 	if (vif->type != NL80211_IFTYPE_STATION)
-		mt7996_mcu_add_sta(dev, vif, conf, mconf, NULL, mlsta,
+		mt7996_mcu_add_sta(dev, vif, link_conf, mconf, NULL, mlsta,
 				   CONN_STATE_PORT_SECURE, true);
 	rcu_assign_pointer(dev->mt76.wcid[idx], &mlsta->wcid);
-	rcu_assign_pointer(mvif->link[link_id], mconf);
+	rcu_assign_pointer(mvif->mt76.link[link_id], &mconf->mt76);
 	rcu_assign_pointer(mvif->sta.link[link_id], mlsta);
 
-	if (conf->nontransmitted && conf->bssid_index != 0 &&
-	    conf->bssid_index < MT7996_MAX_MBSSID) {
-		rcu_assign_pointer(phy->mbssid_conf[conf->bssid_index], mconf);
-		mconf->mbssid_idx = conf->bssid_index;
+	if (link_conf->nontransmitted && link_conf->bssid_index != 0 &&
+	    link_conf->bssid_index < MT7996_MAX_MBSSID) {
+		rcu_assign_pointer(phy->mbssid_conf[link_conf->bssid_index], mconf);
+		mconf->mbssid_idx = link_conf->bssid_index;
 	}
 
 	mt76_dbg(&dev->mt76, MT76_DBG_BSS,
 		 "%s: band=%u, bss_idx=%u, link_id=%u, wcid=%u\n",
 		 __func__, phy->mt76->band_idx, mconf->mt76.idx,
-		 mconf->link_id, mlsta->wcid.idx);
+		 mlsta->wcid.link_id, mlsta->wcid.idx);
 
 	return 0;
 error:
-	mt7996_remove_bss_conf(vif, mconf, link_id);
+	mt7996_vif_link_remove(mphy, vif, link_conf, &mconf->mt76);
 	return ret;
 }
 
@@ -527,11 +523,12 @@ static int mt7996_add_interface(struct ieee80211_hw *hw,
 	mvif->sta.vif = mvif;
 	/* TODO: temporaily set this to prevent some crashes */
 	mvif->deflink.phy = mt7996_hw_phy(hw);
-	memset(mvif->band_to_link, IEEE80211_LINK_UNSPECIFIED,
-	       sizeof(mvif->band_to_link));
+	mvif->deflink.mt76.mvif = &mvif->mt76;
+	memset(mvif->mt76.band_to_link, IEEE80211_LINK_UNSPECIFIED,
+	       sizeof(mvif->mt76.band_to_link));
 
 	if (vif->type == NL80211_IFTYPE_STATION)
-		err = mt7996_add_bss_conf(mt7996_hw_phy(hw), vif, &vif->bss_conf);
+		err = mt7996_vif_link_add(mt7996_hw_phy(hw)->mt76, vif, &vif->bss_conf, NULL);
 
 out:
 	mutex_unlock(&dev->mt76.mutex);
@@ -559,7 +556,7 @@ static void mt7996_remove_interface(struct ieee80211_hw *hw,
 {
 	struct ieee80211_bss_conf *conf;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mt7996_hw_phy(hw);
 	struct mt7996_radio_data rdata = {};
@@ -568,8 +565,8 @@ static void mt7996_remove_interface(struct ieee80211_hw *hw,
 	ieee80211_iterate_active_interfaces_mtx(hw, 0, mt7996_remove_iter,
 						&rdata);
 
-	cancel_delayed_work_sync(&phy->scan_work);
-	cancel_delayed_work_sync(&phy->roc_complete_work);
+	cancel_delayed_work_sync(&phy->mt76->scan_work);
+	cancel_delayed_work_sync(&phy->mt76->roc_complete_work);
 	cancel_delayed_work(&mvif->beacon_mon_work);
 
 	mutex_lock(&dev->mt76.mutex);
@@ -578,11 +575,11 @@ static void mt7996_remove_interface(struct ieee80211_hw *hw,
 		mt7996_scan_complete(phy, true);
 
 	conf = link_conf_dereference_protected(vif, 0);
-	mconf = mconf_dereference_protected(mvif, 0);
+	mconf = mt7996_vif_link(dev, vif, 0);
 	if (!mconf || !conf)
 		goto out;
 
-	mt7996_remove_bss_conf(vif, mconf, 0);
+	mt7996_vif_link_remove(mconf->phy->mt76, vif, NULL, &mconf->mt76);
 
 	for (i = 0; i < MT7996_MAX_RADIOS; i++) {
 		phy = dev->radio_phy[i];
@@ -650,13 +647,6 @@ out:
 	return ret;
 }
 
-int mt7996_config_channel(struct mt7996_phy *phy, struct cfg80211_chan_def *chandef)
-{
-	bool offchannel = phy->scan_chan != NULL || phy->roc_chan != NULL;;
-
-	return mt76_set_channel(phy->mt76, chandef, offchannel);
-}
-
 static int mt7996_set_key(struct ieee80211_hw *hw, enum set_key_cmd cmd,
 			  struct ieee80211_vif *vif, struct ieee80211_sta *sta,
 			  struct ieee80211_key_conf *key)
@@ -665,7 +655,7 @@ static int mt7996_set_key(struct ieee80211_hw *hw, enum set_key_cmd cmd,
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_sta *msta = sta ? (struct mt7996_sta *)sta->drv_priv :
 				  &mvif->sta;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_sta_link *mlsta;
 	struct ieee80211_bss_conf *conf;
 	u8 *wcid_keyidx;
@@ -697,7 +687,7 @@ static int mt7996_set_key(struct ieee80211_hw *hw, enum set_key_cmd cmd,
 
 	for_each_set_bit(link_id, &add, IEEE80211_MLD_MAX_NUM_LINKS) {
 		conf = link_conf_dereference_protected(vif, link_id);
-		mconf = mconf_dereference_protected(mvif, link_id);
+		mconf = mt7996_vif_link(dev, vif, link_id);
 		mlsta = mlsta_dereference_protected(msta, link_id);
 		wcid_keyidx = &mlsta->wcid.hw_key_idx;
 
@@ -770,8 +760,7 @@ mt7996_conf_tx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	       const struct ieee80211_tx_queue_params *params)
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	static const u8 mq_to_aci[] = {
 		[IEEE80211_AC_VO] = 3,
 		[IEEE80211_AC_VI] = 2,
@@ -780,7 +769,7 @@ mt7996_conf_tx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	};
 
 	mutex_lock(&dev->mt76.mutex);
-	mconf = mconf_dereference_protected(mvif, link_id);
+	mconf = mt7996_vif_link(dev, vif, link_id);
 	if (!mconf) {
 		mutex_unlock(&dev->mt76.mutex);
 		return -EINVAL;
@@ -847,7 +836,7 @@ static void mt7996_configure_filter(struct ieee80211_hw *hw,
 
 static void
 mt7996_update_bss_color(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
-			struct mt7996_bss_conf *mconf,
+			struct mt7996_vif_link *mconf,
 			struct cfg80211_he_bss_color *bss_color)
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
@@ -868,7 +857,7 @@ mt7996_update_bss_color(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 static u8
 mt7996_get_rates_table(struct ieee80211_hw *hw, struct ieee80211_bss_conf *conf,
-		       struct mt7996_bss_conf *mconf, bool beacon, bool mcast)
+		       struct mt7996_vif_link *mconf, bool beacon, bool mcast)
 {
 #define FR_RATE_IDX_OFDM_6M 0x004b
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
@@ -904,7 +893,7 @@ mt7996_get_rates_table(struct ieee80211_hw *hw, struct ieee80211_bss_conf *conf,
 
 static void
 mt7996_update_mu_group(struct ieee80211_hw *hw, struct ieee80211_bss_conf *conf,
-		       struct mt7996_bss_conf *mconf)
+		       struct mt7996_vif_link *mconf)
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	u8 band = mconf->mt76.band_idx;
@@ -936,8 +925,8 @@ static void mt7996_vif_cfg_changed(struct ieee80211_hw *hw,
 		for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 			struct ieee80211_bss_conf *conf =
 				link_conf_dereference_protected(vif, link_id);
-			struct mt7996_bss_conf *mconf =
-				mconf_dereference_protected(mvif, link_id);
+			struct mt7996_vif_link *mconf =
+				mt7996_vif_link(dev, vif, link_id);
 			struct mt7996_sta_link *mlsta =
 				mlsta_dereference_protected(&mvif->sta, link_id);
 
@@ -962,13 +951,13 @@ static void mt7996_get_tsf_offset(struct ieee80211_vif *vif,
 				  struct mt7996_dev *dev)
 {
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *rpted_mconf;
+	struct mt7996_vif_link *rpted_mconf;
 	unsigned long valid_links = vif->valid_links;
 	unsigned int rpting_linkid, rpted_linkid;
 
 	for_each_set_bit(rpted_linkid, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 
-		rpted_mconf = mconf_dereference_protected(mvif, rpted_linkid);
+		rpted_mconf = mt7996_vif_link(dev, vif, rpted_linkid);
 		if (!rpted_mconf)
 			return;
 
@@ -990,14 +979,14 @@ static void mt7996_link_info_changed(struct ieee80211_hw *hw,
 				     u64 changed)
 {
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_sta_link *mlsta;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy;
 
 	mutex_lock(&dev->mt76.mutex);
 
-	mconf = mconf_dereference_protected(mvif, info->link_id);
+	mconf = mt7996_vif_link(dev, vif, info->link_id);
 	mlsta = mlsta_dereference_protected(&mvif->sta, info->link_id);
 	if (!mconf || !mlsta)
 		goto out;
@@ -1073,14 +1062,13 @@ out:
 int mt7996_get_txpower(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		       unsigned int link_id, int *dbm)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct mt7996_vif_link *mconf;
 	struct mt76_phy *mphy;
 	int delta;
 
 	mutex_lock(&dev->mt76.mutex);
-	mconf = mconf_dereference_protected(mvif, link_id);
+	mconf = mt7996_vif_link(dev, vif, link_id);
 	if (!mconf || !mconf->phy) {
 		*dbm = 0;
 		goto out;
@@ -1105,12 +1093,12 @@ mt7996_channel_switch_beacon(struct ieee80211_hw *hw,
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_phy *phy = mt7996_band_phy(dev, chandef->chan->band);
 	struct ieee80211_bss_conf *conf;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	u16 valid_links = vif->valid_links ?: BIT(0);
 	unsigned int link_id;
 
 	mutex_lock(&dev->mt76.mutex);
-	link_id = mvif->band_to_link[phy->mt76->band_idx];
+	link_id = mvif->mt76.band_to_link[phy->mt76->band_idx];
 	if (link_id == IEEE80211_LINK_UNSPECIFIED)
 		goto out;
 
@@ -1124,7 +1112,7 @@ mt7996_channel_switch_beacon(struct ieee80211_hw *hw,
 	link_id = mvif->cs_link_id;
 	do {
 		valid_links &= ~BIT(link_id);
-		mconf = mconf_dereference_protected(mvif, link_id);
+		mconf = mt7996_vif_link(dev, vif, link_id);
 		conf = link_conf_dereference_protected(vif, link_id);
 		if (!conf || !mconf)
 			goto fail;
@@ -1161,13 +1149,13 @@ mt7996_post_channel_switch(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	if (ret <= 0)
 		return ret;
 
-	return mt7996_config_channel(phy, chandef);
+	return mt76_set_channel(phy->mt76, chandef, false);
 }
 
 static void mt7996_remove_link_sta(struct mt7996_dev *dev,
 				   struct ieee80211_vif *vif,
 				   struct ieee80211_bss_conf *conf,
-				   struct mt7996_bss_conf *mconf,
+				   struct mt7996_vif_link *mconf,
 				   struct ieee80211_sta *sta,
 				   struct ieee80211_link_sta *link_sta,
 				   struct mt7996_sta_link *mlsta,
@@ -1207,7 +1195,6 @@ static void mt7996_remove_link_sta(struct mt7996_dev *dev,
 
 	mt76_wcid_cleanup(&dev->mt76, &mlsta->wcid);
 	mt76_wcid_mask_clear(dev->mt76.wcid_mask, mlsta->wcid.idx);
-	mt76_wcid_mask_clear(dev->mt76.wcid_phy_mask, mlsta->wcid.idx);
 
 	if (mlsta != &msta->deflink)
 		kfree_rcu(mlsta, rcu_head);
@@ -1215,7 +1202,7 @@ static void mt7996_remove_link_sta(struct mt7996_dev *dev,
 
 static int mt7996_add_link_sta(struct mt7996_dev *dev,
 			       struct ieee80211_bss_conf *conf,
-			       struct mt7996_bss_conf *mconf,
+			       struct mt7996_vif_link *mconf,
 			       struct ieee80211_link_sta *link_sta, bool assoc)
 {
 	struct ieee80211_sta *sta = link_sta->sta;
@@ -1239,12 +1226,10 @@ static int mt7996_add_link_sta(struct mt7996_dev *dev,
 		}
 
 		INIT_LIST_HEAD(&mlsta->rc_list);
-		INIT_LIST_HEAD(&mlsta->wcid.poll_list);
 		msta->vif = mvif;
 		msta->valid_links |= BIT(link_id);
 		mlsta->wcid.sta = 1;
 		mlsta->wcid.idx = idx;
-		mlsta->wcid.phy_idx = mconf->phy->mt76->band_idx;
 		mlsta->wcid.tx_info |= MT_WCID_TX_INFO_SET;
 		rcu_assign_pointer(mlsta->wcid.def_wcid, &msta->deflink.wcid);
 		mlsta->sta = msta;
@@ -1261,10 +1246,8 @@ static int mt7996_add_link_sta(struct mt7996_dev *dev,
 		rcu_assign_pointer(msta->link[link_id], mlsta);
 
 		ewma_signal_init(&mlsta->wcid.rssi);
-		if (mconf->phy->mt76->band_idx == MT_BAND1)
-			mt76_wcid_mask_set(dev->mt76.wcid_phy_mask, idx);
 		rcu_assign_pointer(dev->mt76.wcid[idx], &mlsta->wcid);
-		mt76_wcid_init(&mlsta->wcid);
+		mt76_wcid_init(&mlsta->wcid, mconf->phy->mt76->band_idx);
 
 		mt76_dbg(&dev->mt76, MT76_DBG_STA,
 			 "%s: STA %pM, wcid=%u, link_id=%u (%pM), pri_link=%u, sec_link=%u\n",
@@ -1320,8 +1303,8 @@ mt7996_mac_sta_remove_links(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 
 	mt76_dbg(&dev->mt76, MT76_DBG_STA, "%s: removed_links=0x%lx\n", __func__, rem);
 	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, link_id);
+		struct mt7996_vif_link *mconf =
+			mt7996_vif_link(dev, vif, link_id);
 		struct mt7996_sta_link *mlsta =
 			mlsta_dereference_protected(msta, link_id);
 		struct ieee80211_bss_conf *conf =
@@ -1334,6 +1317,7 @@ mt7996_mac_sta_remove_links(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 
 		mt7996_remove_link_sta(dev, vif, conf, mconf, sta, link_sta,
 				       mlsta, msta->valid_links == BIT(link_id));
+		mconf->phy->mt76->num_sta--;
 	}
 }
 
@@ -1342,7 +1326,6 @@ mt7996_mac_sta_add_links(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 			 struct ieee80211_sta *sta, unsigned long add,
 			 bool assoc)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
 	struct mt7996_sta_link *mlsta;
 	unsigned int link_id;
@@ -1351,8 +1334,8 @@ mt7996_mac_sta_add_links(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 	mt76_dbg(&dev->mt76, MT76_DBG_STA,
 		 "%s: added_links=0x%lx, assoc=%d\n", __func__, add, assoc);
 	for_each_set_bit(link_id, &add, IEEE80211_MLD_MAX_NUM_LINKS) {
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, link_id);
+		struct mt7996_vif_link *mconf =
+			mt7996_vif_link(dev, vif, link_id);
 		struct ieee80211_bss_conf *conf =
 			link_conf_dereference_protected(vif, link_id);
 		struct ieee80211_link_sta *link_sta =
@@ -1364,6 +1347,7 @@ mt7996_mac_sta_add_links(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 		ret = mt7996_add_link_sta(dev, conf, mconf, link_sta, assoc);
 		if (ret)
 			goto error;
+		mconf->phy->mt76->num_sta++;
 	}
 
 	if (!assoc)
@@ -1389,9 +1373,8 @@ int mt7996_mac_sta_add(struct mt76_dev *mdev, struct ieee80211_vif *vif,
 		       struct ieee80211_sta *sta)
 {
 	struct mt7996_dev *dev = container_of(mdev, struct mt7996_dev, mt76);
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	u8 link_id = sta->valid_links ? __ffs(sta->valid_links) : 0;
 	unsigned long add = BIT(link_id);
 	int ret;
@@ -1406,7 +1389,7 @@ int mt7996_mac_sta_add(struct mt76_dev *mdev, struct ieee80211_vif *vif,
 		return ret;
 
 #ifdef CONFIG_MTK_VENDOR
-	mconf = mconf_dereference_protected(mvif, link_id);
+	mconf = mt7996_vif_link(dev, vif, link_id);
 	mt7996_vendor_amnt_sta_remove(mconf->phy, sta);
 #endif
 
@@ -1444,7 +1427,6 @@ int mt7996_mac_sta_event(struct mt76_dev *mdev, struct ieee80211_vif *vif,
 			 struct ieee80211_sta *sta, enum mt76_sta_event ev)
 {
 	struct mt7996_dev *dev = container_of(mdev, struct mt7996_dev, mt76);
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
 	unsigned long add = sta->valid_links ?: BIT(0);
 	int ret = 0, link_id;
@@ -1460,8 +1442,8 @@ int mt7996_mac_sta_event(struct mt76_dev *mdev, struct ieee80211_vif *vif,
 		break;
 	case MT76_STA_EVENT_AUTHORIZE:
 		for_each_set_bit(link_id, &add, IEEE80211_MLD_MAX_NUM_LINKS) {
-			struct mt7996_bss_conf *mconf =
-				mconf_dereference_protected(mvif, link_id);
+			struct mt7996_vif_link *mconf =
+				mt7996_vif_link(dev, vif, link_id);
 			struct mt7996_sta_link *mlsta =
 				mlsta_dereference_protected(msta, link_id);
 			struct ieee80211_bss_conf *conf =
@@ -1554,7 +1536,7 @@ static void mt7996_tx(struct ieee80211_hw *hw,
 	rcu_read_lock();
 	if (mvif && msta) {
 		struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
-		struct mt7996_bss_conf *mconf;
+		struct mt7996_vif_link *mconf;
 		struct mt7996_sta_link *mlsta;
 		u8 link_id = u32_get_bits(info->control.flags,
 					  IEEE80211_TX_CTRL_MLO_LINK);
@@ -1567,7 +1549,7 @@ static void mt7996_tx(struct ieee80211_hw *hw,
 				peer = (struct mt7996_sta *)sta->drv_priv;
 				link_id = peer->pri_link;
 			} else {
-				link_id = mvif->master_link_id;
+				link_id = mvif->mt76.deflink_id;
 			}
 		}
 
@@ -1607,7 +1589,7 @@ static void mt7996_tx(struct ieee80211_hw *hw,
 				memcpy(hdr->addr3, conf->addr, ETH_ALEN);
 		}
 
-		mconf = rcu_dereference(mvif->link[link_id]);
+		mconf = (struct mt7996_vif_link *)rcu_dereference(mvif->mt76.link[link_id]);
 		mlsta = rcu_dereference(msta->link[link_id]);
 
 		if (!mconf || !mlsta)
@@ -1738,7 +1720,7 @@ mt7996_get_stats(struct ieee80211_hw *hw,
 	return 0;
 }
 
-u64 __mt7996_get_tsf(struct ieee80211_hw *hw, struct mt7996_bss_conf *mconf)
+u64 __mt7996_get_tsf(struct ieee80211_hw *hw, struct mt7996_vif_link *mconf)
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mconf->phy;
@@ -1764,9 +1746,8 @@ u64 __mt7996_get_tsf(struct ieee80211_hw *hw, struct mt7996_bss_conf *mconf)
 static u64
 mt7996_get_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	u64 ret = -1ULL;
 	int i;
 
@@ -1775,7 +1756,7 @@ mt7996_get_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
 	 * (i.e., link 0 is doing ACS while link 1 queries tsf)
 	 */
 	for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++) {
-		mconf = mconf_dereference_protected(mvif, i);
+		mconf = mt7996_vif_link(dev, vif, i);
 		if (mconf)
 			break;
 	}
@@ -1793,7 +1774,7 @@ mt7996_set_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	union {
 		u64 t64;
 		u32 t32[2];
@@ -1802,7 +1783,7 @@ mt7996_set_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	mutex_lock(&dev->mt76.mutex);
 
-	mconf = mconf_dereference_protected(mvif, mvif->master_link_id);
+	mconf = mt7996_vif_link(dev, vif, mvif->mt76.deflink_id);
 	if (!mconf)
 		return;
 	phy = mconf->phy;
@@ -1824,7 +1805,7 @@ mt7996_offset_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	union {
 		u64 t64;
 		u32 t32[2];
@@ -1833,7 +1814,7 @@ mt7996_offset_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	mutex_lock(&dev->mt76.mutex);
 
-	mconf = mconf_dereference_protected(mvif, mvif->master_link_id);
+	mconf = mt7996_vif_link(dev, vif, mvif->mt76.deflink_id);
 	if (!mconf)
 		return;
 	phy = mconf->phy;
@@ -1962,9 +1943,8 @@ static void mt7996_sta_link_statistics(struct ieee80211_hw *hw,
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_sta_link *mlsta;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt76_sta_stats *stats;
 	int i;
 
@@ -1974,7 +1954,7 @@ static void mt7996_sta_link_statistics(struct ieee80211_hw *hw,
 		goto out;
 	stats = &mlsta->wcid.stats;
 
-	mconf = mconf_dereference_protected(mvif, link_id);
+	mconf = mt7996_vif_link(dev, vif, link_id);
 	if (!mconf)
 		goto out;
 
@@ -2083,17 +2063,16 @@ mt7996_set_bitrate_mask(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			const struct cfg80211_bitrate_mask *mask,
 			unsigned int link_id)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_phy *phy = mt7996_hw_phy(hw);
 	struct mt7996_dev *dev = phy->dev;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_sta_rc_work_data data = {
 		.link_id = link_id,
 		.changed = IEEE80211_RC_SUPP_RATES_CHANGED,
 	};
 
 	mutex_lock(&dev->mt76.mutex);
-	mconf = mconf_dereference_protected(mvif, link_id);
+	mconf = mt7996_vif_link(dev, vif, link_id);
 
 	if (!mconf) {
 		mutex_unlock(&dev->mt76.mutex);
@@ -2123,15 +2102,14 @@ static void mt7996_sta_set_4addr(struct ieee80211_hw *hw,
 				 bool enabled)
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
 	unsigned long valid_links = sta->valid_links ?: BIT(0);
 	unsigned int link_id;
 
 	mutex_lock(&dev->mt76.mutex);
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, link_id);
+		struct mt7996_vif_link *mconf =
+			mt7996_vif_link(dev, vif, link_id);
 		struct mt7996_sta_link *mlsta =
 			mlsta_dereference_protected(msta, link_id);
 
@@ -2157,15 +2135,14 @@ static void mt7996_sta_set_decap_offload(struct ieee80211_hw *hw,
 					 bool enabled)
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
 	unsigned long valid_links = sta->valid_links ?: BIT(0);
 	unsigned int link_id;
 
 	mutex_lock(&dev->mt76.mutex);
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, link_id);
+		struct mt7996_vif_link *mconf =
+			mt7996_vif_link(dev, vif, link_id);
 		struct mt7996_sta_link *mlsta =
 			mlsta_dereference_protected(msta, link_id);
 
@@ -2311,11 +2288,13 @@ static void mt7996_ethtool_worker(void *wi_data, struct ieee80211_sta *sta)
 {
 	struct mt76_ethtool_worker_info *wi = wi_data;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
+	struct mt7996_vif *mvif = msta->vif;
 	struct mt7996_sta_link *mlsta;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
+	struct ieee80211_vif *vif = container_of((void *)mvif, struct ieee80211_vif, drv_priv);
 
 	mlsta = mlsta_dereference_protected(msta, msta->pri_link);
-	mconf = mconf_dereference_protected(msta->vif, msta->pri_link);
+	mconf = mt7996_vif_link(mvif->dev, vif, msta->pri_link);
 
 	if (mconf->mt76.idx != wi->idx)
 		return;
@@ -2331,7 +2310,7 @@ void mt7996_get_et_stats(struct ieee80211_hw *hw,
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mt7996_hw_phy(hw);
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt76_mib_stats *mib = &phy->mib;
 	struct mt76_ethtool_worker_info wi = {
 		.data = data,
@@ -2343,7 +2322,7 @@ void mt7996_get_et_stats(struct ieee80211_hw *hw,
 		return;
 
 	mutex_lock(&dev->mt76.mutex);
-	mconf = mconf_dereference_protected(mvif, mvif->master_link_id);
+	mconf = mt7996_vif_link(dev, vif, mvif->mt76.deflink_id);
 	wi.idx = mconf->mt76.idx,
 
 	mt7996_mac_update_stats(phy);
@@ -2556,13 +2535,13 @@ mt7996_net_fill_forward_path(struct ieee80211_hw *hw,
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mtk_wed_device *wed = &dev->mt76.mmio.wed;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_sta_link *mlsta;
 	u8 link_id;
 	u8 dscp = path->mtk_wdma.tid >> 2;
 
 	link_id = msta->pri_link;
-	mconf = rcu_dereference(mvif->link[link_id]);
+	mconf = (struct mt7996_vif_link *)rcu_dereference(mvif->mt76.link[link_id]);
 	mlsta = rcu_dereference(msta->link[link_id]);
 
 	if (!mlsta || !mconf || mlsta->wcid.idx > MT7996_WTBL_STA)
@@ -2625,13 +2604,13 @@ void mt7996_scan_complete(struct mt7996_phy *phy, bool aborted)
 
 	mvif = (struct mt7996_vif *)vif->drv_priv;
 	if (ieee80211_vif_is_mld(vif)) {
-		struct mt7996_bss_conf *mconf;
+		struct mt7996_vif_link *mconf;
 
 		for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++) {
-			mconf = mconf_dereference_protected(mvif, i);
+			mconf = mt7996_vif_link(phy->dev, vif, i);
 
 			if (mconf && mconf->phy == phy && mconf == &mvif->deflink)
-				mt7996_remove_bss_conf(vif, &mvif->deflink, i);
+				mt7996_vif_link_remove(phy->mt76, vif, NULL, &mvif->deflink.mt76);
 		}
 	}
 
@@ -2652,7 +2631,7 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mt7996_band_phy(dev, req->channels[0]->band);
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	int ret;
 
 	mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s: trigger scan on mt76 band %u\n",
@@ -2669,15 +2648,15 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	phy->scan_chan_idx = 0;
 
 	if (!ieee80211_vif_is_mld(vif)) {
-		mconf = mconf_dereference_protected(mvif, 0);
+		mconf = mt7996_vif_link(dev, vif, 0);
 
 		if (mconf && mconf->phy != phy) {
-			mt7996_remove_bss_conf(vif, &mvif->deflink, 0);
+			mt7996_vif_link_remove(phy->mt76, vif, NULL, &mvif->deflink.mt76);
 			mconf = NULL;
 		}
 
 		if (!mconf) {
-			ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+			ret = mt7996_vif_link_add(phy->mt76, vif, &vif->bss_conf, NULL);
 			if (ret) {
 				mutex_unlock(&phy->dev->mt76.mutex);
 				return ret;
@@ -2691,7 +2670,7 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 		for_each_set_bit(link_id, &valid_links,
 				 IEEE80211_MLD_MAX_NUM_LINKS) {
-			mconf = mconf_dereference_protected(mvif, link_id);
+			mconf = mt7996_vif_link(dev, vif, link_id);
 			if (mconf && mconf->phy == phy) {
 				found = true;
 				break;
@@ -2704,7 +2683,7 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 				 * Here we use the default link to perform scan.
 				 */
 				memcpy(&vif->bss_conf, link_conf, sizeof(struct ieee80211_bss_conf));
-				ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+				ret = mt7996_vif_link_add(phy->mt76, vif, &vif->bss_conf, NULL);
 				found = true;
 				break;
 			}
@@ -2727,7 +2706,7 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			for (link_id = 0;
 			     link_id < IEEE80211_MLD_MAX_NUM_LINKS;
 			     link_id++) {
-				if (!rcu_access_pointer(mvif->link[link_id]))
+				if (!rcu_access_pointer(mvif->mt76.link[link_id]))
 					break;
 			}
 
@@ -2737,7 +2716,7 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			}
 
 			vif->bss_conf.link_id = link_id;
-			ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+			ret = mt7996_vif_link_add(phy->mt76, vif, &vif->bss_conf, NULL);
 			if (ret) {
 				mutex_unlock(&phy->dev->mt76.mutex);
 				return ret;
@@ -2748,7 +2727,7 @@ mt7996_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	set_bit(MT76_SCANNING, &phy->mt76->state);
 	mutex_unlock(&phy->dev->mt76.mutex);
 
-	ieee80211_queue_delayed_work(phy->mt76->hw, &phy->scan_work, 0);
+	ieee80211_queue_delayed_work(phy->mt76->hw, &phy->mt76->scan_work, 0);
 
 	return 0;
 }
@@ -2770,7 +2749,7 @@ mt7996_cancel_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
 		if (!test_bit(MT76_SCANNING, &phy->mt76->state))
 			continue;
 
-		cancel_delayed_work_sync(&phy->scan_work);
+		cancel_delayed_work_sync(&phy->mt76->scan_work);
 
 		mutex_lock(&phy->dev->mt76.mutex);
 		mt7996_scan_complete(phy, true);
@@ -2788,9 +2767,11 @@ void mt7996_roc_complete_work(struct work_struct *work)
 	struct ieee80211_hw *hw;
 	struct mt7996_vif *mvif;
 	struct mt7996_phy *phy;
+	struct mt76_phy *mphy;
 	int i;
 
-	phy = container_of(work, struct mt7996_phy, roc_complete_work.work);
+	mphy = container_of(work, struct mt76_phy, roc_complete_work.work);
+	phy = mphy->priv;
 	vif = phy->roc_vif;
 	mvif = (struct mt7996_vif *)vif->drv_priv;
 	hw = phy->mt76->hw;
@@ -2807,13 +2788,13 @@ void mt7996_roc_complete_work(struct work_struct *work)
 	clear_bit(MT76_STATE_ROC, &phy->mt76->state);
 
 	if (ieee80211_vif_is_mld(vif)) {
-		struct mt7996_bss_conf *mconf;
+		struct mt7996_vif_link *mconf;
 
 		for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++) {
-			mconf = mconf_dereference_protected(mvif, i);
+			mconf = mt7996_vif_link(phy->dev, vif, i);
 
 			if (mconf && mconf->phy == phy && mconf == &mvif->deflink) {
-				mt7996_remove_bss_conf(vif, &mvif->deflink, i);
+				mt7996_vif_link_remove(phy->mt76, vif, NULL, &mvif->deflink.mt76);
 				break;
 			}
 		}
@@ -2821,10 +2802,10 @@ void mt7996_roc_complete_work(struct work_struct *work)
 
 	mutex_unlock(&phy->dev->mt76.mutex);
 
-	chandef = phy->chanctx ? &phy->chanctx->chandef : &phy->mt76->chandef;
+	chandef = phy->mt76->chanctx ? &phy->mt76->chanctx->chandef : &phy->mt76->chandef;
 	wiphy_info(hw->wiphy, "finish roc work, go back to freq=%u\n",
 			chandef->chan->center_freq);
-	mt7996_config_channel(phy, chandef);
+	mt76_set_channel(phy->mt76, chandef, false);
 	ieee80211_remain_on_channel_expired(hw);
 }
 
@@ -2835,7 +2816,7 @@ mt7996_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct cfg80211_chan_def chandef = {};
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_vif *mvif;
 	struct mt7996_phy *phy;
 	int ret;
@@ -2858,7 +2839,7 @@ mt7996_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	}
 
 	if (!ieee80211_vif_is_mld(vif)) {
-		mconf = mconf_dereference_protected(mvif, 0);
+		mconf = mt7996_vif_link(dev, vif, 0);
 		if (!mconf || mconf->phy != phy) {
 			ret = -EINVAL;
 			goto error_unlock;
@@ -2870,7 +2851,7 @@ mt7996_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 		for_each_set_bit(link_id, &valid_links,
 				 IEEE80211_MLD_MAX_NUM_LINKS) {
-			mconf = mconf_dereference_protected(mvif, link_id);
+			mconf = mt7996_vif_link(dev, vif, link_id);
 			if (mconf && mconf->phy == phy) {
 				found = true;
 				break;
@@ -2887,7 +2868,7 @@ mt7996_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			for (link_id = 0;
 			     link_id < IEEE80211_MLD_MAX_NUM_LINKS;
 			     link_id++) {
-				if (!rcu_access_pointer(mvif->link[link_id]))
+				if (!rcu_access_pointer(mvif->mt76.link[link_id]))
 					break;
 			}
 
@@ -2897,7 +2878,7 @@ mt7996_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			}
 
 			vif->bss_conf.link_id = link_id;
-			ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+			ret = mt7996_vif_link_add(phy->mt76, vif, &vif->bss_conf, NULL);
 			if (ret)
 				goto error_unlock;
 		}
@@ -2912,10 +2893,10 @@ mt7996_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	mutex_unlock(&phy->dev->mt76.mutex);
 
 	cfg80211_chandef_create(&chandef, chan, NL80211_CHAN_HT20);
-	mt7996_config_channel(phy, &chandef);
+	mt76_set_channel(phy->mt76, &chandef, true);
 	ieee80211_ready_on_channel(hw);
 
-	ieee80211_queue_delayed_work(phy->mt76->hw, &phy->roc_complete_work,
+	ieee80211_queue_delayed_work(phy->mt76->hw, &phy->mt76->roc_complete_work,
 				     msecs_to_jiffies(duration));
 
 	return 0;
@@ -2940,8 +2921,8 @@ mt7996_cancel_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *v
 		if (!phy || !test_bit(MT76_STATE_ROC, &phy->mt76->state))
 			continue;
 
-		cancel_delayed_work_sync(&phy->roc_complete_work);
-		ieee80211_queue_delayed_work(phy->mt76->hw, &phy->roc_complete_work, 0);
+		cancel_delayed_work_sync(&phy->mt76->roc_complete_work);
+		ieee80211_queue_delayed_work(phy->mt76->hw, &phy->mt76->roc_complete_work, 0);
 	}
 	return 0;
 }
@@ -2951,7 +2932,7 @@ mt7996_add_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mt7996_band_phy(dev, conf->def.chan->band);
-	struct mt7996_chanctx *ctx = mt7996_chanctx_get(conf);
+	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
 	int ret;
 
 	mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s: add %u on mt76 band %d\n",
@@ -2965,13 +2946,13 @@ mt7996_add_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
 
 	ctx->assigned = true;
 	ctx->chandef = conf->def;
-	ctx->phy = phy;
-	if (phy->chanctx) {
+	ctx->phy = phy->mt76;
+	if (phy->mt76->chanctx) {
 		mutex_unlock(&phy->dev->mt76.mutex);
 		return 0;
 	}
 
-	phy->chanctx = ctx;
+	phy->mt76->chanctx = ctx;
 	phy->mt76->radar_enabled = conf->radar_enabled;
 	mutex_unlock(&phy->dev->mt76.mutex);
 
@@ -2985,26 +2966,26 @@ mt7996_add_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
 	if (ret)
 		return ret;
 
-	return mt7996_config_channel(phy, &ctx->chandef);
+	return mt76_set_channel(phy->mt76, &ctx->chandef, false);
 }
 
 static void
 mt7996_remove_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
 {
-	struct mt7996_chanctx *ctx = mt7996_chanctx_get(conf);
-	struct mt7996_phy *phy = ctx->phy;
+	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
+	struct mt7996_phy *phy = ctx->phy->priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 
 	mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s: remove %u\n",
 		 __func__, conf->def.chan->hw_value);
-	cancel_delayed_work_sync(&phy->scan_work);
-	cancel_delayed_work_sync(&phy->roc_complete_work);
+	cancel_delayed_work_sync(&phy->mt76->scan_work);
+	cancel_delayed_work_sync(&phy->mt76->roc_complete_work);
 	cancel_delayed_work_sync(&phy->mt76->mac_work);
 
 	mutex_lock(&phy->dev->mt76.mutex);
 	ctx->assigned = false;
-	if (ctx == phy->chanctx) {
-		phy->chanctx = NULL;
+	if (ctx == phy->mt76->chanctx) {
+		phy->mt76->chanctx = NULL;
 		phy->mt76->radar_enabled = false;
 	}
 	mutex_unlock(&phy->dev->mt76.mutex);
@@ -3014,16 +2995,16 @@ static void
 mt7996_change_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf,
 		      u32 changed)
 {
-	struct mt7996_chanctx *ctx = mt7996_chanctx_get(conf);
+	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_phy *phy = ctx->phy;
+	struct mt7996_phy *phy = ctx->phy->priv;
 
 	if (changed & IEEE80211_CHANCTX_CHANGE_WIDTH ||
 	    changed & IEEE80211_CHANCTX_CHANGE_RADAR) {
 		ctx->chandef = conf->def;
 		phy->mt76->radar_enabled = conf->radar_enabled;
 
-		mt7996_config_channel(phy, &ctx->chandef);
+		mt76_set_channel(phy->mt76, &ctx->chandef, false);
 
 		mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s: change to %u, 0x%x\n",
 			 __func__, conf->def.chan->hw_value, changed);
@@ -3035,11 +3016,11 @@ mt7996_assign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			  struct ieee80211_bss_conf *link_conf,
 			  struct ieee80211_chanctx_conf *conf)
 {
-	struct mt7996_chanctx *ctx = mt7996_chanctx_get(conf);
+	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_phy *phy = ctx->phy;
+	struct mt7996_phy *phy = ctx->phy->priv;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	u8 link_id = link_conf->link_id;
 	int ret;
 
@@ -3048,28 +3029,28 @@ mt7996_assign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	mutex_lock(&phy->dev->mt76.mutex);
 
-	mconf = mconf_dereference_protected(mvif, link_id);
+	mconf = mt7996_vif_link(dev, vif, link_id);
 
 	/* Remove bss conf when change non-MLO interface to MLO interface */
 	if (ieee80211_vif_is_mld(vif) && mconf == &mvif->deflink)
-		mt7996_remove_bss_conf(vif, mconf, link_id);
+		mt7996_vif_link_remove(phy->mt76, vif, NULL, &mconf->mt76);
 	else if (mconf && phy != mconf->phy)
 		dev_err(phy->dev->mt76.dev,
 			"%s: error: change link[%d] from phy%d to phy%d",
 			__func__, link_id, mconf->phy->mt76->band_idx,
 			phy->mt76->band_idx);
 
-	ret = mt7996_add_bss_conf(phy, vif, link_conf);
+	ret = mt7996_vif_link_add(phy->mt76, vif, link_conf, NULL);
 	if (ret) {
 		mutex_unlock(&phy->dev->mt76.mutex);
 		return ret;
 	}
 
 	ctx->nbss_assigned++;
-	mvif->band_to_link[phy->mt76->band_idx] = link_id;
+	mvif->mt76.band_to_link[phy->mt76->band_idx] = link_id;
 
 	if (mt7996_hw_phy(hw) == phy)
-		mvif->master_link_id = link_id;
+		mvif->mt76.deflink_id = link_id;
 
 	mutex_unlock(&phy->dev->mt76.mutex);
 
@@ -3081,14 +3062,14 @@ mt7996_unassign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			    struct ieee80211_bss_conf *link_conf,
 			    struct ieee80211_chanctx_conf *conf)
 {
-	struct mt7996_chanctx *ctx = mt7996_chanctx_get(conf);
-	struct mt7996_phy *phy = ctx->phy;
+	struct mt76_chanctx *ctx = (struct mt76_chanctx *)conf->drv_priv;
+	struct mt7996_phy *phy = ctx->phy->priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 
 	mt76_dbg(&dev->mt76, MT76_DBG_CHAN, "%s, remove link %u from %d MHz\n",
 		 __func__, link_conf->link_id, conf->def.chan->center_freq);
-	cancel_delayed_work_sync(&phy->scan_work);
-	cancel_delayed_work_sync(&phy->roc_complete_work);
+	cancel_delayed_work_sync(&phy->mt76->scan_work);
+	cancel_delayed_work_sync(&phy->mt76->roc_complete_work);
 
 	mutex_lock(&phy->dev->mt76.mutex);
 
@@ -3107,8 +3088,8 @@ mt7996_switch_vif_chanctx(struct ieee80211_hw *hw,
 			  enum ieee80211_chanctx_switch_mode mode)
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_chanctx *old_ctx;
-	struct mt7996_chanctx *new_ctx;
+	struct mt76_chanctx *old_ctx;
+	struct mt76_chanctx *new_ctx;
 	struct mt7996_phy *phy;
 	int i, ret = 0;
 	u8 omac_idx;
@@ -3130,27 +3111,27 @@ mt7996_switch_vif_chanctx(struct ieee80211_hw *hw,
 
 		mutex_lock(&dev->mt76.mutex);
 
-		old_ctx = mt7996_chanctx_get(vifs[i].old_ctx);
-		new_ctx = mt7996_chanctx_get(vifs[i].new_ctx);
-		phy = old_ctx->phy;
+		old_ctx = (struct mt76_chanctx *)vifs[i].old_ctx->drv_priv;
+		new_ctx = (struct mt76_chanctx *)vifs[i].new_ctx->drv_priv;
+		phy = old_ctx->phy->priv;
 
-		if (new_ctx->nbss_assigned && phy->chanctx == new_ctx) {
+		if (new_ctx->nbss_assigned && phy->mt76->chanctx == new_ctx) {
 			new_ctx->nbss_assigned++;
 			mutex_unlock(&dev->mt76.mutex);
 			continue;
 		}
 
-		if (WARN_ON(old_ctx != phy->chanctx)) {
+		if (WARN_ON(old_ctx != phy->mt76->chanctx)) {
 			ret = -EINVAL;
 			mutex_unlock(&dev->mt76.mutex);
 			goto out;
 		}
 
-		phy->chanctx = new_ctx;
+		phy->mt76->chanctx = new_ctx;
 		phy->mt76->radar_enabled = vifs[i].new_ctx->radar_enabled;
 		new_ctx->assigned = true;
 		new_ctx->chandef = vifs[i].new_ctx->def;
-		new_ctx->phy = phy;
+		new_ctx->phy = phy->mt76;
 		new_ctx->nbss_assigned++;
 
 		mutex_unlock(&dev->mt76.mutex);
@@ -3166,7 +3147,7 @@ mt7996_switch_vif_chanctx(struct ieee80211_hw *hw,
 		if (ret)
 			goto out;
 
-		ret = mt7996_config_channel(phy, &new_ctx->chandef);
+		ret = mt76_set_channel(phy->mt76, &new_ctx->chandef, false);
 		if (ret)
 			goto out;
 	}
@@ -3183,7 +3164,7 @@ mt7996_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mt7996_hw_phy(hw);
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	unsigned long rem = old_links & ~new_links & ~vif->dormant_links;
 	unsigned long add = new_links & ~old_links;
 	int link_id, ret = 0;
@@ -3204,7 +3185,7 @@ mt7996_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			goto out;
 
 		for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
-			mconf = mconf_dereference_protected(mvif, link_id);
+			mconf = mt7996_vif_link(dev, vif, link_id);
 			if (!mconf)
 				continue;
 
@@ -3219,7 +3200,7 @@ mt7996_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		struct ieee80211_bss_conf *conf =
 			link_conf_dereference_protected(vif, link_id);
 
-		mconf =	mconf_dereference_protected(mvif, link_id);
+		mconf =	mt7996_vif_link(dev, vif, link_id);
 		if (!mconf)
 			continue;
 
@@ -3229,11 +3210,11 @@ mt7996_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 	}
 
 	if (!old_links) {
-		mconf = mconf_dereference_protected(mvif, 0);
+		mconf = mt7996_vif_link(dev, vif, 0);
 
 		/* switch from non-MLD vif to MLD vif, remove default bss conf */
 		if (ieee80211_vif_is_mld(vif) && mconf == &mvif->deflink)
-			mt7996_remove_bss_conf(vif, mconf, 0);
+			mt7996_vif_link_remove(mconf->phy->mt76, vif, NULL, &mconf->mt76);
 
 		mvif->group_mld_id = get_own_mld_idx(dev->mld_id_mask, true);
 		dev->mld_id_mask |= BIT_ULL(mvif->group_mld_id);
@@ -3246,16 +3227,16 @@ mt7996_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		goto out;
 
 	/* remove all links and fallback to non-MLO interface */
-	rem = mvif->valid_links;
+	rem = mvif->mt76.valid_links;
 	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
-		mconf = mconf_dereference_protected(mvif, link_id);
+		mconf = mt7996_vif_link(dev, vif, link_id);
 		if (!mconf)
 			continue;
 
-		mt7996_remove_bss_conf(vif, mconf, link_id);
+		mt7996_vif_link_remove(phy->mt76, vif, NULL, &mconf->mt76);
 	}
 
-	ret = mt7996_add_bss_conf(phy, vif, &vif->bss_conf);
+	ret = mt7996_vif_link_add(phy->mt76, vif, &vif->bss_conf, NULL);
 	dev->mld_id_mask &= ~BIT_ULL(mvif->group_mld_id);
 	dev->mld_remap_id_mask &= ~BIT_ULL(mvif->mld_remap_id);
 
@@ -3346,7 +3327,7 @@ mt7996_event_callback(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		if (event->u.mlme.data == ASSOC_EVENT &&
 		    event->u.mlme.status == MLME_SUCCESS) {
 			struct ieee80211_bss_conf *conf;
-			struct mt7996_bss_conf *mconf;
+			struct mt7996_vif_link *mconf;
 			struct mt7996_phy *phy;
 			unsigned long cur, valid_links = vif->valid_links ?: BIT(0);
 			unsigned int link_id;
@@ -3356,7 +3337,7 @@ mt7996_event_callback(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			cur = jiffies;
 			for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 				conf = link_conf_dereference_protected(vif, link_id);
-				mconf = mconf_dereference_protected(mvif, link_id);
+				mconf = mt7996_vif_link(dev, vif, link_id);
 
 				if (!conf || !mconf)
 					continue;
@@ -3369,7 +3350,7 @@ mt7996_event_callback(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 				/* trigger calibration for DFS link */
 				if (!cfg80211_reg_can_beacon(hw->wiphy,
-							     &phy->chanctx->chandef,
+							     &phy->mt76->chanctx->chandef,
 							     NL80211_IFTYPE_AP))
 					mt7996_mcu_set_chan_info(phy, UNI_CHANNEL_SWITCH,
 								 true);
@@ -3399,7 +3380,6 @@ static int
 mt7996_set_qos_map(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		   struct cfg80211_qos_map *qos_map)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	unsigned long valid_links = vif->valid_links ?: BIT(0);
 	unsigned int link_id;
@@ -3407,8 +3387,8 @@ mt7996_set_qos_map(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 
 	mutex_lock(&dev->mt76.mutex);
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, link_id);
+		struct mt7996_vif_link *mconf =
+			mt7996_vif_link(dev, vif, link_id);
 
 		if (!mconf)
 			continue;
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 3952e132..c65fb051 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -135,7 +135,7 @@ mt7996_mcu_get_sta_nss(u16 mcs_map)
 
 static void
 mt7996_mcu_set_sta_he_mcs(struct ieee80211_link_sta *link_sta,
-			  struct mt7996_bss_conf *mconf,
+			  struct mt7996_vif_link *mconf,
 			  __le16 *he_mcs, u16 mcs_map)
 {
 	enum nl80211_band band = mconf->phy->mt76->chandef.chan->band;
@@ -403,7 +403,7 @@ mt7996_mcu_csa_finish(void *priv, u8 *mac, struct ieee80211_vif *vif)
 	unsigned long valid_links = vif->valid_links ?: BIT(0);
 	int link_id, band_idx = mphy->band_idx;
 
-	link_id = mvif->band_to_link[band_idx];
+	link_id = mvif->mt76.band_to_link[band_idx];
 	if (link_id == IEEE80211_LINK_UNSPECIFIED)
 		return;
 
@@ -505,7 +505,7 @@ mt7996_mcu_cca_finish(void *priv, u8 *mac, struct ieee80211_vif *vif)
 	struct ieee80211_bss_conf *link_conf;
 	u8 link_id;
 
-	link_id = mvif->band_to_link[mphy->band_idx];
+	link_id = mvif->mt76.band_to_link[mphy->band_idx];
 	if (link_id == IEEE80211_LINK_UNSPECIFIED)
 		return;
 
@@ -1513,7 +1513,7 @@ mt7996_mcu_bss_bcn_crit_finish(void *priv, u8 *mac, struct ieee80211_vif *vif)
 {
 	struct mt7996_mcu_bss_event *data = priv;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	unsigned long valid_links = vif->valid_links;
 	unsigned int link_id;
 
@@ -1522,7 +1522,7 @@ mt7996_mcu_bss_bcn_crit_finish(void *priv, u8 *mac, struct ieee80211_vif *vif)
 
 	rcu_read_lock();
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
-		mconf = rcu_dereference(mvif->link[link_id]);
+		mconf = (struct mt7996_vif_link *)rcu_dereference(mvif->mt76.link[link_id]);
 		if (!mconf)
 			continue;
 
@@ -1744,7 +1744,7 @@ mt7996_mcu_bss_mbssid_tlv(struct sk_buff *skb, struct ieee80211_bss_conf *conf,
 }
 
 static void
-mt7996_mcu_bss_bmc_tlv(struct sk_buff *skb, struct mt7996_bss_conf *mconf,
+mt7996_mcu_bss_bmc_tlv(struct sk_buff *skb, struct mt7996_vif_link *mconf,
 		       struct mt7996_phy *phy)
 {
 	struct bss_rate_tlv *bmc;
@@ -1776,7 +1776,7 @@ mt7996_mcu_bss_txcmd_tlv(struct sk_buff *skb, bool en)
 
 static void
 mt7996_mcu_bss_mld_tlv(struct sk_buff *skb, struct ieee80211_vif *vif,
-		       struct ieee80211_bss_conf *conf, struct mt7996_bss_conf *mconf)
+		       struct ieee80211_bss_conf *conf, struct mt7996_vif_link *mconf)
 {
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_dev *dev = mconf->phy->dev;
@@ -1804,7 +1804,7 @@ mt7996_mcu_bss_mld_tlv(struct sk_buff *skb, struct ieee80211_vif *vif,
 }
 
 static void
-mt7996_mcu_bss_sec_tlv(struct sk_buff *skb, struct mt7996_bss_conf *mconf)
+mt7996_mcu_bss_sec_tlv(struct sk_buff *skb, struct mt7996_vif_link *mconf)
 {
 	struct bss_sec_tlv *sec;
 	struct tlv *tlv;
@@ -1817,7 +1817,7 @@ mt7996_mcu_bss_sec_tlv(struct sk_buff *skb, struct mt7996_bss_conf *mconf)
 
 static int
 mt7996_mcu_muar_config(struct mt7996_phy *phy, struct ieee80211_bss_conf *conf,
-		       struct mt7996_bss_conf *mconf, bool bssid, bool enable)
+		       struct mt7996_vif_link *mconf, bool bssid, bool enable)
 {
 #define UNI_MUAR_ENTRY 2
 	struct mt7996_dev *dev = phy->dev;
@@ -1883,7 +1883,7 @@ mt7996_mcu_bss_ifs_timing_tlv(struct sk_buff *skb, struct mt7996_phy *phy)
 static int
 mt7996_mcu_bss_basic_tlv(struct sk_buff *skb, struct ieee80211_vif *vif,
 			 struct ieee80211_bss_conf *conf,
-			 struct mt7996_bss_conf *mconf, struct ieee80211_sta *sta,
+			 struct mt7996_vif_link *mconf, struct ieee80211_sta *sta,
 			 u16 wlan_idx, bool enable)
 {
 	struct mt76_phy *phy = mconf->phy->mt76;
@@ -1973,7 +1973,7 @@ mt7996_mcu_bss_basic_tlv(struct sk_buff *skb, struct ieee80211_vif *vif,
 }
 
 static struct sk_buff *
-__mt7996_mcu_alloc_bss_req(struct mt76_dev *dev, struct mt76_vif *mvif, int len)
+__mt7996_mcu_alloc_bss_req(struct mt76_dev *dev, struct mt76_vif_link *mvif, int len)
 {
 	struct bss_req_hdr hdr = {
 		.bss_idx = mvif->idx,
@@ -1991,7 +1991,7 @@ __mt7996_mcu_alloc_bss_req(struct mt76_dev *dev, struct mt76_vif *mvif, int len)
 
 int mt7996_mcu_add_bss_info(struct mt7996_phy *phy, struct ieee80211_vif *vif,
 			    struct ieee80211_bss_conf *conf,
-			    struct mt7996_bss_conf *mconf,
+			    struct mt7996_vif_link *mconf,
 			    struct mt7996_sta_link *mlsta, int enable)
 {
 	struct mt7996_dev *dev = phy->dev;
@@ -2040,8 +2040,10 @@ int mt7996_mcu_get_tsf_offset(struct mt7996_phy *phy,
 			      int rpting_link_id,
 			      int rpted_link_id)
 {
+	struct ieee80211_vif *vif = container_of((void *)mvif, struct ieee80211_vif,
+						 drv_priv);
 	struct mt7996_dev *dev = phy->dev;
-	struct mt7996_bss_conf *rpting_conf, *rpted_conf;
+	struct mt7996_vif_link *rpting_conf, *rpted_conf;
 	struct mt7996_mcu_mac_info_tsf_diff *req;
 	struct mt7996_mcu_mac_info_tsf_diff_resp *resp;
 	struct sk_buff *skb, *rskb;
@@ -2054,8 +2056,8 @@ int mt7996_mcu_get_tsf_offset(struct mt7996_phy *phy,
 	int32_t tsf0_31, tsf32_63;
 	int64_t tsf_rpted, tsf_rpting, tsf_offset;
 
-	rpted_conf = mconf_dereference_protected(mvif, rpted_link_id);
-	rpting_conf = mconf_dereference_protected(mvif, rpting_link_id);
+	rpted_conf = mt7996_vif_link(dev, vif, rpted_link_id);
+	rpting_conf = mt7996_vif_link(dev, vif, rpting_link_id);
 	if (!rpted_conf || !rpting_conf)
 		return -EINVAL;
 
@@ -2098,7 +2100,7 @@ int mt7996_mcu_get_tsf_offset(struct mt7996_phy *phy,
 	return ret;
 }
 
-int mt7996_mcu_set_timing(struct mt7996_phy *phy, struct mt7996_bss_conf *mconf)
+int mt7996_mcu_set_timing(struct mt7996_phy *phy, struct mt7996_vif_link *mconf)
 {
 	struct mt7996_dev *dev = phy->dev;
 	struct sk_buff *skb;
@@ -2115,7 +2117,7 @@ int mt7996_mcu_set_timing(struct mt7996_phy *phy, struct mt7996_bss_conf *mconf)
 }
 
 static int
-mt7996_mcu_sta_ba(struct mt7996_dev *dev, struct mt76_vif *mvif,
+mt7996_mcu_sta_ba(struct mt7996_dev *dev, struct mt76_vif_link *mvif,
 		  struct ieee80211_ampdu_params *params,
 		  struct mt76_wcid *wcid, bool enable, bool tx)
 {
@@ -2144,7 +2146,7 @@ mt7996_mcu_sta_ba(struct mt7996_dev *dev, struct mt76_vif *mvif,
 }
 
 static int
-mt7996_mcu_sta_tx_cap(struct mt7996_dev *dev, struct mt76_vif *mvif,
+mt7996_mcu_sta_tx_cap(struct mt7996_dev *dev, struct mt76_vif_link *mvif,
 		      struct mt76_wcid *wcid)
 {
 	struct sta_rec_tx_cap *tx_cap;
@@ -2168,6 +2170,9 @@ mt7996_mcu_sta_tx_cap(struct mt7996_dev *dev, struct mt76_vif *mvif,
 static bool mt7996_check_limit_ampdu_en(struct ieee80211_ampdu_params *params) {
 	struct ieee80211_sta *sta = params->sta;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
+	struct mt7996_vif *mvif = msta->vif;
+	struct ieee80211_vif *vif = container_of((void *)mvif, struct ieee80211_vif,
+						 drv_priv);
 	unsigned long valid_links = sta->valid_links ?: BIT(0);
 	unsigned int link_id;
 	bool BW320 = false, BW160 = false;
@@ -2178,8 +2183,8 @@ static bool mt7996_check_limit_ampdu_en(struct ieee80211_ampdu_params *params) {
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		struct ieee80211_link_sta __rcu *link =
 			link_sta_dereference_protected(sta, link_id);
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(msta->vif, link_id);
+		struct mt7996_vif_link *mconf =
+			mt7996_vif_link(mvif->dev, vif, link_id);
 		struct mt76_phy *phy = mconf->phy->mt76;
 		struct ieee80211_eht_mcs_nss_supp_bw *ss = NULL;
 		u8 sta_bw, ap_nss, sta_nss;
@@ -2227,6 +2232,8 @@ int mt7996_mcu_add_tx_ba(struct mt7996_dev *dev,
 {
 	struct ieee80211_sta *sta = params->sta;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
+	struct ieee80211_vif *vif = container_of((void *)msta->vif, struct ieee80211_vif,
+						 drv_priv);
 	unsigned long valid_links = sta->valid_links ?: BIT(0);
 	unsigned int link_id;
 	bool limit_ampdu_en = mt7996_check_limit_ampdu_en(params);
@@ -2234,8 +2241,8 @@ int mt7996_mcu_add_tx_ba(struct mt7996_dev *dev,
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		struct mt7996_sta_link *mlsta =
 			mlsta_dereference_protected(msta, link_id);
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(msta->vif, link_id);
+		struct mt7996_vif_link *mconf =
+			mt7996_vif_link(dev, vif, link_id);
 		int ret;
 
 		if (!mlsta || !mconf)
@@ -2265,14 +2272,16 @@ int mt7996_mcu_add_rx_ba(struct mt7996_dev *dev,
 {
 	struct ieee80211_sta *sta = params->sta;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
+	struct ieee80211_vif *vif = container_of((void *)msta->vif, struct ieee80211_vif,
+						 drv_priv);
 	unsigned long valid_links = sta->valid_links ?: BIT(0);
 	unsigned int link_id;
 
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		struct mt7996_sta_link *mlsta =
 			mlsta_dereference_protected(msta, link_id);
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(msta->vif, link_id);
+		struct mt7996_vif_link *mconf =
+			mt7996_vif_link(dev, vif, link_id);
 		int ret;
 
 		if (!mlsta || !mconf)
@@ -2289,7 +2298,7 @@ int mt7996_mcu_add_rx_ba(struct mt7996_dev *dev,
 
 static void
 mt7996_mcu_sta_he_tlv(struct sk_buff *skb, struct ieee80211_bss_conf *conf,
-		      struct mt7996_bss_conf *mconf,
+		      struct mt7996_vif_link *mconf,
 		      struct ieee80211_link_sta *link_sta)
 {
 	struct ieee80211_he_cap_elem *elem = &link_sta->he_cap.he_cap_elem;
@@ -2482,7 +2491,7 @@ mt7996_mcu_sta_amsdu_tlv(struct mt7996_dev *dev, struct sk_buff *skb,
 static void
 mt7996_mcu_sta_muru_tlv(struct mt7996_dev *dev, struct sk_buff *skb,
 			struct ieee80211_bss_conf *conf,
-			struct mt7996_bss_conf *mconf,
+			struct mt7996_vif_link *mconf,
 			struct ieee80211_link_sta *link_sta)
 {
 	struct mt7996_phy *phy = mconf->phy;
@@ -2542,7 +2551,7 @@ mt7996_mcu_sta_muru_tlv(struct mt7996_dev *dev, struct sk_buff *skb,
 
 static inline bool
 mt7996_is_ebf_supported(struct mt7996_phy *phy, struct ieee80211_bss_conf *conf,
-			struct mt7996_bss_conf *mconf,
+			struct mt7996_vif_link *mconf,
 			struct ieee80211_link_sta *link_sta, bool bfee)
 {
 	int sts = hweight16(phy->mt76->chainmask);
@@ -2793,7 +2802,7 @@ mt7996_mcu_sta_bfer_eht(struct ieee80211_link_sta *link_sta,
 
 static void
 mt7996_mcu_sta_bfer_tlv(struct mt7996_dev *dev, struct sk_buff *skb,
-			struct ieee80211_bss_conf *conf, struct mt7996_bss_conf *mconf,
+			struct ieee80211_bss_conf *conf, struct mt7996_vif_link *mconf,
 			struct ieee80211_link_sta *link_sta)
 {
 #define EBF_MODE	BIT(0)
@@ -2877,7 +2886,7 @@ mt7996_mcu_sta_bfer_tlv(struct mt7996_dev *dev, struct sk_buff *skb,
 static void
 mt7996_mcu_sta_bfee_tlv(struct mt7996_dev *dev, struct sk_buff *skb,
 			struct ieee80211_bss_conf *conf,
-			struct mt7996_bss_conf *mconf,
+			struct mt7996_vif_link *mconf,
 			struct ieee80211_link_sta *link_sta)
 {
 	struct mt7996_phy *phy = mconf->phy;
@@ -3011,7 +3020,7 @@ int mt7996_mcu_set_fixed_rate_ctrl(struct mt7996_dev *dev,
 }
 
 int mt7996_mcu_set_fixed_field(struct mt7996_dev *dev,
-			       struct mt7996_bss_conf *mconf,
+			       struct mt7996_vif_link *mconf,
 			       struct ieee80211_link_sta *link_sta,
 			       struct mt7996_sta_link *mlsta, void *data,
 			       u32 field)
@@ -3081,7 +3090,7 @@ int mt7996_mcu_set_fixed_field(struct mt7996_dev *dev,
 static int
 mt7996_mcu_add_rate_ctrl_fixed(struct mt7996_dev *dev,
 			       struct ieee80211_bss_conf *conf,
-			       struct mt7996_bss_conf *mconf,
+			       struct mt7996_vif_link *mconf,
 			       struct ieee80211_link_sta *link_sta,
 			       struct mt7996_sta_link *mlsta)
 {
@@ -3169,7 +3178,7 @@ mt7996_mcu_add_rate_ctrl_fixed(struct mt7996_dev *dev,
 static void
 mt7996_mcu_sta_rate_ctrl_tlv(struct sk_buff *skb, struct mt7996_dev *dev,
 			     struct ieee80211_bss_conf *conf,
-			     struct mt7996_bss_conf *mconf,
+			     struct mt7996_vif_link *mconf,
 			     struct ieee80211_link_sta *link_sta)
 {
 #define INIT_RCPI 180
@@ -3280,7 +3289,7 @@ mt7996_mcu_sta_rate_ctrl_tlv(struct sk_buff *skb, struct mt7996_dev *dev,
 
 int mt7996_mcu_add_rate_ctrl(struct mt7996_dev *dev,
 			     struct ieee80211_bss_conf *conf,
-			     struct mt7996_bss_conf *mconf,
+			     struct mt7996_vif_link *mconf,
 			     struct ieee80211_link_sta *link_sta,
 			     struct mt7996_sta_link *mlsta, bool changed)
 {
@@ -3324,10 +3333,12 @@ mt7996_mcu_sta_mld_setup_tlv(struct mt7996_dev *dev, struct sk_buff *skb,
 			     struct ieee80211_sta *sta, unsigned long valid_links)
 {
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
+	struct ieee80211_vif *vif = container_of((void *)msta->vif, struct ieee80211_vif,
+						 drv_priv);
 	struct sta_rec_mld_setup *mld_setup;
 	struct mld_setup_link *mld_setup_link;
 	struct mt7996_sta_link *mlsta;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct tlv *tlv;
 	unsigned int link_id;
 
@@ -3362,7 +3373,7 @@ mt7996_mcu_sta_mld_setup_tlv(struct mt7996_dev *dev, struct sk_buff *skb,
 
 	for_each_set_bit(link_id, &valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		mlsta = mlsta_dereference_protected(msta, link_id);
-		mconf = mconf_dereference_protected(msta->vif, link_id);
+		mconf = mt7996_vif_link(dev, vif, link_id);
 
 		if (!mlsta || !mconf)
 			continue;
@@ -3401,7 +3412,7 @@ mt7996_mcu_sta_eht_mld_tlv(struct mt7996_dev *dev, struct sk_buff *skb,
 
 #if 0
 static int
-mt7996_mcu_sta_init_vow(struct mt7996_bss_conf *mconf,
+mt7996_mcu_sta_init_vow(struct mt7996_vif_link *mconf,
 			struct mt7996_sta_link *mlsta)
 {
 	struct mt7996_phy *phy = mconf->phy;
@@ -3437,7 +3448,7 @@ mt7996_mcu_sta_init_vow(struct mt7996_bss_conf *mconf,
 
 int mt7996_mcu_add_sta(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 		       struct ieee80211_bss_conf *conf,
-		       struct mt7996_bss_conf *mconf,
+		       struct mt7996_vif_link *mconf,
 		       struct ieee80211_link_sta *link_sta,
 		       struct mt7996_sta_link *mlsta, int conn_state, bool newly)
 {
@@ -3517,7 +3528,6 @@ out:
 int mt7996_mcu_add_mld_sta(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 			   struct ieee80211_sta *sta, unsigned long add)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
 	u8 link_id;
 
@@ -3525,8 +3535,7 @@ int mt7996_mcu_add_mld_sta(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 		return 0;
 
 	for_each_set_bit(link_id, &add, IEEE80211_MLD_MAX_NUM_LINKS) {
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, link_id);
+		struct mt7996_vif_link *mconf = mt7996_vif_link(dev, vif, link_id);
 		struct mt7996_sta_link *mlsta =
 			mlsta_dereference_protected(msta, link_id);
 		struct sk_buff *skb;
@@ -3553,7 +3562,7 @@ int mt7996_mcu_add_mld_sta(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 }
 
 int mt7996_mcu_teardown_mld_sta(struct mt7996_dev *dev,
-				struct mt7996_bss_conf *mconf,
+				struct mt7996_vif_link *mconf,
 				struct mt7996_sta_link *mlsta)
 {
 	struct sk_buff *skb;
@@ -3638,7 +3647,7 @@ mt7996_mcu_sta_key_tlv(struct mt76_dev *dev,
 	return 0;
 }
 
-int mt7996_mcu_add_key(struct mt76_dev *dev, struct mt7996_bss_conf *mconf,
+int mt7996_mcu_add_key(struct mt76_dev *dev, struct mt7996_vif_link *mconf,
 		       struct ieee80211_key_conf *key, int mcu_cmd,
 		       struct mt76_wcid *wcid, enum set_key_cmd cmd,
 		       u8 *pn)
@@ -3646,7 +3655,7 @@ int mt7996_mcu_add_key(struct mt76_dev *dev, struct mt7996_bss_conf *mconf,
 	struct sk_buff *skb;
 	int ret;
 
-	skb = __mt76_connac_mcu_alloc_sta_req(dev, (struct mt76_vif *)mconf,
+	skb = __mt76_connac_mcu_alloc_sta_req(dev, (struct mt76_vif_link *)mconf,
 					      wcid, MT7996_STA_UPDATE_MAX_SIZE);
 	if (IS_ERR(skb))
 		return PTR_ERR(skb);
@@ -3661,7 +3670,7 @@ int mt7996_mcu_add_key(struct mt76_dev *dev, struct mt7996_bss_conf *mconf,
 }
 
 int mt7996_mcu_get_pn(struct mt7996_dev *dev,
-		      struct mt7996_bss_conf *mconf,
+		      struct mt7996_vif_link *mconf,
 		      struct mt7996_sta_link *mlsta, u8 *pn)
 {
 #define TSC_TYPE_BIGTK_PN 2
@@ -3696,7 +3705,7 @@ int mt7996_mcu_get_pn(struct mt7996_dev *dev,
 
 int mt7996_mcu_add_dev_info(struct mt7996_phy *phy,
 			    struct ieee80211_bss_conf *conf,
-			    struct mt7996_bss_conf *mconf, bool enable)
+			    struct mt7996_vif_link *mconf, bool enable)
 {
 	struct mt7996_dev *dev = phy->dev;
 	struct {
@@ -3742,7 +3751,6 @@ static int
 mt7996_mcu_mld_reconf(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 		      u16 removed_links, u16 *removal_count)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mld_req_hdr hdr = { .mld_idx = 0xff };
 	struct mld_reconf_timer *rt;
 	struct sk_buff *skb;
@@ -3766,8 +3774,7 @@ mt7996_mcu_mld_reconf(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
 		struct ieee80211_bss_conf *conf =
 			link_conf_dereference_protected(vif, link_id);
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, link_id);
+		struct mt7996_vif_link *mconf =	mt7996_vif_link(dev, vif, link_id);
 		u8 band_idx;
 		u16 to_sec;
 
@@ -3786,7 +3793,6 @@ mt7996_mcu_mld_reconf(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 int mt7996_mcu_mld_reconf_stop_link(struct mt7996_dev *dev,
 				    struct ieee80211_vif *vif, u16 removed_links)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mld_req_hdr hdr = { .mld_idx = 0 };
 	struct mld_reconf_stop_link *sl;
 	struct sk_buff *skb;
@@ -3807,8 +3813,7 @@ int mt7996_mcu_mld_reconf_stop_link(struct mt7996_dev *dev,
 	sl->link_bitmap = cpu_to_le16(removed_links);
 
 	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, link_id);
+		struct mt7996_vif_link *mconf =	mt7996_vif_link(dev, vif, link_id);
 
 		if (!mconf)
 			continue;
@@ -3821,7 +3826,7 @@ int mt7996_mcu_mld_reconf_stop_link(struct mt7996_dev *dev,
 
 int mt7996_mcu_mld_link_oper(struct mt7996_phy *phy,
 			     struct ieee80211_bss_conf *conf,
-			     struct mt7996_bss_conf *mconf, bool add)
+			     struct mt7996_vif_link *mconf, bool add)
 {
 	struct ieee80211_vif *vif = conf->vif;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
@@ -3857,7 +3862,6 @@ int mt7996_mcu_mld_link_oper(struct mt7996_phy *phy,
 int mt7996_mcu_mld_set_attlm(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 			     u16 disabled_links, u16 switch_time, u32 duration)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mld_req_hdr hdr = { .mld_idx = 0xff };
 	struct mld_attlm_req *req;
 	struct mt7996_mcu_mld_attlm_resp_event *resp;
@@ -3889,8 +3893,7 @@ int mt7996_mcu_mld_set_attlm(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 	req->disabled_link_bitmap = cpu_to_le16(valid_disabled_links);
 	for_each_set_bit(link_id, &valid_disabled_links,
 			 IEEE80211_MLD_MAX_NUM_LINKS) {
-		struct mt7996_bss_conf *mconf =
-				mconf_dereference_protected(mvif, link_id);
+		struct mt7996_vif_link *mconf = mt7996_vif_link(dev, vif, link_id);
 
 		if (!mconf)
 			continue;
@@ -4053,7 +4056,7 @@ mt7996_mcu_beacon_mbss(struct sk_buff *rskb, struct sk_buff *skb,
 }
 
 static bool
-mt7996_mcu_beacon_is_cu_link(struct sk_buff *skb, struct mt7996_bss_conf *mconf,
+mt7996_mcu_beacon_is_cu_link(struct sk_buff *skb, struct mt7996_vif_link *mconf,
 			     u16 tail_offset)
 {
 	const struct element *elem;
@@ -4085,7 +4088,7 @@ mt7996_mcu_beacon_is_cu_link(struct sk_buff *skb, struct mt7996_bss_conf *mconf,
 static void
 mt7996_mcu_beacon_crit_update(struct sk_buff *rskb, struct sk_buff *skb,
 			      struct ieee80211_bss_conf *conf,
-			      struct mt7996_bss_conf *mconf,
+			      struct mt7996_vif_link *mconf,
 			      struct ieee80211_mutable_offsets *offs)
 {
 	struct ieee80211_mgmt *mgmt = (void *)skb->data;
@@ -4123,7 +4126,7 @@ mt7996_mcu_beacon_sta_prof_csa(struct sk_buff *rskb,
 {
 	struct ieee80211_vif *vif = conf->vif;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *cs_mconf;
+	struct mt7996_vif_link *cs_mconf;
 	struct bss_bcn_sta_prof_cntdwn_tlv *sta_prof;
 	struct tlv *tlv;
 	u8 cs_band;
@@ -4131,7 +4134,7 @@ mt7996_mcu_beacon_sta_prof_csa(struct sk_buff *rskb,
 	if (!ieee80211_vif_is_mld(vif) || !offs->sta_prof_cntdwn_offs[0])
 		return;
 
-	cs_mconf = mconf_dereference_protected(mvif, mvif->cs_link_id);
+	cs_mconf = mt7996_vif_link(mvif->dev, conf->vif, mvif->cs_link_id);
 	if (!cs_mconf)
 		return;
 
@@ -4182,7 +4185,6 @@ mt7996_mcu_beacon_ml_reconf(struct mt7996_dev *dev,
 			    struct sk_buff *rskb, struct sk_buff *skb,
 			    struct ieee80211_mutable_offsets *offs)
 {
-	struct mt7996_vif *mvif = (struct mt7996_vif *)conf->vif->drv_priv;
 	struct bss_bcn_ml_reconf_tlv *reconf;
 	struct bss_bcn_ml_reconf_offset *reconf_offs;
 	const struct element *elem, *sub;
@@ -4254,8 +4256,7 @@ mt7996_mcu_beacon_ml_reconf(struct mt7996_dev *dev,
 
 	reconf_offs = (struct bss_bcn_ml_reconf_offset *)reconf->offset;
 	for_each_set_bit(link_id, &removed_links, IEEE80211_MLD_MAX_NUM_LINKS) {
-		struct mt7996_bss_conf *mconf =
-			mconf_dereference_protected(mvif, link_id);
+		struct mt7996_vif_link *mconf = mt7996_vif_link(dev, conf->vif, link_id);
 
 		reconf_offs->ap_removal_timer_offs =
 			cpu_to_le16(removal_offs[link_id]);
@@ -4356,7 +4357,7 @@ mt7996_parse_mbssid_elems(struct sk_buff *skb, u16 mbssid_off,
 
 int mt7996_mcu_add_beacon(struct ieee80211_hw *hw,
 			  struct ieee80211_bss_conf *conf,
-			  struct mt7996_bss_conf *mconf, int en)
+			  struct mt7996_vif_link *mconf, int en)
 {
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mconf->phy;
@@ -4428,7 +4429,7 @@ out:
 
 int mt7996_mcu_beacon_inband_discov(struct mt7996_dev *dev,
 				    struct ieee80211_bss_conf *conf,
-				    struct mt7996_bss_conf *mconf, u32 changed)
+				    struct mt7996_vif_link *mconf, u32 changed)
 {
 #define OFFLOAD_TX_MODE_SU	BIT(0)
 #define OFFLOAD_TX_MODE_MU	BIT(1)
@@ -5160,7 +5161,7 @@ int mt7996_mcu_set_hdr_trans(struct mt7996_dev *dev, bool hdr_trans)
 				     MCU_WM_UNI_CMD(RX_HDR_TRANS), true);
 }
 
-int mt7996_mcu_set_tx(struct mt7996_dev *dev, struct mt7996_bss_conf *mconf)
+int mt7996_mcu_set_tx(struct mt7996_dev *dev, struct mt7996_vif_link *mconf)
 {
 #define MCU_EDCA_AC_PARAM	0
 #define WMM_AIFS_SET		BIT(0)
@@ -6461,7 +6462,7 @@ mt7996_mcu_set_obss_spr_pd(struct mt7996_phy *phy,
 
 static int
 mt7996_mcu_set_obss_spr_siga(struct mt7996_phy *phy,
-			     struct mt7996_bss_conf *mconf,
+			     struct mt7996_vif_link *mconf,
 			     struct ieee80211_he_obss_pd *he_obss_pd)
 {
 	struct mt7996_dev *dev = phy->dev;
@@ -6538,7 +6539,7 @@ mt7996_mcu_set_obss_spr_bitmap(struct mt7996_phy *phy,
 }
 
 int mt7996_mcu_add_obss_spr(struct mt7996_phy *phy,
-			    struct mt7996_bss_conf *mconf,
+			    struct mt7996_vif_link *mconf,
 			    struct ieee80211_he_obss_pd *he_obss_pd)
 {
 	int ret;
@@ -6581,7 +6582,7 @@ int mt7996_mcu_add_obss_spr(struct mt7996_phy *phy,
 }
 
 int mt7996_mcu_update_bss_color(struct mt7996_dev *dev,
-				struct mt7996_bss_conf *mconf,
+				struct mt7996_vif_link *mconf,
 				struct cfg80211_he_bss_color *he_bss_color)
 {
 	int len = sizeof(struct bss_req_hdr) + sizeof(struct bss_color_tlv);
@@ -6608,7 +6609,7 @@ int mt7996_mcu_update_bss_color(struct mt7996_dev *dev,
 #define TWT_AGRT_PROTECT	BIT(2)
 
 int mt7996_mcu_twt_agrt_update(struct mt7996_dev *dev,
-			       struct mt7996_bss_conf *mconf,
+			       struct mt7996_vif_link *mconf,
 			       struct mt7996_twt_flow *flow,
 			       int cmd)
 {
@@ -6801,7 +6802,7 @@ int mt7996_mcu_rdd_background_disable_timer(struct mt7996_dev *dev, bool disable
 
 int mt7996_mcu_wtbl_update_hdr_trans(struct mt7996_dev *dev,
 				     struct ieee80211_vif *vif,
-				     struct mt7996_bss_conf *mconf,
+				     struct mt7996_vif_link *mconf,
 				     struct mt7996_sta_link *mlsta)
 {
 	struct sk_buff *skb;
@@ -6818,7 +6819,7 @@ int mt7996_mcu_wtbl_update_hdr_trans(struct mt7996_dev *dev,
 				     MCU_WM_UNI_CMD(STA_REC_UPDATE), true);
 }
 
-int mt7996_mcu_ps_leave(struct mt7996_dev *dev, struct mt7996_bss_conf *mconf,
+int mt7996_mcu_ps_leave(struct mt7996_dev *dev, struct mt7996_vif_link *mconf,
 			struct mt7996_sta_link *mlsta)
 {
 	struct sk_buff *skb;
@@ -7156,7 +7157,7 @@ static void
 mt7996_update_max_txpower_cur(struct mt7996_phy *phy, int tx_power)
 {
 	struct mt76_phy *mphy = phy->mt76;
-	struct ieee80211_channel *chan = mphy->main_chan;
+	struct ieee80211_channel *chan = mphy->main_chandef.chan;
 	int e2p_power_limit = 0;
 
 	if (chan == NULL) {
@@ -7348,7 +7349,7 @@ int mt7996_mcu_set_txpower_sku(struct mt7996_phy *phy,
 	txpower_limit = mt76_get_rate_power_limits(mphy, mphy->chandef.chan,
 						   &la, &la_path, txpower_limit);
 	if(phy->mt76->cap.has_6ghz && dev->mt76.afc_power_table) {
-		ret = mt7996_afc_update_power_limit(dev, mphy->main_chan, &la, &la_path,
+		ret = mt7996_afc_update_power_limit(dev, mphy->main_chandef.chan, &la, &la_path,
 						    &txpower_limit, &mphy->chandef);
 		if (ret)
 			return ret;
@@ -7601,7 +7602,7 @@ int mt7996_mcu_set_pp_en(struct mt7996_phy *phy, u8 mode, u16 bitmap)
 		.csa_enable = false,
 	};
 
-	if (phy->chanctx->chandef.chan->band == NL80211_BAND_2GHZ ||
+	if (phy->mt76->chanctx->chandef.chan->band == NL80211_BAND_2GHZ ||
 	    mode > PP_USR_MODE)
 		return 0;
 
@@ -7654,7 +7655,7 @@ int mt7996_mcu_set_pp_sta_dscb(struct mt7996_phy *phy,
 		.ccfs1 = ieee80211_frequency_to_channel(chandef->center_freq1),
 	};
 
-	if (phy->chanctx->chandef.chan->band == NL80211_BAND_2GHZ ||
+	if (phy->mt76->chanctx->chandef.chan->band == NL80211_BAND_2GHZ ||
 	    phy->punct_bitmap == chandef->punctured)
 		return 0;
 
@@ -7919,7 +7920,7 @@ int mt7996_mcu_set_scs(struct mt7996_phy *phy, u8 enable)
 }
 
 int mt7996_mcu_set_vow_drr_ctrl(struct mt7996_phy *phy,
-				struct mt7996_bss_conf *mconf,
+				struct mt7996_vif_link *mconf,
 				struct mt7996_sta_link *mlsta,
 				enum vow_drr_ctrl_id id)
 {
@@ -8140,16 +8141,15 @@ int mt7996_mcu_set_eml_omn(struct ieee80211_hw *hw,
 {
 #define EML_OMN_CONTROL_EMLSR_MODE	0x01
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
-	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
 	struct mt7996_sta_link *mlsta;
-	struct mt7996_bss_conf *mconf, *mconf_link;
+	struct mt7996_vif_link *mconf, *mconf_link;
 	struct sta_rec_eml_op *eml_op;
 	struct sk_buff *skb;
 	struct tlv *tlv;
 
 	mlsta = mlsta_dereference_protected(msta, link_id);
-	mconf = mconf_dereference_protected(mvif, link_id);
+	mconf = mt7996_vif_link(dev, vif, link_id);
 
 	if (!mlsta || !mconf)
 			return -EINVAL;
@@ -8171,7 +8171,7 @@ int mt7996_mcu_set_eml_omn(struct ieee80211_hw *hw,
 		unsigned int linkid;
 
 		for_each_set_bit(linkid, &bitmap, IEEE80211_MLD_MAX_NUM_LINKS) {
-			mconf_link = mconf_dereference_protected(mvif, linkid);
+			mconf_link = mt7996_vif_link(dev, vif, linkid);
 
 			if (!mconf_link)
 				continue;
@@ -8448,7 +8448,7 @@ int mt7996_mcu_set_csi(struct mt7996_phy *phy, u8 mode,
 	}
 }
 
-int mt7996_mcu_set_qos_map(struct mt7996_dev *dev, struct mt7996_bss_conf *mconf,
+int mt7996_mcu_set_qos_map(struct mt7996_dev *dev, struct mt7996_vif_link *mconf,
 			   struct cfg80211_qos_map *usr_qos_map)
 {
 	struct {
diff --git a/mt7996/mmio.c b/mt7996/mmio.c
index e54d3584..4b815ab3 100644
--- a/mt7996/mmio.c
+++ b/mt7996/mmio.c
@@ -848,6 +848,7 @@ struct mt7996_dev *mt7996_mmio_probe(struct device *pdev,
 		.sta_remove = mt7996_mac_sta_remove,
 		.update_survey = mt7996_update_channel,
 		.set_channel = mt7996_set_channel,
+		.vif_link_add = mt7996_vif_link_add,
 	};
 	struct mt7996_dev *dev;
 	struct mt76_dev *mdev;
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 468bb0a0..0e3c8f3e 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -433,8 +433,8 @@ struct mt7996_sta {
 	unsigned long last_addba_req_time[IEEE80211_NUM_TIDS];
 };
 
-struct mt7996_bss_conf {
-	struct mt76_vif mt76; /* must be first */
+struct mt7996_vif_link {
+	struct mt76_vif_link mt76; /* must be first */
 	struct rcu_head rcu_head;
 
 	struct mt7996_sta_link mlsta;
@@ -444,7 +444,6 @@ struct mt7996_bss_conf {
 	struct ieee80211_tx_queue_params queue_params[IEEE80211_NUM_ACS];
 	struct cfg80211_bitrate_mask bitrate_mask;
 
-	u8 link_id;
 	u8 own_mld_id;
 	u8 bpcc;
 	u8 mbssid_idx;
@@ -453,22 +452,18 @@ struct mt7996_bss_conf {
 };
 
 struct mt7996_vif {
-	struct mt7996_bss_conf deflink;
-	struct mt7996_bss_conf __rcu *link[IEEE80211_MLD_MAX_NUM_LINKS];
+	struct mt7996_vif_link deflink; /* must be first */
+	struct mt76_vif_data mt76;
 
 	struct mt7996_sta sta;
 	struct mt7996_dev *dev;
 
-	u8 master_link_id;
 	u8 group_mld_id;
 	u8 mld_remap_id;
-	u16 valid_links;
 
 	u8 cs_link_id;
 	u16 cs_ready_links;
 
-	u8 band_to_link[__MT_MAX_BAND];
-
 	/* for beacon monitoring */
 	struct delayed_work beacon_mon_work;
 	unsigned long beacon_received_time[__MT_MAX_BAND];
@@ -683,14 +678,6 @@ struct mt7996_msdu_pg_addr {
 	void *buf;
 };
 
-struct mt7996_chanctx {
-	struct cfg80211_chan_def chandef;
-	struct mt7996_phy *phy;
-
-	bool assigned;
-	u8 nbss_assigned;
-};
-
 struct mt7996_phy {
 	struct mt76_phy *mt76;
 	struct mt7996_dev *dev;
@@ -733,17 +720,14 @@ struct mt7996_phy {
 	u16 punct_bitmap;
 
 	/* for hw_scan */
-	struct delayed_work scan_work;
 	struct ieee80211_channel *scan_chan;
 	struct cfg80211_scan_request *scan_req;
 	struct ieee80211_vif *scan_vif;
 	int scan_chan_idx;
-	struct mt7996_chanctx *chanctx;
 
 	struct mt7996_scs_ctrl scs_ctrl;
 	u32 red_drop;
 
-	struct delayed_work roc_complete_work;
 	struct ieee80211_vif *roc_vif;
 	struct ieee80211_channel *roc_chan;
 
@@ -790,7 +774,7 @@ struct mt7996_phy {
 	bool mru_probe_enable:1;
 #endif
 	/* Index 0 (TxBSS) is not used */
-	struct mt7996_bss_conf __rcu *mbssid_conf[MT7996_MAX_MBSSID];
+	struct mt7996_vif_link __rcu *mbssid_conf[MT7996_MAX_MBSSID];
 };
 
 struct mt7996_dev {
@@ -1109,19 +1093,35 @@ mt7996_band_phy(struct mt7996_dev *dev, enum nl80211_band band)
 	return mphy->priv;
 }
 
-static inline struct mt7996_chanctx *
-mt7996_chanctx_get(struct ieee80211_chanctx_conf *ctx)
+static inline struct mt7996_vif_link *
+mt7996_vif_link(struct mt7996_dev *dev, struct ieee80211_vif *vif, int link_id)
+{
+	return (struct mt7996_vif_link *)mt76_vif_link(&dev->mt76, vif, link_id);
+}
+
+static inline struct mt7996_phy *
+mt7996_vif_link_phy(struct mt7996_vif_link *link)
 {
-	return (struct mt7996_chanctx *)&ctx->drv_priv;
+	struct mt76_phy *mphy = mt76_vif_link_phy(&link->mt76);
+
+	if (!mphy)
+		return NULL;
+
+	return mphy->priv;
 }
 
-static inline struct mt7996_bss_conf *
-mconf_dereference_protected(struct mt7996_vif *mvif, u8 link_id)
+static inline struct mt7996_vif_link *
+mt7996_vif_conf_link(struct mt7996_dev *dev, struct ieee80211_vif *vif,
+		     struct ieee80211_bss_conf *link_conf)
 {
-	return rcu_dereference_protected(mvif->link[link_id],
-					 lockdep_is_held(&mvif->dev->mt76.mutex));
+	return (struct mt7996_vif_link *)mt76_vif_conf_link(&dev->mt76, vif,
+							    link_conf);
 }
 
+#define mt7996_for_each_phy(dev, phy)					\
+	for (int __i = 0; __i < ARRAY_SIZE((dev)->radio_phy); __i++)	\
+		if (((phy) = (dev)->radio_phy[__i]) != NULL)
+
 static inline struct mt7996_sta_link *
 mlsta_dereference_protected(struct mt7996_sta *msta, u8 link_id)
 {
@@ -1159,7 +1159,7 @@ mt7996_get_link_wcid(struct mt7996_dev *dev, u16 idx, u8 band_idx)
 		return wcid;
 
 	mlsta = wcid_to_mlsta(wcid);
-	link_id = mlsta->sta->vif->band_to_link[band_idx];
+	link_id = mlsta->sta->vif->mt76.band_to_link[band_idx];
 	if (link_id == IEEE80211_LINK_UNSPECIFIED)
 		return wcid;
 
@@ -1196,10 +1196,6 @@ mt7996_get_active_link_wcid(struct mt7996_dev *dev, struct mt76_wcid *old_wcid)
 	return old_wcid;
 }
 
-#define mt7996_for_each_phy(dev, phy)					\
-	for (int __i = 0; __i < ARRAY_SIZE((dev)->radio_phy); __i++)	\
-		if (((phy) = (dev)->radio_phy[__i]) != NULL)
-
 extern const struct ieee80211_ops mt7996_ops;
 extern struct pci_driver mt7996_pci_driver;
 extern struct pci_driver mt7996_hif_driver;
@@ -1210,9 +1206,15 @@ struct mt7996_dev *mt7996_mmio_probe(struct device *pdev,
 void mt7996_wfsys_reset(struct mt7996_dev *dev);
 void mt7996_rro_hw_init(struct mt7996_dev *dev);
 irqreturn_t mt7996_irq_handler(int irq, void *dev_instance);
-u64 __mt7996_get_tsf(struct ieee80211_hw *hw, struct mt7996_bss_conf *mconf);
+u64 __mt7996_get_tsf(struct ieee80211_hw *hw, struct mt7996_vif_link *mconf);
 int mt7996_register_device(struct mt7996_dev *dev);
 void mt7996_unregister_device(struct mt7996_dev *dev);
+int mt7996_vif_link_add(struct mt76_phy *mphy, struct ieee80211_vif *vif,
+			struct ieee80211_bss_conf *link_conf,
+			struct mt76_vif_link *mlink);
+void mt7996_vif_link_remove(struct mt76_phy *mphy, struct ieee80211_vif *vif,
+			    struct ieee80211_bss_conf *link_conf,
+			    struct mt76_vif_link *mlink);
 const char *mt7996_eeprom_name(struct mt7996_dev *dev);
 int mt7996_eeprom_init(struct mt7996_dev *dev);
 int mt7996_eeprom_check_fw_mode(struct mt7996_dev *dev);
@@ -1236,23 +1238,23 @@ int mt7996_run(struct mt7996_phy *phy);
 int mt7996_mcu_init(struct mt7996_dev *dev);
 int mt7996_mcu_init_firmware(struct mt7996_dev *dev);
 int mt7996_mcu_twt_agrt_update(struct mt7996_dev *dev,
-			       struct mt7996_bss_conf *mconf,
+			       struct mt7996_vif_link *mconf,
 			       struct mt7996_twt_flow *flow,
 			       int cmd);
 int mt7996_mcu_add_dev_info(struct mt7996_phy *phy,
 			    struct ieee80211_bss_conf *conf,
-			    struct mt7996_bss_conf *mconf, bool enable);
+			    struct mt7996_vif_link *mconf, bool enable);
 int mt7996_mcu_add_bss_info(struct mt7996_phy *phy, struct ieee80211_vif *vif,
 			    struct ieee80211_bss_conf *conf,
-			    struct mt7996_bss_conf *mconf,
+			    struct mt7996_vif_link *mconf,
 			    struct mt7996_sta_link *mlsta, int enable);
 int mt7996_mcu_add_sta(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 		       struct ieee80211_bss_conf *conf,
-		       struct mt7996_bss_conf *mconf,
+		       struct mt7996_vif_link *mconf,
 		       struct ieee80211_link_sta *link_sta,
 		       struct mt7996_sta_link *mlsta, int conn_state, bool newly);
 int mt7996_mcu_teardown_mld_sta(struct mt7996_dev *dev,
-				struct mt7996_bss_conf *mconf,
+				struct mt7996_vif_link *mconf,
 				struct mt7996_sta_link *mlsta);
 int mt7996_mcu_add_tx_ba(struct mt7996_dev *dev,
 			 struct ieee80211_ampdu_params *params,
@@ -1261,32 +1263,31 @@ int mt7996_mcu_add_rx_ba(struct mt7996_dev *dev,
 			 struct ieee80211_ampdu_params *params,
 			 bool add);
 int mt7996_mcu_update_bss_color(struct mt7996_dev *dev,
-				struct mt7996_bss_conf *mconf,
+				struct mt7996_vif_link *mconf,
 				struct cfg80211_he_bss_color *he_bss_color);
 int mt7996_mcu_add_beacon(struct ieee80211_hw *hw,
 			  struct ieee80211_bss_conf *conf,
-			  struct mt7996_bss_conf *mconf, int en);
+			  struct mt7996_vif_link *mconf, int en);
 int mt7996_mcu_beacon_inband_discov(struct mt7996_dev *dev,
 				    struct ieee80211_bss_conf *conf,
-				    struct mt7996_bss_conf *mconf, u32 changed);
+				    struct mt7996_vif_link *mconf, u32 changed);
 int mt7996_mcu_add_obss_spr(struct mt7996_phy *phy,
-			    struct mt7996_bss_conf *mconf,
+			    struct mt7996_vif_link *mconf,
 			    struct ieee80211_he_obss_pd *he_obss_pd);
 int mt7996_mcu_add_rate_ctrl(struct mt7996_dev *dev,
 			     struct ieee80211_bss_conf *conf,
-			     struct mt7996_bss_conf *mconf,
+			     struct mt7996_vif_link *mconf,
 			     struct ieee80211_link_sta *link_sta,
 			     struct mt7996_sta_link *mlsta, bool changed);
 int mt7996_mcu_add_mld_sta(struct mt7996_dev *dev, struct ieee80211_vif *vif,
 			   struct ieee80211_sta *sta, unsigned long add);
 int mt7996_set_channel(struct mt76_phy *mphy);
-int mt7996_config_channel(struct mt7996_phy *phy, struct cfg80211_chan_def *chandef);
 int mt7996_mcu_set_chan_info(struct mt7996_phy *phy, u16 tag, bool sta);
-int mt7996_mcu_set_tx(struct mt7996_dev *dev, struct mt7996_bss_conf *mconf);
+int mt7996_mcu_set_tx(struct mt7996_dev *dev, struct mt7996_vif_link *mconf);
 int mt7996_mcu_set_fixed_rate_ctrl(struct mt7996_dev *dev,
 				   void *data, u16 version);
 int mt7996_mcu_set_fixed_field(struct mt7996_dev *dev,
-			       struct mt7996_bss_conf *mconf,
+			       struct mt7996_vif_link *mconf,
 			       struct ieee80211_link_sta *link_sta,
 			       struct mt7996_sta_link *mlsta, void *data,
 			       u32 field);
@@ -1307,7 +1308,7 @@ int mt7996_mcu_set_radar_th(struct mt7996_dev *dev, int index,
 int mt7996_mcu_set_radio_en(struct mt7996_phy *phy, bool enable);
 int mt7996_mcu_set_rts_thresh(struct mt7996_phy *phy, u32 val);
 int mt7996_mcu_set_bssid_mapping_addr(struct mt76_dev *dev, u8 band);
-int mt7996_mcu_set_timing(struct mt7996_phy *phy, struct mt7996_bss_conf *mconf);
+int mt7996_mcu_set_timing(struct mt7996_phy *phy, struct mt7996_vif_link *mconf);
 int mt7996_mcu_get_chan_mib_info(struct mt7996_phy *phy, bool chan_switch);
 int mt7996_mcu_get_temperature(struct mt7996_phy *phy);
 int mt7996_mcu_set_thermal_throttling(struct mt7996_phy *phy, u8 state);
@@ -1352,7 +1353,7 @@ int mt7996_mcu_set_scs(struct mt7996_phy *phy, u8 enable);
 void mt7996_mcu_scs_sta_poll(struct work_struct *work);
 int mt7996_mcu_set_band_confg(struct mt7996_phy *phy, u16 option, bool enable);
 int mt7996_mcu_set_vow_drr_ctrl(struct mt7996_phy *phy,
-				struct mt7996_bss_conf *mconf,
+				struct mt7996_vif_link *mconf,
 				struct mt7996_sta_link *mlsta,
 				enum vow_drr_ctrl_id id);
 int mt7996_mcu_set_vow_feature_ctrl(struct mt7996_phy *phy);
@@ -1365,7 +1366,7 @@ int mt7996_mcu_mld_reconf_stop_link(struct mt7996_dev *dev,
 				    struct ieee80211_vif *vif, u16 removed_links);
 int mt7996_mcu_mld_link_oper(struct mt7996_phy *phy,
 			     struct ieee80211_bss_conf *conf,
-			     struct mt7996_bss_conf *mconf, bool add);
+			     struct mt7996_vif_link *mconf, bool add);
 
 static inline bool mt7996_has_wa(struct mt7996_dev *dev)
 {
@@ -1483,22 +1484,22 @@ int mt7996_init_band_debugfs(struct mt7996_phy *phy);
 void mt7996_debugfs_rx_fw_monitor(struct mt7996_dev *dev, const void *data, int len);
 bool mt7996_debugfs_rx_log(struct mt7996_dev *dev, const void *data, int len);
 int mt7996_mcu_get_pn(struct mt7996_dev *dev,
-		      struct mt7996_bss_conf *mconf,
+		      struct mt7996_vif_link *mconf,
 		      struct mt7996_sta_link *mlink, u8 *pn);
-int mt7996_mcu_add_key(struct mt76_dev *dev, struct mt7996_bss_conf *mconf,
+int mt7996_mcu_add_key(struct mt76_dev *dev, struct mt7996_vif_link *mconf,
 		       struct ieee80211_key_conf *key, int mcu_cmd,
 		       struct mt76_wcid *wcid, enum set_key_cmd cmd,
 		       u8 *pn);
 int mt7996_mcu_bcn_prot_enable(struct mt7996_dev *dev,
 			       struct ieee80211_bss_conf *conf,
-			       struct mt7996_bss_conf *mconf,
+			       struct mt7996_vif_link *mconf,
 			       struct mt7996_sta_link *mlsta,
 			       struct ieee80211_key_conf *key);
 int mt7996_mcu_wtbl_update_hdr_trans(struct mt7996_dev *dev,
 				     struct ieee80211_vif *vif,
-				     struct mt7996_bss_conf *mconf,
+				     struct mt7996_vif_link *mconf,
 				     struct mt7996_sta_link *mlsta);
-int mt7996_mcu_ps_leave(struct mt7996_dev *dev, struct mt7996_bss_conf *mconf,
+int mt7996_mcu_ps_leave(struct mt7996_dev *dev, struct mt7996_vif_link *mconf,
 			struct mt7996_sta_link *mlsta);
 int mt7996_mcu_cp_support(struct mt7996_dev *dev, u8 mode);
 int mt7996_mcu_set_pp_en(struct mt7996_phy *phy, u8 mode, u16 bitmap);
@@ -1616,6 +1617,6 @@ static inline void mt7996_set_pse_drop(struct mt7996_dev *dev, bool enable)
 #endif /* CONFIG_NET_MEDIATEK_SOC_WED */
 }
 
-int mt7996_mcu_set_qos_map(struct mt7996_dev *dev, struct mt7996_bss_conf *mconf,
+int mt7996_mcu_set_qos_map(struct mt7996_dev *dev, struct mt7996_vif_link *mconf,
 			   struct cfg80211_qos_map *usr_qos_map);
 #endif
diff --git a/mt7996/vendor.c b/mt7996/vendor.c
index 2f930337..700a2d6b 100644
--- a/mt7996/vendor.c
+++ b/mt7996/vendor.c
@@ -832,7 +832,7 @@ static int mt7996_vendor_pp_ctrl(struct wiphy *wiphy, struct wireless_dev *wdev,
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy;
 	struct cfg80211_chan_def *chandef;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
 	int err;
 	u8 mode = 0, link_id = 0;
@@ -853,7 +853,7 @@ static int mt7996_vendor_pp_ctrl(struct wiphy *wiphy, struct wireless_dev *wdev,
 	}
 
 	rcu_read_lock();
-	mconf = rcu_dereference(mvif->link[link_id]);
+	mconf = (struct mt7996_vif_link *)rcu_dereference(mvif->mt76.link[link_id]);
 	if (!mconf) {
 		rcu_read_unlock();
 		goto error;
@@ -866,7 +866,7 @@ static int mt7996_vendor_pp_ctrl(struct wiphy *wiphy, struct wireless_dev *wdev,
 	}
 	rcu_read_unlock();
 
-	chandef = &phy->chanctx->chandef;
+	chandef = &phy->mt76->chanctx->chandef;
 	if (!chandef)
 		goto error;
 
@@ -904,7 +904,7 @@ int mt7996_vendor_pp_bitmap_update(struct mt7996_phy *phy, u16 bitmap)
 {
 	struct sk_buff *skb;
 	struct mt76_phy *mphy = phy->mt76;
-	struct cfg80211_chan_def *chandef = &phy->chanctx->chandef;
+	struct cfg80211_chan_def *chandef = &phy->mt76->chanctx->chandef;
 
 	if (!chandef)
 		return 0;
@@ -938,7 +938,7 @@ static int mt7996_vendor_rfeature_ctrl(struct wiphy *wiphy,
 	struct mt7996_dev *dev = phy->dev;
 	struct ieee80211_vif *vif = wdev_to_ieee80211_vif(wdev);
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct nlattr *tb[NUM_MTK_VENDOR_ATTRS_RFEATURE_CTRL];
 	int err;
 	u8 band_idx, link_id = 0;
@@ -955,7 +955,7 @@ static int mt7996_vendor_rfeature_ctrl(struct wiphy *wiphy,
 	}
 
 	rcu_read_lock();
-	mconf = rcu_dereference(mvif->link[link_id]);
+	mconf = (struct mt7996_vif_link *)rcu_dereference(mvif->mt76.link[link_id]);
 	if (!mconf || !mconf->phy) {
 		rcu_read_unlock();
 		return -EINVAL;
@@ -1024,7 +1024,7 @@ static int mt7996_vendor_wireless_ctrl(struct wiphy *wiphy,
 	struct mt7996_dev *dev = phy->dev;
 	struct ieee80211_vif *vif = wdev_to_ieee80211_vif(wdev);
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct nlattr *tb[NUM_MTK_VENDOR_ATTRS_WIRELESS_CTRL];
 	int err;
 	u8 val8, band_idx, link_id = 0;
@@ -1045,7 +1045,7 @@ static int mt7996_vendor_wireless_ctrl(struct wiphy *wiphy,
 	}
 
 	rcu_read_lock();
-	mconf = rcu_dereference(mvif->link[link_id]);
+	mconf = (struct mt7996_vif_link *)rcu_dereference(mvif->mt76.link[link_id]);
 	if (mconf && mconf->phy) {
 		band_idx = mconf->phy->mt76->band_idx;
 		band_idx_get = true;
@@ -1492,7 +1492,7 @@ static int mt7996_vendor_txpower_ctrl(struct wiphy *wiphy,
 	struct mt76_dev *mdev;
 	struct ieee80211_vif *vif = wdev_to_ieee80211_vif(wdev);
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
-	struct mt7996_bss_conf *mconf;
+	struct mt7996_vif_link *mconf;
 	struct nlattr *tb[NUM_MTK_VENDOR_ATTRS_TXPOWER_CTRL], *table;
 	struct mt76_power_limits *la;
 	struct mt76_power_path_limits *la_path;
@@ -1513,7 +1513,7 @@ static int mt7996_vendor_txpower_ctrl(struct wiphy *wiphy,
 	}
 
 	rcu_read_lock();
-	mconf = rcu_dereference(mvif->link[link_id]);
+	mconf = (struct mt7996_vif_link *)rcu_dereference(mvif->mt76.link[link_id]);
 	if (!mconf || !mconf->phy) {
 		rcu_read_unlock();
 		return -EINVAL;
diff --git a/util.c b/util.c
index d6c01a2d..95b3dc96 100644
--- a/util.c
+++ b/util.c
@@ -64,7 +64,7 @@ int mt76_wcid_alloc(u32 *mask, int size)
 }
 EXPORT_SYMBOL_GPL(mt76_wcid_alloc);
 
-int mt76_get_min_avg_rssi(struct mt76_dev *dev, bool ext_phy)
+int mt76_get_min_avg_rssi(struct mt76_dev *dev, u8 phy_idx)
 {
 	struct mt76_wcid *wcid;
 	int i, j, min_rssi = 0;
@@ -75,20 +75,16 @@ int mt76_get_min_avg_rssi(struct mt76_dev *dev, bool ext_phy)
 
 	for (i = 0; i < ARRAY_SIZE(dev->wcid_mask); i++) {
 		u32 mask = dev->wcid_mask[i];
-		u32 phy_mask = dev->wcid_phy_mask[i];
 
 		if (!mask)
 			continue;
 
-		for (j = i * 32; mask; j++, mask >>= 1, phy_mask >>= 1) {
+		for (j = i * 32; mask; j++, mask >>= 1) {
 			if (!(mask & 1))
 				continue;
 
-			if (!!(phy_mask & 1) != ext_phy)
-				continue;
-
 			wcid = rcu_dereference(dev->wcid[j]);
-			if (!wcid)
+			if (!wcid || wcid->phy_idx != phy_idx)
 				continue;
 
 			spin_lock(&dev->rx_lock);
-- 
2.45.2

