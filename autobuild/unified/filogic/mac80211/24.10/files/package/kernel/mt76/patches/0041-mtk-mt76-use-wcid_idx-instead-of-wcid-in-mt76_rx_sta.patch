From 3f9d6f45064b6686556e04cfca459cd7e10c2def Mon Sep 17 00:00:00 2001
From: Shayne Chen <shayne.chen@mediatek.com>
Date: Thu, 12 Dec 2024 10:19:04 +0800
Subject: [PATCH 41/95] mtk: mt76: use wcid_idx instead of wcid in
 mt76_rx_status

Use wcid_idx in mt76_rx_status and do dereference when it needs wcid.
In some cases, e.g., rx reorder, it would leave rcu critical
section so we need to dereference again.

Signed-off-by: Peter Chiu <chui-hao.chiu@mediatek.com>
Signed-off-by: Shayne Chen <shayne.chen@mediatek.com>
---
 agg-rx.c     | 11 ++++++-----
 mac80211.c   | 36 +++++++++++++++++++++++-------------
 mt76.h       |  3 ++-
 mt7996/mac.c |  4 +++-
 4 files changed, 34 insertions(+), 20 deletions(-)

diff --git a/agg-rx.c b/agg-rx.c
index 9875baa8..7c6c3f7c 100644
--- a/agg-rx.c
+++ b/agg-rx.c
@@ -117,11 +117,11 @@ mt76_rx_aggr_reorder_work(struct work_struct *work)
 }
 
 static void
-mt76_rx_aggr_check_ctl(struct sk_buff *skb, struct sk_buff_head *frames)
+mt76_rx_aggr_check_ctl(struct sk_buff *skb, struct sk_buff_head *frames,
+		       struct mt76_wcid *wcid)
 {
 	struct mt76_rx_status *status = (struct mt76_rx_status *)skb->cb;
 	struct ieee80211_bar *bar = mt76_skb_get_hdr(skb);
-	struct mt76_wcid *wcid = status->wcid;
 	struct mt76_rx_tid *tid;
 	u8 tidno;
 	u16 seqno;
@@ -146,10 +146,11 @@ mt76_rx_aggr_check_ctl(struct sk_buff *skb, struct sk_buff_head *frames)
 	spin_unlock_bh(&tid->lock);
 }
 
-void mt76_rx_aggr_reorder(struct sk_buff *skb, struct sk_buff_head *frames)
+void mt76_rx_aggr_reorder(struct mt76_dev *dev, struct sk_buff *skb,
+			  struct sk_buff_head *frames)
 {
 	struct mt76_rx_status *status = (struct mt76_rx_status *)skb->cb;
-	struct mt76_wcid *wcid = status->wcid;
+	struct mt76_wcid *wcid = rcu_dereference(dev->wcid[status->wcid_idx]);
 	struct ieee80211_sta *sta;
 	struct mt76_rx_tid *tid;
 	struct mt76_phy *phy;
@@ -166,7 +167,7 @@ void mt76_rx_aggr_reorder(struct sk_buff *skb, struct sk_buff_head *frames)
 
 	if (!status->aggr) {
 		if (!(status->flag & RX_FLAG_8023))
-			mt76_rx_aggr_check_ctl(skb, frames);
+			mt76_rx_aggr_check_ctl(skb, frames, wcid);
 		return;
 	}
 
diff --git a/mac80211.c b/mac80211.c
index 3191a2c1..9359e458 100644
--- a/mac80211.c
+++ b/mac80211.c
@@ -1192,6 +1192,7 @@ mt76_rx_convert(struct mt76_dev *dev, struct sk_buff *skb,
 	struct ieee80211_hdr *hdr = mt76_skb_get_hdr(skb);
 	struct mt76_phy *phy;
 	struct mt76_rx_status mstat;
+	struct mt76_wcid *wcid;
 
 	mstat = *((struct mt76_rx_status *)skb->cb);
 	memset(status, 0, sizeof(*status));
@@ -1231,12 +1232,13 @@ mt76_rx_convert(struct mt76_dev *dev, struct sk_buff *skb,
 	memcpy(status->chain_signal, mstat.chain_signal,
 	       sizeof(mstat.chain_signal));
 
-	if (mstat.wcid && !mstat.wcid->sta_disabled) {
-		status->link_valid = mstat.wcid->link_valid;
-		status->link_id = mstat.wcid->link_id;
+	wcid = rcu_dereference(dev->wcid[mstat.wcid_idx]);
+	if (wcid && !wcid->sta_disabled) {
+		status->link_valid = wcid->link_valid;
+		status->link_id = wcid->link_id;
 	}
 
-	*sta = wcid_to_sta(mstat.wcid);
+	*sta = wcid_to_sta(wcid);
 	*hw = mt76_phy_hw(dev, mstat.phy_idx);
 
 	phy = mt76_dev_phy(dev, mstat.phy_idx);
@@ -1246,10 +1248,10 @@ mt76_rx_convert(struct mt76_dev *dev, struct sk_buff *skb,
 }
 
 static void
-mt76_check_ccmp_pn(struct sk_buff *skb)
+mt76_check_ccmp_pn(struct mt76_dev *dev, struct sk_buff *skb)
 {
 	struct mt76_rx_status *status = (struct mt76_rx_status *)skb->cb;
-	struct mt76_wcid *wcid = status->wcid;
+	struct mt76_wcid *wcid;
 	struct ieee80211_hdr *hdr;
 	int security_idx;
 	int ret;
@@ -1260,6 +1262,7 @@ mt76_check_ccmp_pn(struct sk_buff *skb)
 	if (status->flag & RX_FLAG_ONLY_MONITOR)
 		return;
 
+	wcid = rcu_dereference(dev->wcid[status->wcid_idx]);
 	if (!wcid || !wcid->rx_check_pn)
 		return;
 
@@ -1307,7 +1310,7 @@ static void
 mt76_airtime_report(struct mt76_dev *dev, struct mt76_rx_status *status,
 		    int len)
 {
-	struct mt76_wcid *wcid = status->wcid;
+	struct mt76_wcid *wcid;
 	struct ieee80211_rx_status info = {
 		.enc_flags = status->enc_flags,
 		.rate_idx = status->rate_idx,
@@ -1325,6 +1328,7 @@ mt76_airtime_report(struct mt76_dev *dev, struct mt76_rx_status *status,
 	dev->cur_cc_bss_rx += airtime;
 	spin_unlock(&dev->cc_lock);
 
+	wcid = rcu_dereference(dev->wcid[status->wcid_idx]);
 	if (!wcid || !wcid->sta)
 		return;
 
@@ -1358,11 +1362,12 @@ static void
 mt76_airtime_check(struct mt76_dev *dev, struct sk_buff *skb)
 {
 	struct mt76_rx_status *status = (struct mt76_rx_status *)skb->cb;
-	struct mt76_wcid *wcid = status->wcid;
+	struct mt76_wcid *wcid;
 
 	if (!(dev->drv->drv_flags & MT_DRV_SW_RX_AIRTIME))
 		return;
 
+	wcid = rcu_dereference(dev->wcid[status->wcid_idx]);
 	if (!wcid || !wcid->sta) {
 		struct ieee80211_hdr *hdr = mt76_skb_get_hdr(skb);
 
@@ -1401,16 +1406,21 @@ mt76_check_sta(struct mt76_dev *dev, struct sk_buff *skb)
 	struct ieee80211_hdr *hdr = mt76_skb_get_hdr(skb);
 	struct ieee80211_sta *sta;
 	struct ieee80211_hw *hw;
-	struct mt76_wcid *wcid = status->wcid;
+	struct mt76_wcid *wcid = rcu_dereference(dev->wcid[status->wcid_idx]);
 	u8 tidno = status->qos_ctl & IEEE80211_QOS_CTL_TID_MASK;
 	bool ps;
 
 	hw = mt76_phy_hw(dev, status->phy_idx);
 	if (ieee80211_is_pspoll(hdr->frame_control) && !wcid &&
 	    !(status->flag & RX_FLAG_8023)) {
+		if (hw->wiphy->flags & WIPHY_FLAG_SUPPORTS_MLO)
+			return;
+
 		sta = ieee80211_find_sta_by_ifaddr(hw, hdr->addr2, NULL);
-		if (sta)
-			wcid = status->wcid = (struct mt76_wcid *)sta->drv_priv;
+		if (sta) {
+			wcid = (struct mt76_wcid *)sta->drv_priv;
+			status->wcid_idx = wcid->idx;
+		}
 	}
 
 	mt76_airtime_check(dev, skb);
@@ -1474,7 +1484,7 @@ void mt76_rx_complete(struct mt76_dev *dev, struct sk_buff_head *frames,
 	while ((skb = __skb_dequeue(frames)) != NULL) {
 		struct sk_buff *nskb = skb_shinfo(skb)->frag_list;
 
-		mt76_check_ccmp_pn(skb);
+		mt76_check_ccmp_pn(dev, skb);
 		skb_shinfo(skb)->frag_list = NULL;
 		trace_mt76_rx_complete(dev, (struct mt76_rx_status *)skb->cb, 0);
 		mt76_rx_convert(dev, skb, &hw, &sta);
@@ -1517,7 +1527,7 @@ void mt76_rx_poll_complete(struct mt76_dev *dev, enum mt76_rxq_id q,
 		if (mtk_wed_device_active(&dev->mmio.wed))
 			__skb_queue_tail(&frames, skb);
 		else
-			mt76_rx_aggr_reorder(skb, &frames);
+			mt76_rx_aggr_reorder(dev, skb, &frames);
 	}
 
 	mt76_rx_complete(dev, &frames, napi);
diff --git a/mt76.h b/mt76.h
index f702e4af..9a3b38c3 100644
--- a/mt76.h
+++ b/mt76.h
@@ -1855,7 +1855,8 @@ void mt76_rx_complete(struct mt76_dev *dev, struct sk_buff_head *frames,
 		      struct napi_struct *napi);
 void mt76_rx_poll_complete(struct mt76_dev *dev, enum mt76_rxq_id q,
 			   struct napi_struct *napi);
-void mt76_rx_aggr_reorder(struct sk_buff *skb, struct sk_buff_head *frames);
+void mt76_rx_aggr_reorder(struct mt76_dev *dev, struct sk_buff *skb,
+			  struct sk_buff_head *frames);
 void mt76_testmode_tx_pending(struct mt76_phy *phy);
 void mt76_queue_tx_complete(struct mt76_dev *dev, struct mt76_queue *q,
 			    struct mt76_queue_entry *e);
diff --git a/mt7996/mac.c b/mt7996/mac.c
index 5e8dc716..a6d90622 100644
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -722,7 +722,9 @@ mt7996_mac_fill_rx(struct mt7996_dev *dev, enum mt76_rxq_id q,
 
 	trace_mt7996_fill_rx_done(phy, status->seqno, hdr_gap);
 
-	if (!status->wcid || !ieee80211_is_data_qos(fc) || hw_aggr)
+	status->wcid_idx = status->wcid ? status->wcid->idx : 0;
+
+	if (!status->wcid_idx || !ieee80211_is_data_qos(fc) || hw_aggr)
 		return 0;
 
 	status->aggr = unicast &&
-- 
2.45.2

