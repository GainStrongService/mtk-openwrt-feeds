From 39015f741f238db92028326ff41ff42f0d3625a6 Mon Sep 17 00:00:00 2001
From: Peter Chiu <chui-hao.chiu@mediatek.com>
Date: Fri, 6 Jun 2025 15:40:14 +0800
Subject: [PATCH 098/123] mtk: mt76: mt7996: fix csa finish flow to prevent no
 beacon issue after channel switch

Check omac index to get the correct vif when receiving csa event from fw.
Without this patch, driver may set channel and update beacon for some
bss that csa is not finish. It may lead to set beacon fail and no beacon
until driver update beacon content again.

Signed-off-by: Peter Chiu <chui-hao.chiu@mediatek.com>
---
 mt7996/mcu.c | 27 +++++++++++++++++++++++----
 mt7996/mcu.h | 13 ++++++++-----
 2 files changed, 31 insertions(+), 9 deletions(-)

diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 4937f73f..6b0e7e11 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -401,9 +401,11 @@ int mt7996_mcu_wa_cmd(struct mt7996_dev *dev, int cmd, u32 a1, u32 a2, u32 a3)
 static void
 mt7996_mcu_csa_finish(void *priv, u8 *mac, struct ieee80211_vif *vif)
 {
-	struct mt76_phy *mphy = (struct mt76_phy *)priv;
+	struct mt7996_countdown_notify *notify = (struct mt7996_countdown_notify *)priv;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt76_phy *mphy = notify->mphy;
 	struct ieee80211_bss_conf *link_conf;
+	struct mt7996_vif_link *mconf;
 	unsigned long valid_links = vif->valid_links ?: BIT(0);
 	int link_id, band_idx = mphy->band_idx;
 
@@ -411,6 +413,10 @@ mt7996_mcu_csa_finish(void *priv, u8 *mac, struct ieee80211_vif *vif)
 	if (link_id == IEEE80211_LINK_UNSPECIFIED)
 		return;
 
+	mconf = mt7996_vif_link(mvif->dev, vif, link_id);
+	if (!mconf || mconf->mt76.omac_idx != notify->omac_idx)
+		return;
+
 	link_conf = rcu_dereference(vif->link_conf[link_id]);
 
 	if (!link_conf || !link_conf->csa_active || vif->type == NL80211_IFTYPE_STATION)
@@ -520,15 +526,21 @@ out:
 static void
 mt7996_mcu_cca_finish(void *priv, u8 *mac, struct ieee80211_vif *vif)
 {
-	struct mt76_phy *mphy = (struct mt76_phy *)priv;
+	struct mt7996_countdown_notify *notify = (struct mt7996_countdown_notify *)priv;
 	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt76_phy *mphy = notify->mphy;
 	struct ieee80211_bss_conf *link_conf;
+	struct mt7996_vif_link *mconf;
 	u8 link_id;
 
 	link_id = mvif->mt76.band_to_link[mphy->band_idx];
 	if (link_id == IEEE80211_LINK_UNSPECIFIED)
 		return;
 
+	mconf = mt7996_vif_link(mvif->dev, vif, link_id);
+	if (!mconf || mconf->mt76.omac_idx != notify->omac_idx)
+		return;
+
 	link_conf = rcu_dereference(vif->link_conf[link_id]);
 	if (!link_conf || !link_conf->color_change_active ||
 	    vif->type == NL80211_IFTYPE_STATION)
@@ -551,6 +563,8 @@ mt7996_mcu_ie_countdown(struct mt7996_dev *dev, struct sk_buff *skb)
 	const char *data = (char *)&rxd[1], *tail;
 	struct header *hdr = (struct header *)data;
 	struct tlv *tlv = (struct tlv *)(data + 4);
+	struct mt7996_mcu_countdown_notify *event;
+	struct mt7996_countdown_notify notify;
 
 	if (hdr->band >= ARRAY_SIZE(dev->mt76.phys))
 		return;
@@ -561,16 +575,21 @@ mt7996_mcu_ie_countdown(struct mt7996_dev *dev, struct sk_buff *skb)
 	tail = skb->data + skb->len;
 	data += sizeof(struct header);
 	while (data + sizeof(struct tlv) < tail && le16_to_cpu(tlv->len)) {
+		event = (struct mt7996_mcu_countdown_notify *)tlv->data;
+
+		notify.mphy = mphy;
+		notify.omac_idx = event->omac_idx;
+
 		switch (le16_to_cpu(tlv->tag)) {
 		case UNI_EVENT_IE_COUNTDOWN_CSA:
 			ieee80211_iterate_active_interfaces_atomic(mphy->hw,
 					IEEE80211_IFACE_ITER_RESUME_ALL,
-					mt7996_mcu_csa_finish, mphy);
+					mt7996_mcu_csa_finish, &notify);
 			break;
 		case UNI_EVENT_IE_COUNTDOWN_BCC:
 			ieee80211_iterate_active_interfaces_atomic(mphy->hw,
 					IEEE80211_IFACE_ITER_RESUME_ALL,
-					mt7996_mcu_cca_finish, mphy);
+					mt7996_mcu_cca_finish, &notify);
 			break;
 		}
 
diff --git a/mt7996/mcu.h b/mt7996/mcu.h
index 144677a0..2ade0df8 100644
--- a/mt7996/mcu.h
+++ b/mt7996/mcu.h
@@ -52,15 +52,18 @@ struct mt7996_mcu_thermal_enable {
 	u8 rsv[2];
 } __packed;
 
-struct mt7996_mcu_csa_notify {
-	struct mt7996_mcu_rxd rxd;
-
+struct mt7996_mcu_countdown_notify {
 	u8 omac_idx;
-	u8 csa_count;
-	u8 band_idx;
+	u8 count;
+	u8 csa_failure_reason; // 0: success, 1: beacon disabled
 	u8 rsv;
 } __packed;
 
+struct mt7996_countdown_notify {
+	struct mt76_phy *mphy;
+	u8 omac_idx;
+};
+
 struct mt7996_mcu_rdd_report {
 	struct mt7996_mcu_rxd rxd;
 
-- 
2.45.2

