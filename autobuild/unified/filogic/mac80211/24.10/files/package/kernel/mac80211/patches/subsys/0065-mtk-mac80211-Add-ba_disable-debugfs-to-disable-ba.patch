From 8cc9fb68c07dc49d7dcf396a038a43feb8ed830e Mon Sep 17 00:00:00 2001
From: MeiChia Chiu <MeiChia.Chiu@mediatek.com>
Date: Thu, 20 Jun 2024 14:56:42 +0800
Subject: [PATCH 065/107] mtk: mac80211: Add ba_disable debugfs to disable ba

Add ba_disable debugfs to diable ba for Wi-Fi 7 cert

Signed-off-by: MeiChia Chiu <MeiChia.Chiu@mediatek.com>
---
 include/net/mac80211.h |  6 ++++++
 net/mac80211/agg-tx.c  |  6 ++++++
 net/mac80211/debugfs.c | 49 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 61 insertions(+)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 51bf623d..6fabbc16 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -3093,6 +3093,7 @@ struct ieee80211_hw {
 	const s8 *tx_power_levels;
 	u8 max_txpwr_levels_idx;
 	bool cert_mode;
+	bool ba_disable;
 };
 
 static inline bool ieee80211_is_cert_mode(struct ieee80211_hw *hw)
@@ -3100,6 +3101,11 @@ static inline bool ieee80211_is_cert_mode(struct ieee80211_hw *hw)
 	return hw->cert_mode;
 }
 
+static inline bool ieee80211_is_ba_disable(struct ieee80211_hw *hw)
+{
+	return hw->ba_disable;
+}
+
 static inline bool _ieee80211_hw_check(struct ieee80211_hw *hw,
 				       enum ieee80211_hw_flags flg)
 {
diff --git a/net/mac80211/agg-tx.c b/net/mac80211/agg-tx.c
index b8c1d47f..81607729 100644
--- a/net/mac80211/agg-tx.c
+++ b/net/mac80211/agg-tx.c
@@ -614,6 +614,12 @@ int ieee80211_start_tx_ba_session(struct ieee80211_sta *pubsta, u16 tid,
 
 	trace_api_start_tx_ba_session(pubsta, tid);
 
+	if (ieee80211_is_ba_disable(&local->hw)) {
+		ht_dbg(sdata,
+		       "BA session is forced to be shut down due to debugfs config\n");
+		return -EINVAL;
+	}
+
 	if (WARN(sta->reserved_tid == tid,
 		 "Requested to start BA session on reserved tid=%d", tid))
 		return -EINVAL;
diff --git a/net/mac80211/debugfs.c b/net/mac80211/debugfs.c
index e62d0475..25e7b85e 100644
--- a/net/mac80211/debugfs.c
+++ b/net/mac80211/debugfs.c
@@ -519,6 +519,54 @@ static const struct file_operations cert_mode_ops = {
 	.llseek = noop_llseek,
 };
 
+static ssize_t ba_disable_read(struct file *file,
+			       char __user *user_buf,
+			       size_t count,
+			       loff_t *ppos)
+{
+	struct ieee80211_local *local = file->private_data;
+	char buf[32];
+	int len = 0;
+
+	len = scnprintf(buf, sizeof(buf), "ba_disable: %d\n",
+			local->hw.ba_disable);
+
+	return simple_read_from_buffer(user_buf, count, ppos,
+				       buf, len);
+}
+
+static ssize_t ba_disable_write(struct file *file,
+				const char __user *user_buf,
+				size_t count,
+				loff_t *ppos)
+{
+	struct ieee80211_local *local = file->private_data;
+	char buf[16];
+
+	if (count >= sizeof(buf))
+		return -EINVAL;
+
+	if (copy_from_user(buf, user_buf, count))
+		return -EFAULT;
+
+	if (count && buf[count - 1] == '\n')
+		buf[count - 1] = '\0';
+	else
+		buf[count] = '\0';
+
+	if (kstrtobool(buf, &local->hw.ba_disable))
+		return -EINVAL;
+
+	return count;
+}
+
+static const struct file_operations ba_disable_ops = {
+	.write = ba_disable_write,
+	.read = ba_disable_read,
+	.open = simple_open,
+	.llseek = noop_llseek,
+};
+
 static const char *hw_flag_names[] = {
 #define FLAG(F)	[IEEE80211_HW_##F] = #F
 	FLAG(HAS_RATE_CONTROL),
@@ -794,6 +842,7 @@ void debugfs_hw_add(struct ieee80211_local *local)
 			   phyd, &local->aql_threshold);
 
 	DEBUGFS_ADD_MODE(cert_mode, 0644);
+	DEBUGFS_ADD_MODE(ba_disable, 0644);
 	statsd = debugfs_create_dir("statistics", phyd);
 
 #ifdef CPTCFG_MAC80211_DEBUG_COUNTERS
-- 
2.45.2

