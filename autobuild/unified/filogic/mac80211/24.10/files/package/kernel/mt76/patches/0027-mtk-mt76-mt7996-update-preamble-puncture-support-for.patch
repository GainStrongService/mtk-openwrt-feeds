From f3503d756c6d3428db6fa813103bf08359d8ef10 Mon Sep 17 00:00:00 2001
From: Allen Ye <allen.ye@mediatek.com>
Date: Tue, 28 May 2024 15:31:39 +0800
Subject: [PATCH 27/75] mtk: mt76: mt7996: update preamble puncture support for
 mt7996

Add pp station mode support. Current fw only support one bitmap on a band.
For extender mode, fw only consider that extender and root AP are both in
fw mode and detect the same bitmap. So that extender AP/STA can use the
same bitmap setting.
Current PP_DSCB_CTRL cmd only use bitmap value in fw implementation.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>
---
 mt76_connac_mcu.h |   1 +
 mt7996/main.c     |  22 ++++++++++
 mt7996/mcu.c      | 107 +++++++++++++++++++++++++++++++++++++++++++++-
 mt7996/mcu.h      |  34 +++++++++++++++
 mt7996/mt7996.h   |   2 +
 5 files changed, 165 insertions(+), 1 deletion(-)

diff --git a/mt76_connac_mcu.h b/mt76_connac_mcu.h
index 8dd2f564..4f63ab16 100644
--- a/mt76_connac_mcu.h
+++ b/mt76_connac_mcu.h
@@ -1077,6 +1077,7 @@ enum {
 	MCU_UNI_EVENT_TESTMODE_CTRL = 0x46,
 	MCU_UNI_EVENT_CSI_REPORT = 0x4A,
 	MCU_UNI_EVENT_WED_RRO = 0x57,
+	MCU_UNI_EVENT_PP = 0x5a,
 	MCU_UNI_EVENT_PER_STA_INFO = 0x6d,
 	MCU_UNI_EVENT_ALL_STA_INFO = 0x6e,
 };
diff --git a/mt7996/main.c b/mt7996/main.c
index 303c87f9..421226bf 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -1294,6 +1294,12 @@ static int mt7996_add_link_sta(struct mt7996_dev *dev,
 	if (ret)
 		goto error;
 
+	if (link_sta->eht_cap.has_eht && conf->vif->type == NL80211_IFTYPE_STATION) {
+		ret = mt7996_mcu_set_pp_sta_dscb(mconf->phy, &conf->chanreq.oper, mconf->mt76.omac_idx);
+		if (ret)
+			goto error;
+	}
+
 	ewma_avg_signal_init(&mlink->avg_ack_signal);
 
 	return 0;
@@ -2920,6 +2926,10 @@ mt7996_add_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
 	if (ret)
 		return ret;
 
+	ret = mt7996_mcu_set_pp_alg_ctrl(phy, PP_ALG_SET_TIMER);
+	if (ret)
+		return ret;
+
 	return mt7996_set_channel(phy, &ctx->chandef);
 }
 
@@ -3046,6 +3056,7 @@ mt7996_switch_vif_chanctx(struct ieee80211_hw *hw,
 	struct mt7996_chanctx *new_ctx;
 	struct mt7996_phy *phy;
 	int i, ret = 0;
+	u8 omac_idx;
 
 	for (i = 0; i < n_vifs; i++) {
 		if (vifs[i].old_ctx == vifs[i].new_ctx)
@@ -3089,6 +3100,17 @@ mt7996_switch_vif_chanctx(struct ieee80211_hw *hw,
 
 		mutex_unlock(&dev->mt76.mutex);
 
+		if (vifs->vif->type == NL80211_IFTYPE_AP && phy->pp_mode == PP_USR_MODE)
+			ret = mt7996_mcu_set_pp_en(phy, PP_USR_MODE,
+						   new_ctx->chandef.punctured);
+		else if (vifs->vif->type == NL80211_IFTYPE_STATION) {
+			omac_idx = get_omac_idx(NL80211_IFTYPE_STATION, phy->omac_mask);
+			ret = mt7996_mcu_set_pp_sta_dscb(phy, &new_ctx->chandef, omac_idx);
+		}
+
+		if (ret)
+			goto out;
+
 		ret = mt7996_set_channel(phy, &new_ctx->chandef);
 		if (ret)
 			goto out;
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index 0fe8c68d..460cead3 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -1280,6 +1280,39 @@ mt7996_mcu_wed_rro_event(struct mt7996_dev *dev, struct sk_buff *skb)
 	}
 }
 
+static void
+mt7996_mcu_pp_event(struct mt7996_dev *dev, struct sk_buff *skb)
+{
+	struct mt7996_mcu_pp_basic_event *event;
+	struct mt7996_mcu_pp_dscb_event *dscb_event;
+	struct mt7996_phy *phy;
+	struct mt76_phy *mphy;
+	u16 report_bitmap;
+
+	event = (struct mt7996_mcu_pp_basic_event *)skb->data;
+
+	switch (le16_to_cpu(event->tag)) {
+	case UNI_EVENT_STATIC_PP_TAG_CSA_DSCB_IE:
+	case UNI_EVENT_STATIC_PP_TAG_DSCB_IE:
+		if (!mt7996_band_valid(dev, event->band_idx))
+			return;
+
+		mphy = mt76_dev_phy(&dev->mt76, event->band_idx);
+		phy = mphy->priv;
+
+		dscb_event = (struct mt7996_mcu_pp_dscb_event *)event;
+		report_bitmap = le16_to_cpu(dscb_event->punct_bitmap);
+
+		if (phy->punct_bitmap == report_bitmap)
+			return;
+
+		if (phy->pp_mode == PP_FW_MODE)
+			phy->punct_bitmap = report_bitmap;
+
+		break;
+	}
+}
+
 static void
 mt7996_mcu_uni_rx_unsolicited_event(struct mt7996_dev *dev, struct sk_buff *skb)
 {
@@ -1305,6 +1338,9 @@ mt7996_mcu_uni_rx_unsolicited_event(struct mt7996_dev *dev, struct sk_buff *skb)
 	case MCU_UNI_EVENT_WED_RRO:
 		mt7996_mcu_wed_rro_event(dev, skb);
 		break;
+	case MCU_UNI_EVENT_PP:
+		mt7996_mcu_pp_event(dev, skb);
+		break;
 #ifdef CONFIG_MTK_DEBUG
 	case MCU_UNI_EVENT_SR:
 		mt7996_mcu_rx_sr_event(dev, skb);
@@ -6283,7 +6319,8 @@ int mt7996_mcu_set_pp_en(struct mt7996_phy *phy, u8 mode, u16 bitmap)
 		u8 force_bitmap_ctrl;
 		u8 auto_mode;
 		__le16 bitmap;
-		u8 _rsv2[2];
+		u8 csa_enable;
+		u8 _rsv2;
 	} __packed req = {
 		.tag = cpu_to_le16(UNI_CMD_PP_EN_CTRL),
 		.len = cpu_to_le16(sizeof(req) - 4),
@@ -6293,6 +6330,7 @@ int mt7996_mcu_set_pp_en(struct mt7996_phy *phy, u8 mode, u16 bitmap)
 		.force_bitmap_ctrl = (mode == PP_USR_MODE) ? 2 : 0,
 		.auto_mode = pp_auto,
 		.bitmap = cpu_to_le16(bitmap),
+		.csa_enable = false,
 	};
 
 	if (phy->chanctx->chandef.chan->band == NL80211_BAND_2GHZ ||
@@ -6309,6 +6347,73 @@ int mt7996_mcu_set_pp_en(struct mt7996_phy *phy, u8 mode, u16 bitmap)
 				 &req, sizeof(req), false);
 }
 
+int mt7996_mcu_set_pp_sta_dscb(struct mt7996_phy *phy,
+			       struct cfg80211_chan_def *chandef,
+			       u8 omac_idx)
+{
+	struct mt7996_dev *dev = phy->dev;
+	struct {
+		u8 _rsv1[4];
+
+		__le16 tag;
+		__le16 len;
+		u8 band_idx;
+		u8 omac_idx;
+		u8 eht_op_present;
+		u8 dscb_present;
+		__le16 dscb;
+		u8 ctrl;
+		u8 ccfs0;
+		u8 ccfs1;
+		u8 rsv2[3];
+	} __packed req = {
+		.tag = cpu_to_le16(UNI_CMD_PP_DSCB_CTRL),
+		.len = cpu_to_le16(sizeof(req) - 4),
+
+		.band_idx = phy->mt76->band_idx,
+		.omac_idx = omac_idx,
+		.eht_op_present = true,
+		.dscb_present = !!chandef->punctured,
+		.dscb = cpu_to_le16(chandef->punctured),
+		.ctrl = 0,
+		.ccfs0 = ieee80211_frequency_to_channel(chandef->center_freq1),
+		.ccfs1 = ieee80211_frequency_to_channel(chandef->center_freq1),
+	};
+
+	if (phy->chanctx->chandef.chan->band == NL80211_BAND_2GHZ ||
+	    phy->punct_bitmap == chandef->punctured)
+		return 0;
+
+	switch (chandef->width) {
+	case NL80211_CHAN_WIDTH_320:
+		req.ctrl |= IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ;
+		if (chandef->chan->hw_value < req.ccfs1)
+			req.ccfs0 -= 16;
+		else
+			req.ccfs0 += 16;
+		break;
+	case NL80211_CHAN_WIDTH_160:
+		req.ctrl |= IEEE80211_EHT_OPER_CHAN_WIDTH_160MHZ;
+		if (chandef->chan->hw_value < req.ccfs1)
+			req.ccfs0 -= 8;
+		else
+			req.ccfs0 += 8;
+		break;
+	case NL80211_CHAN_WIDTH_80:
+		req.ctrl |= IEEE80211_EHT_OPER_CHAN_WIDTH_80MHZ;
+		req.ccfs0 = 0;
+		break;
+	default:
+		return 0;
+		break;
+	}
+
+	phy->punct_bitmap = cpu_to_le16(chandef->punctured);
+
+	return mt76_mcu_send_msg(&dev->mt76, MCU_WM_UNI_CMD(PP),
+				 &req, sizeof(req), false);
+}
+
 int mt7996_mcu_set_tx_power_ctrl(struct mt7996_phy *phy, u8 power_ctrl_id, u8 data)
 {
 	struct mt7996_dev *dev = phy->dev;
diff --git a/mt7996/mcu.h b/mt7996/mcu.h
index c5c69940..4010fa35 100644
--- a/mt7996/mcu.h
+++ b/mt7996/mcu.h
@@ -1173,6 +1173,7 @@ enum {
 
 enum {
 	UNI_CMD_PP_EN_CTRL,
+	UNI_CMD_PP_DSCB_CTRL,
 };
 
 enum pp_mode {
@@ -1181,6 +1182,39 @@ enum pp_mode {
 	PP_USR_MODE,
 };
 
+enum {
+	UNI_EVENT_PP_TAG_ALG_CTRL = 1,
+	UNI_EVENT_STATIC_PP_TAG_DSCB_IE,
+	UNI_EVENT_STATIC_PP_TAG_CSA_DSCB_IE,
+	UNI_EVENT_PP_SHOW_INFO,
+};
+
+struct mt7996_mcu_pp_basic_event {
+	struct mt7996_mcu_rxd rxd;
+
+	u8 __rsv1[4];
+
+	__le16 tag;
+	__le16 len;
+	u8 band_idx;
+	u8 __rsv2[3];
+} __packed;
+
+struct mt7996_mcu_pp_dscb_event {
+	struct mt7996_mcu_rxd rxd;
+
+	u8 __rsv1[4];
+
+	__le16 tag;
+	__le16 len;
+	u8 band_idx;
+	u8 omac_idx;
+	u8 new_dscb;
+	u8 __rsv2;
+	__le16 punct_bitmap;
+	u8 __rsv3[2];
+} __packed;
+
 enum {
 	UNI_CMD_SCS_SEND_DATA,
 	UNI_CMD_SCS_SET_PD_THR_RANGE = 2,
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 47ab4599..545de60e 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -1278,6 +1278,8 @@ int mt7996_mcu_wtbl_update_hdr_trans(struct mt7996_dev *dev,
 				     struct mt7996_link_sta *mlink);
 int mt7996_mcu_cp_support(struct mt7996_dev *dev, u8 mode);
 int mt7996_mcu_set_pp_en(struct mt7996_phy *phy, u8 mode, u16 bitmap);
+int mt7996_mcu_set_pp_sta_dscb(struct mt7996_phy *phy, struct cfg80211_chan_def *chandef,
+			       u8 omac_idx);
 int mt7996_mcu_set_eml_omn(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u8 link_id,
 			   struct ieee80211_sta *sta, struct mt7996_eml_omn *eml_omn);
 #ifdef CONFIG_MAC80211_DEBUGFS
-- 
2.45.2

