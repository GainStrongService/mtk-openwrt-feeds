From 2b7091e50dd108149ffa614713eb29042026560e Mon Sep 17 00:00:00 2001
From: Benjamin Lin <benjamin-jw.lin@mediatek.com>
Date: Mon, 13 Jan 2025 14:00:58 +0800
Subject: [PATCH 63/95] mtk: mt76: mt7996: add support for EPCS

Add AP support for EPCS, including following features:
1. Add vendor command to receive EPCS setting from user
2. Add MCU command to set EPCS in FW

Signed-off-by: Benjamin Lin <benjamin-jw.lin@mediatek.com>
---
 mt76_connac_mcu.h |  1 +
 mt7996/init.c     |  7 ++--
 mt7996/mcu.c      | 61 +++++++++++++++++++++++++++++++++++
 mt7996/mcu.h      | 16 ++++++++++
 mt7996/mt7996.h   | 11 +++++++
 mt7996/vendor.c   | 81 +++++++++++++++++++++++++++++++++++++++++++++++
 mt7996/vendor.h   | 16 ++++++++++
 7 files changed, 191 insertions(+), 2 deletions(-)

diff --git a/mt76_connac_mcu.h b/mt76_connac_mcu.h
index 4fc593c8..5359c338 100644
--- a/mt76_connac_mcu.h
+++ b/mt76_connac_mcu.h
@@ -1341,6 +1341,7 @@ enum {
 	MCU_UNI_CMD_ASSERT_DUMP = 0x6f,
 	MCU_UNI_CMD_EXT_EEPROM_CTRL  = 0x74,
 	MCU_UNI_CMD_PTA_3WIRE_CTRL = 0x78,
+	MCU_UNI_CMD_EPCS = 0x79,
 	MCU_UNI_CMD_RADIO_STATUS = 0x80,
 	MCU_UNI_CMD_MLD = 0x82,
 	MCU_UNI_CMD_PEER_MLD = 0x83,
diff --git a/mt7996/init.c b/mt7996/init.c
index 3c2a7ae6..560a9eef 100644
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -1637,14 +1637,14 @@ mt7996_init_eht_caps(struct mt7996_phy *phy, enum nl80211_band band,
 	eht_cap->has_eht = true;
 
 	eht_cap_elem->mac_cap_info[0] =
-		IEEE80211_EHT_MAC_CAP0_EPCS_PRIO_ACCESS |
 		IEEE80211_EHT_MAC_CAP0_OM_CONTROL |
 		u8_encode_bits(IEEE80211_EHT_MAC_CAP0_MAX_MPDU_LEN_11454,
 			       IEEE80211_EHT_MAC_CAP0_MAX_MPDU_LEN_MASK);
 
 	if (iftype == NL80211_IFTYPE_AP)
 		eht_cap_elem->mac_cap_info[0] |=
-			IEEE80211_EHT_MAC_CAP0_SCS_TRAFFIC_DESC;
+			IEEE80211_EHT_MAC_CAP0_SCS_TRAFFIC_DESC |
+			IEEE80211_EHT_MAC_CAP0_EPCS_PRIO_ACCESS;
 
 	eht_cap_elem->mac_cap_info[1] |=
 		IEEE80211_EHT_MAC_CAP1_MAX_AMPDU_LEN_MASK;
@@ -1730,6 +1730,9 @@ mt7996_init_eht_caps(struct mt7996_phy *phy, enum nl80211_band band,
 	if (iftype != NL80211_IFTYPE_AP)
 		return;
 
+	eht_cap_elem->mac_cap_info[1] |=
+		IEEE80211_EHT_MAC_CAP1_UNSOL_EPCS_PRIO_ACCESS;
+
 	eht_cap_elem->phy_cap_info[3] |=
 		IEEE80211_EHT_PHY_CAP3_TRIG_SU_BF_FDBK |
 		IEEE80211_EHT_PHY_CAP3_TRIG_MU_BF_PART_BW_FDBK;
diff --git a/mt7996/mcu.c b/mt7996/mcu.c
index f728b214..4ea4b557 100644
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -8260,6 +8260,67 @@ int mt7996_mcu_set_eml_omn(struct ieee80211_vif *vif,
 			MCU_WMWA_UNI_CMD(STA_REC_UPDATE), true);
 }
 
+int mt7996_mcu_epcs_ctrl(u32 cmd, struct mt7996_dev *dev,
+			 struct ieee80211_sta *sta, u8 link_id, bool enable,
+			 u16 wmm_idx, struct mt7996_wmm_params *params)
+{
+	struct {
+		u8 rsv1[4];
+
+		__le16 tag;
+		__le16 len;
+		__le32 cmd;
+
+		__le16 wlan_idx;
+		__le16 wmm_idx;
+		u8 enable;
+		u8 rsv2[3];
+		struct {
+			struct {
+				__le16 txop_limit;
+				u8 ecwmin;
+				u8 ecwmax;
+				u8 aifsn;
+				u8 rsv[3];
+				u8 mu_ecwmin;
+				u8 mu_ecwmax;
+				u8 mu_aifsn;
+				u8 mu_timer;
+			} params[IEEE80211_NUM_ACS];
+			__le16 flags;
+			u8 rsv[2];
+		} wmm;
+	} req = {
+		.tag = cpu_to_le16(UNI_CMD_EPCS_CTRL),
+		.len = cpu_to_le16(sizeof(req) - 4),
+		.cmd = cpu_to_le32(cmd),
+		.wmm_idx = cpu_to_le16(wmm_idx),
+		.enable = enable,
+		.wmm.flags = enable ? cpu_to_le16(EPCS_CTRL_WMM_FLAG_VALID) : 0,
+	};
+	struct mt7996_sta *msta = (struct mt7996_sta *)sta->drv_priv;
+	struct mt7996_sta_link *msta_link;
+	int i;
+
+	msta_link = mt76_dereference(msta->link[link_id], &dev->mt76);
+	if (!msta_link)
+		return -EINVAL;
+	req.wlan_idx = cpu_to_le16(msta_link->wcid.idx);
+
+	for (i = IEEE80211_AC_VO; i < IEEE80211_NUM_ACS; ++i) {
+		u8 usr_ac = mt76_ac_to_hwq(i),
+		   lmac_ac = mt76_connac_lmac_mapping(i);
+
+		req.wmm.params[lmac_ac].txop_limit = cpu_to_le16(params[usr_ac].txop_limit);
+		req.wmm.params[lmac_ac].ecwmin = params[usr_ac].ecwmin;
+		req.wmm.params[lmac_ac].ecwmax = params[usr_ac].ecwmax;
+		req.wmm.params[lmac_ac].aifsn = params[usr_ac].aifsn;
+	}
+
+	return mt76_mcu_send_msg(&dev->mt76, MCU_WM_UNI_CMD(EPCS), &req,
+				 sizeof(req), false);
+}
+
 #ifdef CONFIG_MTK_VENDOR
 void mt7996_set_wireless_vif(void *data, u8 *mac, struct ieee80211_vif *vif)
 {
diff --git a/mt7996/mcu.h b/mt7996/mcu.h
index 6867dc2e..c2f2d10e 100644
--- a/mt7996/mcu.h
+++ b/mt7996/mcu.h
@@ -1733,6 +1733,22 @@ struct fixed_rate_table_ctrl {
 	u8 _rsv2;
 } __packed;
 
+#define EPCS_MAX_WMM_PARAMS	16
+#define EPCS_CTRL_WMM_FLAG_VALID	BIT(0)
+
+enum {
+	UNI_CMD_EPCS_CTRL = 1,
+};
+
+enum {
+	UNI_EPCS_CTRL_ENABLE = 1,
+	UNI_EPCS_CTRL_SET_WMM_PARAMS,
+	UNI_EPCS_CTRL_SET_WMM_IDX,
+	UNI_EPCS_CTRL_GET_WMM_PARAMS,
+	UNI_EPCS_CTRL_GET_STA,
+	UNI_EPCS_CTRL_RESET_STA
+};
+
 #ifdef CONFIG_MTK_VENDOR
 struct mt7996_mcu_csi_event {
 	struct mt7996_mcu_rxd rxd;
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index 327bff4d..ae92e601 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -542,6 +542,14 @@ struct mt7996_eml_omn {
 	} u;
 } __packed;
 
+struct mt7996_wmm_params {
+	int ecwmin;
+	int ecwmax;
+	int aifsn;
+	int txop_limit;
+	int acm;
+};
+
 struct mt7996_wed_rro_addr {
 	u32 head_low;
 	u32 head_high : 4;
@@ -1447,6 +1455,9 @@ int mt7996_mcu_set_pp_alg_ctrl(struct mt7996_phy *phy, u8 action);
 int mt7996_mcu_set_eml_omn(struct ieee80211_vif *vif, u8 link_id,
 			   struct ieee80211_sta *sta, struct mt7996_dev *dev,
 			   struct mt7996_eml_omn *eml_omn);
+int mt7996_mcu_epcs_ctrl(u32 cmd, struct mt7996_dev *dev,
+			 struct ieee80211_sta *sta, u8 link_id, bool enable,
+			 u16 wmm_idx, struct mt7996_wmm_params *params);
 int mt7996_mcu_get_tsf_offset(struct mt7996_phy *phy, struct mt7996_vif *mvif,
 			      int rpting_link_id, int rpted_link_id);
 #ifdef CONFIG_MAC80211_DEBUGFS
diff --git a/mt7996/vendor.c b/mt7996/vendor.c
index 7833b3dd..61d7dc86 100644
--- a/mt7996/vendor.c
+++ b/mt7996/vendor.c
@@ -134,6 +134,14 @@ eml_ctrl_policy[NUM_MTK_VENDOR_ATTRS_EML_CTRL] = {
 	[MTK_VENDOR_ATTR_EML_CTRL_STRUCT] = { .type = NLA_BINARY },
 };
 
+static const struct nla_policy
+epcs_ctrl_policy[NUM_MTK_VENDOR_ATTRS_EPCS_CTRL] = {
+	[MTK_VENDOR_ATTR_EPCS_ADDR] = NLA_POLICY_ETH_ADDR,
+	[MTK_VENDOR_ATTR_EPCS_LINK_ID] = { .type = NLA_U8 },
+	[MTK_VENDOR_ATTR_EPCS_ENABLE] = { .type = NLA_U8 },
+	[MTK_VENDOR_ATTR_EPCS_WMM_IDX] = { .type = NLA_U16 },
+	[MTK_VENDOR_ATTR_EPCS_WMM_PARAMS] = { .type = NLA_BINARY }
+};
 
 static const struct nla_policy
 scs_ctrl_policy[NUM_MTK_VENDOR_ATTRS_SCS_CTRL] = {
@@ -1242,6 +1250,68 @@ out:
 	mutex_unlock(&dev->mt76.mutex);
 	return err;
 }
+
+static int
+mt7996_vendor_epcs_ctrl(struct wiphy *wiphy, struct wireless_dev *wdev,
+			const void *data, int data_len)
+{
+	size_t len = sizeof(struct mt7996_wmm_params) * IEEE80211_NUM_ACS;
+	struct ieee80211_vif *vif = wdev_to_ieee80211_vif(wdev);
+	struct ieee80211_hw *hw = wiphy_to_ieee80211_hw(wiphy);
+	struct nlattr *tb[NUM_MTK_VENDOR_ATTRS_EPCS_CTRL];
+	struct mt7996_dev *dev = mt7996_hw_dev(hw);
+	struct mt7996_wmm_params *params;
+	u8 addr[ETH_ALEN], link_id;
+	struct ieee80211_sta *sta;
+	bool enable;
+	u16 wmm_idx;
+	int ret;
+
+	if (!ieee80211_vif_is_mld(vif))
+		return -EPERM;
+
+	ret = nla_parse(tb, MTK_VENDOR_ATTR_EPCS_CTRL_MAX, data, data_len,
+			epcs_ctrl_policy, NULL);
+	if (ret)
+		return ret;
+
+	if (!tb[MTK_VENDOR_ATTR_EPCS_ADDR] ||
+	    !tb[MTK_VENDOR_ATTR_EPCS_LINK_ID] ||
+	    !tb[MTK_VENDOR_ATTR_EPCS_ENABLE] ||
+	    !tb[MTK_VENDOR_ATTR_EPCS_WMM_IDX] ||
+	    !tb[MTK_VENDOR_ATTR_EPCS_WMM_PARAMS])
+		return -EINVAL;
+
+	link_id = nla_get_u8(tb[MTK_VENDOR_ATTR_EPCS_LINK_ID]);
+	if (link_id >= IEEE80211_MLD_MAX_NUM_LINKS)
+		return -EINVAL;
+
+	enable = nla_get_u8(tb[MTK_VENDOR_ATTR_EPCS_ENABLE]);
+
+	wmm_idx = nla_get_u16(tb[MTK_VENDOR_ATTR_EPCS_WMM_IDX]);
+	if (wmm_idx >= EPCS_MAX_WMM_PARAMS)
+		return -EINVAL;
+
+	params = kzalloc(len, GFP_KERNEL);
+	if (!params)
+		return -ENOMEM;
+	nla_memcpy(params, tb[MTK_VENDOR_ATTR_EPCS_WMM_PARAMS], len);
+
+	mutex_lock(&dev->mt76.mutex);
+	nla_memcpy(addr, tb[MTK_VENDOR_ATTR_EPCS_ADDR], ETH_ALEN);
+	sta = ieee80211_find_sta_by_ifaddr(hw, addr, NULL);
+	if (!sta)
+		ret = -EINVAL;
+	else
+		ret = mt7996_mcu_epcs_ctrl(UNI_EPCS_CTRL_ENABLE, dev, sta,
+					   link_id, enable, wmm_idx, params);
+	mutex_unlock(&dev->mt76.mutex);
+
+	kfree(params);
+
+	return ret;
+}
+
 static int mt7996_vendor_scs_ctrl(struct wiphy *wiphy, struct wireless_dev *wdev,
 				  const void *data, int data_len)
 {
@@ -1814,6 +1884,17 @@ static const struct wiphy_vendor_command mt7996_vendor_commands[] = {
 		.policy = eml_ctrl_policy,
 		.maxattr = MTK_VENDOR_ATTR_EML_CTRL_MAX,
 	},
+	{
+		.info = {
+			.vendor_id = MTK_NL80211_VENDOR_ID,
+			.subcmd = MTK_NL80211_VENDOR_SUBCMD_EPCS_CTRL,
+		},
+		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV |
+			 WIPHY_VENDOR_CMD_NEED_RUNNING,
+		.doit = mt7996_vendor_epcs_ctrl,
+		.policy = epcs_ctrl_policy,
+		.maxattr = MTK_VENDOR_ATTR_EPCS_CTRL_MAX,
+	},
 	{
 		.info = {
 			.vendor_id = MTK_NL80211_VENDOR_ID,
diff --git a/mt7996/vendor.h b/mt7996/vendor.h
index dcfdfa3d..71a8e1c7 100644
--- a/mt7996/vendor.h
+++ b/mt7996/vendor.h
@@ -21,6 +21,7 @@ enum mtk_nl80211_vendor_subcmds {
 	MTK_NL80211_VENDOR_SUBCMD_TXPOWER_CTRL = 0xce,
 	MTK_NL80211_VENDOR_SUBCMD_SCS_CTRL = 0xd0,
 	MTK_NL80211_VENDOR_SUBCMD_EML_CTRL = 0xd3,
+	MTK_NL80211_VENDOR_SUBCMD_EPCS_CTRL = 0xd4,
 };
 
 enum mtk_nl80211_vendor_events {
@@ -265,6 +266,21 @@ enum mtk_vendor_attr_eml_ctrl {
 		NUM_MTK_VENDOR_ATTRS_EML_CTRL - 1
 };
 
+enum mtk_vendor_attr_epcs_ctrl {
+	MTK_VENDOR_ATTR_EPCS_UNSPEC,
+
+	MTK_VENDOR_ATTR_EPCS_ADDR,
+	MTK_VENDOR_ATTR_EPCS_LINK_ID,
+	MTK_VENDOR_ATTR_EPCS_ENABLE,
+	MTK_VENDOR_ATTR_EPCS_WMM_IDX,
+	MTK_VENDOR_ATTR_EPCS_WMM_PARAMS,
+
+	/* keep last */
+	NUM_MTK_VENDOR_ATTRS_EPCS_CTRL,
+	MTK_VENDOR_ATTR_EPCS_CTRL_MAX =
+		NUM_MTK_VENDOR_ATTRS_EPCS_CTRL - 1
+};
+
 enum mtk_vendor_attr_scs_ctrl {
 	MTK_VENDOR_ATTR_SCS_CTRL_UNSPEC,
 
-- 
2.45.2

