From 2bd44680fc7e6ee06b1253ab77e26d0b1fdb3ba4 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Wed, 19 Feb 2025 12:02:51 +0800
Subject: [PATCH 66/95] mtk: mt76: mt7996: testmode refactor

Some testmode refactor
1. add testmode debug msg
2. add wake_up for cal event
3. change bf wait event queue from tx_wait to mcu wait queue
4. code refactor

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>

Remove RX gain channel list check since the channel could be determined by the
user.
Keep the RX ongoing while performing RX gain calibration; otherwise, the
calibration would fail.
Move reset_rx_stats to the front of set_state(RX_FRAMES) to make sure
the RX stats is cleared before RX starts.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>

In mt76_testmode_cmd, dev->test_ops->set_params (mt7996_tm_update_params) is called before
setting the param_set bitmap for each presented attributes via mt76_testmode_param_set.
Therefore, set param_set bitmap of MT76_TM_ATTR_TX_ANTENNA before
calling mt7996_tm_set_antenna, otherwise it would be blocked by
parameter present check.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 debug.h           |   1 +
 mt76.h            |   3 -
 mt7996/eeprom.h   |   2 +-
 mt7996/mmio.c     |   2 +-
 mt7996/mtk_mcu.c  |  51 +++--
 mt7996/mtk_mcu.h  |   9 +-
 mt7996/testmode.c | 524 +++++++++++++++++++++-------------------------
 mt7996/testmode.h |  53 ++---
 testmode.c        |  23 +-
 testmode.h        |  19 +-
 10 files changed, 340 insertions(+), 347 deletions(-)

diff --git a/debug.h b/debug.h
index c85d9def..9181d75b 100644
--- a/debug.h
+++ b/debug.h
@@ -15,6 +15,7 @@ enum mt76_debug_mask {
 	MT76_DBG_MLD = BIT(4),
 	MT76_DBG_TXRX = BIT(5),
 	MT76_DBG_SCAN = BIT(6),
+	MT76_DBG_TEST = BIT(7),
 
 	MT76_DBG_ALL = 0xffffffff,
 };
diff --git a/mt76.h b/mt76.h
index 47bc00d4..56c5f2a2 100644
--- a/mt76.h
+++ b/mt76.h
@@ -916,9 +916,6 @@ struct mt76_testmode_data {
 	u32 ipi_period;
 	u8 ipi_reset;
 
-	u16 rx_gain_bitmap;
-	bool rx_gain_done;
-
 	u8 fast_cal;
 };
 
diff --git a/mt7996/eeprom.h b/mt7996/eeprom.h
index 2370eb0b..d2b88164 100644
--- a/mt7996/eeprom.h
+++ b/mt7996/eeprom.h
@@ -26,7 +26,7 @@ enum mt7996_eeprom_field {
 	MT_EE_TX0_POWER_6G =	0x1310,
 	MT_EE_RX_GAIN_CAL =	0x1830,
 
-	__MT_EE_MAX =	0x1dff,
+	__MT_EE_MAX =		0x1dff,
 	/* 0x1e10 ~ 0x2d644 used to save group cal data */
 	MT_EE_PRECAL =		0x1e10,
 };
diff --git a/mt7996/mmio.c b/mt7996/mmio.c
index 67574101..737e5e1b 100644
--- a/mt7996/mmio.c
+++ b/mt7996/mmio.c
@@ -17,7 +17,7 @@
 static bool wed_enable = true;
 module_param(wed_enable, bool, 0644);
 
-unsigned int mt76_debug_mask = 0x1f;
+unsigned int mt76_debug_mask = 0x9f;
 module_param(mt76_debug_mask, uint, 0644);
 MODULE_PARM_DESC(mt76_debug_mask, "Debugging mask");
 
diff --git a/mt7996/mtk_mcu.c b/mt7996/mtk_mcu.c
index f194fcf1..5133afa3 100644
--- a/mt7996/mtk_mcu.c
+++ b/mt7996/mtk_mcu.c
@@ -465,7 +465,8 @@ mt7996_ibf_phase_assign(struct mt7996_dev *dev,
 		phase_assign(cal->group, v2, m_t2_h, true);
 		if (cal->group) {
 			phase->v2.phase_5g.m_t3_h = cal->v2.phase_5g.m_t3_h;
-			dev_info(dev->mt76.dev, "m_t3_h = %d\n", phase->v2.phase_5g.m_t3_h);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "m_t3_h = %d\n", phase->v2.phase_5g.m_t3_h);
 		}
 		phase_assign_rx_ext(cal->group, v2, r0, true);
 		phase_assign_rx_ext(cal->group, v2, r1, true);
@@ -474,12 +475,18 @@ mt7996_ibf_phase_assign(struct mt7996_dev *dev,
 		if (cal->group) {
 			memcpy(&phase->v2.phase_5g.r4, &cal->v2.phase_5g.r4,
 			       sizeof(struct txbf_rx_phase_ext));
-			dev_info(dev->mt76.dev, "r4.rx_uh = %d\n", phase->v2.phase_5g.r4.rx_uh);
-			dev_info(dev->mt76.dev, "r4.rx_h = %d\n", phase->v2.phase_5g.r4.rx_h);
-			dev_info(dev->mt76.dev, "r4.rx_mh = %d\n", phase->v2.phase_5g.r4.rx_mh);
-			dev_info(dev->mt76.dev, "r4.rx_m = %d\n", phase->v2.phase_5g.r4.rx_m);
-			dev_info(dev->mt76.dev, "r4.rx_l = %d\n", phase->v2.phase_5g.r4.rx_l);
-			dev_info(dev->mt76.dev, "r4.rx_ul = %d\n", phase->v2.phase_5g.r4.rx_ul);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "r4.rx_uh = %d\n", phase->v2.phase_5g.r4.rx_uh);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "r4.rx_h = %d\n", phase->v2.phase_5g.r4.rx_h);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "r4.rx_mh = %d\n", phase->v2.phase_5g.r4.rx_mh);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "r4.rx_m = %d\n", phase->v2.phase_5g.r4.rx_m);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "r4.rx_l = %d\n", phase->v2.phase_5g.r4.rx_l);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "r4.rx_ul = %d\n", phase->v2.phase_5g.r4.rx_ul);
 		}
 	}
 }
@@ -800,57 +807,60 @@ mt7996_mcu_rx_bf_event(struct mt7996_dev *dev, struct sk_buff *skb)
 				break;
 			phase = &phase[cal->group];
 			phase->status = cal->status;
-			dev_info(dev->mt76.dev, "Calibrated result = %d\n", phase->status);
-			dev_info(dev->mt76.dev, "Group %d and Group M\n", cal->group);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "Calibrated result = %d\n", phase->status);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "Group %d and Group M\n", cal->group);
 			mt7996_ibf_phase_assign(dev, cal, phase);
 			break;
 		case IBF_PHASE_CAL_VERIFY:
 		case IBF_PHASE_CAL_VERIFY_INSTRUMENT:
-			dev_info(dev->mt76.dev, "Verification result = %d\n", cal->status);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "Verification result = %d\n", cal->status);
 			break;
 		default:
 			break;
 		}
 
 		if (get_ibf_version(dev) == IBF_VER_2) {
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "c0_uh = %d, c1_uh = %d, c2_uh = %d, c3_uh = %d c4_uh = %d\n",
 				 phase_out.v2.c0_uh, phase_out.v2.c1_uh, phase_out.v2.c2_uh,
 				 phase_out.v2.c3_uh, phase_out.v2.c4_uh);
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "c0_h = %d, c1_h = %d, c2_h = %d, c3_h = %d c4_h = %d\n",
 				 phase_out.v2.c0_h, phase_out.v2.c1_h, phase_out.v2.c2_h,
 				 phase_out.v2.c3_h, phase_out.v2.c4_h);
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "c0_mh = %d, c1_mh = %d, c2_mh = %d, c3_mh = %d c4_mh = %d\n",
 				 phase_out.v2.c0_mh, phase_out.v2.c1_mh, phase_out.v2.c2_mh,
 				 phase_out.v2.c3_mh, phase_out.v2.c4_mh);
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "c0_m = %d, c1_m = %d, c2_m = %d, c3_m = %d c4_m = %d\n",
 				 phase_out.v2.c0_m, phase_out.v2.c1_m, phase_out.v2.c2_m,
 				 phase_out.v2.c3_m, phase_out.v2.c4_m);
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "c0_l = %d, c1_l = %d, c2_l = %d, c3_l = %d c4_l = %d\n",
 				 phase_out.v2.c0_l, phase_out.v2.c1_l, phase_out.v2.c2_l,
 				 phase_out.v2.c3_l, phase_out.v2.c4_l);
 		} else {
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "c0_uh = %d, c1_uh = %d, c2_uh = %d, c3_uh = %d\n",
 				 phase_out.v1.c0_uh, phase_out.v1.c1_uh,
 				 phase_out.v1.c2_uh, phase_out.v1.c3_uh);
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "c0_h = %d, c1_h = %d, c2_h = %d, c3_h = %d\n",
 				 phase_out.v1.c0_h, phase_out.v1.c1_h,
 				 phase_out.v1.c2_h, phase_out.v1.c3_h);
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "c0_mh = %d, c1_mh = %d, c2_mh = %d, c3_mh = %d\n",
 				 phase_out.v1.c0_mh, phase_out.v1.c1_mh,
 				 phase_out.v1.c2_mh, phase_out.v1.c3_mh);
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "c0_m = %d, c1_m = %d, c2_m = %d, c3_m = %d\n",
 				 phase_out.v1.c0_m, phase_out.v1.c1_m,
 				 phase_out.v1.c2_m, phase_out.v1.c3_m);
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "c0_l = %d, c1_l = %d, c2_l = %d, c3_l = %d\n",
 				 phase_out.v1.c0_l, phase_out.v1.c1_l,
 				 phase_out.v1.c2_l, phase_out.v1.c3_l);
@@ -863,6 +873,7 @@ mt7996_mcu_rx_bf_event(struct mt7996_dev *dev, struct sk_buff *skb)
 			 __func__, event->tag);
 	}
 
+	wake_up(&dev->mt76.mcu.wait);
 }
 
 
diff --git a/mt7996/mtk_mcu.h b/mt7996/mtk_mcu.h
index df4e6c1e..988f13a5 100644
--- a/mt7996/mtk_mcu.h
+++ b/mt7996/mtk_mcu.h
@@ -715,11 +715,13 @@ struct mt7996_txbf_phase {
 	if (group) {										\
 		phase->v.phase_5g.field = cal->v.phase_5g.field;				\
 		if (dump)									\
-			dev_info(dev->mt76.dev, "%s = %d\n", #field, phase->v.phase_5g.field);	\
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST, "%s = %d\n",			\
+				 #field, phase->v.phase_5g.field);				\
 	} else {										\
 		phase->v.phase_2g.field = cal->v.phase_5g.field;				\
 		if (dump)									\
-			dev_info(dev->mt76.dev, "%s = %d\n", #field, phase->v.phase_2g.field);	\
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST, "%s = %d\n",			\
+				 #field, phase->v.phase_2g.field);				\
 	}											\
 })
 
@@ -745,7 +747,8 @@ struct mt7996_txbf_phase {
 		phase_assign(group, v, rx.rx_uh, true);						\
 		phase_assign(group, v, rx.rx_h, true);						\
 		phase->v.phase_5g.rx.rx_mh = cal->v.phase_5g.rx.rx_mh;				\
-		dev_info(dev->mt76.dev, "%s.rx_mh = %d\n", #rx, phase->v.phase_5g.rx.rx_mh);	\
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "%s.rx_mh = %d\n",				\
+			 #rx, phase->v.phase_5g.rx.rx_mh);					\
 		phase_assign(group, v, rx.rx_m, true);						\
 		phase_assign(group, v, rx.rx_l, true);						\
 		phase_assign(group, v, rx.rx_ul, true);						\
diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index 3023be30..7f365c39 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -10,7 +10,7 @@
 #include "eeprom.h"
 #include "mtk_mcu.h"
 
-enum {
+enum tm_changed {
 	TM_CHANGED_TXPOWER,
 	TM_CHANGED_FREQ_OFFSET,
 	TM_CHANGED_SKU_EN,
@@ -98,7 +98,7 @@ static u8 mt7996_tm_rate_mapping(u8 tx_rate_mode, enum rate_mapping_type type)
 	};
 
 	if (tx_rate_mode > MT76_TM_TX_MODE_MAX)
-		return -EINVAL;
+		return 0;
 
 	return rate_to_phy[tx_rate_mode][type];
 }
@@ -129,9 +129,10 @@ mt7996_tm_check_antenna(struct mt7996_phy *phy)
 	chainmask = chainmask >> dev->chainshift[band_idx];
 	aux_rx_mask = BIT(fls(chainmask)) * phy->has_aux_rx;
 	if (td->tx_antenna_mask & ~(chainmask | aux_rx_mask)) {
-		dev_err(dev->mt76.dev,
-			"tx antenna mask 0x%x exceeds hw limit (chainmask 0x%x, has aux rx: %s)\n",
-			td->tx_antenna_mask, chainmask, phy->has_aux_rx ? "yes" : "no");
+		mt76_err(&dev->mt76,
+			 "%s: antenna mask 0x%x exceeds limit (chainmask 0x%x, %s auxiliary RX)\n",
+			 __func__, td->tx_antenna_mask, chainmask,
+			 phy->has_aux_rx ? "has" : "no");
 		return -EINVAL;
 	}
 
@@ -297,7 +298,7 @@ mt7996_tm_update_channel(struct mt7996_phy *phy)
 	int width_mhz;
 
 	if (!chan) {
-		dev_info(dev->mt76.dev, "no channel found, update failed!\n");
+		mt76_err(&dev->mt76, "%s: no channel found, update failed\n", __func__);
 		return;
 	}
 
@@ -317,9 +318,9 @@ mt7996_tm_update_channel(struct mt7996_phy *phy)
 		int pkt_bw_mhz = mt7996_tm_bw_mapping(td->tx_pkt_bw, BW_MAP_NL_TO_MHZ);
 
 		if (pkt_bw_mhz > width_mhz) {
-			dev_info(dev->mt76.dev,
-				 "per-packet bw cannot exceed system bw, use %d MHz instead\n",
-				 width_mhz);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "%s: per-packet bw cannot exceed system bw, use %d MHz instead\n",
+				 __func__, width_mhz);
 			td->tx_pkt_bw = width;
 		}
 		dbw = td->tx_pkt_bw;
@@ -329,8 +330,9 @@ mt7996_tm_update_channel(struct mt7996_phy *phy)
 	/* control channel selection index */
 	if (mt76_testmode_param_present(td, MT76_TM_ATTR_TX_PRI_SEL)) {
 		if (td->tx_pri_sel > width_mhz / 20 - 1) {
-			dev_info(dev->mt76.dev,
-				 "Invalid primary channel selection index, use 0 instead\n");
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "%s: invalid primary channel selection index, use 0 instead\n",
+				 __func__);
 			td->tx_pri_sel = 0;
 		}
 		pri_sel = td->tx_pri_sel;
@@ -342,18 +344,21 @@ mt7996_tm_update_channel(struct mt7996_phy *phy)
 		switch (td->fast_cal) {
 		case MT76_TM_FAST_CAL_TYPE_RX:
 			mt7996_tm_set(dev, SET_ID(CAL_BITMAP), FAST_CAL_RX);
-			dev_info(dev->mt76.dev, "apply RX fast cal (skip TX cal)\n");
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "%s: apply RX fast cal (skip TX cal)\n", __func__);
 			break;
 		case MT76_TM_FAST_CAL_TYPE_POWER:
 			mt7996_tm_set(dev, SET_ID(CAL_BITMAP), FAST_CAL_POWER);
-			dev_info(dev->mt76.dev, "apply power fast cal (skip DPD cal)\n");
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "%s: apply power fast cal (skip DPD cal)\n", __func__);
 			break;
 		case MT76_TM_FAST_CAL_TYPE_NONE:
 		case MT76_TM_FAST_CAL_TYPE_TX:
 		default:
 			/* same as not setting any cal bitmap */
 			mt7996_tm_set(dev, SET_ID(CAL_BITMAP), FAST_CAL_NONE);
-			dev_info(dev->mt76.dev, "apply full cal\n");
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "%s: apply full cal\n", __func__);
 			break;
 		}
 	}
@@ -380,48 +385,50 @@ mt7996_tm_set_tx_frames(struct mt7996_phy *phy, bool en)
 	struct mt76_testmode_data *td = &phy->mt76->test;
 	struct mt7996_dev *dev = phy->dev;
 
-	//TODO: RU operation, replace mcs, nss, and ldpc
-	if (en) {
-		mt7996_tm_set(dev, SET_ID(MAC_HEADER), FRAME_CONTROL);
-		mt7996_tm_set(dev, SET_ID(SEQ_CTRL), 0);
-		mt7996_tm_set(dev, SET_ID(TX_COUNT), td->tx_count);
-		mt7996_tm_set(dev, SET_ID(TX_MODE),
-			      mt7996_tm_rate_mapping(td->tx_rate_mode, RATE_MODE_TO_PHY));
-		mt7996_tm_set(dev, SET_ID(TX_RATE), td->tx_rate_idx);
-
-		if (mt76_testmode_param_present(td, MT76_TM_ATTR_TX_POWER))
-			mt7996_tm_set(dev, SET_ID(POWER), td->tx_power[0]);
-
-		if (mt76_testmode_param_present(td, MT76_TM_ATTR_TX_TIME)) {
-			mt7996_tm_set(dev, SET_ID(TX_LEN), 0);
-			mt7996_tm_set(dev, SET_ID(TX_TIME), td->tx_time);
-		} else {
-			mt7996_tm_set(dev, SET_ID(TX_LEN), td->tx_mpdu_len);
-			mt7996_tm_set(dev, SET_ID(TX_TIME), 0);
-		}
+	if (!en) {
+		/* trigger firmware to stop TX */
+		mt7996_tm_tx_stop(phy->mt76);
+		return;
+	}
 
-		mt7996_tm_set_antenna(phy, SET_ID(TX_PATH));
-		mt7996_tm_set_antenna(phy, SET_ID(RX_PATH));
-		mt7996_tm_set(dev, SET_ID(STBC), td->tx_rate_stbc);
-		mt7996_tm_set(dev, SET_ID(ENCODE_MODE), td->tx_rate_ldpc);
-		mt7996_tm_set(dev, SET_ID(IBF_ENABLE), td->ibf);
-		mt7996_tm_set(dev, SET_ID(EBF_ENABLE), td->ebf);
-		mt7996_tm_set(dev, SET_ID(IPG), td->tx_ipg);
-		mt7996_tm_set(dev, SET_ID(GI), td->tx_rate_sgi);
-		mt7996_tm_set(dev, SET_ID(NSS), td->tx_rate_nss);
-		mt7996_tm_set(dev, SET_ID(AID_OFFSET), 0);
-		mt7996_tm_set(dev, SET_ID(PUNCTURE), td->tx_preamble_puncture);
+	/* TODO: RU operation, replace mcs, nss, and ldpc */
+	mt7996_tm_set(dev, SET_ID(MAC_HEADER), FRAME_CONTROL);
+	mt7996_tm_set(dev, SET_ID(SEQ_CTRL), 0);
+	mt7996_tm_set(dev, SET_ID(TX_COUNT), td->tx_count);
+	mt7996_tm_set(dev, SET_ID(TX_MODE),
+		      mt7996_tm_rate_mapping(td->tx_rate_mode, RATE_MODE_TO_PHY));
+	mt7996_tm_set(dev, SET_ID(TX_RATE), td->tx_rate_idx);
 
-		mt7996_tm_set(dev, SET_ID(MAX_PE), 2);
-		mt7996_tm_set(dev, SET_ID(HW_TX_MODE), 0);
-		if (!td->bf_en)
-			mt7996_tm_update_channel(phy);
+	if (mt76_testmode_param_present(td, MT76_TM_ATTR_TX_POWER))
+		mt7996_tm_set(dev, SET_ID(POWER), td->tx_power[0]);
 
-		/* trigger firmware to start TX */
-		mt7996_tm_set(dev, SET_ID(COMMAND), RF_CMD(START_TX));
+	if (mt76_testmode_param_present(td, MT76_TM_ATTR_TX_TIME)) {
+		mt7996_tm_set(dev, SET_ID(TX_LEN), 0);
+		mt7996_tm_set(dev, SET_ID(TX_TIME), td->tx_time);
 	} else {
-		mt7996_tm_tx_stop(phy->mt76);
+		mt7996_tm_set(dev, SET_ID(TX_LEN), td->tx_mpdu_len);
+		mt7996_tm_set(dev, SET_ID(TX_TIME), 0);
 	}
+
+	mt7996_tm_set_antenna(phy, SET_ID(TX_PATH));
+	mt7996_tm_set_antenna(phy, SET_ID(RX_PATH));
+	mt7996_tm_set(dev, SET_ID(STBC), td->tx_rate_stbc);
+	mt7996_tm_set(dev, SET_ID(ENCODE_MODE), td->tx_rate_ldpc);
+	mt7996_tm_set(dev, SET_ID(IBF_ENABLE), td->ibf);
+	mt7996_tm_set(dev, SET_ID(EBF_ENABLE), td->ebf);
+	mt7996_tm_set(dev, SET_ID(IPG), td->tx_ipg);
+	mt7996_tm_set(dev, SET_ID(GI), td->tx_rate_sgi);
+	mt7996_tm_set(dev, SET_ID(NSS), td->tx_rate_nss);
+	mt7996_tm_set(dev, SET_ID(AID_OFFSET), 0);
+	mt7996_tm_set(dev, SET_ID(PUNCTURE), td->tx_preamble_puncture);
+
+	mt7996_tm_set(dev, SET_ID(MAX_PE), 2);
+	mt7996_tm_set(dev, SET_ID(HW_TX_MODE), 0);
+	if (!td->bf_en)
+		mt7996_tm_update_channel(phy);
+
+	/* trigger firmware to start TX */
+	mt7996_tm_set(dev, SET_ID(COMMAND), RF_CMD(START_TX));
 }
 
 static int
@@ -450,36 +457,38 @@ mt7996_tm_set_rx_frames(struct mt7996_phy *phy, bool en)
 	struct mt7996_dev *dev = phy->dev;
 	int ret;
 
-	if (en) {
-		ret = mt7996_tm_rx_stats_user_ctrl(phy, td->aid);
-		if (ret) {
-			dev_info(dev->mt76.dev, "Set RX stats user control failed!\n");
-			return;
-		}
-
-		if (!td->bf_en)
-			mt7996_tm_update_channel(phy);
+	if (!en) {
+		/* trigger firmware to stop RX */
+		mt7996_tm_set(dev, SET_ID(COMMAND), RF_CMD(STOP_TEST));
+		return;
+	}
 
-		if (td->tx_rate_mode >= MT76_TM_TX_MODE_HE_MU) {
-			if (td->aid)
-				ret = mt7996_tm_set(dev, SET_ID(RX_MU_AID), td->aid);
-			else
-				ret = mt7996_tm_set(dev, SET_ID(RX_MU_AID), RX_MU_DISABLE);
-		}
-		mt7996_tm_set(dev, SET_ID(TX_MODE),
-			      mt7996_tm_rate_mapping(td->tx_rate_mode, RATE_MODE_TO_PHY));
-		mt7996_tm_set(dev, SET_ID(GI), td->tx_rate_sgi);
-		mt7996_tm_set_antenna(phy, SET_ID(RX_PATH));
-		mt7996_tm_set(dev, SET_ID(MAX_PE), 2);
+	ret = mt7996_tm_rx_stats_user_ctrl(phy, td->aid);
+	if (ret) {
+		mt76_err(&dev->mt76, "%s: failed to set RX stats user control (%d)\n",
+			 __func__, ret);
+		return;
+	}
 
-		mt7996_tm_set_mac_addr(dev, td->addr[1], SET_ID(SA));
+	if (!td->bf_en)
+		mt7996_tm_update_channel(phy);
 
-		/* trigger firmware to start RX */
-		mt7996_tm_set(dev, SET_ID(COMMAND), RF_CMD(START_RX));
-	} else {
-		/* trigger firmware to stop RX */
-		mt7996_tm_set(dev, SET_ID(COMMAND), RF_CMD(STOP_TEST));
+	if (td->tx_rate_mode >= MT76_TM_TX_MODE_HE_MU) {
+		if (td->aid)
+			mt7996_tm_set(dev, SET_ID(RX_MU_AID), td->aid);
+		else
+			mt7996_tm_set(dev, SET_ID(RX_MU_AID), RX_MU_DISABLE);
 	}
+	mt7996_tm_set(dev, SET_ID(TX_MODE),
+		      mt7996_tm_rate_mapping(td->tx_rate_mode, RATE_MODE_TO_PHY));
+	mt7996_tm_set(dev, SET_ID(GI), td->tx_rate_sgi);
+	mt7996_tm_set_antenna(phy, SET_ID(RX_PATH));
+	mt7996_tm_set(dev, SET_ID(MAX_PE), 2);
+
+	mt7996_tm_set_mac_addr(dev, td->addr[1], SET_ID(SA));
+
+	/* trigger firmware to start RX */
+	mt7996_tm_set(dev, SET_ID(COMMAND), RF_CMD(START_RX));
 }
 
 static void
@@ -489,29 +498,27 @@ mt7996_tm_set_tx_cont(struct mt7996_phy *phy, bool en)
 	struct mt76_testmode_data *td = &phy->mt76->test;
 	struct mt7996_dev *dev = phy->dev;
 
-	if (en) {
-		mt7996_tm_update_channel(phy);
-		mt7996_tm_set(dev, SET_ID(TX_MODE),
-			      mt7996_tm_rate_mapping(td->tx_rate_mode, RATE_MODE_TO_PHY));
-		mt7996_tm_set(dev, SET_ID(TX_RATE), td->tx_rate_idx);
-		/* fix payload is OFDM */
-		mt7996_tm_set(dev, SET_ID(CONT_WAVE_MODE), CONT_WAVE_MODE_OFDM);
-		mt7996_tm_set(dev, SET_ID(ANT_MASK), td->tx_antenna_mask);
-
-		/* trigger firmware to start CONT TX */
-		mt7996_tm_set(dev, SET_ID(COMMAND), RF_CMD(CONT_WAVE));
-	} else {
+	if (!en) {
 		/* trigger firmware to stop CONT TX  */
 		mt7996_tm_set(dev, SET_ID(COMMAND), RF_CMD(STOP_TEST));
+		return;
 	}
+
+	mt7996_tm_update_channel(phy);
+	mt7996_tm_set(dev, SET_ID(TX_MODE),
+		      mt7996_tm_rate_mapping(td->tx_rate_mode, RATE_MODE_TO_PHY));
+	mt7996_tm_set(dev, SET_ID(TX_RATE), td->tx_rate_idx);
+	/* fix payload is OFDM */
+	mt7996_tm_set(dev, SET_ID(CONT_WAVE_MODE), CONT_WAVE_MODE_OFDM);
+	mt7996_tm_set(dev, SET_ID(ANT_MASK), td->tx_antenna_mask);
+
+	/* trigger firmware to start CONT TX */
+	mt7996_tm_set(dev, SET_ID(COMMAND), RF_CMD(CONT_WAVE));
 }
 
 static int
 mt7996_tm_group_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 {
-	u8 *eeprom, do_precal;
-	u32 i, group_size, dpd_size, size, offs, *pre_cal;
-	int ret = 0;
 	struct mt7996_dev *dev = phy->dev;
 	struct mt76_dev *mdev = &dev->mt76;
 	struct mt7996_tm_req req = {
@@ -525,9 +532,13 @@ mt7996_tm_group_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 			.op.rf.param.cal_param.band_idx = phy->mt76->band_idx,
 		},
 	};
+	u32 i, group_size, dpd_size, size, offs, *pre_cal;
+	u8 *eeprom, do_precal;
+	int ret = 0;
 
 	if (!dev->flash_mode) {
-		dev_err(dev->mt76.dev, "Currently not in FLASH or BIN FILE mode, return!\n");
+		mt76_err(&dev->mt76, "%s: currently not in FLASH or BIN FILE mode, return\n",
+			 __func__);
 		return -EOPNOTSUPP;
 	}
 
@@ -555,22 +566,24 @@ mt7996_tm_group_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 				   30 * HZ);
 
 		if (ret)
-			dev_err(dev->mt76.dev, "Group Pre-cal: mcu send msg failed!\n");
+			mt76_err(&dev->mt76, "%s: failed to send mcu msg (%d)\n",
+				 __func__, ret);
 		else
 			eeprom[offs] |= do_precal;
 		break;
 	case MT76_TM_STATE_GROUP_PREK_DUMP:
 		pre_cal = (u32 *)dev->cal;
 		if (!pre_cal) {
-			dev_info(dev->mt76.dev, "Not group pre-cal yet!\n");
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "%s: no group pre-cal found\n", __func__);
 			return ret;
 		}
-		dev_info(dev->mt76.dev, "Group Pre-Cal:\n");
-		for (i = 0; i < (group_size / sizeof(u32)); i += 4) {
-			dev_info(dev->mt76.dev, "[0x%08lx] 0x%8x 0x%8x 0x%8x 0x%8x\n",
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "Group Pre-Cal:\n");
+		for (i = 0; i < (group_size / sizeof(u32)); i += 4)
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "[0x%08lx] 0x%8x 0x%8x 0x%8x 0x%8x\n",
 				 i * sizeof(u32), pre_cal[i], pre_cal[i + 1],
 				 pre_cal[i + 2], pre_cal[i + 3]);
-		}
 		break;
 	case MT76_TM_STATE_GROUP_PREK_CLEAN:
 		pre_cal = (u32 *)dev->cal;
@@ -623,7 +636,8 @@ mt7996_tm_dpd_prek_send_req(struct mt7996_phy *phy, struct mt7996_tm_req *req,
 		ret = mt76_mcu_send_msg(&dev->mt76, MCU_WM_UNI_CMD(TESTMODE_CTRL), req,
 					sizeof(*req), false);
 		if (ret) {
-			dev_err(dev->mt76.dev, "DPD Pre-cal: mcu send msg failed!\n");
+			mt76_err(&dev->mt76, "%s: failed to send mcu msg (%d)\n",
+				 __func__, ret);
 			goto out;
 		}
 	}
@@ -650,7 +664,7 @@ mt7996_tm_dpd_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 			.action = RF_ACTION_IN_RF_TEST,
 			.icap_len = RF_TEST_ICAP_LEN,
 			.op.rf.func_idx = cpu_to_le32(RF_TEST_RE_CAL),
-			.op.rf.param.cal_param.band_idx = phy->mt76->band_idx,
+			.op.rf.param.cal_param.band_idx = mphy->band_idx,
 		},
 	};
 	u32 i, j, group_size, dpd_size, size, offs, *pre_cal;
@@ -659,7 +673,8 @@ mt7996_tm_dpd_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 	int ret = 0;
 
 	if (!dev->flash_mode) {
-		dev_err(dev->mt76.dev, "Currently not in FLASH or BIN FILE mode, return!\n");
+		mt76_err(&dev->mt76, "%s: currently not in FLASH or BIN FILE mode, return\n",
+			 __func__);
 		return -EOPNOTSUPP;
 	}
 
@@ -767,14 +782,16 @@ mt7996_tm_dpd_prek(struct mt7996_phy *phy, enum mt76_testmode_state state)
 		break;
 	case MT76_TM_STATE_DPD_DUMP:
 		if (!dev->cal) {
-			dev_info(dev->mt76.dev, "Not DPD pre-cal yet!\n");
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "%s: no dpd pre-cal found\n", __func__);
 			return ret;
 		}
 		pre_cal = (u32 *)dev->cal;
-		dev_info(dev->mt76.dev, "DPD Pre-Cal:\n");
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "DPD Pre-Cal:\n");
 		for (i = 0; i < dpd_size / sizeof(u32); i += 4) {
 			j = i + (group_size / sizeof(u32));
-			dev_info(dev->mt76.dev, "[0x%08lx] 0x%8x 0x%8x 0x%8x 0x%8x\n",
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "[0x%08lx] 0x%8x 0x%8x 0x%8x 0x%8x\n",
 				 j * sizeof(u32), pre_cal[j], pre_cal[j + 1],
 				 pre_cal[j + 2], pre_cal[j + 3]);
 		}
@@ -823,7 +840,7 @@ mt7996_tm_dump_precal(struct mt76_phy *mphy, struct sk_buff *msg, int flag, int
 	};
 
 	if (!dev->cal) {
-		dev_info(dev->mt76.dev, "Not pre-cal yet!\n");
+		mt76_err(&dev->mt76, "%s: no pre-cal found\n", __func__);
 		return 0;
 	}
 
@@ -904,85 +921,11 @@ mt7996_tm_dump_precal(struct mt76_phy *mphy, struct sk_buff *msg, int flag, int
 	return 0;
 }
 
-static bool
-mt7996_tm_check_rx_gain_ch(struct mt7996_phy *phy)
-{
-	const u32 rx_gain_ch_list_2g[] = {2442};
-	const u32 rx_gain_ch_list_5g[] = {
-		5180, 5260, 5340, 5500, 5580, 5660, 5745, 5825,
-	};
-	const u32 rx_gain_ch_list_6g[] = {
-		5955, 6035, 6115, 6195, 6275, 6355, 6435, 6515,
-		6595, 6675, 6755, 6835, 6915, 6995, 7075,
-	};
-	struct cfg80211_chan_def *chandef = &phy->mt76->chandef;
-	struct mt76_testmode_data *td = &phy->mt76->test;
-	const u32 *ch_list;
-	int i, size;
-
-	if (!chandef->chan || chandef->width > NL80211_CHAN_WIDTH_20)
-		return false;
-
-	switch (chandef->chan->band) {
-	case NL80211_BAND_2GHZ:
-		ch_list = rx_gain_ch_list_2g;
-		size = ARRAY_SIZE(rx_gain_ch_list_2g);
-		break;
-	case NL80211_BAND_5GHZ:
-		ch_list = rx_gain_ch_list_5g;
-		size = ARRAY_SIZE(rx_gain_ch_list_5g);
-		break;
-	case NL80211_BAND_6GHZ:
-		ch_list = rx_gain_ch_list_6g;
-		size = ARRAY_SIZE(rx_gain_ch_list_6g);
-		break;
-	default:
-		return false;
-	}
-
-	for (i = 0; i < size; i++) {
-		if (chandef->chan->center_freq == ch_list[i]) {
-			td->rx_gain_bitmap |= BIT(i);
-			if (hweight16(td->rx_gain_bitmap) == size)
-				td->rx_gain_done = true;
-			return true;
-		}
-	}
-
-	return false;
-}
-
-static void
-mt7996_tm_reset_rx_gain(struct mt7996_phy *phy, bool all)
-{
-	struct mt7996_dev *dev = phy->dev;
-	u8 band_bitmap = 0, *eeprom = dev->mt76.eeprom.data;
-	struct mt76_testmode_data *td;
-	struct mt76_phy *mphy;
-	int i;
-
-	for (i = 0; i < __MT_MAX_BAND; i++) {
-		mphy = dev->mt76.phys[i];
-		if (!mphy || (!all && mphy != phy->mt76))
-			continue;
-
-		td = &mphy->test;
-		td->rx_gain_bitmap = 0;
-		td->rx_gain_done = false;
-		band_bitmap |= BIT(mt7996_tm_band_mapping(mphy->chandef.chan->band));
-	}
-
-	eeprom[MT_EE_DO_RX_GAIN_CAL] &= ~u8_encode_bits(band_bitmap,
-							MT_EE_WIFI_CAL_RX_GAIN);
-}
-
 static int
 mt7996_tm_rx_gain_cal(struct mt7996_phy *phy, enum mt76_testmode_state state)
 {
 	struct mt7996_dev *dev = phy->dev;
 	struct mt76_phy *mphy = phy->mt76;
-	struct cfg80211_chan_def *chandef = &mphy->chandef;
-	struct mt76_testmode_data *td = &mphy->test;
 	struct mt7996_tm_req req = {
 		.rf_test = {
 			.tag = cpu_to_le16(UNI_RF_TEST_CTRL),
@@ -994,12 +937,13 @@ mt7996_tm_rx_gain_cal(struct mt7996_phy *phy, enum mt76_testmode_state state)
 			.op.rf.param.cal_param.band_idx = mphy->band_idx,
 		},
 	};
-	u8 ch_band, *eeprom = dev->mt76.eeprom.data;
+	u8 *eeprom = dev->mt76.eeprom.data;
 	u32 i, j, size, *cal;
 	int ret = 0;
 
 	if (!dev->flash_mode) {
-		dev_err(dev->mt76.dev, "Currently not in FLASH or BIN FILE mode, return!\n");
+		mt76_err(&dev->mt76, "%s: currently not in FLASH or BIN FILE mode, return\n",
+			 __func__);
 		return -EOPNOTSUPP;
 	}
 
@@ -1008,54 +952,37 @@ mt7996_tm_rx_gain_cal(struct mt7996_phy *phy, enum mt76_testmode_state state)
 
 	switch (state) {
 	case MT76_TM_STATE_RX_GAIN_CAL:
-		if (!mt7996_tm_check_rx_gain_ch(phy)) {
-			dev_err(dev->mt76.dev, "Invalid calibration channel for RX gain\n");
-			ret = -EINVAL;
-			goto fail;
-		}
-
-		mt7996_tm_set_rx_frames(phy, true);
 		ret = mt76_mcu_send_msg(&dev->mt76, MCU_WM_UNI_CMD(TESTMODE_CTRL), &req,
 					sizeof(req), false);
 		if (ret) {
-			dev_err(dev->mt76.dev,
-				"RX Gain Cal: mcu send msg failed (%d)\n",
-				ret);
-			goto fail;
+			mt76_err(&dev->mt76, "%s: failed to send mcu msg (%d)\n",
+				 __func__, ret);
+			return ret;
 		}
 
 		wait_event_timeout(dev->mt76.mcu.wait, dev->cur_prek_offset == size, 30 * HZ);
-
-		/* disable runtime rx gain cal */
-		ch_band = mt7996_tm_band_mapping(chandef->chan->band);
-		if (td->rx_gain_done)
-			eeprom[MT_EE_DO_RX_GAIN_CAL] |= u8_encode_bits(BIT(ch_band),
-								       MT_EE_WIFI_CAL_RX_GAIN);
 		break;
 	case MT76_TM_STATE_RX_GAIN_CAL_DUMP:
 		cal = (u32 *)eeprom;
-		dev_info(dev->mt76.dev, "RX Gain Cal:\n");
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "RX Gain Cal:\n");
 		for (i = 0; i < (size / sizeof(u32)); i += 4) {
 			j = MT_EE_RX_GAIN_CAL / sizeof(u32) + i;
-			dev_info(dev->mt76.dev, "[0x%08lx] 0x%8x 0x%8x 0x%8x 0x%8x\n",
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "[0x%08lx] 0x%8x 0x%8x 0x%8x 0x%8x\n",
 				 j * sizeof(u32), cal[j], cal[j + 1],
 				 cal[j + 2], cal[j + 3]);
 		}
-		return 0;
+		break;
 	case MT76_TM_STATE_RX_GAIN_CAL_CLEAN:
 		memset(eeprom + MT_EE_RX_GAIN_CAL, 0, size);
-		mt7996_tm_reset_rx_gain(phy, true);
-		return 0;
+		eeprom[MT_EE_DO_RX_GAIN_CAL] &= ~u8_encode_bits(GENMASK(2, 0),
+								MT_EE_WIFI_CAL_RX_GAIN);
+		break;
 	default:
-		ret = -EINVAL;
-		goto fail;
+		return -EINVAL;
 	}
 
 	return 0;
-
-fail:
-	mt7996_tm_reset_rx_gain(phy, false);
-	return ret;
 }
 
 static void
@@ -1091,7 +1018,8 @@ mt7996_tm_re_cal_event(struct mt7996_dev *dev, struct mt7996_tm_rf_test_result *
 		       MT_EE_CAL_DPD_SIZE_5G;
 		break;
 	default:
-		dev_info(dev->mt76.dev, "Unknown calibration type %x\n", cal_type);
+		mt76_err(&dev->mt76, "%s: unknown calibration type %x\n",
+			 __func__, cal_type);
 		return;
 	}
 
@@ -1170,7 +1098,8 @@ mt7996_tm_set_offchan(struct mt7996_phy *phy, bool no_center)
 
 	if (!mphy->cap.has_5ghz || !freq) {
 		ret = -EINVAL;
-		dev_info(dev->mt76.dev, "Failed to set offchan (invalid band or channel)!\n");
+		mt76_err(&dev->mt76, "%s: failed to set offchan (invalid band or channel)\n",
+			 __func__);
 		goto out;
 	}
 
@@ -1183,7 +1112,8 @@ mt7996_tm_set_offchan(struct mt7996_phy *phy, bool no_center)
 							      NL80211_BAND_5GHZ);
 	if (!cfg80211_chandef_valid(&chandef)) {
 		ret = -EINVAL;
-		dev_info(dev->mt76.dev, "Failed to set offchan, chandef is invalid!\n");
+		mt76_err(&dev->mt76, "%s: failed to set offchan (invalid chandef)\n",
+			 __func__);
 		goto out;
 	}
 
@@ -1263,8 +1193,10 @@ mt7996_tm_ipi_work(struct work_struct *work)
 		power_lower_bound = ipi_idx ? ipi_idx_to_power_bound[ipi_idx - 1] : "-inf";
 		power_upper_bound = ipi_idx_to_power_bound[ipi_idx];
 
-		dev_info(dev->mt76.dev, "IPI %d (power range: (%s, %s] dBm): ipi count = %d\n",
-			 ipi_idx, power_lower_bound, power_upper_bound, ipi_hist_data[ipi_idx]);
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+			 "IPI %d (power range: (%s, %s] dBm): ipi count = %d\n",
+			 ipi_idx, power_lower_bound, power_upper_bound,
+			 ipi_hist_data[ipi_idx]);
 
 		if (td->ipi_threshold <= ipi_idx && ipi_idx <= RDD_IPI_HIST_10)
 			ipi_hist_count_th += ipi_hist_data[ipi_idx];
@@ -1274,9 +1206,11 @@ mt7996_tm_ipi_work(struct work_struct *work)
 
 	ipi_free_count = ipi_hist_data[RDD_IPI_FREE_RUN_CNT];
 
-	dev_info(dev->mt76.dev, "IPI threshold %d: ipi_hist_count_th = %d, ipi_free_count = %d\n",
+	mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+		 "IPI threshold %d: ipi_hist_count_th = %d, ipi_free_count = %d\n",
 		 td->ipi_threshold, ipi_hist_count_th, ipi_free_count);
-	dev_info(dev->mt76.dev, "TX assert time =  %d [ms]\n", data.tx_assert_time / 1000);
+	mt76_dbg(&dev->mt76, MT76_DBG_TEST, "TX assert time =  %d [ms]\n",
+		 data.tx_assert_time / 1000);
 
 	/* calculate channel load = (self idle ratio - idle ratio) / self idle ratio */
 	if (ipi_hist_count_th >= UINT_MAX / (100 * PRECISION))
@@ -1298,13 +1232,14 @@ mt7996_tm_ipi_work(struct work_struct *work)
 		channel_load = self_idle_ratio - ipi_idle_ratio;
 
 	if (self_idle_ratio <= td->ipi_threshold) {
-		dev_info(dev->mt76.dev, "band[%d]: self idle ratio = %d%%, idle ratio = %d%%\n",
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+			 "band[%d]: self idle ratio = %d%%, idle ratio = %d%%\n",
 			 phy->mt76->band_idx, self_idle_ratio, ipi_idle_ratio);
 		return;
 	}
 
 	channel_load = (100 * channel_load) / self_idle_ratio;
-	dev_info(dev->mt76.dev,
+	mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 		 "band[%d]: chan load = %d%%, self idle ratio = %d%%, idle ratio = %d%%\n",
 		 phy->mt76->band_idx, channel_load, self_idle_ratio, ipi_idle_ratio);
 }
@@ -1447,8 +1382,9 @@ mt7996_tm_txbf_init(struct mt7996_phy *phy, u16 *val)
 			td->tx_mpdu_len = 1024;
 			td->tx_rate_idx = 0;
 			mt76_set(dev, EBF_BBP_RX_OFFSET, EBF_BBP_RX_ENABLE);
-			dev_info(dev->mt76.dev, "Set BBP RX CR = %x\n",
-				 mt76_rr(dev, EBF_BBP_RX_OFFSET));
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "%s: set BBP RX CR = %x\n",
+				 __func__, mt76_rr(dev, EBF_BBP_RX_OFFSET));
 		}
 
 		td->tx_rate_mode = MT76_TM_TX_MODE_HT;
@@ -1474,8 +1410,9 @@ mt7996_tm_txbf_init(struct mt7996_phy *phy, u16 *val)
 		} else {
 			/* Turn On BBP CR for RX */
 			mt76_set(dev, EBF_BBP_RX_OFFSET, EBF_BBP_RX_ENABLE);
-			dev_info(dev->mt76.dev, "Set BBP RX CR = %x\n",
-				 mt76_rr(dev, EBF_BBP_RX_OFFSET));
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "%s: set BBP RX CR = %x\n",
+				 __func__, mt76_rr(dev, EBF_BBP_RX_OFFSET));
 
 			td->tx_antenna_mask = 1;
 		}
@@ -1543,10 +1480,10 @@ mt7996_tm_txbf_phase_comp(struct mt7996_phy *phy, u16 *val)
 	if (!phase)
 		return -EINVAL;
 
-	wait_event_timeout(dev->mt76.tx_wait, phase[group].status != 0, HZ);
+	wait_event_timeout(dev->mt76.mcu.wait, phase[group].status != 0, HZ);
 	mt7996_tm_txbf_phase_copy(dev, req.phase_comp.buf, phase[group].buf, group);
 
-	pr_info("ibf cal process: phase comp info\n");
+	mt76_dbg(&dev->mt76, MT76_DBG_TEST, "%s: phase comp info\n", __func__);
 	print_hex_dump(KERN_INFO, "", DUMP_PREFIX_NONE, 16, 1,
 		       &req, sizeof(req), 0);
 
@@ -1569,7 +1506,7 @@ mt7996_tm_txbf_profile_tag_write(struct mt7996_phy *phy, u8 pfmu_idx, struct mt7
 	};
 
 	memcpy(req.pfmu_tag.buf, tag, sizeof(*tag));
-	wait_event_timeout(dev->mt76.tx_wait, tag->t1.pfmu_idx != 0, HZ);
+	wait_event_timeout(dev->mt76.mcu.wait, tag->t1.pfmu_idx != 0, HZ);
 
 	return mt76_mcu_send_msg(&dev->mt76, MCU_WM_UNI_CMD(BF), &req,
 				 sizeof(req), false);
@@ -1723,14 +1660,16 @@ mt7996_tm_txbf_profile_update(struct mt7996_phy *phy, u16 *val, bool ebf)
 
 	if (!is_atenl && !td->ibf) {
 		mt76_set(dev, MT_ARB_TQSAXM0(phy->mt76->band_idx), MT_ARB_TQSAXM_ALTX_START_MASK);
-		dev_info(dev->mt76.dev, "Set TX queue start CR for AX management (0x%x) = 0x%x\n",
-			 MT_ARB_TQSAXM0(phy->mt76->band_idx),
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+			 "%s: set TX queue start CR for AX management (0x%x) = 0x%x\n",
+			 __func__, MT_ARB_TQSAXM0(phy->mt76->band_idx),
 			 mt76_rr(dev, MT_ARB_TQSAXM0(phy->mt76->band_idx)));
 	} else if (!is_atenl && td->ibf && ebf) {
 		/* iBF's ebf profile update */
 		mt76_set(dev, MT_ARB_TQSAXM0(phy->mt76->band_idx), MT_ARB_IBF_ENABLE);
-		dev_info(dev->mt76.dev, "Set TX queue start CR for AX management (0x%x) = 0x%x\n",
-			 MT_ARB_TQSAXM0(phy->mt76->band_idx),
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+			 "%s: set TX queue start CR for AX management (0x%x) = 0x%x\n",
+			 __func__, MT_ARB_TQSAXM0(phy->mt76->band_idx),
 			 mt76_rr(dev, MT_ARB_TQSAXM0(phy->mt76->band_idx)));
 	}
 
@@ -1994,11 +1933,13 @@ mt7996_tm_set_txbf(struct mt7996_phy *phy)
 #define TXBF_IS_DUT_MASK	BIT(0)
 #define TXBF_IBF_MASK		BIT(1)
 	struct mt76_testmode_data *td = &phy->mt76->test;
+	struct mt7996_dev *dev = phy->dev;
 	u16 *val = td->txbf_param;
 
-	dev_info(phy->dev->mt76.dev,
-		 "ibf cal process: act = %u, val = %u, %u, %u, %u, %u, %u, %u, %u\n",
-		 td->txbf_act, val[0], val[1], val[2], val[3], val[4], val[5], val[6], val[7]);
+	mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+		 "%s: act = %u, val = %u, %u, %u, %u, %u, %u, %u, %u\n",
+		 __func__, td->txbf_act, val[0], val[1], val[2], val[3],
+		 val[4], val[5], val[6], val[7]);
 
 	switch (td->txbf_act) {
 	case MT76_TM_TXBF_ACT_GOLDEN_INIT:
@@ -2041,14 +1982,12 @@ mt7996_tm_set_txbf(struct mt7996_phy *phy)
 	case MT76_TM_TXBF_ACT_PROFILE_TAG_READ:
 	case MT76_TM_TXBF_ACT_PROFILE_TAG_WRITE:
 	case MT76_TM_TXBF_ACT_PROFILE_TAG_INVALID: {
+		struct mt7996_pfmu_tag *tag = dev->test.txbf_pfmu_tag;
 		u8 pfmu_idx = val[0];
 		bool bfer = !!val[1];
-		struct mt7996_dev *dev = phy->dev;
-		struct mt7996_pfmu_tag *tag = dev->test.txbf_pfmu_tag;
 
 		if (!tag) {
-			dev_err(dev->mt76.dev,
-				"pfmu tag is not initialized!\n");
+			mt76_err(&dev->mt76, "%s: pfmu tag is not initialized\n", __func__);
 			return -EINVAL;
 		}
 
@@ -2114,6 +2053,7 @@ mt7996_tm_update_params(struct mt7996_phy *phy, u32 changed)
 	if (changed & BIT(TM_CHANGED_TXBF_ACT))
 		mt7996_tm_set_txbf(phy);
 	if (changed & BIT(TM_CHANGED_TX_ANTENNA)) {
+		mt76_testmode_param_set(td, MT76_TM_ATTR_TX_ANTENNA);
 		mt7996_tm_set_antenna(phy, SET_ID(TX_PATH));
 		mt7996_tm_set_antenna(phy, SET_ID(RX_PATH));
 	}
@@ -2134,11 +2074,16 @@ mt7996_tm_set_state(struct mt76_phy *mphy, enum mt76_testmode_state state)
 	if (!dev->testmode_enable)
 		return -EPERM;
 
-	mphy->test.state = state;
-
 	if (prev_state != MT76_TM_STATE_OFF)
 		mt7996_tm_set(dev, SET_ID(BAND_IDX), mphy->band_idx);
 
+	if (state >= MT76_TM_STATE_GROUP_PREK && state <= MT76_TM_STATE_GROUP_PREK_CLEAN)
+		return mt7996_tm_group_prek(phy, state);
+	else if (state >= MT76_TM_STATE_DPD_2G && state <= MT76_TM_STATE_DPD_CLEAN)
+		return mt7996_tm_dpd_prek(phy, state);
+	else if (state >= MT76_TM_STATE_RX_GAIN_CAL && state <= MT76_TM_STATE_RX_GAIN_CAL_CLEAN)
+		return mt7996_tm_rx_gain_cal(phy, state);
+
 	if (prev_state == MT76_TM_STATE_TX_FRAMES ||
 	    state == MT76_TM_STATE_TX_FRAMES)
 		mt7996_tm_set_tx_frames(phy, state == MT76_TM_STATE_TX_FRAMES);
@@ -2151,12 +2096,6 @@ mt7996_tm_set_state(struct mt76_phy *mphy, enum mt76_testmode_state state)
 	else if (prev_state == MT76_TM_STATE_OFF ||
 		 state == MT76_TM_STATE_OFF)
 		mt7996_tm_init(phy, !(state == MT76_TM_STATE_OFF));
-	else if (state >= MT76_TM_STATE_GROUP_PREK && state <= MT76_TM_STATE_GROUP_PREK_CLEAN)
-		return mt7996_tm_group_prek(phy, state);
-	else if (state >= MT76_TM_STATE_DPD_2G && state <= MT76_TM_STATE_DPD_CLEAN)
-		return mt7996_tm_dpd_prek(phy, state);
-	else if (state >= MT76_TM_STATE_RX_GAIN_CAL && state <= MT76_TM_STATE_RX_GAIN_CAL_CLEAN)
-		return mt7996_tm_rx_gain_cal(phy, state);
 
 	if ((state == MT76_TM_STATE_IDLE &&
 	     prev_state == MT76_TM_STATE_OFF) ||
@@ -2279,10 +2218,9 @@ static void
 mt7996_tm_reset_trx_stats(struct mt76_phy *mphy)
 {
 	struct mt7996_phy *phy = mphy->priv;
-	struct mt7996_dev *dev = phy->dev;
 
 	memset(&mphy->test.rx_stats, 0, sizeof(mphy->test.rx_stats));
-	mt7996_tm_set(dev, SET_ID(TRX_COUNTER_RESET), 0);
+	mt7996_tm_set(phy->dev, SET_ID(TRX_COUNTER_RESET), 0);
 }
 
 static int
@@ -2485,9 +2423,9 @@ mt7996_tm_efuse_update_is_valid(struct mt7996_dev *dev, u32 offset, u8 *write_bu
 			for_each_set_bit(j, &prot_mask, MT76_TM_EEPROM_BLOCK_SIZE) {
 				if (write_buf[j] != read_buf[j]) {
 					write_buf[j] = read_buf[j];
-					dev_warn(dev->mt76.dev,
-						 "offset %x is invalid to write\n",
-						 offset + j);
+					mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+						 "%s: offset %x is invalid to write\n",
+						 __func__, offset + j);
 				}
 			}
 			break;
@@ -2594,48 +2532,64 @@ mt7996_tm_dump_seg_list(struct mt7996_phy *phy)
 	int i, cbw, dbw;
 
 	if (!phy->mt76->lists) {
-		dev_info(dev->mt76.dev, "No available segment list\n");
+		mt76_err(&dev->mt76, "%s: no available segment list\n", __func__);
 		return 0;
 	}
 
-	dev_info(dev->mt76.dev, "Total Segment Number %d:\n", phy->mt76->seg_num);
+	mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+		 "Total Segment Number %d:\n", phy->mt76->seg_num);
 	for (i = 0; i < phy->mt76->seg_num; i++) {
 		list = &phy->mt76->lists[i];
 
-		dev_info(dev->mt76.dev, "%s Segment %d:\n",
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "%s Segment %d:\n",
 			 list->seg_type == LM_SEG_TYPE_TX ? "TX" : "RX", i);
-		dev_info(dev->mt76.dev, "\tantenna swap: %d\n", list->ant_swap);
-		dev_info(dev->mt76.dev, "\tsegment timeout: %d\n", list->seg_timeout);
-		dev_info(dev->mt76.dev, "\ttx antenna mask: %d\n", list->tx_antenna_mask);
-		dev_info(dev->mt76.dev, "\trx antenna mask: %d\n", list->rx_antenna_mask);
-		dev_info(dev->mt76.dev, "\tcenter ch1: %d\n", list->center_ch1);
-		dev_info(dev->mt76.dev, "\tcenter ch2: %d\n", list->center_ch2);
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\tantenna swap: %d\n", list->ant_swap);
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+			 "\tsegment timeout: %d\n", list->seg_timeout);
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+			 "\ttx antenna mask: %d\n", list->tx_antenna_mask);
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+			 "\trx antenna mask: %d\n", list->rx_antenna_mask);
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\tcenter ch1: %d\n", list->center_ch1);
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\tcenter ch2: %d\n", list->center_ch2);
 		cbw = mt7996_tm_bw_mapping(list->system_bw, BW_MAP_NL_TO_MHZ);
 		dbw = mt7996_tm_bw_mapping(list->data_bw, BW_MAP_NL_TO_MHZ);
-		dev_info(dev->mt76.dev, "\tsystem bw: %d MH\n", cbw);
-		dev_info(dev->mt76.dev, "\tdata bw: %d MHz\n", dbw);
-		dev_info(dev->mt76.dev, "\tprimary selection: %d\n", list->pri_sel);
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\tsystem bw: %d MH\n", cbw);
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\tdata bw: %d MHz\n", dbw);
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+			 "\tprimary selection: %d\n", list->pri_sel);
 		if (list->seg_type == LM_SEG_TYPE_TX) {
-			dev_info(dev->mt76.dev, "\tda: %pM\n", list->addr[0]);
-			dev_info(dev->mt76.dev, "\tsa: %pM\n", list->addr[1]);
-			dev_info(dev->mt76.dev, "\tbssid: %pM\n", list->addr[2]);
-			dev_info(dev->mt76.dev, "\ttx mpdu len: %d\n", list->tx_mpdu_len);
-			dev_info(dev->mt76.dev, "\ttx count: %d\n", list->tx_count);
-			dev_info(dev->mt76.dev, "\ttx power: %d\n", list->tx_power);
-			dev_info(dev->mt76.dev, "\ttx rate mode: %s\n",
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\tda: %pM\n", list->addr[0]);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\tsa: %pM\n", list->addr[1]);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\tbssid: %pM\n", list->addr[2]);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\ttx mpdu len: %d\n", list->tx_mpdu_len);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\ttx count: %d\n", list->tx_count);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\ttx power: %d\n", list->tx_power);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\ttx rate mode: %s\n",
 				 testmode_tx_mode[list->tx_rate_mode]);
-			dev_info(dev->mt76.dev, "\ttx rate idx: %d\n", list->tx_rate_idx);
-			dev_info(dev->mt76.dev, "\ttx rate stbc: %d\n", list->tx_rate_stbc);
-			dev_info(dev->mt76.dev, "\ttx rate ldpc: %d\n", list->tx_rate_ldpc);
-			dev_info(dev->mt76.dev, "\ttx ipg: %d\n", list->tx_ipg);
-			dev_info(dev->mt76.dev, "\ttx rate sgi: %d\n", list->tx_rate_sgi);
-			dev_info(dev->mt76.dev, "\ttx rate nss: %d\n", list->tx_rate_nss);
-			dev_info(dev->mt76.dev, "\thw tx mode: %d\n", list->hw_tx_mode);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\ttx rate idx: %d\n", list->tx_rate_idx);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\ttx rate stbc: %d\n", list->tx_rate_stbc);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\ttx rate ldpc: %d\n", list->tx_rate_ldpc);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\ttx ipg: %d\n", list->tx_ipg);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\ttx rate sgi: %d\n", list->tx_rate_sgi);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\ttx rate nss: %d\n", list->tx_rate_nss);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\thw tx mode: %d\n", list->hw_tx_mode);
 		} else {
-			dev_info(dev->mt76.dev, "\town addr: %pM\n", list->addr[0]);
-			dev_info(dev->mt76.dev, "\tsta idx: %d\n", list->sta_idx);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\town addr: %pM\n", list->addr[0]);
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "\tsta idx: %d\n", list->sta_idx);
 		}
-		dev_info(dev->mt76.dev, "\n");
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "\n");
 	}
 
 	return 0;
@@ -2667,7 +2621,7 @@ mt7996_tm_get_list_mode_rx_stat(struct mt7996_dev *dev, int ext_id)
 		total_seg = le32_to_cpu(event->total_seg);
 		seg_read_num = le32_to_cpu(event->seg_read_num);
 		if (seg_idx == 0)
-			dev_info(dev->mt76.dev,
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
 				 "ext_id: %d, status: %d, total_seg: %d, seg_read_num: %d\n",
 				 le32_to_cpu(event->ext_id), le16_to_cpu(event->status),
 				 total_seg, seg_read_num);
@@ -2677,10 +2631,11 @@ mt7996_tm_get_list_mode_rx_stat(struct mt7996_dev *dev, int ext_id)
 
 		for (i = 0; i < seg_read_num; i++) {
 			rx_stat = &event->rx_stats[i];
-			dev_info(dev->mt76.dev, "seg_idx: %u, rx_ok: %u, fcs_err: %u\n",
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+				 "seg_idx: %u, rx_ok: %u, fcs_err: %u\n",
 				 seg_idx + i, le32_to_cpu(rx_stat->rx_ok),
 				 le32_to_cpu(rx_stat->fcs_err));
-			dev_info(dev->mt76.dev, "rssi: %d, %d, %d, %d, %d\n",
+			mt76_dbg(&dev->mt76, MT76_DBG_TEST, "rssi: %d, %d, %d, %d, %d\n",
 				 le32_to_cpu(rx_stat->rssi0), le32_to_cpu(rx_stat->rssi1),
 				 le32_to_cpu(rx_stat->rssi2), le32_to_cpu(rx_stat->rssi3),
 				 le32_to_cpu(rx_stat->rssi4));
@@ -2820,13 +2775,14 @@ mt7996_tm_set_list_mode(struct mt76_phy *mphy, int seg_idx,
 		return ret;
 
 	event = (struct mt7996_tm_list_event *)skb->data;
-	dev_info(dev->mt76.dev, "ext_id: %u, status: %u, total_seg: %u, seg_read_num: %u\n",
+	mt76_dbg(&dev->mt76, MT76_DBG_TEST,
+		 "ext_id: %u, status: %u, total_seg: %u, seg_read_num: %u\n",
 		 le32_to_cpu(event->ext_id), le16_to_cpu(event->status),
 		 le32_to_cpu(event->total_seg), le32_to_cpu(event->seg_read_num));
 
 	state = le32_to_cpu(event->event_state.state);
 	if (list_act == MT76_TM_LM_ACT_DUT_STATUS && state < LM_STATE_NUM)
-		dev_info(dev->mt76.dev, "Event seg_idx: %u, state: %s\n",
+		mt76_dbg(&dev->mt76, MT76_DBG_TEST, "Event seg_idx: %u, state: %s\n",
 			 le32_to_cpu(event->event_state.seg_idx), lm_state[state]);
 
 	dev_kfree_skb(skb);
diff --git a/mt7996/testmode.h b/mt7996/testmode.h
index 9d381196..d40af885 100644
--- a/mt7996/testmode.h
+++ b/mt7996/testmode.h
@@ -4,7 +4,7 @@
 #ifndef __MT7996_TESTMODE_H
 #define __MT7996_TESTMODE_H
 
-enum {
+enum tm_bw {
 	TM_CBW_20MHZ,
 	TM_CBW_40MHZ,
 	TM_CBW_80MHZ,
@@ -15,7 +15,7 @@ enum {
 	TM_CBW_320MHZ = 12,
 };
 
-enum {
+enum bf_bw {
 	BF_CDBW_20MHZ,
 	BF_CDBW_40MHZ,
 	BF_CDBW_80MHZ,
@@ -102,12 +102,12 @@ struct mt7996_tm_event {
 	struct mt7996_tm_rf_test_result result;
 } __packed;
 
-enum rf_test_func_idx {
-	RF_TEST_RE_CAL = 0x01,
-	RF_TEST_RX_GAIN_CAL = 0x14,
+enum rf_test_tag {
+	UNI_RF_TEST_CTRL,
+	UNI_RF_TEST_LIST_MODE,
 };
 
-enum {
+enum rf_test_action {
 	RF_ACTION_SWITCH_TO_RF_TEST,
 	RF_ACTION_IN_RF_TEST,
 	RF_ACTION_SET = 3,
@@ -116,7 +116,7 @@ enum {
 
 #define RF_TEST_ICAP_LEN	120
 
-enum {
+enum rf_test_op_mode {
 	RF_OPER_NORMAL,
 	RF_OPER_RF_TEST,
 	RF_OPER_ICAP,
@@ -124,26 +124,17 @@ enum {
 	RF_OPER_WIFI_SPECTRUM,
 };
 
-enum {
-	UNI_RF_TEST_CTRL,
-	UNI_RF_TEST_LIST_MODE,
-};
-
-#define RF_CMD(cmd)		RF_TEST_CMD_##cmd
-
-enum {
-	RF_TEST_CMD_STOP_TEST = 0,
-	RF_TEST_CMD_START_TX = 1,
-	RF_TEST_CMD_START_RX = 2,
-	RF_TEST_CMD_CONT_WAVE = 10,
-	RF_TEST_CMD_TX_COMMIT = 18,
-	RF_TEST_CMD_RX_COMMIT = 19,
+/* func_idx for RF_ACTION_IN_RF_TEST */
+enum rf_test_func_idx {
+	RF_TEST_RE_CAL = 0x01,
+	RF_TEST_RX_GAIN_CAL = 0x14,
 };
 
 #define SET_ID(id)		RF_TEST_ID_SET_##id
 #define GET_ID(id)		RF_TEST_ID_GET_##id
 
-enum {
+/* func_idx for RF_ACTION_SET & RF_ACTION_GET */
+enum rf_test_id {
 	RF_TEST_ID_SET_COMMAND = 1,
 	RF_TEST_ID_SET_POWER = 2,
 	RF_TEST_ID_SET_TX_RATE = 3,
@@ -191,6 +182,18 @@ enum {
 	RF_TEST_ID_SET_AID_OFFSET = 204,
 };
 
+#define RF_CMD(cmd)		RF_TEST_CMD_##cmd
+
+/* func_data for RF_TEST_ID_SET_COMMAND */
+enum rf_test_cmd {
+	RF_TEST_CMD_STOP_TEST = 0,
+	RF_TEST_CMD_START_TX = 1,
+	RF_TEST_CMD_START_RX = 2,
+	RF_TEST_CMD_CONT_WAVE = 10,
+	RF_TEST_CMD_TX_COMMIT = 18,
+	RF_TEST_CMD_RX_COMMIT = 19,
+};
+
 #define POWER_CTRL(type)	UNI_TXPOWER_##type##_CTRL
 
 struct mt7996_tm_rx_stat_user_ctrl {
@@ -220,7 +223,7 @@ struct mt7996_tm_rx_req {
 	};
 } __packed;
 
-enum {
+enum rx_stat_tag {
 	UNI_TM_RX_STAT_SET_USER_CTRL = 7,
 	UNI_TM_RX_STAT_GET_ALL_V2 = 9,
 };
@@ -330,14 +333,14 @@ struct mt7996_tm_rx_event {
 	};
 } __packed;
 
-enum {
+enum rdd_ipi_cmd {
 	RDD_SET_IPI_CR_INIT,		/* CR initialization */
 	RDD_SET_IPI_HIST_RESET,		/* Reset IPI histogram counter */
 	RDD_SET_IDLE_POWER,		/* Idle power info */
 	RDD_SET_IPI_HIST_NUM
 };
 
-enum {
+enum rdd_ipi_hist {
 	RDD_IPI_HIST_0,			/* IPI count for power <= -92 (dBm) */
 	RDD_IPI_HIST_1,			/* IPI count for -92 < power <= -89 (dBm) */
 	RDD_IPI_HIST_2,			/* IPI count for -89 < power <= -86 (dBm) */
diff --git a/testmode.c b/testmode.c
index a0e29694..5c3f1dae 100644
--- a/testmode.c
+++ b/testmode.c
@@ -306,7 +306,7 @@ mt76_testmode_tx_config_check(struct mt76_phy *phy)
 
 	return 0;
 fail:
-	dev_err(dev->dev, "Invalid %s\n", invalid_msg[type]);
+	mt76_err(dev, "%s: invalid %s\n", __func__, invalid_msg[type]);
 	return -EINVAL;
 }
 
@@ -469,6 +469,9 @@ __mt76_testmode_set_state(struct mt76_phy *phy, enum mt76_testmode_state state)
 			return err;
 	}
 
+	if (state == MT76_TM_STATE_RX_FRAMES)
+		dev->test_ops->reset_rx_stats(phy);
+
 	err = dev->test_ops->set_state(phy, state);
 	if (err) {
 		if (state == MT76_TM_STATE_TX_FRAMES)
@@ -479,9 +482,8 @@ __mt76_testmode_set_state(struct mt76_phy *phy, enum mt76_testmode_state state)
 
 	if (state == MT76_TM_STATE_TX_FRAMES)
 		mt76_testmode_tx_start(phy);
-	else if (state == MT76_TM_STATE_RX_FRAMES) {
-		dev->test_ops->reset_rx_stats(phy);
-	}
+	else if (state == MT76_TM_STATE_RX_GAIN_CAL)
+		return 0;
 
 	phy->test.state = state;
 
@@ -492,6 +494,7 @@ int mt76_testmode_set_state(struct mt76_phy *phy, enum mt76_testmode_state state
 {
 	struct mt76_testmode_data *td = &phy->test;
 	struct ieee80211_hw *hw = phy->hw;
+	int ret;
 
 	if (state == td->state && state == MT76_TM_STATE_OFF)
 		return 0;
@@ -502,10 +505,18 @@ int mt76_testmode_set_state(struct mt76_phy *phy, enum mt76_testmode_state state
 	      !phy->monitor_vif)))
 		return -ENOTCONN;
 
+	/* keep rx while performing rx gain calibration */
+	if (state == MT76_TM_STATE_RX_GAIN_CAL) {
+		if (td->state != MT76_TM_STATE_RX_FRAMES) {
+			ret = __mt76_testmode_set_state(phy, MT76_TM_STATE_RX_FRAMES);
+			if (ret)
+				return ret;
+		}
+		return __mt76_testmode_set_state(phy, state);
+	}
+
 	if (state != MT76_TM_STATE_IDLE &&
 	    td->state != MT76_TM_STATE_IDLE) {
-		int ret;
-
 		ret = __mt76_testmode_set_state(phy, MT76_TM_STATE_IDLE);
 		if (ret)
 			return ret;
diff --git a/testmode.h b/testmode.h
index 9b763cc2..783d45c7 100644
--- a/testmode.h
+++ b/testmode.h
@@ -23,7 +23,6 @@
  * @MT76_TM_ATTR_SKU_EN: config txpower sku is enabled or disabled in testmode (u8)
  * @MT76_TM_ATTR_TX_COUNT: configured number of frames to send when setting
  *	state to MT76_TM_STATE_TX_FRAMES (u32)
- * @MT76_TM_ATTR_TX_PENDING: pending frames during MT76_TM_STATE_TX_FRAMES (u32)
  * @MT76_TM_ATTR_TX_LENGTH: packet tx mpdu length (u32)
  * @MT76_TM_ATTR_TX_RATE_MODE: packet tx mode (u8, see &enum mt76_testmode_tx_mode)
  * @MT76_TM_ATTR_TX_RATE_NSS: packet tx number of spatial streams (u8)
@@ -44,7 +43,7 @@
  *
  * @MT76_TM_ATTR_STATS: statistics (nested, see &enum mt76_testmode_stats_attr)
  *
- * @MT76_TM_ATTR_PRECAL: Pre-cal data (u8)
+ * @MT76_TM_ATTR_PRECAL: pre-cal data (u8)
  * @MT76_TM_ATTR_PRECAL_INFO: group size, dpd size, dpd_info, transmit size,
  *                            eeprom cal indicator (u32),
  *                            dpd_info = [dpd_per_chan_size, chan_num_2g,
@@ -58,6 +57,9 @@
  * @MT76_TM_ATTR_DRV_DATA: driver specific netlink attrs (nested)
  *
  * @MT76_TM_ATTR_MAC_ADDRS: array of nested MAC addresses (nested)
+ * @MT76_TM_ATTR_AID: association index for wtbl (u8)
+ * @MT76_TM_ATTR_RU_ALLOC: resource unit allocation subfield (u8)
+ * @MT76_TM_ATTR_RU_IDX: resource unit index (u8)
  *
  * @MT76_TM_ATTR_EEPROM_ACTION: eeprom setting actions
  *	(u8, see &enum mt76_testmode_eeprom_action)
@@ -79,7 +81,7 @@
  *			     the histogram of specific IPI index (u8)
  * @MT76_TM_ATTR_IPI_ANTENNA_INDEX: config the antenna index for reading
  *				    the histogram of specific IPI index (u8)
- * @MT76_TM_ATTR_IPI_RESET: Reset the IPI counter
+ * @MT76_TM_ATTR_IPI_RESET: reset the IPI counter
  *
  * @MT76_TM_ATTR_LM_ACT: list mode setting actions (u8)
  * @MT76_TM_ATTR_LM_SEG_IDX: segment index used in list mode (u8)
@@ -125,6 +127,7 @@ enum mt76_testmode_attr {
 	MT76_TM_ATTR_FREQ_OFFSET,
 
 	MT76_TM_ATTR_STATS,
+
 	MT76_TM_ATTR_PRECAL,
 	MT76_TM_ATTR_PRECAL_INFO,
 
@@ -180,7 +183,7 @@ enum mt76_testmode_attr {
  *
  * @MT76_TM_STATS_ATTR_TX_PENDING: pending tx frames (u32)
  * @MT76_TM_STATS_ATTR_TX_QUEUED: queued tx frames (u32)
- * @MT76_TM_STATS_ATTR_TX_QUEUED: completed tx frames (u32)
+ * @MT76_TM_STATS_ATTR_TX_DONE: completed tx frames (u32)
  *
  * @MT76_TM_STATS_ATTR_RX_PACKETS: number of rx packets (u64)
  * @MT76_TM_STATS_ATTR_RX_FCS_ERROR: number of rx packets with FCS error (u64)
@@ -241,6 +244,14 @@ enum mt76_testmode_rx_attr {
  * @MT76_TM_STATE_TX_FRAMES: send a fixed number of test frames
  * @MT76_TM_STATE_RX_FRAMES: receive packets and keep statistics
  * @MT76_TM_STATE_TX_CONT: waveform tx without time gap
+ * @MT76_TM_STATE_GROUP_PREK: start group pre-calibration
+ * @MT76_TM_STATE_GROUP_PREK_DUMP: dump the data of group pre-calibration
+ * @MT76_TM_STATE_GROUP_PREK_CLEAN: clear the data group pre-calibration
+ * @MT76_TM_STATE_DPD_2G: start 2G DPD pre-calibration
+ * @MT76_TM_STATE_DPD_5G: start 5G DPD pre-calibration
+ * @MT76_TM_STATE_DPD_6G: start 6G DPD pre-calibration
+ * @MT76_TM_STATE_DPD_DUMP: dump the data of DPD pre-calibration
+ * @MT76_TM_STATE_DPD_CLEAN: clear the data of DPD pre-calibration
  * @MT76_TM_STATE_RX_GAIN_CAL: start RX gain calibration
  * @MT76_TM_STATE_RX_GAIN_CAL_DUMP: dump the data of RX gain calibration
  * @MT76_TM_STATE_RX_GAIN_CAL_CLEAN: clear the data of RX gain calibration
-- 
2.45.2

