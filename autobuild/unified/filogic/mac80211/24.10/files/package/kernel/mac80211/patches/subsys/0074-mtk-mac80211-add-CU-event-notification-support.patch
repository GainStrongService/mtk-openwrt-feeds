From ee0ae26f23ee465050f1d973bb799a51fbde70bc Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Mon, 29 Jul 2024 10:07:17 +0800
Subject: [PATCH 074/107] mtk: mac80211: add CU event notification support

Add CU event notification support

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 include/net/cfg80211.h       | 10 ++++++++
 include/net/mac80211.h       | 13 +++++++++++
 include/uapi/linux/nl80211.h | 27 ++++++++++++++++++++++
 net/mac80211/cfg.c           | 17 ++++++++++++++
 net/wireless/nl80211.c       | 44 ++++++++++++++++++++++++++++++++++++
 net/wireless/trace.h         | 21 +++++++++++++++++
 6 files changed, 132 insertions(+)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 5c1197eb..b8a82779 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -9995,6 +9995,16 @@ void cfg80211_schedule_channels_check(struct wireless_dev *wdev);
  */
 void cfg80211_epcs_changed(struct net_device *netdev, bool enabled);
 
+/**
+ * cfg80211_crit_update_notify - notify about the status of a critical update event.
+ * @wdev: the wireless device to check.
+ * @link_id: valid link_id in case of MLO or 0 for non-MLO.
+ * @event: critical update event type.
+ * @gfp: context flags
+ */
+void cfg80211_crit_update_notify(struct wireless_dev *wdev, unsigned int link_id,
+				 enum nl80211_crit_update_event event, gfp_t gfp);
+
 #ifdef CPTCFG_CFG80211_DEBUGFS
 /**
  * wiphy_locked_debugfs_read - do a locked read in debugfs
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 14754a80..07057d16 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -7943,4 +7943,17 @@ void ieee80211_links_removed(struct ieee80211_vif *vif, u16 removed_links);
  * @hw: pointer as obtained from ieee80211_alloc_hw()
  */
 unsigned long ieee80211_get_scanning(struct ieee80211_hw *hw);
+
+/**
+ * ieee80211_crit_update_notify - notify mac80211 about the status of a critical update event
+ * @vif: &struct ieee80211_vif pointer from the add_interface callback.
+ * @link_id: valid link_id during MLO or 0 for non-MLO
+ * @event: critical update event type
+ * @gfp: context flags
+ *
+ * This function may be called by the driver to notify mac80211 that
+ * the current status of a critical update event.
+ */
+void ieee80211_crit_update_notify(struct ieee80211_vif *vif, unsigned int link_id,
+				  enum nl80211_crit_update_event event, gfp_t gfp);
 #endif /* MAC80211_H */
diff --git a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
index a2a30918..f4eb69d0 100644
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -1336,6 +1336,9 @@
  *	control EPCS configuration. Used to notify userland on the current state
  *	of EPCS.
  *
+ * @NL80211_CMD_NOTIFY_CRIT_UPDATE: Notify the userspace that the status of a
+ *	critical update event was changed.
+ *
  * @NL80211_CMD_MAX: highest used command number
  * @__NL80211_CMD_AFTER_LAST: internal use
  */
@@ -1601,6 +1604,7 @@ enum nl80211_commands {
 	/* MTK internal */
 	NL80211_CMD_ATTLM_EVENT,
 	NL80211_CMD_SET_ATTLM,
+	NL80211_CMD_NOTIFY_CRIT_UPDATE,
 
 	/* used to define NL80211_CMD_MAX below */
 	__NL80211_CMD_AFTER_LAST,
@@ -3493,6 +3497,8 @@ enum nl80211_attrs {
 	NL80211_ATTR_MLO_ATTLM_EVENT,
 	NL80211_ATTR_MLO_ATTLM_SWITCH_TIME_TSF_TU,
 
+	NL80211_ATTR_CRTI_UPDATE_EVENT,
+
 	__NL80211_ATTR_AFTER_LAST,
 	NUM_NL80211_ATTR = __NL80211_ATTR_AFTER_LAST,
 	NL80211_ATTR_MAX = __NL80211_ATTR_AFTER_LAST - 1
@@ -8185,4 +8191,25 @@ enum nl80211_attlm_event {
 	NL80211_ATTLM_END,
 };
 
+/**
+ * enum nl80211_crit_update_event - type of critical update event
+ *
+ * Type of event to be used with NL80211_ATTR_CRTI_UPDATE_EVENT to inform userspace
+ * about the status of the current critical update flag.
+ *
+ * @NL80211_CRIT_UPDATE_NONE: clear the critical update flag.
+ * @NL80211_CRIT_UPDATE_SINGLE: update the BPCC of a single BSS and
+ *	set the critical update flag of the BSS.
+ * @NL80211_CRIT_UPDATE_ALL: update the BPCC of all the BSSes and
+ *	set the critical update flag of all the BSSes.
+ * @NL80211_CRIT_UPDATE_FLAG: set the critical update flag without updating BPCC.
+ */
+
+enum nl80211_crit_update_event {
+	NL80211_CRIT_UPDATE_NONE,
+	NL80211_CRIT_UPDATE_SINGLE,
+	NL80211_CRIT_UPDATE_ALL,
+	NL80211_CRIT_UPDATE_FLAG
+};
+
 #endif /* __LINUX_NL80211_H */
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index d564de7f..b292d418 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -3881,6 +3881,12 @@ static int __ieee80211_csa_finalize(struct ieee80211_link_data *link_data)
 		return err;
 
 	ieee80211_link_info_change_notify(sdata, link_data, changed);
+	/* The critical update flag is set for CSA after beacon
+	 * due to the modification of the operation IE
+	 */
+	ieee80211_crit_update_notify(&sdata->vif, link_data->link_id,
+				     NL80211_CRIT_UPDATE_SINGLE,
+				     GFP_KERNEL);
 
 	ieee80211_vif_unblock_queues_csa(sdata);
 
@@ -5347,6 +5353,17 @@ void ieee80211_links_removed(struct ieee80211_vif *vif, u16 removed_links)
 }
 EXPORT_SYMBOL_GPL(ieee80211_links_removed);
 
+void ieee80211_crit_update_notify(struct ieee80211_vif *vif, unsigned int link_id,
+				  enum nl80211_crit_update_event event, gfp_t gfp)
+{
+	if (!ieee80211_vif_is_mld(vif) ||
+	    WARN_ON(link_id >= IEEE80211_MLD_MAX_NUM_LINKS))
+		return;
+
+	cfg80211_crit_update_notify(ieee80211_vif_to_wdev(vif), link_id, event, gfp);
+}
+EXPORT_SYMBOL_GPL(ieee80211_crit_update_notify);
+
 const struct cfg80211_ops mac80211_config_ops = {
 	.add_virtual_intf = ieee80211_add_iface,
 	.del_virtual_intf = ieee80211_del_iface,
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index d36ef022..9aa2de03 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -882,6 +882,7 @@ static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
 	[NL80211_ATTR_EPCS] = { .type = NLA_FLAG },
 	[NL80211_ATTR_ASSOC_MLD_EXT_CAPA_OPS] = { .type = NLA_U16 },
 	[NL80211_ATTR_CNTDWN_OFFS_STA_PROF] = { .type = NLA_BINARY },
+	[NL80211_ATTR_CRTI_UPDATE_EVENT] = { .type = NLA_U8 },
 };
 
 /* policy for the key attributes */
@@ -20840,6 +20841,49 @@ nla_put_failure:
 }
 EXPORT_SYMBOL(cfg80211_update_owe_info_event);
 
+void
+cfg80211_crit_update_notify(struct wireless_dev *wdev, unsigned int link_id,
+			    enum nl80211_crit_update_event event, gfp_t gfp)
+{
+	struct wiphy *wiphy = wdev->wiphy;
+	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
+	struct sk_buff *msg;
+	void *hdr;
+
+	trace_cfg80211_crit_update_notify(wiphy, wdev, link_id, event);
+
+	if (!(wdev->valid_links & BIT(link_id)))
+		return;
+
+	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, gfp);
+	if (!msg)
+		return;
+
+	hdr = nl80211hdr_put(msg, 0, 0, 0, NL80211_CMD_NOTIFY_CRIT_UPDATE);
+	if (!hdr) {
+		nlmsg_free(msg);
+		return;
+	}
+
+	if (nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx) ||
+	    nla_put_u32(msg, NL80211_ATTR_IFINDEX, wdev->netdev->ifindex) ||
+	    nla_put_u64_64bit(msg, NL80211_ATTR_WDEV, wdev_id(wdev),
+			      NL80211_ATTR_PAD) ||
+	    nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, link_id) ||
+	    nla_put_u8(msg, NL80211_ATTR_CRTI_UPDATE_EVENT, event))
+		goto nla_put_failure;
+
+	genlmsg_end(msg, hdr);
+
+	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(wiphy), msg, 0,
+				NL80211_MCGRP_MLME, gfp);
+	return;
+
+nla_put_failure:
+	nlmsg_free(msg);
+}
+EXPORT_SYMBOL(cfg80211_crit_update_notify);
+
 void cfg80211_schedule_channels_check(struct wireless_dev *wdev)
 {
 	struct wiphy *wiphy = wdev->wiphy;
diff --git a/net/wireless/trace.h b/net/wireless/trace.h
index 09a58192..584b61e0 100644
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -4065,6 +4065,27 @@ TRACE_EVENT(cfg80211_attlm_notify,
 		  __entry->switch_time_tsf_tu)
 );
 
+TRACE_EVENT(cfg80211_crit_update_notify,
+	TP_PROTO(struct wiphy *wiphy, struct wireless_dev *wdev,
+		 unsigned int link_id, enum nl80211_crit_update_event event),
+	TP_ARGS(wiphy, wdev, link_id, event),
+	TP_STRUCT__entry(
+		WIPHY_ENTRY
+		WDEV_ENTRY
+		__field(unsigned int, link_id)
+		__field(enum nl80211_crit_update_event, event)
+	),
+	TP_fast_assign(
+		WIPHY_ASSIGN;
+		WDEV_ASSIGN;
+		__entry->link_id = link_id;
+		__entry->event = event;
+	),
+	TP_printk(WIPHY_PR_FMT ", " WDEV_PR_FMT ", link_id: %d,"
+		  " event: %d",
+		  WIPHY_PR_ARG, WDEV_PR_ARG, __entry->link_id, __entry->event)
+);
+
 TRACE_EVENT(cfg80211_assoc_comeback,
 	TP_PROTO(struct wireless_dev *wdev, const u8 *ap_addr, u32 timeout),
 	TP_ARGS(wdev, ap_addr, timeout),
-- 
2.45.2

