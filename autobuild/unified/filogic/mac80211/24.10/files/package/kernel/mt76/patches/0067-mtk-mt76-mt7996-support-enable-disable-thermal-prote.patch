From 71db1a9180c100188edc799c7210e7e4c595dcd7 Mon Sep 17 00:00:00 2001
From: Howard Hsu <howard-yh.hsu@mediatek.com>
Date: Thu, 27 Jul 2023 19:35:32 +0800
Subject: [PATCH 067/146] mtk: mt76: mt7996: support enable/disable thermal
 protection mechanism

This commit adds a new debugfs thermal_enable to enable/disable thermal
protection mechanism. The purpose of this commit is for autotest to
verify thermal protection mechanism.

[Usage]
Enable thermal protection: echo 1 > thermal_enable
Disable thermal protection: echo 0 > thermal_enable

Please note that if you re-enable thermal protection mechanism, all the
configuration values will be retained from the exising configuration,
rather than using the default values.

mtk: mt76: mt7996: support thermal recal debug command

Add support thermal recal debug command.

Usage:
$ echo val > debugfs/thermal_recal

The val can be the following values:
0 = disable
1 = enable
2 = manual trigger

Signed-off-by: Howard Hsu <howard-yh.hsu@mediatek.com>
---
 mt76_connac_mcu.h    |  1 +
 mt7996/main.c        |  1 +
 mt7996/mt7996.h      |  2 ++
 mt7996/mtk_debugfs.c | 62 ++++++++++++++++++++++++++++++++++++++++++++
 mt7996/mtk_mcu.c     | 21 +++++++++++++++
 5 files changed, 87 insertions(+)

diff --git a/mt76_connac_mcu.h b/mt76_connac_mcu.h
index c9cea5bb..11a1224a 100644
--- a/mt76_connac_mcu.h
+++ b/mt76_connac_mcu.h
@@ -1302,6 +1302,7 @@ enum {
 	MCU_UNI_CMD_TESTMODE_TRX_PARAM = 0x42,
 	MCU_UNI_CMD_TESTMODE_CTRL = 0x46,
 	MCU_UNI_CMD_PRECAL_RESULT = 0x47,
+	MCU_UNI_CMD_THERMAL_CAL = 0x4c,
 	MCU_UNI_CMD_RRO = 0x57,
 	MCU_UNI_CMD_OFFCH_SCAN_CTRL = 0x58,
 	MCU_UNI_CMD_PER_STA_INFO = 0x6d,
diff --git a/mt7996/main.c b/mt7996/main.c
index d1de54d6..cda45622 100644
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -91,6 +91,7 @@ int mt7996_run(struct ieee80211_hw *hw)
 #ifdef CONFIG_MTK_DEBUG
 	phy->sr_enable = true;
 	phy->enhanced_sr_enable = true;
+	phy->thermal_protection_enable = true;
 
 	ret = mt7996_mcu_set_tx_power_ctrl(phy, UNI_TXPOWER_SKU_POWER_LIMIT_CTRL,
 						dev->dbg.sku_disable ? 0 : phy->sku_limit_en);
diff --git a/mt7996/mt7996.h b/mt7996/mt7996.h
index fcef6dc8..6db74893 100644
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -502,6 +502,7 @@ struct mt7996_phy {
 #ifdef CONFIG_MTK_DEBUG
 	bool sr_enable:1;
 	bool enhanced_sr_enable:1;
+	bool thermal_protection_enable:1;
 #endif
 };
 
@@ -1043,6 +1044,7 @@ void mt7996_mcu_set_cert(struct mt7996_phy *phy, u8 type);
 void mt7996_tm_update_channel(struct mt7996_phy *phy);
 
 int mt7996_mcu_set_vow_drr_dbg(struct mt7996_dev *dev, u32 val);
+int mt7996_mcu_thermal_debug(struct mt7996_dev *dev, u8 mode, u8 action);
 #endif
 
 #ifdef CONFIG_NET_MEDIATEK_SOC_WED
diff --git a/mt7996/mtk_debugfs.c b/mt7996/mtk_debugfs.c
index 44a358c6..1ef70108 100644
--- a/mt7996/mtk_debugfs.c
+++ b/mt7996/mtk_debugfs.c
@@ -3135,6 +3135,65 @@ mt7996_show_rro_mib(struct seq_file *s, void *data)
 	return 0;
 }
 
+static int
+mt7996_thermal_enable_get(void *data, u64 *enable)
+{
+	struct mt7996_phy *phy = data;
+
+	*enable = phy->thermal_protection_enable;
+
+	return 0;
+}
+
+static int
+mt7996_thermal_enable_set(void *data, u64 action)
+{
+	struct mt7996_phy *phy = data;
+	int ret;
+	u8 throttling;
+
+	if (action > 1)
+		return -EINVAL;
+
+	if (!!action == phy->thermal_protection_enable)
+		return 0;
+
+	ret = mt7996_mcu_set_thermal_protect(phy, !!action);
+	if (ret)
+		return ret;
+
+	if (!!!action)
+		goto out;
+
+	throttling = MT7996_THERMAL_THROTTLE_MAX - phy->cdev_state;
+	ret = mt7996_mcu_set_thermal_throttling(phy, throttling);
+	if (ret)
+		return ret;
+
+out:
+	phy->thermal_protection_enable = !!action;
+
+	return 0;
+}
+DEFINE_DEBUGFS_ATTRIBUTE(fops_thermal_enable, mt7996_thermal_enable_get,
+			 mt7996_thermal_enable_set, "%lld\n");
+
+static int
+mt7996_thermal_recal_set(void *data, u64 val)
+{
+#define THERMAL_DEBUG_OPERATION_MANUAL_TRIGGER 2
+#define THERMAL_DEBUG_MODE_RECAL 1
+	struct mt7996_dev *dev = data;
+
+	if (val > THERMAL_DEBUG_OPERATION_MANUAL_TRIGGER)
+		return -EINVAL;
+
+	return mt7996_mcu_thermal_debug(dev, THERMAL_DEBUG_MODE_RECAL, val);
+}
+
+DEFINE_DEBUGFS_ATTRIBUTE(fops_thermal_recal, NULL,
+			 mt7996_thermal_recal_set, "%llu\n");
+
 int mt7996_mtk_init_debugfs(struct mt7996_phy *phy, struct dentry *dir)
 {
 	struct mt7996_dev *dev = phy->dev;
@@ -3241,6 +3300,9 @@ int mt7996_mtk_init_debugfs(struct mt7996_phy *phy, struct dentry *dir)
 					    mt7996_show_rro_mib);
 	}
 
+	debugfs_create_file("thermal_enable", 0600, dir, phy, &fops_thermal_enable);
+	debugfs_create_file("thermal_recal", 0200, dir, dev, &fops_thermal_recal);
+
 	return 0;
 }
 
diff --git a/mt7996/mtk_mcu.c b/mt7996/mtk_mcu.c
index 967ee874..809181e0 100644
--- a/mt7996/mtk_mcu.c
+++ b/mt7996/mtk_mcu.c
@@ -1343,4 +1343,25 @@ int mt7996_mcu_set_vow_drr_dbg(struct mt7996_dev *dev, u32 val)
 				 sizeof(req), true);
 }
 
+int mt7996_mcu_thermal_debug(struct mt7996_dev *dev, u8 mode, u8 action)
+{
+	struct {
+		u8 __rsv1[4];
+
+		__le16 tag;
+		__le16 len;
+
+		u8 mode;
+		u8 action;
+		u8 __rsv2[2];
+	} __packed req = {
+		.tag = cpu_to_le16(mode),
+		.len = cpu_to_le16(sizeof(req) - 4),
+		.mode = mode,
+		.action = action,
+	};
+
+	return mt76_mcu_send_msg(&dev->mt76, MCU_WM_UNI_CMD(THERMAL_CAL), &req,
+	                         sizeof(req), true);
+}
 #endif
-- 
2.45.2

