From cb96531f1e90b312797667098b86ad741ab74c9f Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Wed, 12 Mar 2025 20:30:09 +0800
Subject: [PATCH 71/95] mtk: mt76: mt7996: fix testmode rx stats issue

Fix testmode RX stats issue
Originally, RX ok count is calculated by RX MDRDY count - FCS err count
- len mismatch count.
However, this is incorrect as the other err counts are not included in
the FW event.
Therefore, just use the RX ok count reported from FW.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 mac80211.c        |  4 ++--
 mt76.h            |  7 ++++---
 mt7996/testmode.c | 22 ++++++++++++----------
 testmode.c        | 15 ++++++++++-----
 testmode.h        |  5 ++++-
 tools/fields.c    |  9 ++++++---
 6 files changed, 38 insertions(+), 24 deletions(-)

diff --git a/mac80211.c b/mac80211.c
index b16067d4..affcb96e 100644
--- a/mac80211.c
+++ b/mac80211.c
@@ -907,9 +907,9 @@ void mt76_rx(struct mt76_dev *dev, enum mt76_rxq_id q, struct sk_buff *skb)
 #ifdef CONFIG_NL80211_TESTMODE
 	if (!(phy->test.flag & MT_TM_FW_RX_COUNT) &&
 	    phy->test.state == MT76_TM_STATE_RX_FRAMES) {
-		phy->test.rx_stats.packets[q]++;
+		phy->test.rx_stats[q].packets++;
 		if (status->flag & RX_FLAG_FAILED_FCS_CRC)
-			phy->test.rx_stats.fcs_error[q]++;
+			phy->test.rx_stats[q].fcs_error++;
 	}
 #endif
 
diff --git a/mt76.h b/mt76.h
index da6c6bad..8451eca2 100644
--- a/mt76.h
+++ b/mt76.h
@@ -895,10 +895,11 @@ struct mt76_testmode_data {
 	u16 tx_queued_limit;
 	u32 tx_done;
 	struct {
-		u64 packets[__MT_RXQ_MAX];
-		u64 fcs_error[__MT_RXQ_MAX];
+		u64 packets;
+		u64 rx_success;
+		u64 fcs_error;
 		u64 len_mismatch;
-	} rx_stats;
+	} rx_stats[__MT_RXQ_MAX];
 	u8 flag;
 
 	struct {
diff --git a/mt7996/testmode.c b/mt7996/testmode.c
index 5d6e4656..6873711b 100644
--- a/mt7996/testmode.c
+++ b/mt7996/testmode.c
@@ -2174,8 +2174,9 @@ mt7996_tm_get_rx_stats(struct mt7996_phy *phy)
 	struct sk_buff *skb;
 	enum mt76_rxq_id qid;
 	int i, ret = 0;
-	u32 mac_rx_mdrdy_cnt;
-	u16 mac_rx_len_mismatch, fcs_err_count;
+	u16 fcs_err_count, fcs_ok_count;
+	u16 len_mismatch;
+	u32 mdrdy_count;
 
 	if (td->state != MT76_TM_STATE_RX_FRAMES)
 		return 0;
@@ -2198,20 +2199,21 @@ mt7996_tm_get_rx_stats(struct mt7996_phy *phy)
 		phy->test.last_wb_rssi[i] = rx_stats_all->fagc[i].wb_rssi;
 	}
 
-	if (phy->mt76->band_idx == 2)
+	if (phy->mt76->band_idx == MT_BAND2)
 		qid = MT_RXQ_BAND2;
-	else if (phy->mt76->band_idx == 1)
+	else if (phy->mt76->band_idx == MT_BAND1)
 		qid = MT_RXQ_BAND1;
 	else
 		qid = MT_RXQ_MAIN;
 
+	mdrdy_count = le32_to_cpu(rx_stats_all->band_info.mac_rx_mdrdy_cnt);
+	fcs_ok_count = le16_to_cpu(rx_stats_all->band_info.mac_rx_fcs_ok_cnt);
 	fcs_err_count = le16_to_cpu(rx_stats_all->band_info.mac_rx_fcs_err_cnt);
-	mac_rx_len_mismatch = le16_to_cpu(rx_stats_all->band_info.mac_rx_len_mismatch);
-	mac_rx_mdrdy_cnt = le32_to_cpu(rx_stats_all->band_info.mac_rx_mdrdy_cnt);
-	td->rx_stats.packets[qid] += mac_rx_mdrdy_cnt;
-	td->rx_stats.packets[qid] += fcs_err_count;
-	td->rx_stats.fcs_error[qid] += fcs_err_count;
-	td->rx_stats.len_mismatch += mac_rx_len_mismatch;
+	len_mismatch = le16_to_cpu(rx_stats_all->band_info.mac_rx_len_mismatch);
+	td->rx_stats[qid].packets += mdrdy_count;
+	td->rx_stats[qid].rx_success += fcs_ok_count;
+	td->rx_stats[qid].fcs_error += fcs_err_count;
+	td->rx_stats[qid].len_mismatch += len_mismatch;
 
 	dev_kfree_skb(skb);
 
diff --git a/testmode.c b/testmode.c
index 5c3f1dae..4c4504f4 100644
--- a/testmode.c
+++ b/testmode.c
@@ -1014,7 +1014,9 @@ mt76_testmode_dump_stats(struct mt76_phy *phy, struct sk_buff *msg)
 	struct mt76_testmode_data *td = &phy->test;
 	struct mt76_dev *dev = phy->dev;
 	u64 rx_packets = 0;
+	u64 rx_success = 0;
 	u64 rx_fcs_error = 0;
+	u64 rx_len_mismatch = 0;
 	int i;
 
 	if (dev->test_ops->dump_stats) {
@@ -1025,9 +1027,11 @@ mt76_testmode_dump_stats(struct mt76_phy *phy, struct sk_buff *msg)
 			return ret;
 	}
 
-	for (i = 0; i < ARRAY_SIZE(td->rx_stats.packets); i++) {
-		rx_packets += td->rx_stats.packets[i];
-		rx_fcs_error += td->rx_stats.fcs_error[i];
+	for (i = 0; i < ARRAY_SIZE(td->rx_stats); i++) {
+		rx_packets += td->rx_stats[i].packets;
+		rx_success += td->rx_stats[i].rx_success;
+		rx_fcs_error += td->rx_stats[i].fcs_error;
+		rx_len_mismatch += td->rx_stats[i].len_mismatch;
 	}
 
 	if (nla_put_u32(msg, MT76_TM_STATS_ATTR_TX_PENDING, td->tx_pending) ||
@@ -1035,10 +1039,11 @@ mt76_testmode_dump_stats(struct mt76_phy *phy, struct sk_buff *msg)
 	    nla_put_u32(msg, MT76_TM_STATS_ATTR_TX_DONE, td->tx_done) ||
 	    nla_put_u64_64bit(msg, MT76_TM_STATS_ATTR_RX_PACKETS, rx_packets,
 			      MT76_TM_STATS_ATTR_PAD) ||
+	    nla_put_u64_64bit(msg, MT76_TM_STATS_ATTR_RX_SUCCESS, rx_success,
+			      MT76_TM_STATS_ATTR_PAD) ||
 	    nla_put_u64_64bit(msg, MT76_TM_STATS_ATTR_RX_FCS_ERROR, rx_fcs_error,
 			      MT76_TM_STATS_ATTR_PAD) ||
-	    nla_put_u64_64bit(msg, MT76_TM_STATS_ATTR_RX_LEN_MISMATCH,
-			      td->rx_stats.len_mismatch,
+	    nla_put_u64_64bit(msg, MT76_TM_STATS_ATTR_RX_LEN_MISMATCH, rx_len_mismatch,
 			      MT76_TM_STATS_ATTR_PAD))
 		return -EMSGSIZE;
 
diff --git a/testmode.h b/testmode.h
index 783d45c7..12b43383 100644
--- a/testmode.h
+++ b/testmode.h
@@ -185,12 +185,14 @@ enum mt76_testmode_attr {
  * @MT76_TM_STATS_ATTR_TX_QUEUED: queued tx frames (u32)
  * @MT76_TM_STATS_ATTR_TX_DONE: completed tx frames (u32)
  *
- * @MT76_TM_STATS_ATTR_RX_PACKETS: number of rx packets (u64)
+ * @MT76_TM_STATS_ATTR_RX_PACKETS: number of rx mdrdy packets
+ *	with successfully parsed headers (u64)
  * @MT76_TM_STATS_ATTR_RX_FCS_ERROR: number of rx packets with FCS error (u64)
  * @MT76_TM_STATS_ATTR_LAST_RX: information about the last received packet
  *	see &enum mt76_testmode_rx_attr
  * @MT76_TM_STATS_ATTR_RX_LEN_MISMATCH: number of rx packets with length
  *	mismatch error (u64)
+ * @MT76_TM_STATS_ATTR_RX_SUCCESS: number of successfully rx packets (u64)
  */
 enum mt76_testmode_stats_attr {
 	MT76_TM_STATS_ATTR_UNSPEC,
@@ -204,6 +206,7 @@ enum mt76_testmode_stats_attr {
 	MT76_TM_STATS_ATTR_RX_FCS_ERROR,
 	MT76_TM_STATS_ATTR_LAST_RX,
 	MT76_TM_STATS_ATTR_RX_LEN_MISMATCH,
+	MT76_TM_STATS_ATTR_RX_SUCCESS,
 
 	/* keep last */
 	NUM_MT76_TM_STATS_ATTRS,
diff --git a/tools/fields.c b/tools/fields.c
index 8f2f364b..3deac4a5 100644
--- a/tools/fields.c
+++ b/tools/fields.c
@@ -277,14 +277,15 @@ static void print_nested(const struct tm_field *field, struct nlattr *attr)
 
 static void print_extra_stats(const struct tm_field *field, struct nlattr **tb)
 {
-	float total, failed;
+	float total, success, failed;
 
 	if (!tb[MT76_TM_STATS_ATTR_RX_PACKETS] ||
-	    !tb[MT76_TM_STATS_ATTR_RX_FCS_ERROR])
+	    !tb[MT76_TM_STATS_ATTR_RX_SUCCESS])
 		return;
 
 	total = nla_get_u64(tb[MT76_TM_STATS_ATTR_RX_PACKETS]);
-	failed = nla_get_u64(tb[MT76_TM_STATS_ATTR_RX_FCS_ERROR]);
+	success = nla_get_u64(tb[MT76_TM_STATS_ATTR_RX_SUCCESS]);
+	failed = total - success;
 
 	printf("%srx_per=%.02f%%\n", prefix, 100 * failed / total);
 }
@@ -428,6 +429,7 @@ static const struct tm_field stats_fields[NUM_MT76_TM_STATS_ATTRS] = {
 	FIELD_RO(u64, RX_PACKETS, "rx_packets"),
 	FIELD_RO(u64, RX_FCS_ERROR, "rx_fcs_error"),
 	FIELD_RO(u64, RX_LEN_MISMATCH, "rx_len_mismatch"),
+	FIELD_RO(u64, RX_SUCCESS, "rx_success"),
 	FIELD_NESTED_RO(LAST_RX, rx, "last_"),
 };
 static struct nla_policy stats_policy[NUM_MT76_TM_STATS_ATTRS] = {
@@ -437,6 +439,7 @@ static struct nla_policy stats_policy[NUM_MT76_TM_STATS_ATTRS] = {
 	[MT76_TM_STATS_ATTR_RX_PACKETS] = { .type = NLA_U64 },
 	[MT76_TM_STATS_ATTR_RX_FCS_ERROR] = { .type = NLA_U64 },
 	[MT76_TM_STATS_ATTR_RX_LEN_MISMATCH] = { .type = NLA_U64 },
+	[MT76_TM_STATS_ATTR_RX_SUCCESS] = { .type = NLA_U64 },
 };
 #undef FIELD_NAME
 
-- 
2.45.2

