From d45ff8fa604c414269336bb75d828f4c13cd23bc Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 9 Apr 2024 11:01:51 +0800
Subject: [PATCH 054/107] mtk: mac80211: add per-sta prof CSA countdown support

Add CSA/eCSA offset of per-sta profile

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 include/net/cfg80211.h       |  6 ++++++
 include/net/mac80211.h       |  4 ++++
 include/uapi/linux/nl80211.h |  7 +++++++
 net/mac80211/cfg.c           | 27 +++++++++++++++++----------
 net/mac80211/ieee80211_i.h   |  3 +++
 net/mac80211/tx.c            |  8 +++++---
 net/wireless/nl80211.c       | 13 ++++++++++++-
 7 files changed, 54 insertions(+), 14 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index f15f44d6..c58df6e8 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1567,8 +1567,12 @@ struct cfg80211_ap_update {
  * @beacon_csa: beacon data while performing the switch
  * @counter_offsets_beacon: offsets of the counters within the beacon (tail)
  * @counter_offsets_presp: offsets of the counters within the probe response
+ * @counter_offsets_sta_prof: offsets of the counters within the per-STA profile
+ *	corresponding to the channel switch link
  * @n_counter_offsets_beacon: number of csa counters the beacon (tail)
  * @n_counter_offsets_presp: number of csa counters in the probe response
+ * @n_counter_offsets_sta_prof: number of csa counters in the per-STA profile
+ *	corresponding to the channel switch link
  * @beacon_after: beacon data to be used on the new channel
  * @radar_required: whether radar detection is required on the new channel
  * @block_tx: whether transmissions should be blocked while changing
@@ -1581,8 +1585,10 @@ struct cfg80211_csa_settings {
 	struct cfg80211_beacon_data beacon_csa;
 	const u16 *counter_offsets_beacon;
 	const u16 *counter_offsets_presp;
+	const u16 *counter_offsets_sta_prof;
 	unsigned int n_counter_offsets_beacon;
 	unsigned int n_counter_offsets_presp;
+	unsigned int n_counter_offsets_sta_prof;
 	struct cfg80211_beacon_data beacon_after;
 	bool radar_required;
 	bool block_tx;
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 51545451..ed7411f1 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -5540,6 +5540,9 @@ void ieee80211_report_low_ack(struct ieee80211_sta *sta, u32 num_packets);
  * @cntdwn_counter_offs: array of IEEE80211_MAX_CNTDWN_COUNTERS_NUM offsets
  *	to countdown counters.  This array can contain zero values which
  *	should be ignored.
+ * @sta_prof_cntdwn_offs: array of IEEE80211_MAX_CNTDWN_COUNTERS_NUM offsets
+ *	to countdown counters in per-STA profile.
+ *	This array can contain zero values which should be ignored.
  * @mbssid_off: position of the multiple bssid element
  */
 struct ieee80211_mutable_offsets {
@@ -5547,6 +5550,7 @@ struct ieee80211_mutable_offsets {
 	u16 tim_length;
 
 	u16 cntdwn_counter_offs[IEEE80211_MAX_CNTDWN_COUNTERS_NUM];
+	u16 sta_prof_cntdwn_offs[IEEE80211_MAX_CNTDWN_COUNTERS_NUM];
 	u16 mbssid_off;
 };
 
diff --git a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
index 9f6e868e..06392401 100644
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -2880,6 +2880,9 @@ enum nl80211_commands {
  *
  * @NL80211_ATTR_VIF_RADIO_MASK: Bitmask of allowed radios (u32).
  *	A value of 0 means all radios.
+ * @NL80211_ATTR_CNTDWN_OFFS_STA_PROF: An array of offsets (u16) to the channel
+ *	switch or color change counters in the per-STA profile corresponding to
+ *	the affected AP.
  *
  * @NL80211_ATTR_SUPPORTED_SELECTORS: supported BSS Membership Selectors, array
  *	of supported selectors as defined by IEEE Std 802.11-2020 9.4.2.3 but
@@ -3458,6 +3461,9 @@ enum nl80211_attrs {
 
 	/* add attributes here, update the policy in nl80211.c */
 
+	/* MTK internal */
+	NL80211_ATTR_CNTDWN_OFFS_STA_PROF,
+
 	__NL80211_ATTR_AFTER_LAST,
 	NUM_NL80211_ATTR = __NL80211_ATTR_AFTER_LAST,
 	NL80211_ATTR_MAX = __NL80211_ATTR_AFTER_LAST - 1
@@ -3470,6 +3476,7 @@ enum nl80211_attrs {
 #define NL80211_ATTR_SAE_DATA NL80211_ATTR_AUTH_DATA
 #define NL80211_ATTR_CSA_C_OFF_BEACON NL80211_ATTR_CNTDWN_OFFS_BEACON
 #define NL80211_ATTR_CSA_C_OFF_PRESP NL80211_ATTR_CNTDWN_OFFS_PRESP
+#define NL80211_ATTR_CSA_C_OFF_STA_PROF NL80211_ATTR_CNTDWN_OFFS_STA_PROF
 
 /*
  * Allow user space programs to use #ifdef on new attributes by defining them
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 2dbb7df5..6b18a8f3 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1213,6 +1213,9 @@ ieee80211_assign_beacon(struct ieee80211_sub_if_data *sdata,
 		memcpy(new->cntdwn_counter_offsets, csa->counter_offsets_beacon,
 		       csa->n_counter_offsets_beacon *
 		       sizeof(new->cntdwn_counter_offsets[0]));
+		memcpy(new->sta_prof_cntdwn_offs, csa->counter_offsets_sta_prof,
+		       csa->n_counter_offsets_sta_prof *
+		       sizeof(new->sta_prof_cntdwn_offs[0]));
 	} else if (cca) {
 		new->cntdwn_current_counter = cca->count;
 		new->cntdwn_counter_offsets[0] = cca->counter_offset_beacon;
@@ -3919,8 +3922,10 @@ static int ieee80211_set_csa_beacon(struct ieee80211_link_data *link_data,
 
 		csa.counter_offsets_beacon = params->counter_offsets_beacon;
 		csa.counter_offsets_presp = params->counter_offsets_presp;
+		csa.counter_offsets_sta_prof = params->counter_offsets_sta_prof;
 		csa.n_counter_offsets_beacon = params->n_counter_offsets_beacon;
 		csa.n_counter_offsets_presp = params->n_counter_offsets_presp;
+		csa.n_counter_offsets_sta_prof = params->n_counter_offsets_sta_prof;
 		csa.count = params->count;
 
 		err = ieee80211_assign_beacon(sdata, link_data,
@@ -4083,17 +4088,19 @@ __ieee80211_channel_switch(struct wiphy *wiphy, struct net_device *dev,
 	if (err)
 		goto out;
 
-	err = ieee80211_link_reserve_chanctx(link_data, &chanreq,
-					     chanctx->mode,
-					     params->radar_required);
-	if (err)
-		goto out;
+	if (!cfg80211_chandef_identical(&conf->def, &chanreq.oper)) {
+		err = ieee80211_link_reserve_chanctx(link_data, &chanreq,
+						     chanctx->mode,
+						     params->radar_required);
+		if (err)
+			goto out;
 
-	/* if reservation is invalid then this will fail */
-	err = ieee80211_check_combinations(sdata, NULL, chanctx->mode, 0, -1);
-	if (err) {
-		ieee80211_link_unreserve_chanctx(link_data);
-		goto out;
+		/* if reservation is invalid then this will fail */
+		err = ieee80211_check_combinations(sdata, NULL, chanctx->mode, 0, -1);
+		if (err) {
+			ieee80211_link_unreserve_chanctx(link_data);
+			goto out;
+		}
 	}
 
 	/* if there is a color change in progress, abort it */
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index bfd67bc4..faa25a07 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -259,9 +259,11 @@ struct ieee80211_rx_data {
 struct ieee80211_csa_settings {
 	const u16 *counter_offsets_beacon;
 	const u16 *counter_offsets_presp;
+	const u16 *counter_offsets_sta_prof;
 
 	int n_counter_offsets_beacon;
 	int n_counter_offsets_presp;
+	int n_counter_offsets_sta_prof;
 
 	u8 count;
 };
@@ -278,6 +280,7 @@ struct beacon_data {
 	struct ieee80211_meshconf_ie *meshconf;
 	u16 cntdwn_counter_offsets[IEEE80211_MAX_CNTDWN_COUNTERS_NUM];
 	u8 cntdwn_current_counter;
+	u16 sta_prof_cntdwn_offs[IEEE80211_MAX_CNTDWN_COUNTERS_NUM];
 	struct cfg80211_mbssid_elems *mbssid_ies;
 	struct cfg80211_rnr_elems *rnr_ies;
 	struct rcu_head rcu_head;
diff --git a/net/mac80211/tx.c b/net/mac80211/tx.c
index e7e24f72..828da1ec 100644
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -5245,11 +5245,13 @@ ieee80211_beacon_get_finish(struct ieee80211_hw *hw,
 
 		for (i = 0; i < IEEE80211_MAX_CNTDWN_COUNTERS_NUM; i++) {
 			u16 csa_off = beacon->cntdwn_counter_offsets[i];
+			u16 sta_prof_csa_off = beacon->sta_prof_cntdwn_offs[i];
 
-			if (!csa_off)
-				continue;
+			if (csa_off)
+				offs->cntdwn_counter_offs[i] = csa_off_base + csa_off;
 
-			offs->cntdwn_counter_offs[i] = csa_off_base + csa_off;
+			if (sta_prof_csa_off)
+				offs->sta_prof_cntdwn_offs[i] = csa_off_base + sta_prof_csa_off;
 		}
 	}
 
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 3681f00a..3cec5b4f 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -876,6 +876,7 @@ static const struct nla_policy nl80211_policy[NUM_NL80211_ATTR] = {
 	[NL80211_ATTR_MLO_RECONF_REM_LINKS] = { .type = NLA_U16 },
 	[NL80211_ATTR_EPCS] = { .type = NLA_FLAG },
 	[NL80211_ATTR_ASSOC_MLD_EXT_CAPA_OPS] = { .type = NLA_U16 },
+	[NL80211_ATTR_CNTDWN_OFFS_STA_PROF] = { .type = NLA_BINARY },
 };
 
 /* policy for the key attributes */
@@ -10417,7 +10418,8 @@ static int nl80211_channel_switch(struct sk_buff *skb, struct genl_info *info)
 	if (err)
 		goto free;
 
-	if (!csa_attrs[NL80211_ATTR_CNTDWN_OFFS_BEACON]) {
+	if (!csa_attrs[NL80211_ATTR_CNTDWN_OFFS_BEACON] &&
+	    !csa_attrs[NL80211_ATTR_CNTDWN_OFFS_STA_PROF]) {
 		err = -EINVAL;
 		goto free;
 	}
@@ -10440,6 +10442,15 @@ static int nl80211_channel_switch(struct sk_buff *skb, struct genl_info *info)
 	if (err)
 		goto free;
 
+	err = nl80211_parse_counter_offsets(rdev, params.beacon_csa.tail,
+					    params.beacon_csa.tail_len,
+					    params.count,
+					    csa_attrs[NL80211_ATTR_CNTDWN_OFFS_STA_PROF],
+					    &params.counter_offsets_sta_prof,
+					    &params.n_counter_offsets_sta_prof);
+	if (err)
+		goto free;
+
 skip_beacons:
 	err = nl80211_parse_chandef(rdev, info, &params.chandef);
 	if (err)
-- 
2.45.2

