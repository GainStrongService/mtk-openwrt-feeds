From d7e392d803a59cab6d854b9dc0ba7efff7aea4b3 Mon Sep 17 00:00:00 2001
From: Rex Lu <rex.lu@mediatek.com>
Date: Mon, 16 Jun 2025 14:56:20 +0800
Subject: [PATCH 101/123] mtk: mt76: mt7996: fix extender mode call trace
 during L1 SER in hw scan

1. add sanity check on mt7996_update_vif_beacon
During L1 SER flow, it will do mt7996_update_beacons in in connecting state.
In this moment, bss conf maybe null and happend call trace.

2. add sanity check on mt76_worker_disable to avoid set tx_worker to park state twice
and happend kernel waring "pc : kthread_park+0x9c/0xb0".

Signed-off-by: Rex Lu <rex.lu@mediatek.com>

Refactor sanity check on mt76_worker_disable part.
previous way still have chance hit kernel warning

Signed-off-by: Rex Lu <rex.lu@mediatek.com>
---
 util.h | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/util.h b/util.h
index 260965dd..94b4241e 100644
--- a/util.h
+++ b/util.h
@@ -22,6 +22,7 @@ struct mt76_worker
 enum {
 	MT76_WORKER_SCHEDULED,
 	MT76_WORKER_RUNNING,
+	MT76_WORKER_DISABLED,
 };
 
 #define MT76_INCR(_var, _size) \
@@ -91,8 +92,11 @@ static inline void mt76_worker_disable(struct mt76_worker *w)
 	if (!w->task)
 		return;
 
+	if (test_and_set_bit(MT76_WORKER_DISABLED, &w->state))
+		return;
+
 	kthread_park(w->task);
-	WRITE_ONCE(w->state, 0);
+	WRITE_ONCE(w->state, BIT(MT76_WORKER_DISABLED));
 }
 
 static inline void mt76_worker_enable(struct mt76_worker *w)
@@ -101,6 +105,7 @@ static inline void mt76_worker_enable(struct mt76_worker *w)
 		return;
 
 	kthread_unpark(w->task);
+	clear_bit(MT76_WORKER_DISABLED, &w->state);
 	mt76_worker_schedule(w);
 }
 
-- 
2.45.2

