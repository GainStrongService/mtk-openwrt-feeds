From 90ddad02a117a9a21bfb4d25641f975b453d6837 Mon Sep 17 00:00:00 2001
From: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
Date: Tue, 11 Feb 2025 11:33:50 +0800
Subject: [PATCH 098/107] mtk: mac80211: relax the DFS restrictions for
 scanning

If user turn on the dfs relax flag by entering the following command:
echo 1 > /sys/kernel/debug/ieee80211/phy0/scan_dfs_relax
then
1. Allow the AP to scan while operating on a DFS channel
2. Allow the MLO AP to scan the other bands when 5G band is performing
   CAC (5G band will be skipped).

This patch is rebased from 04af7e0d15d5c2c9b8e3adf40529342d06850b91.

Signed-off-by: StanleyYP Wang <StanleyYP.Wang@mediatek.com>
---
 include/net/cfg80211.h | 10 +++++++-
 net/mac80211/scan.c    |  7 +++---
 net/wireless/debugfs.c | 52 ++++++++++++++++++++++++++++++++++++++++++
 net/wireless/nl80211.c | 26 +++++++++++++++------
 net/wireless/scan.c    |  4 ++--
 net/wireless/util.c    | 13 +++++++----
 6 files changed, 94 insertions(+), 18 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index b2112b28..94cb8165 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -5831,6 +5831,8 @@ struct wiphy_radio {
  *
  * @radio: radios belonging to this wiphy
  * @n_radio: number of radios
+ *
+ * @dfs_relax: a flag to relax the DFS restrictions during scanning
  */
 struct wiphy {
 	struct mutex mtx;
@@ -5987,6 +5989,8 @@ struct wiphy {
 	int n_radio;
 	const struct wiphy_radio *radio;
 
+	bool dfs_relax;
+
 	char priv[] __aligned(NETDEV_ALIGN);
 };
 
@@ -6744,11 +6748,15 @@ bool cfg80211_radio_chandef_valid(const struct wiphy_radio *radio,
  *
  * @wdev: the wireless device
  * @chan: channel to check
+ * @radio_mask: check the channel under a user-specified radio mask.
+ *	If the radio_mask is 0, then wdev->radio_mask is used
+ *	to check the channel.
  *
  * Return: whether or not the wdev may use the channel
  */
 bool cfg80211_wdev_channel_allowed(struct wireless_dev *wdev,
-				   struct ieee80211_channel *chan);
+				   struct ieee80211_channel *chan,
+				   u32 radio_mask);
 
 /**
  * ieee80211_get_response_rate - get basic rate for a given rate
diff --git a/net/mac80211/scan.c b/net/mac80211/scan.c
index 766d8a06..97d65dfc 100644
--- a/net/mac80211/scan.c
+++ b/net/mac80211/scan.c
@@ -636,7 +636,8 @@ u32 ieee80211_can_leave_ch(struct ieee80211_sub_if_data *sdata,
 	lockdep_assert_wiphy(local->hw.wiphy);
 
 	radar_mask = ieee80211_is_radar_required(local, radio_mask);
-	if (radar_mask && !regulatory_pre_cac_allowed(local->hw.wiphy))
+	if (radar_mask && !regulatory_pre_cac_allowed(local->hw.wiphy) &&
+	    !wiphy->dfs_relax)
 		return radio_mask & ~radar_mask;
 
 	list_for_each_entry(sdata_iter, &local->interfaces, list) {
@@ -1287,7 +1288,7 @@ int ieee80211_request_ibss_scan(struct ieee80211_sub_if_data *sdata,
 				if (tmp_ch->flags & (IEEE80211_CHAN_NO_IR |
 						     IEEE80211_CHAN_DISABLED) ||
 				    !cfg80211_wdev_channel_allowed(&sdata->wdev,
-								   tmp_ch))
+								   tmp_ch, 0))
 					continue;
 
 				local->int_scan_req->channels[n_ch] = tmp_ch;
@@ -1304,7 +1305,7 @@ int ieee80211_request_ibss_scan(struct ieee80211_sub_if_data *sdata,
 			if (channels[i]->flags & (IEEE80211_CHAN_NO_IR |
 						  IEEE80211_CHAN_DISABLED) ||
 			    !cfg80211_wdev_channel_allowed(&sdata->wdev,
-							   channels[i]))
+							   channels[i], 0))
 				continue;
 
 			local->int_scan_req->channels[n_ch] = channels[i];
diff --git a/net/wireless/debugfs.c b/net/wireless/debugfs.c
index 26fa47dd..2453b7ec 100644
--- a/net/wireless/debugfs.c
+++ b/net/wireless/debugfs.c
@@ -407,6 +407,57 @@ dfs_available_reset(void *data, u64 val)
 DEFINE_DEBUGFS_ATTRIBUTE(dfs_available_reset_ops, NULL,
 			 dfs_available_reset, "0x%08llx\n");
 
+static ssize_t scan_dfs_relax_write(struct file *file,
+				    const char __user *user_buf,
+				    size_t count, loff_t *ppos)
+{
+	struct wiphy *wiphy = file->private_data;
+	char buf[16];
+
+	if (count >= sizeof(buf))
+		return -EINVAL;
+
+	if (copy_from_user(buf, user_buf, count))
+		return -EFAULT;
+
+	if (count && buf[count - 1] == '\n')
+		buf[count - 1] = '\0';
+	else
+		buf[count] = '\0';
+
+	if (kstrtobool(buf, &wiphy->dfs_relax))
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t scan_dfs_relax_read(struct file *file, char __user *user_buf,
+				   size_t count, loff_t *ppos)
+{
+	struct wiphy *wiphy = file->private_data;
+	unsigned int r, offset, buf_size = PAGE_SIZE;
+	char *buf;
+
+	buf = kzalloc(buf_size, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	offset = scnprintf(buf, buf_size, "dfs relax: %u\n", wiphy->dfs_relax);
+
+	r = simple_read_from_buffer(user_buf, count, ppos, buf, offset);
+
+	kfree(buf);
+
+	return r;
+}
+
+static const struct file_operations scan_dfs_relax_ops = {
+	.write = scan_dfs_relax_write,
+	.read = scan_dfs_relax_read,
+	.open = simple_open,
+	.llseek = default_llseek,
+};
+
 #define DEBUGFS_ADD(name, chmod)						\
 	debugfs_create_file(#name, chmod, phyd, &rdev->wiphy, &name## _ops)
 
@@ -423,6 +474,7 @@ void cfg80211_debugfs_rdev_add(struct cfg80211_registered_device *rdev)
 	DEBUGFS_ADD(dfs_skip_nop, 0600);
 	DEBUGFS_ADD(dfs_skip_cac, 0600);
 	DEBUGFS_ADD(dfs_available_reset, 0600);
+	DEBUGFS_ADD(scan_dfs_relax, 0644);
 }
 
 struct debugfs_read_work {
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index a55ff55b..9a9bcfb8 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -9361,19 +9361,23 @@ int nl80211_parse_random_mac(struct nlattr **attrs,
 }
 
 static bool cfg80211_off_channel_oper_allowed(struct wireless_dev *wdev,
-					      struct ieee80211_channel *chan)
+					      struct ieee80211_channel *chan,
+					      bool dfs_relax)
 {
 	unsigned int link_id;
 	bool all_ok = true;
 
 	lockdep_assert_wiphy(wdev->wiphy);
 
-	if (!cfg80211_wdev_channel_allowed(wdev, chan))
+	if (!cfg80211_wdev_channel_allowed(wdev, chan, 0))
 		return false;
 
 	if (!cfg80211_beaconing_iface_active(wdev))
 		return true;
 
+	if (dfs_relax)
+		return true;
+
 	/*
 	 * FIXME: check if we have a free HW resource/link for chan
 	 *
@@ -9590,7 +9594,7 @@ static int nl80211_trigger_scan(struct sk_buff *skb, struct genl_info *info)
 
 			/* ignore disabled channels */
 			if (chan->flags & IEEE80211_CHAN_DISABLED ||
-			    !cfg80211_wdev_channel_allowed(wdev, chan))
+			    !cfg80211_wdev_channel_allowed(wdev, chan, 0))
 				continue;
 
 			request->channels[i] = chan;
@@ -9613,6 +9617,11 @@ static int nl80211_trigger_scan(struct sk_buff *skb, struct genl_info *info)
 		}
 	} else {
 		enum nl80211_band band;
+		u32 radio_mask;
+
+		err = nl80211_parse_vif_radio_mask(info, &radio_mask);
+		if (err < 0)
+			goto out_free;
 
 		/* all channels */
 		for (band = 0; band < NUM_NL80211_BANDS; band++) {
@@ -9626,7 +9635,7 @@ static int nl80211_trigger_scan(struct sk_buff *skb, struct genl_info *info)
 				chan = &wiphy->bands[band]->channels[j];
 
 				if (chan->flags & IEEE80211_CHAN_DISABLED ||
-				    !cfg80211_wdev_channel_allowed(wdev, chan))
+				    !cfg80211_wdev_channel_allowed(wdev, chan, radio_mask))
 					continue;
 
 				request->channels[i] = chan;
@@ -9646,7 +9655,7 @@ static int nl80211_trigger_scan(struct sk_buff *skb, struct genl_info *info)
 		struct ieee80211_channel *chan = request->channels[i];
 
 		/* if we can go off-channel to the target channel we're good */
-		if (cfg80211_off_channel_oper_allowed(wdev, chan))
+		if (cfg80211_off_channel_oper_allowed(wdev, chan, wiphy->dfs_relax))
 			continue;
 
 		if (!cfg80211_wdev_on_sub_chan(wdev, chan, true)) {
@@ -12827,7 +12836,10 @@ static int nl80211_remain_on_channel(struct sk_buff *skb,
 	if (err)
 		return err;
 
-	if (!cfg80211_off_channel_oper_allowed(wdev, chandef.chan)) {
+	if (wdev->links[link_id].cac_started)
+		return -EBUSY;
+
+	if (!cfg80211_off_channel_oper_allowed(wdev, chandef.chan, rdev->wiphy.dfs_relax)) {
 		const struct cfg80211_chan_def *oper_chandef, *compat_chandef;
 
 		oper_chandef = wdev_chandef(wdev, link_id);
@@ -13044,7 +13056,7 @@ static int nl80211_tx_mgmt(struct sk_buff *skb, struct genl_info *info)
 		return -EINVAL;
 
 	if (params.offchan &&
-	    !cfg80211_off_channel_oper_allowed(wdev, chandef.chan))
+	    !cfg80211_off_channel_oper_allowed(wdev, chandef.chan, false))
 		return -EBUSY;
 
 	params.link_id = nl80211_link_id_or_invalid(info->attrs);
diff --git a/net/wireless/scan.c b/net/wireless/scan.c
index 779efb75..9c688ee0 100644
--- a/net/wireless/scan.c
+++ b/net/wireless/scan.c
@@ -990,7 +990,7 @@ static int cfg80211_scan_6ghz(struct cfg80211_registered_device *rdev)
 			ieee80211_get_channel(&rdev->wiphy, ap->center_freq);
 
 		if (!chan || chan->flags & IEEE80211_CHAN_DISABLED ||
-		    !cfg80211_wdev_channel_allowed(rdev_req->wdev, chan))
+		    !cfg80211_wdev_channel_allowed(rdev_req->wdev, chan, 0))
 			continue;
 
 		for (i = 0; i < rdev_req->n_channels; i++) {
@@ -3557,7 +3557,7 @@ int cfg80211_wext_siwscan(struct net_device *dev,
 			/* ignore disabled channels */
 			chan = &wiphy->bands[band]->channels[j];
 			if (chan->flags & IEEE80211_CHAN_DISABLED ||
-			    !cfg80211_wdev_channel_allowed(creq->wdev, chan))
+			    !cfg80211_wdev_channel_allowed(creq->wdev, chan, 0))
 				continue;
 
 			/* If we have a wireless request structure and the
diff --git a/net/wireless/util.c b/net/wireless/util.c
index 6f28fc60..facd8556 100644
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -2932,21 +2932,24 @@ bool cfg80211_radio_chandef_valid(const struct wiphy_radio *radio,
 EXPORT_SYMBOL(cfg80211_radio_chandef_valid);
 
 bool cfg80211_wdev_channel_allowed(struct wireless_dev *wdev,
-				   struct ieee80211_channel *chan)
+				   struct ieee80211_channel *chan,
+				   u32 radio_mask)
 {
 	struct wiphy *wiphy = wdev->wiphy;
 	const struct wiphy_radio *radio;
 	struct cfg80211_chan_def chandef;
-	u32 radio_mask;
+	u32 mask = radio_mask & wdev->radio_mask;
 	int i;
 
-	radio_mask = wdev->radio_mask;
-	if (!wiphy->n_radio || radio_mask == BIT(wiphy->n_radio) - 1)
+	if (!radio_mask)
+		mask = wdev->radio_mask;
+
+	if (!wiphy->n_radio || mask == BIT(wiphy->n_radio) - 1)
 		return true;
 
 	cfg80211_chandef_create(&chandef, chan, NL80211_CHAN_HT20);
 	for (i = 0; i < wiphy->n_radio; i++) {
-		if (!(radio_mask & BIT(i)))
+		if (!(mask & BIT(i)))
 			continue;
 
 		radio = &wiphy->radio[i];
-- 
2.45.2

