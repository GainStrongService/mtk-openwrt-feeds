From afaa1c3632e8730a6743b4ec3d22e668017d6e22 Mon Sep 17 00:00:00 2001
From: Rex Lu <rex.lu@mediatek.com>
Date: Mon, 23 Dec 2024 16:27:20 +0800
Subject: [PATCH] mtk wed add hwpath wmm support

Signed-off-by: Rex Lu <rex.lu@mediatek.com>
---
 drivers/net/ethernet/mediatek/mtk_ppe.c       |  3 +-
 drivers/net/ethernet/mediatek/mtk_ppe.h       |  2 +-
 .../net/ethernet/mediatek/mtk_ppe_offload.c   | 32 +++++++++++--------
 drivers/net/ethernet/mediatek/mtk_wed.h       |  1 +
 include/linux/netdevice.h                     |  1 +
 5 files changed, 23 insertions(+), 16 deletions(-)

--- a/drivers/net/ethernet/mediatek/mtk_ppe.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe.c
@@ -622,7 +622,7 @@ int mtk_foe_entry_set_pppoe(struct mtk_e
 
 int mtk_foe_entry_set_wdma(struct mtk_eth *eth, struct mtk_foe_entry *entry,
 			   int wdma_idx, int txq, int bss, int wcid,
-			   bool amsdu_en)
+			   int tid, bool amsdu_en)
 {
 	struct mtk_foe_mac_info *l2 = mtk_foe_entry_l2(eth, entry);
 	u32 *ib2 = mtk_foe_entry_ib2(eth, entry);
@@ -635,6 +635,7 @@ int mtk_foe_entry_set_wdma(struct mtk_et
 		l2->w3info = FIELD_PREP(MTK_FOE_WINFO_WCID_V3, wcid) |
 			     FIELD_PREP(MTK_FOE_WINFO_BSS_V3, bss);
 		l2->amsdu = FIELD_PREP(MTK_FOE_WINFO_AMSDU_EN, amsdu_en);
+		l2->amsdu |= FIELD_PREP(MTK_FOE_WINFO_AMSDU_TID, tid);
 		break;
 	case 2:
 		*ib2 &= ~MTK_FOE_IB2_PORT_MG_V2;
--- a/drivers/net/ethernet/mediatek/mtk_ppe.h
+++ b/drivers/net/ethernet/mediatek/mtk_ppe.h
@@ -410,7 +410,7 @@ int mtk_foe_entry_set_pppoe(struct mtk_e
 			    int sid);
 int mtk_foe_entry_set_wdma(struct mtk_eth *eth, struct mtk_foe_entry *entry,
 			   int wdma_idx, int txq, int bss, int wcid,
-			   bool amsdu_en);
+			   int tid, bool amsdu_en);
 int mtk_foe_entry_set_queue(struct mtk_eth *eth, struct mtk_foe_entry *entry,
 			    unsigned int queue);
 int mtk_foe_entry_commit(struct mtk_ppe *ppe, struct mtk_flow_entry *entry);
--- a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
@@ -93,31 +93,31 @@ mtk_flow_offload_mangle_eth(const struct
 static int
 mtk_flow_get_wdma_info(struct net_device *dev, const u8 *addr, struct mtk_wdma_info *info)
 {
-	struct net_device_path_stack stack;
-	struct net_device_path *path;
-	int err;
+	struct net_device_path_ctx ctx = {};
+	struct net_device_path path = {};
 
 	if (!dev)
 		return -ENODEV;
 
+	ctx.dev = dev;
+
 	if (!IS_ENABLED(CONFIG_NET_MEDIATEK_SOC_WED))
 		return -1;
 
-	rcu_read_lock();
-	err = dev_fill_forward_path(dev, addr, &stack);
-	rcu_read_unlock();
-	if (err)
-		return err;
+	if (!dev->netdev_ops->ndo_fill_forward_path)
+		return -1;
+
+	memcpy(ctx.daddr, addr, sizeof(ctx.daddr));
+
+	path.mtk_wdma.tid = info->tid;
 
-	path = &stack.path[stack.num_paths - 1];
-	if (path->type != DEV_PATH_MTK_WDMA)
+	if (dev->netdev_ops->ndo_fill_forward_path(&ctx, &path))
 		return -1;
 
-	info->wdma_idx = path->mtk_wdma.wdma_idx;
-	info->queue = path->mtk_wdma.queue;
-	info->bss = path->mtk_wdma.bss;
-	info->wcid = path->mtk_wdma.wcid;
-	info->amsdu = path->mtk_wdma.amsdu;
+	if (path.type != DEV_PATH_MTK_WDMA)
+		return -1;
+
+	memcpy(info, &path.mtk_wdma, sizeof(*info));
 
 	return 0;
 }
@@ -288,9 +288,11 @@ mtk_flow_set_output_device(struct mtk_et
 	u32 ct_mark = 0;
 	int pse_port, dsa_port, dsa_proto, queue;
 
+	info.tid = dscp;
+
 	if (mtk_flow_get_wdma_info(odev, dest_mac, &info) == 0) {
 		mtk_foe_entry_set_wdma(eth, foe, info.wdma_idx, info.queue,
-				       info.bss, info.wcid, info.amsdu);
+				       info.bss, info.wcid, info.tid, info.amsdu);
 		if (mtk_is_netsys_v2_or_greater(eth)) {
 			switch (info.wdma_idx) {
 			case 0:
--- a/drivers/net/ethernet/mediatek/mtk_wed.h
+++ b/drivers/net/ethernet/mediatek/mtk_wed.h
@@ -60,6 +60,7 @@ struct mtk_wdma_info {
 	u16 wcid;
 	u8 bss;
 	u8 amsdu;
+	u8 tid;
 };
 
 #ifdef CONFIG_NET_MEDIATEK_SOC_WED
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -945,6 +945,7 @@ struct net_device_path {
 			u16 wcid;
 			u8 bss;
 			u8 amsdu;
+			u8 tid;
 		} mtk_wdma;
 	};
 };
