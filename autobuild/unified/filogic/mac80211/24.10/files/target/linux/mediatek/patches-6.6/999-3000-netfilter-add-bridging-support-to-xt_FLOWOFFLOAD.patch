From 4f7a968bfaca1b9331fe3416ddd275c844ce3bc0 Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Tue, 17 Dec 2024 13:24:44 +0800
Subject: [PATCH] netfilter: add bridging support to xt_FLOWOFFLOAD

Without this patch, we are unable to use xt_FLOWOFFLOAD to perform
bridging offload.

Signed-off-by: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
---
 net/netfilter/xt_FLOWOFFLOAD.c | 112 ++++++++++++++++++++++++++++-----
 1 file changed, 98 insertions(+), 14 deletions(-)

diff --git a/net/netfilter/xt_FLOWOFFLOAD.c b/net/netfilter/xt_FLOWOFFLOAD.c
index 08e0b94..2704d02 100644
--- a/net/netfilter/xt_FLOWOFFLOAD.c
+++ b/net/netfilter/xt_FLOWOFFLOAD.c
@@ -386,10 +386,10 @@ static int nf_dev_fill_forward_path(const struct nf_flow_route *route,
 	return dev_fill_forward_path(dev, ha, stack);
 }
 
-static void nf_dev_forward_path(struct nf_flow_route *route,
-				const struct nf_conn *ct,
-				enum ip_conntrack_dir dir,
-				struct net_device **devs)
+static int nf_dev_forward_path(struct nf_flow_route *route,
+			       const struct nf_conn *ct,
+			       enum ip_conntrack_dir dir,
+			       struct net_device **devs)
 {
 	const struct dst_entry *dst = route->tuple[dir].dst;
 	struct net_device_path_stack stack;
@@ -402,7 +402,7 @@ static void nf_dev_forward_path(struct nf_flow_route *route,
 
 	devs[!dir] = (struct net_device *)info.indev;
 	if (!info.indev)
-		return;
+		return -ENOENT;
 
 	route->tuple[!dir].in.ifindex = info.indev->ifindex;
 	for (i = 0; i < info.num_encaps; i++) {
@@ -419,13 +419,15 @@ static void nf_dev_forward_path(struct nf_flow_route *route,
 		route->tuple[dir].out.hw_ifindex = info.hw_outdev->ifindex;
 		route->tuple[dir].xmit_type = info.xmit_type;
 	}
+
+	return 0;
 }
 
 static int
-xt_flowoffload_route(struct sk_buff *skb, const struct nf_conn *ct,
-		     const struct xt_action_param *par,
-		     struct nf_flow_route *route, enum ip_conntrack_dir dir,
-		     struct net_device **devs)
+xt_flowoffload_route_nat(struct sk_buff *skb, const struct nf_conn *ct,
+			 const struct xt_action_param *par,
+			 struct nf_flow_route *route, enum ip_conntrack_dir dir,
+			 struct net_device **devs)
 {
 	struct dst_entry *this_dst = skb_dst(skb);
 	struct dst_entry *other_dst = NULL;
@@ -456,13 +458,90 @@ xt_flowoffload_route(struct sk_buff *skb, const struct nf_conn *ct,
 	nf_default_forward_path(route, this_dst, dir, devs);
 	nf_default_forward_path(route, other_dst, !dir, devs);
 
-	if (route->tuple[dir].xmit_type	== FLOW_OFFLOAD_XMIT_NEIGH &&
+	if (route->tuple[dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH &&
+	    route->tuple[!dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH) {
+		if (nf_dev_forward_path(route, ct, dir, devs))
+			return -ENOENT;
+		if (nf_dev_forward_path(route, ct, !dir, devs))
+			return -ENOENT;
+	}
+
+	return 0;
+}
+
+static int
+xt_flowoffload_route_dir(struct sk_buff *skb, struct nf_flow_route *route,
+			 const struct nf_conn *ct, enum ip_conntrack_dir dir,
+			 const struct xt_action_param *par, int ifindex,
+			 struct net_device **devs)
+{
+	struct dst_entry *this_dst = skb_dst(skb);
+	struct dst_entry *dst = NULL;
+	struct flowi fl;
+
+	memset(&fl, 0, sizeof(fl));
+	switch (xt_family(par)) {
+	case NFPROTO_IPV4:
+		fl.u.ip4.daddr = ct->tuplehash[!dir].tuple.src.u3.ip;
+		fl.u.ip4.flowi4_oif = ifindex;
+		break;
+	case NFPROTO_IPV6:
+		fl.u.ip6.saddr = ct->tuplehash[!dir].tuple.dst.u3.in6;
+		fl.u.ip6.daddr = ct->tuplehash[!dir].tuple.src.u3.in6;
+		fl.u.ip6.flowi6_oif = ifindex;
+		break;
+	}
+
+	if (!dst_hold_safe(this_dst))
+		return -ENOENT;
+
+	nf_route(xt_net(par), &dst, &fl, false, xt_family(par));
+	if (!dst) {
+		dst_release(this_dst);
+		return -ENOENT;
+	}
+
+	nf_default_forward_path(route, dst, dir, devs);
+
+	return 0;
+}
+
+static int
+xt_flowoffload_route_bridge(struct sk_buff *skb, const struct nf_conn *ct,
+			    const struct xt_action_param *par,
+			    struct nf_flow_route *route, enum ip_conntrack_dir dir,
+			    struct net_device **devs)
+{
+	int ret;
+
+	ret = xt_flowoffload_route_dir(skb, route, ct, dir, par,
+				       devs[dir]->ifindex,
+				       devs);
+	if (ret)
+		return ret;
+
+	ret = xt_flowoffload_route_dir(skb, route, ct, !dir, par,
+				       devs[!dir]->ifindex,
+				       devs);
+	if (ret)
+		goto err_route_dir1;
+
+	if (route->tuple[dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH &&
 	    route->tuple[!dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH) {
-		nf_dev_forward_path(route, ct, dir, devs);
-		nf_dev_forward_path(route, ct, !dir, devs);
+		if (nf_dev_forward_path(route, ct, dir, devs) ||
+		    nf_dev_forward_path(route, ct, !dir, devs)) {
+			ret = -ENOENT;
+			goto err_route_dir2;
+		}
 	}
 
 	return 0;
+
+err_route_dir2:
+	dst_release(route->tuple[!dir].dst);
+err_route_dir1:
+	dst_release(route->tuple[dir].dst);
+	return ret;
 }
 
 static unsigned int
@@ -520,8 +599,13 @@ flowoffload_tg(struct sk_buff *skb, const struct xt_action_param *par)
 	if (test_and_set_bit(IPS_OFFLOAD_BIT, &ct->status))
 		return XT_CONTINUE;
 
-	if (xt_flowoffload_route(skb, ct, par, &route, dir, devs) < 0)
-		goto err_flow_route;
+	if (ct->status & IPS_NAT_MASK) {
+		if (xt_flowoffload_route_nat(skb, ct, par, &route, dir, devs) < 0)
+			goto err_flow_route;
+	} else {
+		if (xt_flowoffload_route_bridge(skb, ct, par, &route, dir, devs) < 0)
+			goto err_flow_route;
+	}
 
 	flow = flow_offload_alloc(ct);
 	if (!flow)
-- 
2.45.2

