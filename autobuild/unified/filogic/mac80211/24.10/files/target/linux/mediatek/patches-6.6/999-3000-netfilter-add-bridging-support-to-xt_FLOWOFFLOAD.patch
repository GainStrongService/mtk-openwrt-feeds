From 1a7f68a57dc4726e760be4b19fe6d59d82942e0b Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Mon, 23 Jun 2025 16:19:04 +0800
Subject: [PATCH] netfilter: add bridging support to xt_FLOWOFFLOAD

Without this patch, we are unable to use xt_FLOWOFFLOAD to perform
bridging offload.

Signed-off-by: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
---
 include/linux/netdevice.h      |   2 +
 net/bridge/br_fdb.c            |   1 +
 net/core/dev.c                 |  32 +++--
 net/netfilter/xt_FLOWOFFLOAD.c | 211 +++++++++++++++++++++++++++++----
 4 files changed, 210 insertions(+), 36 deletions(-)

diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index e50aa75..f620613 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -3134,6 +3134,8 @@ int dev_get_iflink(const struct net_device *dev);
 int dev_fill_metadata_dst(struct net_device *dev, struct sk_buff *skb);
 int dev_fill_forward_path(const struct net_device *dev, const u8 *daddr,
 			  struct net_device_path_stack *stack);
+int __dev_fill_forward_path(struct net_device_path_ctx *ctx, const u8 *daddr,
+			    struct net_device_path_stack *stack);
 struct net_device *__dev_get_by_flags(struct net *net, unsigned short flags,
 				      unsigned short mask);
 struct net_device *dev_get_by_name(struct net *net, const char *name);
diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index a6d8cd9..0da839d 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -272,6 +272,7 @@ struct net_bridge_fdb_entry *br_fdb_find_rcu(struct net_bridge *br,
 {
 	return fdb_find_rcu(&br->fdb_hash_tbl, addr, vid);
 }
+EXPORT_SYMBOL_GPL(br_fdb_find_rcu);
 
 /* When a static FDB entry is added, the mac address from the entry is
  * added to the bridge private HW address list and all required ports
diff --git a/net/core/dev.c b/net/core/dev.c
index 7a0d1be..7579a3f 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -723,44 +723,52 @@ static struct net_device_path *dev_fwd_path(struct net_device_path_stack *stack)
 	return &stack->path[k];
 }
 
-int dev_fill_forward_path(const struct net_device *dev, const u8 *daddr,
-			  struct net_device_path_stack *stack)
+int __dev_fill_forward_path(struct net_device_path_ctx *ctx, const u8 *daddr,
+			    struct net_device_path_stack *stack)
 {
 	const struct net_device *last_dev;
-	struct net_device_path_ctx ctx = {
-		.dev	= dev,
-	};
 	struct net_device_path *path;
 	int ret = 0;
 
-	memcpy(ctx.daddr, daddr, sizeof(ctx.daddr));
+	memcpy(ctx->daddr, daddr, sizeof(ctx->daddr));
 	stack->num_paths = 0;
-	while (ctx.dev && ctx.dev->netdev_ops->ndo_fill_forward_path) {
-		last_dev = ctx.dev;
+	while (ctx->dev && ctx->dev->netdev_ops->ndo_fill_forward_path) {
+		last_dev = ctx->dev;
 		path = dev_fwd_path(stack);
 		if (!path)
 			return -1;
 
 		memset(path, 0, sizeof(struct net_device_path));
-		ret = ctx.dev->netdev_ops->ndo_fill_forward_path(&ctx, path);
+		ret = ctx->dev->netdev_ops->ndo_fill_forward_path(ctx, path);
 		if (ret < 0)
 			return -1;
 
-		if (WARN_ON_ONCE(last_dev == ctx.dev))
+		if (WARN_ON_ONCE(last_dev == ctx->dev))
 			return -1;
 	}
 
-	if (!ctx.dev)
+	if (!ctx->dev)
 		return ret;
 
 	path = dev_fwd_path(stack);
 	if (!path)
 		return -1;
 	path->type = DEV_PATH_ETHERNET;
-	path->dev = ctx.dev;
+	path->dev = ctx->dev;
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(__dev_fill_forward_path);
+
+int dev_fill_forward_path(const struct net_device *dev, const u8 *daddr,
+			  struct net_device_path_stack *stack)
+{
+	struct net_device_path_ctx ctx = {
+		.dev	= dev,
+	};
+
+	return __dev_fill_forward_path(&ctx, daddr, stack);
+}
 EXPORT_SYMBOL_GPL(dev_fill_forward_path);
 
 /**
diff --git a/net/netfilter/xt_FLOWOFFLOAD.c b/net/netfilter/xt_FLOWOFFLOAD.c
index 08e0b94..6bf0d57 100644
--- a/net/netfilter/xt_FLOWOFFLOAD.c
+++ b/net/netfilter/xt_FLOWOFFLOAD.c
@@ -15,6 +15,7 @@
 #include <net/netfilter/nf_conntrack_extend.h>
 #include <net/netfilter/nf_conntrack_helper.h>
 #include <net/netfilter/nf_flow_table.h>
+#include "../bridge/br_private.h"
 
 struct xt_flowoffload_hook {
 	struct hlist_node list;
@@ -253,6 +254,45 @@ xt_flowoffload_skip(struct sk_buff *skb, int family)
 	return false;
 }
 
+static u16 xt_flowoffload_get_vlan_id(struct net_bridge_port *port, struct sk_buff *skb)
+{
+	u16 vlan_id = 0;
+
+	if (!port || !br_opt_get(port->br, BROPT_VLAN_ENABLED))
+		return 0;
+
+	if (skb_vlan_tag_present(skb))
+		vlan_id = skb_vlan_tag_get_id(skb);
+	else
+		br_vlan_get_pvid_rcu(skb->dev, &vlan_id);
+
+	return vlan_id;
+}
+
+static bool xt_flowoffload_is_bridging(struct sk_buff *skb)
+{
+	struct net_bridge_port *port;
+	unsigned char *dmac = eth_hdr(skb)->h_dest;
+	bool bridging = false;
+	u16 vlan_id;
+
+	if (!netif_is_bridge_port(skb->dev))
+		return false;
+
+	rcu_read_lock();
+	port = br_port_get_rcu(skb->dev);
+	if (port) {
+		vlan_id = xt_flowoffload_get_vlan_id(port, skb);
+
+		/* lookup fdb entry */
+		if (br_fdb_find_rcu(port->br, dmac, vlan_id))
+			bridging = true;
+	}
+	rcu_read_unlock();
+
+	return bridging;
+}
+
 static enum flow_offload_xmit_type nf_xmit_type(struct dst_entry *dst)
 {
 	if (dst_xfrm(dst))
@@ -292,12 +348,12 @@ static void nf_dev_path_info(const struct net_device_path_stack *stack,
 
 	for (i = 0; i < stack->num_paths; i++) {
 		path = &stack->path[i];
+		info->indev = path->dev;
 		switch (path->type) {
 		case DEV_PATH_ETHERNET:
 		case DEV_PATH_DSA:
 		case DEV_PATH_VLAN:
 		case DEV_PATH_PPPOE:
-			info->indev = path->dev;
 			if (is_zero_ether_addr(info->h_source))
 				memcpy(info->h_source, path->dev->dev_addr, ETH_ALEN);
 
@@ -335,14 +391,14 @@ static void nf_dev_path_info(const struct net_device_path_stack *stack,
 				info->num_encaps++;
 				break;
 			case DEV_PATH_BR_VLAN_UNTAG:
-				info->num_encaps--;
+				if (info->num_encaps > 0)
+					info->num_encaps--;
 				break;
 			case DEV_PATH_BR_VLAN_KEEP:
 				break;
 			}
 			break;
 		default:
-			info->indev = NULL;
 			break;
 		}
 	}
@@ -355,11 +411,12 @@ static void nf_dev_path_info(const struct net_device_path_stack *stack,
 		info->xmit_type = FLOW_OFFLOAD_XMIT_DIRECT;
 }
 
-static int nf_dev_fill_forward_path(const struct nf_flow_route *route,
-				     const struct dst_entry *dst_cache,
-				     const struct nf_conn *ct,
-				     enum ip_conntrack_dir dir, u8 *ha,
-				     struct net_device_path_stack *stack)
+static int nf_dev_fill_forward_path(struct net_device_path_ctx *ctx,
+				    const struct nf_flow_route *route,
+				    const struct dst_entry *dst_cache,
+				    const struct nf_conn *ct,
+				    enum ip_conntrack_dir dir, u8 *ha,
+				    struct net_device_path_stack *stack)
 {
 	const void *daddr = &ct->tuplehash[!dir].tuple.src.u3;
 	struct net_device *dev = dst_cache->dev;
@@ -369,6 +426,9 @@ static int nf_dev_fill_forward_path(const struct nf_flow_route *route,
 	if (!nf_is_valid_ether_device(dev))
 		goto out;
 
+	if (!is_zero_ether_addr(ha))
+		goto out;
+
 	n = dst_neigh_lookup(dst_cache, daddr);
 	if (!n)
 		return -1;
@@ -383,26 +443,67 @@ static int nf_dev_fill_forward_path(const struct nf_flow_route *route,
 		return -1;
 
 out:
-	return dev_fill_forward_path(dev, ha, stack);
+	return __dev_fill_forward_path(ctx, ha, stack);
+}
+
+static void xt_flowoffload_br_vlan_dev_fill_forward_path(struct sk_buff *skb,
+							 struct net_device_path_ctx *ctx)
+{
+	struct net_bridge_port *port;
+	u16 vlan_id;
+
+	rcu_read_lock();
+	port = br_port_get_rcu(skb->dev);
+	if (port) {
+		vlan_id = xt_flowoffload_get_vlan_id(port, skb);
+		if (vlan_id) {
+			ctx->num_vlans = 1;
+			ctx->vlan[0].id = vlan_id;
+			ctx->vlan[0].proto = port->br->vlan_proto;
+		}
+	}
+	rcu_read_unlock();
 }
 
-static void nf_dev_forward_path(struct nf_flow_route *route,
-				const struct nf_conn *ct,
-				enum ip_conntrack_dir dir,
-				struct net_device **devs)
+static int nf_dev_forward_path(struct sk_buff *skb,
+			       struct nf_flow_route *route,
+			       const struct nf_conn *ct,
+			       enum ip_conntrack_dir dir,
+			       struct net_device **devs)
 {
 	const struct dst_entry *dst = route->tuple[dir].dst;
 	struct net_device_path_stack stack;
+	struct net_device_path_ctx ctx = {
+		.dev	= dst->dev,
+	};
 	struct nf_forward_info info = {};
+	struct ethhdr *eth;
+	enum ip_conntrack_dir skb_dir;
 	unsigned char ha[ETH_ALEN];
 	int i;
 
-	if (nf_dev_fill_forward_path(route, dst, ct, dir, ha, &stack) >= 0)
+	memset(ha, 0, sizeof(ha));
+
+	if (xt_flowoffload_is_bridging(skb) && skb_mac_header_was_set(skb)) {
+		eth = eth_hdr(skb);
+		skb_dir = CTINFO2DIR(skb_get_nfct(skb) & NFCT_INFOMASK);
+		if (skb_dir != dir) {
+			memcpy(ha, eth->h_source, ETH_ALEN);
+			memcpy(info.h_source, eth->h_dest, ETH_ALEN);
+		} else {
+			memcpy(ha, eth->h_dest, ETH_ALEN);
+			memcpy(info.h_source, eth->h_source, ETH_ALEN);
+		}
+
+		xt_flowoffload_br_vlan_dev_fill_forward_path(skb, &ctx);
+	}
+
+	if (nf_dev_fill_forward_path(&ctx, route, dst, ct, dir, ha, &stack) >= 0)
 		nf_dev_path_info(&stack, &info, ha);
 
 	devs[!dir] = (struct net_device *)info.indev;
 	if (!info.indev)
-		return;
+		return -ENOENT;
 
 	route->tuple[!dir].in.ifindex = info.indev->ifindex;
 	for (i = 0; i < info.num_encaps; i++) {
@@ -419,13 +520,15 @@ static void nf_dev_forward_path(struct nf_flow_route *route,
 		route->tuple[dir].out.hw_ifindex = info.hw_outdev->ifindex;
 		route->tuple[dir].xmit_type = info.xmit_type;
 	}
+
+	return 0;
 }
 
 static int
-xt_flowoffload_route(struct sk_buff *skb, const struct nf_conn *ct,
-		     const struct xt_action_param *par,
-		     struct nf_flow_route *route, enum ip_conntrack_dir dir,
-		     struct net_device **devs)
+xt_flowoffload_route_routing(struct sk_buff *skb, const struct nf_conn *ct,
+			     const struct xt_action_param *par,
+			     struct nf_flow_route *route, enum ip_conntrack_dir dir,
+			     struct net_device **devs)
 {
 	struct dst_entry *this_dst = skb_dst(skb);
 	struct dst_entry *other_dst = NULL;
@@ -456,15 +559,86 @@ xt_flowoffload_route(struct sk_buff *skb, const struct nf_conn *ct,
 	nf_default_forward_path(route, this_dst, dir, devs);
 	nf_default_forward_path(route, other_dst, !dir, devs);
 
-	if (route->tuple[dir].xmit_type	== FLOW_OFFLOAD_XMIT_NEIGH &&
+	if (route->tuple[dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH &&
 	    route->tuple[!dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH) {
-		nf_dev_forward_path(route, ct, dir, devs);
-		nf_dev_forward_path(route, ct, !dir, devs);
+		if (nf_dev_forward_path(skb, route, ct, dir, devs))
+			return -ENOENT;
+		if (nf_dev_forward_path(skb, route, ct, !dir, devs))
+			return -ENOENT;
 	}
 
 	return 0;
 }
 
+static int
+xt_flowoffload_route_dir(struct sk_buff *skb, struct nf_flow_route *route,
+			 const struct nf_conn *ct, enum ip_conntrack_dir dir,
+			 const struct xt_action_param *par, int ifindex,
+			 struct net_device **devs)
+{
+	struct dst_entry *dst = NULL;
+	struct flowi fl;
+
+	memset(&fl, 0, sizeof(fl));
+	switch (xt_family(par)) {
+	case NFPROTO_IPV4:
+		fl.u.ip4.daddr = ct->tuplehash[!dir].tuple.src.u3.ip;
+		fl.u.ip4.flowi4_oif = ifindex;
+		break;
+	case NFPROTO_IPV6:
+		fl.u.ip6.saddr = ct->tuplehash[!dir].tuple.dst.u3.in6;
+		fl.u.ip6.daddr = ct->tuplehash[!dir].tuple.src.u3.in6;
+		fl.u.ip6.flowi6_oif = ifindex;
+		break;
+	}
+
+	nf_route(xt_net(par), &dst, &fl, false, xt_family(par));
+	if (!dst)
+		return -ENOENT;
+
+	nf_default_forward_path(route, dst, dir, devs);
+
+	return 0;
+}
+
+static int
+xt_flowoffload_route_bridging(struct sk_buff *skb, const struct nf_conn *ct,
+			      const struct xt_action_param *par,
+			      struct nf_flow_route *route, enum ip_conntrack_dir dir,
+			      struct net_device **devs)
+{
+	int ret;
+
+	ret = xt_flowoffload_route_dir(skb, route, ct, dir, par,
+				       devs[dir]->ifindex,
+				       devs);
+	if (ret)
+		return ret;
+
+	ret = xt_flowoffload_route_dir(skb, route, ct, !dir, par,
+				       devs[!dir]->ifindex,
+				       devs);
+	if (ret)
+		goto err_route_dir1;
+
+	if (route->tuple[dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH &&
+	    route->tuple[!dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH) {
+		if (nf_dev_forward_path(skb, route, ct, dir, devs) ||
+		    nf_dev_forward_path(skb, route, ct, !dir, devs)) {
+			ret = -ENOENT;
+			goto err_route_dir2;
+		}
+	}
+
+	return 0;
+
+err_route_dir2:
+	dst_release(route->tuple[!dir].dst);
+err_route_dir1:
+	dst_release(route->tuple[dir].dst);
+	return ret;
+}
+
 static unsigned int
 flowoffload_tg(struct sk_buff *skb, const struct xt_action_param *par)
 {
@@ -520,8 +701,13 @@ flowoffload_tg(struct sk_buff *skb, const struct xt_action_param *par)
 	if (test_and_set_bit(IPS_OFFLOAD_BIT, &ct->status))
 		return XT_CONTINUE;
 
-	if (xt_flowoffload_route(skb, ct, par, &route, dir, devs) < 0)
-		goto err_flow_route;
+	if (xt_flowoffload_is_bridging(skb)) {
+		if (xt_flowoffload_route_bridging(skb, ct, par, &route, dir, devs) < 0)
+			goto err_flow_route;
+	} else {
+		if (xt_flowoffload_route_routing(skb, ct, par, &route, dir, devs) < 0)
+			goto err_flow_route;
+	}
 
 	flow = flow_offload_alloc(ct);
 	if (!flow)
-- 
2.45.2

