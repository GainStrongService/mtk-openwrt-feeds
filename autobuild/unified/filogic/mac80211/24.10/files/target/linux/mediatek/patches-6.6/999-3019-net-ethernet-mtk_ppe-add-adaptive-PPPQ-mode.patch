From c823eb4787ff4736ca2822c2800635b543e7c8b2 Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Tue, 10 Jun 2025 23:32:43 +0800
Subject: [PATCH] net: ethernet: mtk_ppe: add adaptive PPPQ mode

User can use the commnad below to enable adaptive PPPQ mode.
  - echo 3 > /sys/kernel/debug/mtk_ppe/qos_toggle

This mode can control the total number of PPPQ users to ensure they
do not exceed the QDMA bandwidth.

Signed-off-by: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
---
 drivers/net/ethernet/mediatek/mtk_eth_soc.h   |  5 +++++
 drivers/net/ethernet/mediatek/mtk_ppe.c       | 36 +++++++++++++++++--
 drivers/net/ethernet/mediatek/mtk_ppe.h       |  1 +
 .../net/ethernet/mediatek/mtk_ppe_debugfs.c   |  7 ++++
 .../net/ethernet/mediatek/mtk_ppe_offload.c   |  2 +-
 5 files changed, 47 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.h b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
index 38c3f85..6058e8d 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.h
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
@@ -1921,6 +1921,11 @@ mtk_ppe_check_pppq_path(struct mtk_mac *mac, struct mtk_foe_entry *foe, int dsa_
 	    (dsa_port == 5 && wifi_rx))
 		return 1;
 
+	if (mtk_is_netsys_v3_or_greater(mac->hw)) {
+		if (mac->hw->qos_toggle == 3 && mac->speed <= SPEED_2500 && wifi_rx)
+			return 1;
+	}
+
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe.c b/drivers/net/ethernet/mediatek/mtk_ppe.c
index d528d09..e7f03c8 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe.c
@@ -768,16 +768,29 @@ __mtk_foe_entry_clear(struct mtk_ppe *ppe, struct mtk_flow_entry *entry,
 
 	if (entry->hash != 0xffff && set_state) {
 		struct mtk_foe_entry *hwe = mtk_foe_get_entry(ppe, entry->hash);
+		int queue;
+		u32 *ib2;
 
 		state = FIELD_GET(MTK_FOE_IB1_STATE, hwe->ib1);
 
+		if (mtk_is_netsys_v3_or_greater(ppe->eth) && ppe->eth->qos_toggle == 3) {
+			ib2 = mtk_foe_entry_ib2(ppe->eth, &entry->data);
+			if (*ib2 & MTK_FOE_IB2_PSE_QOS_V2) {
+				queue = mtk_foe_entry_get_queue(ppe->eth, &entry->data);
+				spin_lock(&ppe->eth->qdma_shaper.lock);
+				mtk_shaper_update_refcnt(ppe->eth, queue, false);
+				spin_unlock(&ppe->eth->qdma_shaper.lock);
+			}
+		}
+
 		hwe->ib1 &= ~MTK_FOE_IB1_STATE;
 		hwe->ib1 |= FIELD_PREP(MTK_FOE_IB1_STATE, MTK_FOE_STATE_INVALID);
 		dma_wmb();
 		if (state == MTK_FOE_STATE_BIND)
 			mtk_ppe_cache_clear(ppe);
+
+		entry->hash = 0xffff;
 	}
-	entry->hash = 0xffff;
 
 	if (entry->type != MTK_FLOW_TYPE_L2_SUBFLOW)
 		return;
@@ -898,7 +911,10 @@ __mtk_foe_entry_commit(struct mtk_ppe *ppe, struct mtk_foe_entry *entry,
 	struct mtk_eth *eth = ppe->eth;
 	u16 timestamp = mtk_eth_timestamp(eth);
 	struct mtk_foe_entry *hwe;
-	u32 val;
+	u32 val, *ib2;
+	int queue;
+
+	hwe = mtk_foe_get_entry(ppe, hash);
 
 	if (mtk_is_netsys_v2_or_greater(eth)) {
 		entry->ib1 &= ~MTK_FOE_IB1_BIND_TIMESTAMP_V2;
@@ -910,7 +926,21 @@ __mtk_foe_entry_commit(struct mtk_ppe *ppe, struct mtk_foe_entry *entry,
 					 timestamp);
 	}
 
-	hwe = mtk_foe_get_entry(ppe, hash);
+	if (mtk_is_netsys_v3_or_greater(ppe->eth) && ppe->eth->qos_toggle == 3) {
+		ib2 = mtk_foe_entry_ib2(ppe->eth, entry);
+		if (*ib2 & MTK_FOE_IB2_PSE_QOS_V2) {
+			queue = mtk_foe_entry_get_queue(ppe->eth, entry);
+			spin_lock(&ppe->eth->qdma_shaper.lock);
+			if (mtk_shaper_is_available(ppe->eth, queue))
+				mtk_shaper_update_refcnt(ppe->eth, queue, true);
+			else {
+				/* Switch back to non-shaper path */
+				*ib2 &= ~(MTK_FOE_IB2_PSE_QOS_V2 | MTK_FOE_IB2_QID_V2);
+			}
+			spin_unlock(&ppe->eth->qdma_shaper.lock);
+		}
+	}
+
 	memcpy(&hwe->data, &entry->data, eth->soc->foe_entry_size - sizeof(hwe->ib1));
 	wmb();
 	hwe->ib1 = entry->ib1;
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe.h b/drivers/net/ethernet/mediatek/mtk_ppe.h
index 6640196..45f170c 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe.h
+++ b/drivers/net/ethernet/mediatek/mtk_ppe.h
@@ -379,6 +379,7 @@ mtk_ppe_check_skb(struct mtk_ppe *ppe, struct sk_buff *skb, u16 hash)
 	__mtk_ppe_check_skb(ppe, skb, hash);
 }
 
+unsigned int mtk_foe_entry_get_queue(struct mtk_eth *eth, struct mtk_foe_entry *entry);
 int mtk_foe_entry_prepare(struct mtk_eth *eth, struct mtk_foe_entry *entry,
 			  int type, int l4proto, u8 pse_port, u8 *src_mac,
 			  u8 *dest_mac);
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe_debugfs.c b/drivers/net/ethernet/mediatek/mtk_ppe_debugfs.c
index 3c05af2..c35878c 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe_debugfs.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe_debugfs.c
@@ -206,6 +206,8 @@ mtk_ppe_internal_debugfs_read_qos(struct seq_file *m, void *private)
 		pr_info("HQoS is enabled now!\n");
 	else if (eth->qos_toggle == 2)
 		pr_info("Per-port-per-queue mode is enabled!\n");
+	else if (eth->qos_toggle == 3)
+		pr_info("Adaptive Per-port-per-queue mode is enabled!\n");
 
 	return 0;
 }
@@ -238,6 +240,11 @@ mtk_ppe_internal_debugfs_write_qos(struct file *file, const char __user *buffer,
 		pr_info("Per-port-per-queue mode is going to be enabled !\n");
 		pr_info("PPPQ use qid 3~14 (scheduler 0).\n");
 		eth->qos_toggle = 2;
+	} else if (buf[0] == '3') {
+		pr_info("Adaptive Per-port-per-queue mode is going to be enabled !\n");
+		pr_info("PPPQ use qid 3~14 (scheduler 0).\n");
+		eth->qos_toggle = 3;
+		eth->qdma_shaper.threshold = 6000;
 	}
 
 	return len;
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
index f9152db..2907d0f 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
@@ -243,7 +243,7 @@ mtk_flow_set_output_device(struct mtk_eth *eth, struct mtk_foe_entry *foe,
 		queue = (pse_port == PSE_GDM3_PORT) ? 2 : pse_port - 1;
 	}
 
-	if (eth->qos_toggle == 2 && mtk_ppe_check_pppq_path(mac, foe, dsa_port))
+	if ((eth->qos_toggle == 2 || eth->qos_toggle == 3) && mtk_ppe_check_pppq_path(mac, foe, dsa_port))
 		mtk_foe_entry_set_queue(eth, foe, queue);
 	else if (eth->qos_toggle == 1 || (ct->mark & MTK_QDMA_QUEUE_MASK) >= 15) {
 		u8 qos_ul_toggle;
-- 
2.45.2

