From d83beca9db8104be7b209145cd87de1603cc858f Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Fri, 6 Jun 2025 15:39:18 +0800
Subject: [PATCH] netfilter: add bridging support to the nft_flow_offload

Without this patch, the bridging traffic is unable to BIND using
nft_flow_offload.

Signed-off-by: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
---
 net/netfilter/nft_flow_offload.c | 164 ++++++++++++++++++++++++++++---
 1 file changed, 148 insertions(+), 16 deletions(-)

diff --git a/net/netfilter/nft_flow_offload.c b/net/netfilter/nft_flow_offload.c
index 53fd3f7..79cdfdc 100644
--- a/net/netfilter/nft_flow_offload.c
+++ b/net/netfilter/nft_flow_offload.c
@@ -14,6 +14,7 @@
 #include <net/netfilter/nf_conntrack_core.h>
 #include <net/netfilter/nf_conntrack_extend.h>
 #include <net/netfilter/nf_flow_table.h>
+#include "../bridge/br_private.h"
 
 struct nft_flow_offload {
 	struct nft_flowtable	*flowtable;
@@ -45,6 +46,28 @@ static bool nft_is_valid_ether_device(const struct net_device *dev)
 	return true;
 }
 
+static bool nft_flow_offload_is_bridging(struct sk_buff *skb)
+{
+	struct net_bridge_port *port;
+	unsigned char *dmac = eth_hdr(skb)->h_dest;
+	u16 vlan_id = skb->vlan_tci & VLAN_VID_MASK;
+	bool bridging = false;
+
+	if (!netif_is_bridge_port(skb->dev))
+		return false;
+
+	rcu_read_lock();
+	port = br_port_get_rcu(skb->dev);
+	if (port) {
+		/* lookup fdb entry */
+		if (br_fdb_find_rcu(port->br, dmac, vlan_id))
+			bridging = true;
+	}
+	rcu_read_unlock();
+
+	return bridging;
+}
+
 static int nft_dev_fill_forward_path(const struct nf_flow_route *route,
 				     const struct dst_entry *dst_cache,
 				     const struct nf_conn *ct,
@@ -59,6 +82,9 @@ static int nft_dev_fill_forward_path(const struct nf_flow_route *route,
 	if (!nft_is_valid_ether_device(dev))
 		goto out;
 
+	if (!is_zero_ether_addr(ha))
+		goto out;
+
 	n = dst_neigh_lookup(dst_cache, daddr);
 	if (!n)
 		return -1;
@@ -102,12 +128,12 @@ static void nft_dev_path_info(const struct net_device_path_stack *stack,
 
 	for (i = 0; i < stack->num_paths; i++) {
 		path = &stack->path[i];
+		info->indev = path->dev;
 		switch (path->type) {
 		case DEV_PATH_ETHERNET:
 		case DEV_PATH_DSA:
 		case DEV_PATH_VLAN:
 		case DEV_PATH_PPPOE:
-			info->indev = path->dev;
 			if (is_zero_ether_addr(info->h_source))
 				memcpy(info->h_source, path->dev->dev_addr, ETH_ALEN);
 
@@ -153,7 +179,6 @@ static void nft_dev_path_info(const struct net_device_path_stack *stack,
 			info->xmit_type = FLOW_OFFLOAD_XMIT_DIRECT;
 			break;
 		default:
-			info->indev = NULL;
 			break;
 		}
 	}
@@ -184,22 +209,39 @@ static bool nft_flowtable_find_dev(const struct net_device *dev,
 	return found;
 }
 
-static void nft_dev_forward_path(struct nf_flow_route *route,
-				 const struct nf_conn *ct,
-				 enum ip_conntrack_dir dir,
-				 struct nft_flowtable *ft)
+static int nft_dev_forward_path(const struct nft_pktinfo *pkt,
+				struct nf_flow_route *route,
+				const struct nf_conn *ct,
+				enum ip_conntrack_dir dir,
+				struct nft_flowtable *ft)
 {
 	const struct dst_entry *dst = route->tuple[dir].dst;
 	struct net_device_path_stack stack;
 	struct nft_forward_info info = {};
+	struct ethhdr *eth;
+	enum ip_conntrack_dir skb_dir;
 	unsigned char ha[ETH_ALEN];
 	int i;
 
+	memset(ha, 0, sizeof(ha));
+
+	if (nft_flow_offload_is_bridging(pkt->skb) && skb_mac_header_was_set(pkt->skb)) {
+		eth = eth_hdr(pkt->skb);
+		skb_dir = CTINFO2DIR(skb_get_nfct(pkt->skb) & NFCT_INFOMASK);
+		if (skb_dir != dir) {
+			memcpy(ha, eth->h_source, ETH_ALEN);
+			memcpy(info.h_source, eth->h_dest, ETH_ALEN);
+		} else {
+			memcpy(ha, eth->h_dest, ETH_ALEN);
+			memcpy(info.h_source, eth->h_source, ETH_ALEN);
+		}
+	}
+
 	if (nft_dev_fill_forward_path(route, dst, ct, dir, ha, &stack) >= 0)
 		nft_dev_path_info(&stack, &info, ha, &ft->data);
 
 	if (!info.indev || !nft_flowtable_find_dev(info.indev, ft))
-		return;
+		return -ENOENT;
 
 	route->tuple[!dir].in.ifindex = info.indev->ifindex;
 	for (i = 0; i < info.num_encaps; i++) {
@@ -216,13 +258,15 @@ static void nft_dev_forward_path(struct nf_flow_route *route,
 		route->tuple[dir].out.hw_ifindex = info.hw_outdev->ifindex;
 		route->tuple[dir].xmit_type = info.xmit_type;
 	}
+
+	return 0;
 }
 
-static int nft_flow_route(const struct nft_pktinfo *pkt,
-			  const struct nf_conn *ct,
-			  struct nf_flow_route *route,
-			  enum ip_conntrack_dir dir,
-			  struct nft_flowtable *ft)
+static int nft_flow_route_routing(const struct nft_pktinfo *pkt,
+				  const struct nf_conn *ct,
+				  struct nf_flow_route *route,
+				  enum ip_conntrack_dir dir,
+				  struct nft_flowtable *ft)
 {
 	struct dst_entry *this_dst = skb_dst(pkt->skb);
 	struct dst_entry *other_dst = NULL;
@@ -264,11 +308,94 @@ static int nft_flow_route(const struct nft_pktinfo *pkt,
 
 	if (route->tuple[dir].xmit_type	== FLOW_OFFLOAD_XMIT_NEIGH &&
 	    route->tuple[!dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH) {
-		nft_dev_forward_path(route, ct, dir, ft);
-		nft_dev_forward_path(route, ct, !dir, ft);
+		if (nft_dev_forward_path(pkt, route, ct, dir, ft) ||
+		    nft_dev_forward_path(pkt, route, ct, !dir, ft))
+		    return -ENOENT;
+	}
+
+	return 0;
+}
+
+static int
+nft_flow_route_dir(const struct nft_pktinfo *pkt,
+		   const struct nf_conn *ct,
+		   struct nf_flow_route *route,
+		   enum ip_conntrack_dir dir,
+		   int ifindex)
+{
+	struct dst_entry *this_dst = skb_dst(pkt->skb);
+	struct dst_entry *other_dst = NULL;
+	struct flowi fl;
+
+	memset(&fl, 0, sizeof(fl));
+	switch (nft_pf(pkt)) {
+	case NFPROTO_IPV4:
+		fl.u.ip4.daddr = ct->tuplehash[!dir].tuple.src.u3.ip;
+		fl.u.ip4.flowi4_oif = ifindex;
+		fl.u.ip4.flowi4_tos = RT_TOS(ip_hdr(pkt->skb)->tos);
+		fl.u.ip4.flowi4_mark = pkt->skb->mark;
+		fl.u.ip4.flowi4_flags = FLOWI_FLAG_ANYSRC;
+		break;
+	case NFPROTO_IPV6:
+		fl.u.ip6.saddr = ct->tuplehash[!dir].tuple.dst.u3.in6;
+		fl.u.ip6.daddr = ct->tuplehash[!dir].tuple.src.u3.in6;
+		fl.u.ip6.flowi6_oif = ifindex;
+		fl.u.ip6.flowlabel = ip6_flowinfo(ipv6_hdr(pkt->skb));
+		fl.u.ip6.flowi6_mark = pkt->skb->mark;
+		fl.u.ip6.flowi6_flags = FLOWI_FLAG_ANYSRC;
+		break;
+	}
+
+	if (!dst_hold_safe(this_dst))
+		return -ENOENT;
+
+	nf_route(nft_net(pkt), &other_dst, &fl, false, nft_pf(pkt));
+	if (!other_dst) {
+		dst_release(this_dst);
+		return -ENOENT;
+	}
+
+	nft_default_forward_path(route, other_dst, dir);
+	dst_release(this_dst);
+
+	return 0;
+}
+
+static int
+nft_flow_route_bridging(const struct nft_pktinfo *pkt,
+			const struct nf_conn *ct,
+			struct nf_flow_route *route,
+			enum ip_conntrack_dir dir,
+			struct nft_flowtable *ft)
+{
+	int ret;
+
+	ret = nft_flow_route_dir(pkt, ct, route, dir,
+				 nft_out(pkt)->ifindex);
+	if (ret)
+		return ret;
+
+	ret = nft_flow_route_dir(pkt, ct, route, !dir,
+				 nft_in(pkt)->ifindex);
+	if (ret)
+		goto err_route_dir1;
+
+	if (route->tuple[dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH &&
+	    route->tuple[!dir].xmit_type == FLOW_OFFLOAD_XMIT_NEIGH) {
+		if (nft_dev_forward_path(pkt, route, ct, dir, ft) ||
+		    nft_dev_forward_path(pkt, route, ct, !dir, ft)) {
+			ret = -ENOENT;
+			goto err_route_dir2;
+		}
 	}
 
 	return 0;
+
+err_route_dir2:
+	dst_release(route->tuple[!dir].dst);
+err_route_dir1:
+	dst_release(route->tuple[dir].dst);
+	return ret;
 }
 
 static bool nft_flow_offload_skip(struct sk_buff *skb, int family)
@@ -356,8 +483,13 @@ static void nft_flow_offload_eval(const struct nft_expr *expr,
 		goto out;
 
 	dir = CTINFO2DIR(ctinfo);
-	if (nft_flow_route(pkt, ct, &route, dir, priv->flowtable) < 0)
-		goto err_flow_route;
+	if (nft_flow_offload_is_bridging(pkt->skb)) {
+		if (nft_flow_route_bridging(pkt, ct, &route, dir, priv->flowtable) < 0)
+			goto err_flow_route;
+	} else {
+		if (nft_flow_route_routing(pkt, ct, &route, dir, priv->flowtable) < 0)
+			goto err_flow_route;
+	}
 
 	flow = flow_offload_alloc(ct);
 	if (!flow)
-- 
2.45.2

