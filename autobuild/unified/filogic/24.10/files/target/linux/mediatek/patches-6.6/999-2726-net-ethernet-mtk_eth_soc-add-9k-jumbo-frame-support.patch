From 04e72db65121244fd08b421c122ecd3a4a7b1bdc Mon Sep 17 00:00:00 2001
From: Mason Chang <mason-cw.chang@mediatek.com>
Date: Mon, 9 Jun 2025 10:58:01 +0800
Subject: [PATCH] net: ethernet: mtk_eth_soc: add 9k jumbo frame support

---
 drivers/net/ethernet/mediatek/mtk_eth_soc.c | 23 +++++++++++++++------
 drivers/net/ethernet/mediatek/mtk_eth_soc.h |  6 +++++-
 2 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.c b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
index 8db4549..7e90bb2 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -649,7 +649,11 @@ static void mtk_set_mcr_max_rx(struct mtk_mac *mac, u32 val)
 			mtk_w32(mac->hw, mcr_new, MTK_MAC_MCR(mac->id));
 	} else if (mtk_is_netsys_v3_or_greater(mac->hw) && mac->id != MTK_GMAC1_ID) {
 		mcr_cur = mtk_r32(mac->hw, MTK_XMAC_RX_CFG2(mac->id));
-		mcr_new = FIELD_PREP(MTK_XMAC_MAX_RX_MASK, val);
+
+		if (val < MTK_MAX_RX_LENGTH_9K)
+			mcr_new = FIELD_PREP(MTK_XMAC_MAX_RX_MASK, val);
+		else
+			mcr_new = MTK_MAX_RX_LENGTH_9K;
 
 		if (mcr_new != mcr_cur)
 			mtk_w32(mac->hw, mcr_new, MTK_XMAC_RX_CFG2(mac->id));
@@ -1458,9 +1462,8 @@ static bool mtk_rx_get_desc(struct mtk_eth *eth, struct mtk_rx_dma_v2 *rxd,
 	return true;
 }
 
-static void *mtk_max_lro_buf_alloc(gfp_t gfp_mask)
+static void *mtk_max_buf_alloc(unsigned int size, gfp_t gfp_mask)
 {
-	unsigned int size = mtk_max_frag_size(MTK_MAX_LRO_RX_LENGTH);
 	unsigned long data;
 
 	data = __get_free_pages(gfp_mask | __GFP_COMP | __GFP_NOWARN,
@@ -2450,7 +2453,7 @@ static int mtk_poll_rx(struct napi_struct *napi, int budget,
 			if (ring->frag_size <= PAGE_SIZE)
 				new_data = napi_alloc_frag(ring->frag_size);
 			else
-				new_data = mtk_max_lro_buf_alloc(GFP_ATOMIC);
+				new_data = mtk_max_buf_alloc(ring->frag_size, GFP_ATOMIC);
 
 			if (unlikely(!new_data)) {
 				netdev->stats.rx_dropped++;
@@ -3021,7 +3024,7 @@ static int mtk_rx_alloc(struct mtk_eth *eth, int ring_no, int rx_flag)
 			if (ring->frag_size <= PAGE_SIZE)
 				data = netdev_alloc_frag(ring->frag_size);
 			else
-				data = mtk_max_lro_buf_alloc(GFP_KERNEL);
+				data = mtk_max_buf_alloc(ring->frag_size, GFP_KERNEL);
 
 			if (!data)
 				return -ENOMEM;
@@ -4173,6 +4176,15 @@ static int mtk_open(struct net_device *dev)
 	phylink_start(mac->phylink);
 	netif_tx_start_all_queues(dev);
 
+	if (MTK_HAS_CAPS(eth->soc->caps, MTK_NETSYS_RX_9K) &&
+	    MTK_MAX_RX_LENGTH >= MTK_MAX_RX_LENGTH_9K &&
+	    mtk_interface_mode_is_xgmii(mac->interface))
+		eth->netdev[mac->id]->max_mtu = MTK_MAX_RX_LENGTH_9K - MTK_RX_ETH_HLEN;
+	else if (MTK_MAX_RX_LENGTH >= MTK_MAX_RX_LENGTH_2K)
+		eth->netdev[mac->id]->max_mtu = MTK_MAX_RX_LENGTH_2K - MTK_RX_ETH_HLEN;
+	else
+		eth->netdev[mac->id]->max_mtu = MTK_MAX_RX_LENGTH - MTK_RX_ETH_HLEN;
+
 	if (mtk_is_netsys_v2_or_greater(eth))
 		return 0;
 
@@ -6076,7 +6088,6 @@ static int mtk_add_mac(struct mtk_eth *eth, struct device_node *np)
 
 	eth->netdev[id]->irq = eth->irq_fe[0];
 	eth->netdev[id]->dev.of_node = np;
-	eth->netdev[id]->max_mtu = MTK_MAX_RX_LENGTH - MTK_RX_ETH_HLEN;
 
 	if (MTK_HAS_CAPS(eth->soc->caps, MTK_QDMA)) {
 		mac->device_notifier.notifier_call = mtk_device_event;
diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.h b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
index 5f42a39..d795a17 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.h
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
@@ -31,6 +31,7 @@
 #define MTK_QDMA_PAGE_SIZE	2048
 #define MTK_MAX_RX_LENGTH	1536
 #define MTK_MAX_RX_LENGTH_2K	2048
+#define MTK_MAX_RX_LENGTH_9K	9216
 #define MTK_TX_DMA_BUF_LEN	0x3fff
 #define MTK_TX_DMA_BUF_LEN_V2	0xffff
 #define MTK_QDMA_RING_SIZE	2048
@@ -1245,6 +1246,7 @@ enum mkt_eth_capabilities {
 	MTK_SRAM_BIT,
 	MTK_XGMAC_BIT,
 	MTK_XGMAC_V2_BIT,
+	MTK_NETSYS_RX_9K_BIT,
 	MTK_36BIT_DMA_BIT,
 
 	/* MUX BITS*/
@@ -1297,6 +1299,7 @@ enum mkt_eth_capabilities {
 #define MTK_SRAM		BIT_ULL(MTK_SRAM_BIT)
 #define MTK_XGMAC		BIT_ULL(MTK_XGMAC_BIT)
 #define MTK_XGMAC_V2		BIT_ULL(MTK_XGMAC_V2_BIT)
+#define MTK_NETSYS_RX_9K	BIT_ULL(MTK_NETSYS_RX_9K_BIT)
 #define MTK_36BIT_DMA	BIT_ULL(MTK_36BIT_DMA_BIT)
 
 #define MTK_ETH_MUX_GDM1_TO_GMAC1_ESW		\
@@ -1419,7 +1422,8 @@ enum mkt_eth_capabilities {
 		      MTK_MUX_GMAC123_TO_GEPHY_SGMII | \
 		      MTK_MUX_GMAC123_TO_USXGMII | MTK_MUX_GMAC2_TO_2P5GPHY | \
 		      MTK_QDMA | MTK_SRAM | MTK_PDMA_INT | MTK_RSS | \
-		      MTK_HWLRO | MTK_RSTCTRL_PPE1 | MTK_RSTCTRL_PPE2)
+		      MTK_HWLRO | MTK_RSTCTRL_PPE1 | MTK_RSTCTRL_PPE2 | \
+		      MTK_NETSYS_RX_9K)
 
 struct mtk_tx_dma_desc_info {
 	dma_addr_t	addr;
-- 
2.45.2

