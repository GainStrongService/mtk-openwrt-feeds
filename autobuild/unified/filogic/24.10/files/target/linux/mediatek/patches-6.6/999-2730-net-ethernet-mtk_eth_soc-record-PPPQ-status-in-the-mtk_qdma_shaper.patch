From 5af813d80360d316883b1277423f490f7ea92b86 Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Tue, 10 Jun 2025 21:00:58 +0800
Subject: [PATCH] net: ethernet: mtk_eth_soc: record PPPQ status in the mtk_qdma_shaper
 structure

Signed-off-by: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
---
 drivers/net/ethernet/mediatek/mtk_eth_soc.c | 39 +++++++++++++++++++++
 drivers/net/ethernet/mediatek/mtk_eth_soc.h | 18 ++++++++
 2 files changed, 57 insertions(+)

diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.c b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
index d504a5c..de45ec7 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -858,6 +858,40 @@ static void mtk_mac_link_down(struct phylink_config *config, unsigned int mode,
 	}
 }
 
+bool mtk_shaper_is_available(struct mtk_eth *eth, int idx)
+{
+	int active = 0;
+	int i;
+
+	if (!mtk_is_netsys_v3_or_greater(eth) || idx > MTK_QDMA_NUM_QUEUES)
+		goto out;
+
+	for (i = 0; i < MTK_QDMA_NUM_QUEUES; i++) {
+		if (!atomic_read(&eth->qdma_shaper.refcnt[i]))
+			continue;
+
+		active += eth->qdma_shaper.speed[i];
+	}
+
+	if (atomic_read(&eth->qdma_shaper.refcnt[idx]) ||
+	    active + eth->qdma_shaper.speed[idx] <= eth->qdma_shaper.threshold)
+		return true;
+
+out:
+	return false;
+}
+
+void mtk_shaper_update_refcnt(struct mtk_eth *eth, int idx, bool add)
+{
+	if (!mtk_is_netsys_v3_or_greater(eth))
+		return;
+
+	if (add)
+		atomic_inc(&eth->qdma_shaper.refcnt[idx]);
+	else if (atomic_read(&eth->qdma_shaper.refcnt[idx]))
+		atomic_dec(&eth->qdma_shaper.refcnt[idx]);
+}
+
 static void mtk_set_queue_speed(struct mtk_eth *eth, unsigned int idx,
 				int speed)
 {
@@ -968,6 +1002,10 @@ static void mtk_set_queue_speed(struct mtk_eth *eth, unsigned int idx,
 		}
 	}
 
+	if (speed <= SPEED_2500)
+		eth->qdma_shaper.speed[idx] = speed;
+
+out:
 	ofs = MTK_QTX_OFFSET * idx;
 	mtk_w32(eth, val, soc->reg_map->qdma.qtx_sch + ofs);
 }
@@ -6352,6 +6390,7 @@ static int mtk_probe(struct platform_device *pdev)
 	spin_lock_init(&eth->tx_irq_lock);
 	spin_lock_init(&eth->rx_irq_lock);
 	spin_lock_init(&eth->dim_lock);
+	spin_lock_init(&eth->qdma_shaper.lock);
 
 	eth->rx_dim.mode = DIM_CQ_PERIOD_MODE_START_FROM_EQE;
 	INIT_WORK(&eth->rx_dim.work, mtk_dim_rx);
diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.h b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
index 81979d2..b247e73 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.h
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
@@ -27,6 +27,7 @@
 #define MTK_DSA_PORT_MASK	GENMASK(2, 0)
 
 #define MTK_QDMA_NUM_QUEUES	16
+#define MTK_QDMA_QUEUE_MASK	((1ULL << MTK_QDMA_NUM_QUEUES) - 1)
 #define MTK_QDMA_PAGE_SIZE	2048
 #define MTK_MAX_RX_LENGTH	1536
 #define MTK_MAX_RX_LENGTH_2K	2048
@@ -1247,6 +1247,20 @@ struct mtk_qdma_params {
 	u32	tx_sch[2];
 };
 
+/* struct mtk_qdma_shaper -	This is the structure holding parameters
+				for the PPPQ
+ * @refcnt:			The elements are used to record the
+				reference count for the Tx Queue
+ * @speed:			The elements are used to record the
+				maximum rate limit for the Tx Queue
+ */
+struct mtk_qdma_shaper {
+	spinlock_t	lock;
+	atomic_t	refcnt[MTK_QDMA_NUM_QUEUES];
+	u32		speed[MTK_QDMA_NUM_QUEUES];
+	u32		threshold;
+};
+
 enum mkt_eth_capabilities {
 	MTK_RGMII_BIT = 0,
 	MTK_TRGMII_BIT,
@@ -1657,6 +1671,7 @@ struct mtk_eth {
 	struct mtk_napi			rx_napi[MTK_RX_NAPI_NUM];
 	struct mtk_rss_params		rss_params;
 	struct mtk_qdma_params		qdma_params;
+	struct mtk_qdma_shaper		qdma_shaper;
 	struct clk			*clks[MTK_CLK_MAX];
 
 	struct mii_bus			*mii_bus;
@@ -1990,5 +1990,7 @@ int mtk_flow_offload_cmd(struct mtk_eth *eth, struct flow_cls_offload *cls,
 void mtk_flow_offload_cleanup(struct mtk_eth *eth, struct list_head *list);
 void mtk_eth_set_dma_device(struct mtk_eth *eth, struct device *dma_dev);
 
+bool mtk_shaper_is_available(struct mtk_eth *eth, int idx);
+void mtk_shaper_update_refcnt(struct mtk_eth *eth, int idx, bool add);
 
 #endif /* MTK_ETH_H */
-- 
2.45.2

