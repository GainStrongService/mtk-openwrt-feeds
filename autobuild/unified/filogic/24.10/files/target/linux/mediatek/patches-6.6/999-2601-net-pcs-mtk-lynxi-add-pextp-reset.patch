From cf86c2b1f40c44ad34bde0c8ca25bca12f4f992e Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Tue, 29 Oct 2024 14:23:10 +0800
Subject: [PATCH] net: pcs: mtk-lynxi: add pextp reset

---
 drivers/net/pcs/pcs-mtk-lynxi.c | 35 +++++++++++++++++++++++++++++++++
 1 file changed, 35 insertions(+)

diff --git a/drivers/net/pcs/pcs-mtk-lynxi.c b/drivers/net/pcs/pcs-mtk-lynxi.c
index 1df776c..c4cf351 100644
--- a/drivers/net/pcs/pcs-mtk-lynxi.c
+++ b/drivers/net/pcs/pcs-mtk-lynxi.c
@@ -15,6 +15,7 @@
 #include <linux/of.h>
 #include <linux/of_platform.h>
 #include <linux/pcs/pcs-mtk-lynxi.h>
+#include <linux/phy/phy.h>
 #include <linux/phylink.h>
 #include <linux/platform_device.h>
 #include <linux/regmap.h>
@@ -95,16 +96,24 @@ struct mtk_pcs_lynxi {
 	phy_interface_t		interface;
 	struct			phylink_pcs pcs;
 	u32			flags;
+	unsigned int		neg_mode;
+	__ETHTOOL_DECLARE_LINK_MODE_MASK(advertising);
 	struct reset_control	*rstc;
 	struct clk		*sgmii_sel;
 	struct clk		*sgmii_rx;
 	struct clk		*sgmii_tx;
+	struct phy		*xfi_tphy;
 	struct list_head	node;
 };
 
 static LIST_HEAD(mtk_pcs_lynxi_instances);
 static DEFINE_MUTEX(instance_mutex);
 
+static int mtk_pcs_lynxi_config(struct phylink_pcs *pcs, unsigned int neg_mode,
+				phy_interface_t interface,
+				const unsigned long *advertising,
+				bool permit_pause_to_mac);
+
 static struct mtk_pcs_lynxi *pcs_to_mtk_pcs_lynxi(struct phylink_pcs *pcs)
 {
 	return container_of(pcs, struct mtk_pcs_lynxi, pcs);
@@ -131,6 +140,13 @@ static void mtk_pcs_lynxi_get_state(struct phylink_pcs *pcs,
 
 	regmap_read(mpcs->regmap, SGMSYS_PCS_ADVERTISE, &adv);
 	phylink_mii_c22_pcs_decode_state(state, bmsr, FIELD_GET(SGMII_LPA, adv));
+
+	/* Continuously repeat re-configuration sequence until link comes up */
+	if (!state->link) {
+		mtk_pcs_lynxi_config(pcs, mpcs->neg_mode,
+				     state->interface, mpcs->advertising, false);
+		phy_set_mode_ext(mpcs->xfi_tphy, PHY_MODE_ETHERNET, state->interface);
+	}
 }
 
 static void mtk_sgmii_reset(struct mtk_pcs_lynxi *mpcs)
@@ -188,6 +204,9 @@ static int mtk_pcs_lynxi_config(struct phylink_pcs *pcs, unsigned int neg_mode,
 				SGMII_PHYA_PWD);
 
 		/* Reset SGMII PCS state */
+		if (mpcs->xfi_tphy)
+			phy_reset(mpcs->xfi_tphy);
+
 		mtk_sgmii_reset(mpcs);
 		regmap_set_bits(mpcs->regmap, SGMSYS_RESERVED_0,
 				SGMII_SW_RESET);
@@ -211,6 +230,8 @@ static int mtk_pcs_lynxi_config(struct phylink_pcs *pcs, unsigned int neg_mode,
 			     SGMII_LINK_TIMER_VAL(link_timer));
 
 		mpcs->interface = interface;
+		mpcs->neg_mode = neg_mode;
+		linkmode_copy(mpcs->advertising, advertising);
 		mode_changed = true;
 	}
 
@@ -239,6 +260,10 @@ static int mtk_pcs_lynxi_config(struct phylink_pcs *pcs, unsigned int neg_mode,
 	usleep_range(50, 100);
 	regmap_write(mpcs->regmap, SGMSYS_QPHY_PWR_STATE_CTRL, 0);
 
+	/* Setup PMA/PMD */
+	if (mpcs->xfi_tphy)
+		phy_set_mode_ext(mpcs->xfi_tphy, PHY_MODE_ETHERNET, interface);
+
 	return changed || mode_changed;
 }
 
@@ -284,6 +309,9 @@ static int mtk_pcs_lynxi_enable(struct phylink_pcs *pcs)
 		clk_prepare_enable(mpcs->sgmii_tx);
 	}
 
+	if (mpcs->xfi_tphy)
+		phy_power_on(mpcs->xfi_tphy);
+
 	return 0;
 }
 
@@ -299,6 +327,9 @@ static void mtk_pcs_lynxi_disable(struct phylink_pcs *pcs)
 	}
 
 	mpcs->interface = PHY_INTERFACE_MODE_NA;
+
+	if (mpcs->xfi_tphy)
+		phy_power_off(mpcs->xfi_tphy);
 }
 
 static const struct phylink_pcs_ops mtk_pcs_lynxi_ops = {
@@ -414,6 +445,10 @@ static int mtk_pcs_lynxi_probe(struct platform_device *pdev)
 	if (IS_ERR(mpcs->sgmii_tx))
 		return PTR_ERR(mpcs->sgmii_tx);
 
+	mpcs->xfi_tphy = devm_of_phy_get(mpcs->dev, dev->of_node, NULL);
+	if (IS_ERR(mpcs->xfi_tphy))
+		mpcs->xfi_tphy = NULL;
+
 	pcs = mtk_pcs_lynxi_init(dev, regmap, (uintptr_t)of_device_get_match_data(dev),
 				 flags, mpcs);
 	if (IS_ERR(pcs))
-- 
2.45.2

