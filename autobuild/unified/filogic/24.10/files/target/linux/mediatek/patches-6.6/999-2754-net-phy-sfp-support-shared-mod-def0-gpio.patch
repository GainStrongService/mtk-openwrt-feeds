From 492b196e3c0b4e87513b82966221c4365d184d48 Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Thu, 28 Nov 2024 13:19:38 +0800
Subject: [PATCH] net: phy: sfp: support shared mod-def0 gpio

The SFP/PHY dynamic switching through the passive mux will use the
mod-def0 GPIO to detect whether the SFP module has been inserted.
We need to change this GPIO to shared to avoid failures in GPIO
requests within mtk_add_mux().

Signed-off-by: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
---
 drivers/net/phy/sfp.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/net/phy/sfp.c b/drivers/net/phy/sfp.c
index 305689e..7227213 100644
--- a/drivers/net/phy/sfp.c
+++ b/drivers/net/phy/sfp.c
@@ -156,7 +156,7 @@ static const char *gpio_names[] = {
 };
 
 static const enum gpiod_flags gpio_flags[] = {
-	GPIOD_IN,
+	GPIOD_IN | GPIOD_FLAGS_BIT_NONEXCLUSIVE,
 	GPIOD_IN,
 	GPIOD_IN,
 	GPIOD_ASIS,
@@ -546,7 +546,7 @@ static unsigned int sfp_gpio_get_state(struct sfp *sfp)
 	unsigned int i, state, v;
 
 	for (i = state = 0; i < GPIO_MAX; i++) {
-		if (gpio_flags[i] != GPIOD_IN || !sfp->gpio[i])
+		if ((gpio_flags[i] & GPIOD_IN) != GPIOD_IN || !sfp->gpio[i])
 			continue;
 
 		v = gpiod_get_value_cansleep(sfp->gpio[i]);
@@ -3042,7 +3042,7 @@ static int sfp_probe(struct platform_device *pdev)
 	}
 
 	for (i = 0; i < GPIO_MAX; i++) {
-		if (gpio_flags[i] != GPIOD_IN || !sfp->gpio[i])
+		if ((gpio_flags[i] & GPIOD_IN) != GPIOD_IN || !sfp->gpio[i])
 			continue;
 
 		sfp->gpio_irq[i] = gpiod_to_irq(sfp->gpio[i]);
-- 
2.45.2

