--- a/tools/image-host.c
+++ b/tools/image-host.c
@@ -641,17 +641,22 @@ int fit_image_cipher_data(const char *ke
  * @comment:	Comment to add to signature nodes
  * @require_keys: Mark all keys as 'required'
  * @engine_id:	Engine to use for signing
+ * @external_data:>----Store data outside the FIT
  * @return: 0 on success, <0 on failure
  */
 int fit_image_add_verification_data(const char *keydir, const char *keyfile,
 		void *keydest, void *fit, int image_noffset,
 		const char *comment, int require_keys, const char *engine_id,
-		const char *cmdname, const char* algo_name)
+		const char *cmdname, const char* algo_name, bool external_data)
 {
 	const char *image_name;
 	const void *data;
+	void *buf = NULL;
 	size_t size;
 	int noffset;
+	int ret = 0;
+	int len;
+	long pad_align_size;
 
 	/* Get image data and data length */
 	if (fit_image_get_data(fit, image_noffset, &data, &size)) {
@@ -659,6 +664,26 @@ int fit_image_add_verification_data(cons
 		return -1;
 	}
 
+	pad_align_size = fdt_getprop_u32(fit, image_noffset,
+					 "data-padding-alignment");
+	if ((long)pad_align_size >= 0) {
+		if (external_data) {
+			debug("Data padding alignment %x\n", pad_align_size);
+			len = ALIGN(size, pad_align_size);
+
+			buf = calloc(1, len);
+			if (!buf)
+				return -ENOMEM;
+
+			memcpy(buf, data, size);
+
+			data = buf;
+			size = len;
+		} else {
+			fdt_delprop(fit, image_noffset, "data-padding-alignment");
+		}
+	}
+
 	image_name = fit_get_name(fit, image_noffset, NULL);
 
 	/* Process all hash subnodes of the component image node */
@@ -666,7 +691,6 @@ int fit_image_add_verification_data(cons
 	     noffset >= 0;
 	     noffset = fdt_next_subnode(fit, noffset)) {
 		const char *node_name;
-		int ret = 0;
 
 		/*
 		 * Check subnode name, must be equal to "hash" or "signature".
@@ -687,10 +711,12 @@ int fit_image_add_verification_data(cons
 				algo_name);
 		}
 		if (ret < 0)
-			return ret;
+			goto out;
 	}
 
-	return 0;
+out:
+	free(buf);
+	return ret;
 }
 
 int fit_image_recalc_hash_data(void *fit, int image_noffset, const void *data,
@@ -987,6 +1013,7 @@ static int fit_config_get_regions(const
 		FIT_DATA_SIZE_PROP,
 		FIT_DATA_POSITION_PROP,
 		FIT_DATA_OFFSET_PROP,
+		"data-padding-alignment"
 	};
 	struct strlist node_inc;
 	struct image_region *region;
@@ -1338,7 +1365,7 @@ int fit_add_verification_data(const char
 			      void *keydest, void *fit, const char *comment,
 			      int require_keys, const char *engine_id,
 			      const char *cmdname, const char *algo_name,
-			      struct image_summary *summary)
+			      struct image_summary *summary, bool external_data)
 {
 	int images_noffset, confs_noffset;
 	int noffset;
@@ -1362,7 +1389,7 @@ int fit_add_verification_data(const char
 		 */
 		ret = fit_image_add_verification_data(keydir, keyfile, keydest,
 				fit, noffset, comment, require_keys, engine_id,
-				cmdname, algo_name);
+				cmdname, algo_name, external_data);
 		if (ret) {
 			fprintf(stderr, "Can't add verification data for node '%s' (%s)\n",
 				fdt_get_name(fit, noffset, NULL),
--- a/include/image.h
+++ b/include/image.h
@@ -1310,6 +1310,7 @@ struct image_summary {
  * @cmdname:	Command name used when reporting errors
  * @algo_name:	Algorithm name, or NULL if to be read from FIT
  * @summary:	Returns information about what data was written
+ * @external_data:>----Store data outside the FIT
  *
  * Adds hash values for all component images in the FIT blob.
  * Hashes are calculated for all component images which have hash subnodes
@@ -1325,7 +1326,7 @@ int fit_add_verification_data(const char
 			      void *keydest, void *fit, const char *comment,
 			      int require_keys, const char *engine_id,
 			      const char *cmdname, const char *algo_name,
-			      struct image_summary *summary);
+			      struct image_summary *summary, bool external_data);
 
 int fit_image_recalc_hash_data(void *fit, int image_noffset, const void *data,
 			       size_t size);
--- a/tools/fit_image.c
+++ b/tools/fit_image.c
@@ -80,7 +80,8 @@ static int fit_add_file_data(struct imag
 						params->engine_id,
 						params->cmdname,
 						params->algo_name,
-						&params->summary);
+						&params->summary,
+						params->external_data);
 	}
 
 	if (dest_blob) {
