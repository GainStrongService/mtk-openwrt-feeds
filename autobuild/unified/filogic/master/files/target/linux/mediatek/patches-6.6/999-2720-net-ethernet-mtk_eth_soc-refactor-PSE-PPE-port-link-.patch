From 2d06cdca30439b433c8287a9e119f146383e6e54 Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Tue, 29 Apr 2025 20:16:45 +0800
Subject: [PATCH] net: ethernet: mtk_eth_soc: refactor PSE PPE port link down
 flow for SER

The PSE PPE port will be re-enabled automatically after NETSYS SER,
so we do not need to enable it manually.

Signed-off-by: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
---
 drivers/net/ethernet/mediatek/mtk_eth_soc.c | 27 +++------------------
 drivers/net/ethernet/mediatek/mtk_eth_soc.h |  5 +++-
 2 files changed, 8 insertions(+), 24 deletions(-)

diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.c b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
index 0f4fbf2..e4d0d97 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -5152,15 +5152,10 @@ static void mtk_prepare_for_reset(struct mtk_eth *eth)
 	int i;
 
 	/* set FE PPE ports link down */
-	for (i = MTK_GMAC1_ID;
-	     i <= (mtk_is_netsys_v3_or_greater(eth) ? MTK_GMAC3_ID : MTK_GMAC2_ID);
-	     i += 2) {
-		val = mtk_r32(eth, MTK_FE_GLO_CFG(i)) | MTK_FE_LINK_DOWN_P(PSE_PPE0_PORT);
-		if (MTK_HAS_CAPS(eth->soc->caps, MTK_RSTCTRL_PPE1))
-			val |= MTK_FE_LINK_DOWN_P(PSE_PPE1_PORT);
-		if (MTK_HAS_CAPS(eth->soc->caps, MTK_RSTCTRL_PPE2))
-			val |= MTK_FE_LINK_DOWN_P(PSE_PPE2_PORT);
-		mtk_w32(eth, val, MTK_FE_GLO_CFG(i));
+	for (i = 0; i < ARRAY_SIZE(eth->ppe); i++) {
+		val = mtk_r32(eth, MTK_FE_GLO_CFG(PSE_PPE_PORT(i)));
+		val |= MTK_FE_LINK_DOWN_P(PSE_PPE_PORT(i));
+		mtk_w32(eth, val, MTK_FE_GLO_CFG(PSE_PPE_PORT(i)));
 	}
 
 	/* adjust PPE configurations to prepare for reset */
@@ -5181,7 +5176,6 @@ static void mtk_pending_work(struct work_struct *work)
 {
 	struct mtk_eth *eth = container_of(work, struct mtk_eth, pending_work);
 	unsigned long restart = 0;
-	u32 val;
 	int i;
 
 	rtnl_lock();
@@ -5224,19 +5218,6 @@ static void mtk_pending_work(struct work_struct *work)
 		}
 	}
 
-	/* set FE PPE ports link up */
-	for (i = MTK_GMAC1_ID;
-	     i <= (mtk_is_netsys_v3_or_greater(eth) ? MTK_GMAC3_ID : MTK_GMAC2_ID);
-	     i += 2) {
-		val = mtk_r32(eth, MTK_FE_GLO_CFG(i)) & ~MTK_FE_LINK_DOWN_P(PSE_PPE0_PORT);
-		if (MTK_HAS_CAPS(eth->soc->caps, MTK_RSTCTRL_PPE1))
-			val &= ~MTK_FE_LINK_DOWN_P(PSE_PPE1_PORT);
-		if (MTK_HAS_CAPS(eth->soc->caps, MTK_RSTCTRL_PPE2))
-			val &= ~MTK_FE_LINK_DOWN_P(PSE_PPE2_PORT);
-
-		mtk_w32(eth, val, MTK_FE_GLO_CFG(i));
-	}
-
 	clear_bit(MTK_RESETTING, &eth->state);
 
 	mtk_wed_fe_reset_complete();
diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.h b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
index fbfc4c0..b6a7850 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.h
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
@@ -84,7 +84,7 @@
 #define MTK_RSS_MAX_INDIRECTION_TABLE	128
 
 /* Frame Engine Global Configuration */
-#define MTK_FE_GLO_CFG(x)	(((x) == MTK_GMAC3_ID) ? 0x24 : 0x00)
+#define MTK_FE_GLO_CFG(x)	(((x) > 8) ? 0x24 : 0x00)
 #define MTK_FE_LINK_DOWN_P(x)	BIT(((x) + 8) % 16)
 
 /* Frame Engine Global Reset Register */
@@ -1089,6 +1089,9 @@ enum mtk_pse_port {
 #define PSE_GDM_PORT(x)		(((x) == 0) ? PSE_GDM1_PORT : \
 				 ((x) == 1) ? PSE_GDM2_PORT : PSE_GDM3_PORT)
 
+#define PSE_PPE_PORT(x)		(((x) == 0) ? PSE_PPE0_PORT : \
+				 ((x) == 1) ? PSE_PPE1_PORT : PSE_PPE2_PORT)
+
 #define PSE_WDMA_PORT(x)	(((x) == 0) ? PSE_WDMA0_PORT : \
 				 ((x) == 1) ? PSE_WDMA1_PORT : PSE_WDMA2_PORT)
 
-- 
2.45.2

