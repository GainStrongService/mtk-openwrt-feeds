From c23ea6df28d8d2caf16637217b4a4cbf613c0d13 Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Thu, 10 Apr 2025 23:10:21 +0800
Subject: [PATCH] net: ethernet: mtk_eth_soc: refactor SER monitor

---
 drivers/net/ethernet/mediatek/mtk_eth_soc.c | 221 ++++++++++++++++----
 drivers/net/ethernet/mediatek/mtk_eth_soc.h |  29 ++-
 2 files changed, 211 insertions(+), 39 deletions(-)

diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.c b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
index 3bc9b2d..397a6e6 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -4363,80 +4363,231 @@ static void mtk_hw_warm_reset(struct mtk_eth *eth)
 			val, rst_mask);
 }
 
+static inline u16 mtk_get_iq_sta(struct mtk_eth *eth, int port)
+{
+	const struct mtk_reg_map *reg_map = eth->soc->reg_map;
+	u32 offset, shift, mask;
+
+	if (mtk_is_netsys_v2_or_greater(eth)) {
+		offset = ((port >> 1) << 2);
+		shift = (16 * ((port) & 0x1));
+		mask = 0x0FFF;
+	} else {
+		offset = ((port >> 2) << 2);
+		shift = (8 * ((port) & 0x3));
+		mask = 0xFF;
+	}
+
+	return ((mtk_r32(eth, reg_map->pse_iq_sta + offset) >> shift) & mask);
+}
+
+static inline u16 mtk_get_oq_sta(struct mtk_eth *eth, int port)
+{
+	const struct mtk_reg_map *reg_map = eth->soc->reg_map;
+	u32 offset, shift, mask;
+
+	if (mtk_is_netsys_v2_or_greater(eth)) {
+		offset = ((port >> 1) << 2);
+		shift = (16 * ((port) & 0x1));
+		mask = 0x0FFF;
+	} else {
+		offset = ((port >> 2) << 2);
+		shift = (8 * ((port) & 0x3));
+		mask = 0xFF;
+	}
+
+	return ((mtk_r32(eth, reg_map->pse_oq_sta + offset) >> shift) & mask);
+}
+
 static bool mtk_hw_check_dma_hang(struct mtk_eth *eth)
 {
 	const struct mtk_reg_map *reg_map = eth->soc->reg_map;
-	bool gmac1_tx, gmac2_tx, gdm1_tx, gdm2_tx;
-	bool oq_hang, cdm1_busy, adma_busy;
-	bool wtx_busy, cdm_full, oq_free;
-	u32 wdidx, val, gdm1_fc, gdm2_fc;
-	bool qfsm_hang, qfwd_hang;
+	struct mtk_hw_stats *hw_stats;
+	bool gmac_tx, gmac_rx;
+	bool iq_hang, oq_hang, adma_hang = true;
+	bool wtx_busy, cdm_busy, oq_free;
+	u32 adidx, wdidx, val;
+	u32 cdma_rxfsm, gdm_txfsm, gdm_rxfsm;
+	u32 txgp_cnt, rxgp_cnt, rxfc_cnt;
+	bool qfsm_hang, qfwd_hang, qpse_fc;
 	bool ret = false;
+	int i;
 
 	if (MTK_HAS_CAPS(eth->soc->caps, MTK_SOC_MT7628))
 		return false;
 
 	/* WDMA sanity checks */
-	wdidx = mtk_r32(eth, reg_map->wdma_base[0] + 0xc);
+	for (i = 0; i < 3; i++) {
+		if (!mtk_r32(eth, reg_map->wdma_base[i] + 0xc))
+			continue;
 
-	val = mtk_r32(eth, reg_map->wdma_base[0] + 0x204);
-	wtx_busy = FIELD_GET(MTK_TX_DMA_BUSY, val);
+		wdidx = mtk_r32(eth, reg_map->wdma_base[i] + 0xc);
 
-	val = mtk_r32(eth, reg_map->wdma_base[0] + 0x230);
-	cdm_full = !FIELD_GET(MTK_CDM_TXFIFO_RDY, val);
+		val = mtk_r32(eth, reg_map->wdma_base[i] + 0x204);
+		wtx_busy = FIELD_GET(MTK_TX_DMA_BUSY, val);
 
-	oq_free  = (!(mtk_r32(eth, reg_map->pse_oq_sta) & GENMASK(24, 16)) &&
-		    !(mtk_r32(eth, reg_map->pse_oq_sta + 0x4) & GENMASK(8, 0)) &&
-		    !(mtk_r32(eth, reg_map->pse_oq_sta + 0x10) & GENMASK(24, 16)));
+		val = mtk_r32(eth, MTK_FE_CDMW_FSM(i));
+		cdm_busy = !!FIELD_GET(GENMASK(12, 0), val);
 
-	if (wdidx == eth->reset.wdidx && wtx_busy && cdm_full && oq_free) {
-		if (++eth->reset.wdma_hang_count > 2) {
-			eth->reset.wdma_hang_count = 0;
-			ret = true;
+		oq_free  = (!(mtk_get_oq_sta(eth, PSE_GDM1_PORT)) &&
+			    !(mtk_get_oq_sta(eth, PSE_GDM2_PORT)) &&
+			    !(mtk_get_oq_sta(eth, PSE_GDM3_PORT)) &&
+			    !(mtk_get_oq_sta(eth, PSE_WDMA0_PORT)) &&
+			    !(mtk_get_oq_sta(eth, PSE_WDMA1_PORT)) &&
+			    !(mtk_get_oq_sta(eth, PSE_WDMA2_PORT)));
+
+		if (wdidx == eth->reset.wdidx[i] &&
+		    wtx_busy && cdm_busy && oq_free) {
+			if (++eth->reset.wdma_hang_count[i] > 2) {
+				dev_warn(eth->dev, "detect WDMA%d Tx hang!\n", i);
+				eth->reset.wdma_hang_count[i] = 0;
+				ret = true;
+			}
+			eth->reset.wdidx[i] = wdidx;
+			goto out;
 		}
-		goto out;
+		eth->reset.wdma_hang_count[i] = 0;
+		eth->reset.wdidx[i] = wdidx;
 	}
 
 	/* QDMA sanity checks */
-	qfsm_hang = !!mtk_r32(eth, reg_map->qdma.qtx_cfg + 0x234);
+	val = mtk_r32(eth, reg_map->qdma.qtx_cfg + 0x234);
+	qfsm_hang = !!FIELD_GET(GENMASK(12,8), val);
+
 	qfwd_hang = !mtk_r32(eth, reg_map->qdma.qtx_cfg + 0x308);
 
-	gdm1_tx = FIELD_GET(GENMASK(31, 16), mtk_r32(eth, MTK_FE_GDM1_FSM)) > 0;
-	gdm2_tx = FIELD_GET(GENMASK(31, 16), mtk_r32(eth, MTK_FE_GDM2_FSM)) > 0;
-	gmac1_tx = FIELD_GET(GENMASK(31, 24), mtk_r32(eth, MTK_MAC_FSM(0))) != 1;
-	gmac2_tx = FIELD_GET(GENMASK(31, 24), mtk_r32(eth, MTK_MAC_FSM(1))) != 1;
-	gdm1_fc = mtk_r32(eth, reg_map->gdm1_cnt + 0x24);
-	gdm2_fc = mtk_r32(eth, reg_map->gdm1_cnt + 0x64);
+	val = mtk_r32(eth, MTK_FE_INT_STATUS);
+	qpse_fc = !!(FIELD_GET(BIT(PSE_QDMA_TX_PORT), val));
+	if (qpse_fc)
+		mtk_w32(eth, BIT(PSE_QDMA_TX_PORT), MTK_FE_INT_STATUS);
 
-	if (qfsm_hang && qfwd_hang &&
-	    ((gdm1_tx && gmac1_tx && gdm1_fc < 1) ||
-	     (gdm2_tx && gmac2_tx && gdm2_fc < 1))) {
+	if (!qpse_fc && qfsm_hang && qfwd_hang) {
 		if (++eth->reset.qdma_hang_count > 2) {
+			dev_warn(eth->dev, "detect QDMA Tx hang !\n");
 			eth->reset.qdma_hang_count = 0;
 			ret = true;
 		}
 		goto out;
 	}
 
+	mtk_stats_update(eth);
+
+	/* GDM sanity checks */
+	for (i = 0; i < 3; i++) {
+		if (!eth->netdev[i] || !netif_running(eth->netdev[i]))
+			continue;
+
+		hw_stats = eth->mac[i]->hw_stats;
+
+		txgp_cnt = hw_stats->tx_packets;
+		rxgp_cnt = hw_stats->rx_packets;
+		rxfc_cnt = hw_stats->rx_flow_control_packets;
+
+		iq_hang = !!(mtk_get_iq_sta(eth, PSE_GDM_PORT(i)));
+		oq_hang = !!(mtk_get_oq_sta(eth, PSE_GDM_PORT(i)));
+
+		if (mtk_interface_mode_is_xgmii(eth->mac[i]->interface))
+			goto skip_gmac;
+
+		/* GMAC Tx */
+		gmac_tx = FIELD_GET(GENMASK(31, 24), mtk_r32(eth, MTK_MAC_FSM(i))) != 1;
+		if (oq_hang && gmac_tx && (txgp_cnt == eth->reset.gdm_txgp_cnt[i])) {
+			if (++eth->reset.mac_tx_hang_count[i] > 2) {
+				dev_warn(eth->dev, "detect GMAC%d Tx hang!\n", i + 1);
+				eth->reset.mac_tx_hang_count[i] = 0;
+				ret = true;
+			}
+			eth->reset.gdm_txgp_cnt[i] = txgp_cnt;
+			goto out;
+		}
+		eth->reset.mac_tx_hang_count[i] = 0;
+		eth->reset.gdm_txgp_cnt[i] = txgp_cnt;
+
+		/* GMAC Rx */
+		gmac_rx = FIELD_GET(GENMASK(23, 16), mtk_r32(eth, MTK_MAC_FSM(i))) != 1;
+		if (gmac_rx && (rxgp_cnt == eth->reset.gdm_rxgp_cnt[i])) {
+			if (++eth->reset.mac_rx_hang_count[i] > 2) {
+				dev_warn(eth->dev, "detect GMAC%d Rx hang!\n", i + 1);
+				eth->reset.mac_rx_hang_count[i] = 0;
+				ret = true;
+			}
+			eth->reset.gdm_rxgp_cnt[i] = rxgp_cnt;
+			goto out;
+		}
+		eth->reset.mac_rx_hang_count[i] = 0;
+		eth->reset.gdm_rxgp_cnt[i] = rxgp_cnt;
+
+skip_gmac:
+		/* GDM Tx */
+		gdm_txfsm = FIELD_GET(GENMASK(28, 16), mtk_r32(eth, MTK_FE_GDM_FSM(i)));
+		if (oq_hang && (txgp_cnt == eth->reset.gdm_txgp_cnt[i]) &&
+		    (rxfc_cnt == eth->reset.gdm_rxfc_cnt[i]) &&
+		    ((gdm_txfsm == eth->reset.gdm_txfsm[i]) && (gdm_txfsm == 0x1033))) {
+			if (++eth->reset.gdm_tx_hang_count[i] > 2) {
+				dev_warn(eth->dev, "detect GDM%d Tx hang!\n", i + 1);
+				eth->reset.gdm_tx_hang_count[i] = 0;
+				ret = true;
+			}
+			eth->reset.gdm_txfsm[i] = gdm_txfsm;
+			eth->reset.gdm_txgp_cnt[i] = txgp_cnt;
+			eth->reset.gdm_rxfc_cnt[i] = rxfc_cnt;
+			goto out;
+		}
+		eth->reset.gdm_tx_hang_count[i] = 0;
+		eth->reset.gdm_txfsm[i] = gdm_txfsm;
+		eth->reset.gdm_txgp_cnt[i] = txgp_cnt;
+		eth->reset.gdm_rxfc_cnt[i] = rxfc_cnt;
+
+		if (!mtk_interface_mode_is_xgmii(eth->mac[i]->interface))
+			continue;
+
+		/* GDM Rx */
+		gdm_rxfsm = FIELD_GET(GENMASK(7, 0), mtk_r32(eth, MTK_FE_GDM_FSM(i)));
+		if (iq_hang && (rxgp_cnt == eth->reset.gdm_rxgp_cnt[i]) &&
+		    ((gdm_rxfsm == eth->reset.gdm_rxfsm[i]) &&
+		     (gdm_rxfsm == 0x23 || gdm_rxfsm == 0x24))) {
+			if (++eth->reset.gdm_rx_hang_count[i] > 2) {
+				dev_warn(eth->dev, "detect GDM%d Rx hang!\n", i + 1);
+				eth->reset.gdm_rx_hang_count[i] = 0;
+				ret = true;
+			}
+			eth->reset.gdm_rxfsm[i] = gdm_rxfsm;
+			eth->reset.gdm_rxgp_cnt[i] = rxgp_cnt;
+			goto out;
+		}
+		eth->reset.gdm_rx_hang_count[i] = 0;
+		eth->reset.gdm_rxfsm[i] = gdm_rxfsm;
+		eth->reset.gdm_rxgp_cnt[i] = rxgp_cnt;
+	}
+
 	/* ADMA sanity checks */
-	oq_hang = !!(mtk_r32(eth, reg_map->pse_oq_sta) & GENMASK(8, 0));
-	cdm1_busy = !!(mtk_r32(eth, MTK_FE_CDM1_FSM) & GENMASK(31, 16));
-	adma_busy = !(mtk_r32(eth, reg_map->pdma.adma_rx_dbg0) & GENMASK(4, 0)) &&
-		    !(mtk_r32(eth, reg_map->pdma.adma_rx_dbg0) & BIT(6));
+	for (i = 0; i < 4; i++) {
+		if (!mtk_r32(eth, reg_map->pdma.rx_ptr + (i * 0x100)))
+			continue;
+
+		adidx = mtk_r32(eth, reg_map->pdma.rx_ptr + (i * 0x100) + 0xc);
+		if (adidx != eth->reset.adidx[i])
+			adma_hang = false;
+
+		eth->reset.adidx[i] = adidx;
+	}
 
-	if (oq_hang && cdm1_busy && adma_busy) {
+	oq_hang = !!(mtk_get_oq_sta(eth, PSE_ADMA_PORT));
+	cdma_rxfsm = FIELD_GET(GENMASK(27, 16), mtk_r32(eth, MTK_FE_CDM1_FSM));
+	if (oq_hang && adma_hang &&
+	    ((cdma_rxfsm != 0) && (cdma_rxfsm != eth->reset.cdma_rxfsm))) {
 		if (++eth->reset.adma_hang_count > 2) {
+			dev_warn(eth->dev, "detect ADMA Rx hang!\n");
 			eth->reset.adma_hang_count = 0;
 			ret = true;
 		}
 		goto out;
 	}
+	eth->reset.cdma_rxfsm = cdma_rxfsm;
 
-	eth->reset.wdma_hang_count = 0;
 	eth->reset.qdma_hang_count = 0;
 	eth->reset.adma_hang_count = 0;
 out:
-	eth->reset.wdidx = wdidx;
 
 	return ret;
 }
diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.h b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
index 3338871..72262d6 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.h
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
@@ -382,8 +382,6 @@
 #define MTK_TX_DONE_INT0	BIT(0)
 #define MTK_TX_DONE_INT		MTK_TX_DONE_DLY
 
-#define MTK_CDM_TXFIFO_RDY	BIT(7)
-
 /* QDMA Interrupt grouping registers */
 #define MTK_RLS_DONE_INT	BIT(0)
 
@@ -725,6 +723,12 @@
 #define MTK_FE_DROP_FC		0x248
 #define MTK_FE_DROP_PPE		0x24C
 
+#define MTK_FE_CDMW_FSM(x)	(((x) == 0) ? MTK_FE_CDM3_FSM : \
+				 ((x) == 1) ? MTK_FE_CDM4_FSM : MTK_FE_CDM5_FSM)
+
+#define MTK_FE_GDM_FSM(x)	(((x) == 0) ? MTK_FE_GDM1_FSM : \
+				 ((x) == 1) ? MTK_FE_CDM2_FSM : MTK_FE_CDM3_FSM)
+
 #define MTK_MAC_FSM(x)		(0x1010C + ((x) * 0x100))
 
 #if !defined(CONFIG_NET_MEDIATEK_HNAT) && !defined(CONFIG_NET_MEDIATEK_HNAT_MODULE)
@@ -1003,6 +1007,12 @@ enum mtk_pse_port {
 	PSE_PORT_MAX
 };
 
+#define PSE_GDM_PORT(x)		(((x) == 0) ? PSE_GDM1_PORT : \
+				 ((x) == 1) ? PSE_GDM2_PORT : PSE_GDM3_PORT)
+
+#define PSE_WDMA_PORT(x)	(((x) == 0) ? PSE_WDMA0_PORT : \
+				 ((x) == 1) ? PSE_WDMA1_PORT : PSE_WDMA2_PORT)
+
 /* GMAC Identifier */
 enum mtk_gmac_id {
 	MTK_GMAC1_ID = 0,
@@ -1555,10 +1565,21 @@ struct mtk_eth {
 	struct {
 		struct delayed_work monitor_work;
 		atomic_t force;
-		u32 wdidx;
-		u8 wdma_hang_count;
+		u32 wdidx[3];
+		u32 adidx[3];
+		u32 gdm_txgp_cnt[3];
+		u32 gdm_rxgp_cnt[3];
+		u32 gdm_rxfc_cnt[3];
+		u32 gdm_txfsm[3];
+		u32 gdm_rxfsm[3];
+		u32 cdma_rxfsm;
+		u8 wdma_hang_count[3];
 		u8 qdma_hang_count;
 		u8 adma_hang_count;
+		u8 mac_tx_hang_count[3];
+		u8 mac_rx_hang_count[3];
+		u8 gdm_tx_hang_count[3];
+		u8 gdm_rx_hang_count[3];
 	} reset;
 };
 
-- 
2.45.2

