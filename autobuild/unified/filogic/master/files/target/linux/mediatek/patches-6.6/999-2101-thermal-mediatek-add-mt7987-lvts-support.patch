From 5f7bdb579c98592fcffe5e1edc11f1127d58006a Mon Sep 17 00:00:00 2001
From: Mason Chang <mason-cw.chang@mediatek.com>
Date: Wed, 16 Apr 2025 19:56:09 +0800
Subject: [PATCH] thermal: mediatek: add mt7987 lvts support

---
 drivers/thermal/mediatek/lvts_thermal.c       | 107 ++++++++++++++++++
 .../thermal/mediatek,lvts-thermal.h           |   3 +
 2 files changed, 110 insertions(+)

diff --git a/drivers/thermal/mediatek/lvts_thermal.c b/drivers/thermal/mediatek/lvts_thermal.c
index 98bb4fd..8ee7bdb 100644
--- a/drivers/thermal/mediatek/lvts_thermal.c
+++ b/drivers/thermal/mediatek/lvts_thermal.c
@@ -82,6 +82,8 @@
 #define LVTS_COEFF_B_MT8195			250460
 #define LVTS_COEFF_A_MT7988			-204650
 #define LVTS_COEFF_B_MT7988			204650
+#define LVTS_COEFF_A_MT7987			-204650
+#define LVTS_COEFF_B_MT7987			204650
 
 #define LVTS_MSR_IMMEDIATE_MODE		0
 #define LVTS_MSR_FILTERED_MODE		1
@@ -90,6 +92,7 @@
 #define LVTS_MSR_READ_WAIT_US		(LVTS_MSR_READ_TIMEOUT_US / 2)
 
 #define LVTS_HW_SHUTDOWN_MT7988		125000
+#define LVTS_HW_SHUTDOWN_MT7987		125000
 #define LVTS_HW_SHUTDOWN_MT8192		105000
 #define LVTS_HW_SHUTDOWN_MT8195		105000
 
@@ -1052,6 +1055,28 @@ static int mt7988_lvts_ctrl_connect(struct device *dev,
 	return 0;
 }
 
+static int mt7987_lvts_ctrl_connect(struct device *dev,
+				    struct lvts_ctrl *lvts_ctrl)
+{
+	u32 id, cmds[] = { 0xC103FFFF, 0xC502FC55 };
+
+	lvts_write_config(lvts_ctrl, cmds, ARRAY_SIZE(cmds));
+
+	/*
+	 * LVTS_ID : Get ID and status of the thermal controller
+	 *
+	 * Bits:
+	 *
+	 * 0-5	: thermal controller id
+	 *   7	: thermal controller connection is valid
+	 */
+	id = readl(LVTS_ID(lvts_ctrl->base));
+	if (!(id & BIT(7)))
+		return -EIO;
+
+	return 0;
+}
+
 static int lvts_ctrl_initialize(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 {
 	/*
@@ -1086,6 +1111,23 @@ static int mt7988_lvts_ctrl_initialize(struct device *dev,
 	return 0;
 }
 
+static int mt7987_lvts_ctrl_initialize(struct device *dev,
+				       struct lvts_ctrl *lvts_ctrl)
+{
+	/*
+	 * Write device mask: 0xC1030000
+	 */
+	u32 cmds[] = {
+		0xC1030300, 0xC1030420, 0xC1030500, 0xC10307A6, 0xC10308C7,
+		0xC103098D, 0xC1030C7C, 0xC1030AA8, 0xC10308CE, 0xC10308C7,
+		0xC1030B04, 0xC1030E01, 0xC10306B8
+	};
+
+	lvts_write_config(lvts_ctrl, cmds, ARRAY_SIZE(cmds));
+
+	return 0;
+}
+
 static int lvts_ctrl_calibrate(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 {
 	int i;
@@ -1375,6 +1417,35 @@ static int mt7988_lvts_ctrl_start(struct device *dev,
 	return 0;
 }
 
+static int mt7987_lvts_ctrl_start(struct device *dev,
+				  struct lvts_ctrl *lvts_ctrl)
+{
+	struct lvts_sensor *vir_sensor = &lvts_ctrl->vir_sensor;
+	struct thermal_zone_device *tz;
+	u32 sensor_map = BIT(0) | BIT(1);
+
+	/*
+	 * Bits:
+	 *      9: Single point access flow
+	 *    0-3: Enable sensing point 0-3
+	 */
+	writel(sensor_map | BIT(9), LVTS_MONCTL0(lvts_ctrl->base));
+
+	tz = thermal_zone_get_zone_by_name("cpu-thermal");
+	if (IS_ERR(tz)) {
+		tz = devm_thermal_of_zone_register(dev, 0, vir_sensor,
+						   &lvts_vir_tz_ops);
+		if (IS_ERR(tz) && PTR_ERR(tz) != -ENODEV)
+			return PTR_ERR(tz);
+
+		devm_thermal_add_hwmon_sysfs(dev, tz);
+
+		vir_sensor->tz = tz;
+	}
+
+	return 0;
+}
+
 static int lvts_domain_init(struct device *dev, struct lvts_domain *lvts_td,
 					const struct lvts_data *lvts_data)
 {
@@ -1529,6 +1600,23 @@ static void lvts_remove(struct platform_device *pdev)
 	lvts_debugfs_exit(lvts_td);
 }
 
+static const struct lvts_ctrl_data mt7987_lvts_ap_data_ctrl[] = {
+	{
+		.cal_offset = { 0x04, 0x08 },
+		.hw_speed   = {0xc, 0x1, 0x1, 0x1},
+		.lvts_sensor = {
+			{ .dt_id = MT7987_CPU },
+			{ .dt_id = MT7987_ETH2P5G },
+		},
+		.cal_mask_len = 4,
+		.num_lvts_sensor = 2,
+		.offset = 0x0,
+		.mode = LVTS_MSR_FILTERED_MODE,
+		.hw_filter = LVTS_HW_FILTER_16_OF_18,
+		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT7987,
+	},
+};
+
 static const struct lvts_ctrl_data mt7988_lvts_ap_data_ctrl[] = {
 	{
 		.cal_offset = { 0x00, 0x04, 0x08, 0x0c },
@@ -1771,6 +1859,24 @@ static const struct lvts_ctrl_data mt8195_lvts_ap_data_ctrl[] = {
 	}
 };
 
+static const struct lvts_data mt7987_lvts_ap_data = {
+	.lvts_ctrl	= mt7987_lvts_ap_data_ctrl,
+	.cal_data = {
+		.default_golden_temp = 60,
+		.default_cal_data = 19380,
+	},
+	.ops = {
+		.lvts_ctrl_connect	= mt7987_lvts_ctrl_connect,
+		.lvts_ctrl_initialize	= mt7987_lvts_ctrl_initialize,
+		.lvts_ctrl_start	= mt7987_lvts_ctrl_start,
+	},
+	.irq_enable	= 0,
+	.hw_protection	= 1,
+	.num_lvts_ctrl	= ARRAY_SIZE(mt7987_lvts_ap_data_ctrl),
+	.temp_factor	= LVTS_COEFF_A_MT7987,
+	.temp_offset	= LVTS_COEFF_B_MT7987,
+};
+
 static const struct lvts_data mt7988_lvts_ap_data = {
 	.lvts_ctrl	= mt7988_lvts_ap_data_ctrl,
 	.cal_data = {
@@ -1854,6 +1960,7 @@ static const struct lvts_data mt8195_lvts_ap_data = {
 };
 
 static const struct of_device_id lvts_of_match[] = {
+	{ .compatible = "mediatek,mt7987-lvts-ap", .data = &mt7987_lvts_ap_data },
 	{ .compatible = "mediatek,mt7988-lvts-ap", .data = &mt7988_lvts_ap_data },
 	{ .compatible = "mediatek,mt8192-lvts-mcu", .data = &mt8192_lvts_mcu_data },
 	{ .compatible = "mediatek,mt8192-lvts-ap", .data = &mt8192_lvts_ap_data },
diff --git a/include/dt-bindings/thermal/mediatek,lvts-thermal.h b/include/dt-bindings/thermal/mediatek,lvts-thermal.h
index 997e2f5..c30d062 100644
--- a/include/dt-bindings/thermal/mediatek,lvts-thermal.h
+++ b/include/dt-bindings/thermal/mediatek,lvts-thermal.h
@@ -7,6 +7,9 @@
 #ifndef __MEDIATEK_LVTS_DT_H
 #define __MEDIATEK_LVTS_DT_H
 
+#define MT7987_CPU		0
+#define MT7987_ETH2P5G		1
+
 #define MT7988_CPU_0		0
 #define MT7988_CPU_1		1
 #define MT7988_ETH2P5G_0	2
-- 
2.45.2

