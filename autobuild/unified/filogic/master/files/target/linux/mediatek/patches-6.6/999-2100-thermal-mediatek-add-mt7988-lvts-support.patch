From e5232ac7b2fbba31ee4537b3ced8f1761a50bc54 Mon Sep 17 00:00:00 2001
From: Mason Chang <mason-cw.chang@mediatek.com>
Date: Thu, 5 Dec 2024 20:39:46 +0800
Subject: [PATCH] thermal: mediatek: add mt7988 lvts support

Without this patch, the behavior of LVTS will not be as expected.
---
 drivers/thermal/mediatek/lvts_thermal.c | 492 +++++++++++++++++++-----
 1 file changed, 394 insertions(+), 98 deletions(-)

diff --git a/drivers/thermal/mediatek/lvts_thermal.c b/drivers/thermal/mediatek/lvts_thermal.c
index cb68b61..98bb4fd 100644
--- a/drivers/thermal/mediatek/lvts_thermal.c
+++ b/drivers/thermal/mediatek/lvts_thermal.c
@@ -62,7 +62,6 @@
 #define LVTS_GROUP_INTERVAL			0
 #define LVTS_FILTER_INTERVAL		0
 #define LVTS_SENSOR_INTERVAL		0
-#define LVTS_HW_FILTER				0x0
 #define LVTS_TSSEL_CONF				0x13121110
 #define LVTS_CALSCALE_CONF			0x300
 #define LVTS_MONINT_CONF			0x8300318C
@@ -78,8 +77,7 @@
 #define LVTS_INT_SENSOR3			0x1FC00000
 
 #define LVTS_SENSOR_MAX				4
-#define LVTS_GOLDEN_TEMP_MAX		62
-#define LVTS_GOLDEN_TEMP_DEFAULT	50
+#define LVTS_GOLDEN_TEMP_MAX			62
 #define LVTS_COEFF_A_MT8195			-250460
 #define LVTS_COEFF_B_MT8195			250460
 #define LVTS_COEFF_A_MT7988			-204650
@@ -91,33 +89,42 @@
 #define LVTS_MSR_READ_TIMEOUT_US	400
 #define LVTS_MSR_READ_WAIT_US		(LVTS_MSR_READ_TIMEOUT_US / 2)
 
-#define LVTS_HW_SHUTDOWN_MT7988		105000
+#define LVTS_HW_SHUTDOWN_MT7988		125000
 #define LVTS_HW_SHUTDOWN_MT8192		105000
 #define LVTS_HW_SHUTDOWN_MT8195		105000
 
 #define LVTS_MINIMUM_THRESHOLD		20000
 
-static int golden_temp = LVTS_GOLDEN_TEMP_DEFAULT;
+static int golden_temp;
 static int golden_temp_offset;
+static int use_fake_efuse;
 
 struct lvts_sensor_data {
 	int dt_id;
 };
 
+struct lvts_hw_speed {
+	u32 period_unit;
+	u32 group_interval_delay;
+	u32 filter_interval_delay;
+	u32 sensor_interval_delay;
+};
+
+struct sensor_cal_data {
+	u32 default_golden_temp;
+	u32 default_cal_data;
+};
+
 struct lvts_ctrl_data {
 	struct lvts_sensor_data lvts_sensor[LVTS_SENSOR_MAX];
+	struct lvts_hw_speed hw_speed;
 	int cal_offset[LVTS_SENSOR_MAX];
+	int cal_mask_len;
 	int hw_tshut_temp;
 	int num_lvts_sensor;
 	int offset;
 	int mode;
-};
-
-struct lvts_data {
-	const struct lvts_ctrl_data *lvts_ctrl;
-	int num_lvts_ctrl;
-	int temp_factor;
-	int temp_offset;
+	int hw_filter;
 };
 
 struct lvts_sensor {
@@ -132,6 +139,8 @@ struct lvts_sensor {
 
 struct lvts_ctrl {
 	struct lvts_sensor sensors[LVTS_SENSOR_MAX];
+	struct lvts_sensor vir_sensor;
+	struct lvts_domain *lvts_domain;
 	const struct lvts_data *lvts_data;
 	u32 calibration[LVTS_SENSOR_MAX];
 	u32 hw_tshut_raw_temp;
@@ -142,6 +151,25 @@ struct lvts_ctrl {
 	int high_thresh;
 };
 
+struct platform_ops {
+	int (*lvts_ctrl_connect)(struct device *dev,
+				 struct lvts_ctrl *lvts_ctrl);
+	int (*lvts_ctrl_initialize)(struct device *dev,
+				    struct lvts_ctrl *lvts_ctrl);
+	int (*lvts_ctrl_start)(struct device *dev, struct lvts_ctrl *lvts_ctrl);
+};
+
+struct lvts_data {
+	const struct lvts_ctrl_data *lvts_ctrl;
+	struct platform_ops ops;
+	struct sensor_cal_data cal_data;
+	int irq_enable;
+	int hw_protection;
+	int num_lvts_ctrl;
+	int temp_factor;
+	int temp_offset;
+};
+
 struct lvts_domain {
 	struct lvts_ctrl *lvts_ctrl;
 	struct reset_control *reset;
@@ -155,6 +183,15 @@ struct lvts_domain {
 #endif
 };
 
+enum lvts_hw_filter {
+	LVTS_HW_FILTER_1,
+	LVTS_HW_FILTER_2,
+	LVTS_HW_FILTER_2_OF_4,
+	LVTS_HW_FILTER_4_OF_6,
+	LVTS_HW_FILTER_8_OF_10,
+	LVTS_HW_FILTER_16_OF_18
+};
+
 #ifdef CONFIG_MTK_LVTS_THERMAL_DEBUGFS
 
 #define LVTS_DEBUG_FS_REGS(__reg)		\
@@ -316,6 +353,39 @@ static int lvts_get_temp(struct thermal_zone_device *tz, int *temp)
 	return 0;
 }
 
+static int lvts_get_max_temp(struct thermal_zone_device *tz, int *temp)
+{
+	struct lvts_sensor *lvts_sensor = thermal_zone_device_priv(tz);
+	struct lvts_ctrl *lvts_ctrl = container_of(lvts_sensor, struct lvts_ctrl,
+						   vir_sensor);
+	struct lvts_domain *lvts_td = lvts_ctrl->lvts_domain;
+	const struct lvts_data *lvts_data = lvts_ctrl->lvts_data;
+	int current_temp, max_temp = THERMAL_TEMP_INVALID;
+	int i, j, rc;
+	void __iomem *msr;
+	u32 value;
+
+	for (i = 0; i < lvts_td->num_lvts_ctrl; i++) {
+		for (j = 0; j < lvts_td->lvts_ctrl[i].num_lvts_sensor; j++) {
+			msr = lvts_td->lvts_ctrl[i].sensors[j].msr;
+			rc = readl_poll_timeout(msr, value, value & BIT(16),
+						LVTS_MSR_READ_WAIT_US,
+						LVTS_MSR_READ_TIMEOUT_US);
+			if (rc)
+				continue;
+
+			current_temp = lvts_raw_to_temp(value & 0xFFFF,
+							lvts_data->temp_factor);
+
+			max_temp = max(max_temp, current_temp);
+		}
+	}
+
+	*temp = max_temp;
+
+	return 0;
+}
+
 static void lvts_update_irq_mask(struct lvts_ctrl *lvts_ctrl)
 {
 	u32 masks[] = {
@@ -375,36 +445,39 @@ static int lvts_set_trips(struct thermal_zone_device *tz, int low, int high)
 		lvts_ctrl->high_thresh = high;
 		lvts_ctrl->low_thresh = low;
 	}
-	lvts_update_irq_mask(lvts_ctrl);
 
-	if (!should_update_thresh)
-		return 0;
+	if (lvts_data->irq_enable) {
+		lvts_update_irq_mask(lvts_ctrl);
 
-	/*
-	 * Low offset temperature threshold
-	 *
-	 * LVTS_OFFSETL
-	 *
-	 * Bits:
-	 *
-	 * 14-0 : Raw temperature for threshold
-	 */
-	pr_debug("%s: Setting low limit temperature interrupt: %d\n",
-		 thermal_zone_device_type(tz), low);
-	writel(raw_low, LVTS_OFFSETL(base));
+		if (!should_update_thresh)
+			return 0;
 
-	/*
-	 * High offset temperature threshold
-	 *
-	 * LVTS_OFFSETH
-	 *
-	 * Bits:
-	 *
-	 * 14-0 : Raw temperature for threshold
-	 */
-	pr_debug("%s: Setting high limit temperature interrupt: %d\n",
-		 thermal_zone_device_type(tz), high);
-	writel(raw_high, LVTS_OFFSETH(base));
+		/*
+		 * Low offset temperature threshold
+		 *
+		 * LVTS_OFFSETL
+		 *
+		 * Bits:
+		 *
+		 * 14-0 : Raw temperature for threshold
+		 */
+		pr_debug("%s: Setting low limit temperature interrupt: %d\n",
+			 thermal_zone_device_type(tz), low);
+		writel(raw_low, LVTS_OFFSETL(base));
+
+		/*
+		 * High offset temperature threshold
+		 *
+		 * LVTS_OFFSETH
+		 *
+		 * Bits:
+		 *
+		 * 14-0 : Raw temperature for threshold
+		 */
+		pr_debug("%s: Setting high limit temperature interrupt: %d\n",
+			 thermal_zone_device_type(tz), high);
+		writel(raw_high, LVTS_OFFSETH(base));
+	}
 
 	return 0;
 }
@@ -499,6 +572,7 @@ static irqreturn_t lvts_ctrl_irq_handler(struct lvts_ctrl *lvts_ctrl)
 
 		thermal_zone_device_update(lvts_ctrl->sensors[i].tz,
 					   THERMAL_TRIP_VIOLATED);
+
 		iret = IRQ_HANDLED;
 	}
 
@@ -547,6 +621,10 @@ static struct thermal_zone_device_ops lvts_ops = {
 	.set_trips = lvts_set_trips,
 };
 
+static struct thermal_zone_device_ops lvts_vir_tz_ops = {
+	.get_temp = lvts_get_max_temp,
+};
+
 static int lvts_sensor_init(struct device *dev, struct lvts_ctrl *lvts_ctrl,
 					const struct lvts_ctrl_data *lvts_ctrl_data)
 {
@@ -625,8 +703,11 @@ static int lvts_sensor_init(struct device *dev, struct lvts_ctrl *lvts_ctrl,
  * <-----sensor#2----->        <-----sensor#3----->
  *  0x0C | 0x0D | 0x0E | 0x0F | 0x10 | 0x11 | 0x12 | 0x13
  *
- * <-----sensor#4----->        <-----sensor#5----->        <-----sensor#6----->        <-----sensor#7----->
- *  0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1A | 0x1B | 0x1C | 0x1D | 0x1E | 0x1F | 0x20 | 0x21 | 0x22 | 0x23
+ * <-----sensor#4----->        <-----sensor#5----->
+ *  0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1A | 0x1B |
+ *
+ * <-----sensor#6----->        <-----sensor#7----->
+ *  0x1C | 0x1D | 0x1E | 0x1F | 0x20 | 0x21 | 0x22 | 0x23
  *
  * Stream index map for AP Domain mt8192 :
  *
@@ -651,8 +732,11 @@ static int lvts_sensor_init(struct device *dev, struct lvts_ctrl *lvts_ctrl,
  * <-----mcu-tc#1-----> <-----sensor#2-----> <-----sensor#3----->
  *  0x0A | 0x0B | 0x0C | 0x0D | 0x0E | 0x0F | 0x10 | 0x11 | 0x12
  *
- * <-----mcu-tc#2-----> <-----sensor#4-----> <-----sensor#5-----> <-----sensor#6-----> <-----sensor#7----->
- *  0x13 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1A | 0x1B | 0x1C | 0x1D | 0x1E | 0x1F | 0x20 | 0x21
+ * <-----mcu-tc#2-----> <-----sensor#4-----> <-----sensor#5----->
+ *  0x13 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1A | 0x1B |
+ *
+ * <-----sensor#6-----> <-----sensor#7----->
+ *  0x1C | 0x1D | 0x1E | 0x1F | 0x20 | 0x21
  *
  * Stream index map for AP Domain mt8195 :
  *
@@ -675,11 +759,18 @@ static int lvts_calibration_init(struct device *dev, struct lvts_ctrl *lvts_ctrl
 					const struct lvts_ctrl_data *lvts_ctrl_data,
 					u8 *efuse_calibration)
 {
+	const struct lvts_data *lvts_data = lvts_ctrl->lvts_data;
 	int i;
 
-	for (i = 0; i < lvts_ctrl_data->num_lvts_sensor; i++)
-		memcpy(&lvts_ctrl->calibration[i],
-		       efuse_calibration + lvts_ctrl_data->cal_offset[i], 2);
+	for (i = 0; i < lvts_ctrl_data->num_lvts_sensor; i++) {
+		if (use_fake_efuse)
+			lvts_ctrl->calibration[i] =
+				lvts_data->cal_data.default_cal_data;
+		else
+			memcpy(&lvts_ctrl->calibration[i],
+			       efuse_calibration + lvts_ctrl_data->cal_offset[i],
+			       lvts_ctrl_data->cal_mask_len);
+	}
 
 	return 0;
 }
@@ -734,20 +825,21 @@ static int lvts_calibration_read(struct device *dev, struct lvts_domain *lvts_td
 	return 0;
 }
 
-static int lvts_golden_temp_init(struct device *dev, u32 *value, int temp_offset)
+static int lvts_golden_temp_init(struct device *dev, u32 *value,
+				 const struct lvts_data *lvts_data)
 {
 	u32 gt;
 
 	gt = (*value) >> 24;
 
-	/* A zero value for gt means that device has invalid efuse data */
-	if (!gt)
-		return -ENODATA;
-
-	if (gt < LVTS_GOLDEN_TEMP_MAX)
+	if (gt == 0 || gt > LVTS_GOLDEN_TEMP_MAX) {
+		golden_temp = lvts_data->cal_data.default_golden_temp;
+		use_fake_efuse = 1;
+	} else {
 		golden_temp = gt;
+	}
 
-	golden_temp_offset = golden_temp * 500 + temp_offset;
+	golden_temp_offset = golden_temp * 500 + lvts_data->temp_offset;
 
 	return 0;
 }
@@ -770,7 +862,7 @@ static int lvts_ctrl_init(struct device *dev, struct lvts_domain *lvts_td,
 	 * The golden temp information is contained in the first chunk
 	 * of efuse data.
 	 */
-	ret = lvts_golden_temp_init(dev, (u32 *)lvts_td->calib, lvts_data->temp_offset);
+	ret = lvts_golden_temp_init(dev, (u32 *)lvts_td->calib, lvts_data);
 	if (ret)
 		return ret;
 
@@ -780,6 +872,7 @@ static int lvts_ctrl_init(struct device *dev, struct lvts_domain *lvts_td,
 
 	for (i = 0; i < lvts_data->num_lvts_ctrl; i++) {
 
+		lvts_ctrl[i].lvts_domain = lvts_td;
 		lvts_ctrl[i].base = lvts_td->base + lvts_data->lvts_ctrl[i].offset;
 		lvts_ctrl[i].lvts_data = lvts_data;
 
@@ -838,39 +931,43 @@ static void lvts_write_config(struct lvts_ctrl *lvts_ctrl, u32 *cmds, int nr_cmd
 	 */
 	for (i = 0; i < nr_cmds; i++) {
 		writel(cmds[i], LVTS_CONFIG(lvts_ctrl->base));
-		usleep_range(2, 4);
+		usleep_range(5, 15);
 	}
 }
 
 static int lvts_irq_init(struct lvts_ctrl *lvts_ctrl)
 {
-	/*
-	 * LVTS_PROTCTL : Thermal Protection Sensor Selection
-	 *
-	 * Bits:
-	 *
-	 * 19-18 : Sensor to base the protection on
-	 * 17-16 : Strategy:
-	 *         00 : Average of 4 sensors
-	 *         01 : Max of 4 sensors
-	 *         10 : Selected sensor with bits 19-18
-	 *         11 : Reserved
-	 */
-	writel(BIT(16), LVTS_PROTCTL(lvts_ctrl->base));
+	const struct lvts_data *lvts_data = lvts_ctrl->lvts_data;
 
-	/*
-	 * LVTS_PROTTA : Stage 1 temperature threshold
-	 * LVTS_PROTTB : Stage 2 temperature threshold
-	 * LVTS_PROTTC : Stage 3 temperature threshold
-	 *
-	 * Bits:
-	 *
-	 * 14-0: Raw temperature threshold
-	 *
-	 * writel(0x0, LVTS_PROTTA(lvts_ctrl->base));
-	 * writel(0x0, LVTS_PROTTB(lvts_ctrl->base));
-	 */
-	writel(lvts_ctrl->hw_tshut_raw_temp, LVTS_PROTTC(lvts_ctrl->base));
+	if (lvts_data->hw_protection) {
+		/*
+		 * LVTS_PROTCTL : Thermal Protection Sensor Selection
+		 *
+		 * Bits:
+		 *
+		 * 19-18 : Sensor to base the protection on
+		 * 17-16 : Strategy:
+		 *         00 : Average of 4 sensors
+		 *         01 : Max of 4 sensors
+		 *         10 : Selected sensor with bits 19-18
+		 *         11 : Reserved
+		 */
+		writel(BIT(16), LVTS_PROTCTL(lvts_ctrl->base));
+
+		/*
+		 * LVTS_PROTTA : Stage 1 temperature threshold
+		 * LVTS_PROTTB : Stage 2 temperature threshold
+		 * LVTS_PROTTC : Stage 3 temperature threshold
+		 *
+		 * Bits:
+		 *
+		 * 14-0: Raw temperature threshold
+		 *
+		 * writel(0x0, LVTS_PROTTA(lvts_ctrl->base));
+		 * writel(0x0, LVTS_PROTTB(lvts_ctrl->base));
+		 */
+		writel(lvts_ctrl->hw_tshut_raw_temp, LVTS_PROTTC(lvts_ctrl->base));
+	}
 
 	/*
 	 * LVTS_MONINT : Interrupt configuration register
@@ -878,7 +975,8 @@ static int lvts_irq_init(struct lvts_ctrl *lvts_ctrl)
 	 * The LVTS_MONINT register layout is the same as the LVTS_MONINTSTS
 	 * register, except we set the bits to enable the interrupt.
 	 */
-	writel(LVTS_MONINT_CONF, LVTS_MONINT(lvts_ctrl->base));
+	if (lvts_data->irq_enable)
+		writel(LVTS_MONINT_CONF, LVTS_MONINT(lvts_ctrl->base));
 
 	return 0;
 }
@@ -932,6 +1030,28 @@ static int lvts_ctrl_connect(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 	return 0;
 }
 
+static int mt7988_lvts_ctrl_connect(struct device *dev,
+				    struct lvts_ctrl *lvts_ctrl)
+{
+	u32 id, cmds[] = { 0xC103FFFF, 0xC502FC55 };
+
+	lvts_write_config(lvts_ctrl, cmds, ARRAY_SIZE(cmds));
+
+	/*
+	 * LVTS_ID : Get ID and status of the thermal controller
+	 *
+	 * Bits:
+	 *
+	 * 0-5	: thermal controller id
+	 *   7	: thermal controller connection is valid
+	 */
+	id = readl(LVTS_ID(lvts_ctrl->base));
+	if (!(id & BIT(7)))
+		return -EIO;
+
+	return 0;
+}
+
 static int lvts_ctrl_initialize(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 {
 	/*
@@ -949,6 +1069,23 @@ static int lvts_ctrl_initialize(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 	return 0;
 }
 
+static int mt7988_lvts_ctrl_initialize(struct device *dev,
+				       struct lvts_ctrl *lvts_ctrl)
+{
+	/*
+	 * Write device mask: 0xC1030000
+	 */
+	u32 cmds[] = {
+		0xC1030300, 0xC1030420, 0xC1030500, 0xC10307A6, 0xC1030CFC,
+		0xC1030A8C, 0xC103098D, 0xC10308F1, 0xC1030B04, 0xC1030E01,
+		0xC10306B8
+	};
+
+	lvts_write_config(lvts_ctrl, cmds, ARRAY_SIZE(cmds));
+
+	return 0;
+}
+
 static int lvts_ctrl_calibrate(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 {
 	int i;
@@ -974,6 +1111,9 @@ static int lvts_ctrl_calibrate(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 
 static int lvts_ctrl_configure(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 {
+	const struct lvts_ctrl_data *lvts_ctrl_data =
+		lvts_ctrl->lvts_data->lvts_ctrl;
+	const struct lvts_hw_speed *hw_speed = &lvts_ctrl_data->hw_speed;
 	u32 value;
 
 	/*
@@ -992,8 +1132,8 @@ static int lvts_ctrl_configure(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 	/*
 	 * LVTS_CALSCALE : ADC voltage round
 	 */
-	value = 0x300;
 	value = LVTS_CALSCALE_CONF;
+	writel(value, LVTS_CALSCALE(lvts_ctrl->base));
 
 	/*
 	 * LVTS_MSRCTL0 : Sensor filtering strategy
@@ -1014,8 +1154,10 @@ static int lvts_ctrl_configure(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 	 * 6-8  : Sensor2 filter
 	 * 9-11 : Sensor3 filter
 	 */
-	value = LVTS_HW_FILTER << 9 |  LVTS_HW_FILTER << 6 |
-			LVTS_HW_FILTER << 3 | LVTS_HW_FILTER;
+	value = lvts_ctrl_data->hw_filter << 9 |
+		lvts_ctrl_data->hw_filter << 6 |
+		lvts_ctrl_data->hw_filter << 3 |
+		lvts_ctrl_data->hw_filter;
 	writel(value, LVTS_MSRCTL0(lvts_ctrl->base));
 
 	/*
@@ -1058,7 +1200,7 @@ static int lvts_ctrl_configure(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 	 *       9 - 0  : Period unit
 	 *
 	 */
-	value = LVTS_GROUP_INTERVAL << 20 | LVTS_PERIOD_UNIT;
+	value = hw_speed->group_interval_delay << 20 | hw_speed->period_unit;
 	writel(value, LVTS_MONCTL1(lvts_ctrl->base));
 
 	/*
@@ -1071,12 +1213,51 @@ static int lvts_ctrl_configure(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 	 *       9-0  : Interval unit in PERIOD_UNIT between each sensor
 	 *
 	 */
-	value = LVTS_FILTER_INTERVAL << 16 | LVTS_SENSOR_INTERVAL;
+	value = hw_speed->filter_interval_delay << 16 |
+		hw_speed->sensor_interval_delay;
 	writel(value, LVTS_MONCTL2(lvts_ctrl->base));
 
 	return lvts_irq_init(lvts_ctrl);
 }
 
+static int lvts_ctrl_wait_bus_idle(struct device *dev,
+				    struct lvts_ctrl *lvts_ctrl)
+{
+	u32 mask, error_code;
+	int i, ret;
+
+	mask = BIT(10) | BIT(7) | BIT(0);
+
+	for (i = 0; i < 2; i++) {
+		ret = readl_poll_timeout(LVTS_MSRCTL1(lvts_ctrl->base),
+					 error_code,
+					 !(error_code & mask), 2, 200);
+		/*
+		 * Error Code:
+		 *
+		 * 000 : IDLE
+		 * 001 : Write transaction
+		 * 010 : Waiting for read after Write
+		 * 011 : Disable Continue fetching on Device
+		 * 100 : Read transaction
+		 * 101 : Set Device special Register for Voltage threshold
+		 * 111 : Set TSMCU number for Fetch
+		 */
+		error_code = ((error_code & BIT(10)) >> 8) +
+			     ((error_code & BIT(7)) >> 6) +
+			     (error_code & BIT(0));
+
+		if (ret) {
+			dev_err(dev,
+				"Bus status is not idle, error code 0x%x\n",
+				error_code);
+			return -EBUSY;
+		}
+	}
+
+	return 0;
+}
+
 static int lvts_ctrl_start(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 {
 	struct lvts_sensor *lvts_sensors = lvts_ctrl->sensors;
@@ -1094,7 +1275,6 @@ static int lvts_ctrl_start(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 			     sensor_imm_bitmap : sensor_filt_bitmap;
 
 	for (i = 0; i < lvts_ctrl->num_lvts_sensor; i++) {
-
 		int dt_id = lvts_sensors[i].dt_id;
 
 		tz = devm_thermal_of_zone_register(dev, dt_id, &lvts_sensors[i],
@@ -1165,9 +1345,40 @@ static int lvts_ctrl_start(struct device *dev, struct lvts_ctrl *lvts_ctrl)
 	return 0;
 }
 
+
+static int mt7988_lvts_ctrl_start(struct device *dev,
+				  struct lvts_ctrl *lvts_ctrl)
+{
+	struct lvts_sensor *vir_sensor = &lvts_ctrl->vir_sensor;
+	struct thermal_zone_device *tz;
+	u32 sensor_map = BIT(0) | BIT(1) | BIT(2) | BIT(3);
+
+	/*
+	 * Bits:
+	 *      9: Single point access flow
+	 *    0-3: Enable sensing point 0-3
+	 */
+	writel(sensor_map | BIT(9), LVTS_MONCTL0(lvts_ctrl->base));
+
+	tz = thermal_zone_get_zone_by_name("cpu-thermal");
+	if (IS_ERR(tz)) {
+		tz = devm_thermal_of_zone_register(dev, 0, vir_sensor,
+						   &lvts_vir_tz_ops);
+		if (IS_ERR(tz) && PTR_ERR(tz) != -ENODEV)
+			return PTR_ERR(tz);
+
+		devm_thermal_add_hwmon_sysfs(dev, tz);
+
+		vir_sensor->tz = tz;
+	}
+
+	return 0;
+}
+
 static int lvts_domain_init(struct device *dev, struct lvts_domain *lvts_td,
 					const struct lvts_data *lvts_data)
 {
+	const struct platform_ops *ops = &lvts_data->ops;
 	struct lvts_ctrl *lvts_ctrl;
 	int i, ret;
 
@@ -1203,13 +1414,13 @@ static int lvts_domain_init(struct device *dev, struct lvts_domain *lvts_td,
 			return ret;
 		}
 
-		ret = lvts_ctrl_connect(dev, lvts_ctrl);
+		ret = ops->lvts_ctrl_connect(dev, lvts_ctrl);
 		if (ret) {
 			dev_dbg(dev, "Failed to connect to LVTS controller");
 			return ret;
 		}
 
-		ret = lvts_ctrl_initialize(dev, lvts_ctrl);
+		ret = ops->lvts_ctrl_initialize(dev, lvts_ctrl);
 		if (ret) {
 			dev_dbg(dev, "Failed to initialize controller");
 			return ret;
@@ -1221,13 +1432,19 @@ static int lvts_domain_init(struct device *dev, struct lvts_domain *lvts_td,
 			return ret;
 		}
 
+		ret = lvts_ctrl_wait_bus_idle(dev, lvts_ctrl);
+		if (ret) {
+			dev_dbg(dev, "Failed to wait for the bus to idle");
+			return ret;
+		}
+
 		ret = lvts_ctrl_configure(dev, lvts_ctrl);
 		if (ret) {
 			dev_dbg(dev, "Failed to configure controller");
 			return ret;
 		}
 
-		ret = lvts_ctrl_start(dev, lvts_ctrl);
+		ret = ops->lvts_ctrl_start(dev, lvts_ctrl);
 		if (ret) {
 			dev_dbg(dev, "Failed to start controller");
 			return ret;
@@ -1269,9 +1486,11 @@ static int lvts_probe(struct platform_device *pdev)
 	if (IS_ERR(lvts_td->reset))
 		return dev_err_probe(dev, PTR_ERR(lvts_td->reset), "Failed to get reset control\n");
 
-	irq = platform_get_irq(pdev, 0);
-	if (irq < 0)
-		return irq;
+	if (lvts_data->irq_enable) {
+		irq = platform_get_irq(pdev, 0);
+		if (irq < 0)
+			return irq;
+	}
 
 	golden_temp_offset = lvts_data->temp_offset;
 
@@ -1283,10 +1502,14 @@ static int lvts_probe(struct platform_device *pdev)
 	 * At this point the LVTS is initialized and enabled. We can
 	 * safely enable the interrupt.
 	 */
-	ret = devm_request_threaded_irq(dev, irq, NULL, lvts_irq_handler,
-					IRQF_ONESHOT, dev_name(dev), lvts_td);
-	if (ret)
-		return dev_err_probe(dev, ret, "Failed to request interrupt\n");
+	if (lvts_data->irq_enable) {
+		ret = devm_request_threaded_irq(dev, irq, NULL,
+						lvts_irq_handler,
+						IRQF_ONESHOT, dev_name(dev),
+						lvts_td);
+		if (ret)
+			return dev_err_probe(dev, ret, "Failed to request interrupt\n");
+	}
 
 	platform_set_drvdata(pdev, lvts_td);
 
@@ -1309,26 +1532,34 @@ static void lvts_remove(struct platform_device *pdev)
 static const struct lvts_ctrl_data mt7988_lvts_ap_data_ctrl[] = {
 	{
 		.cal_offset = { 0x00, 0x04, 0x08, 0x0c },
+		.hw_speed   = {0xc, 0x1, 0x1, 0x1},
 		.lvts_sensor = {
 			{ .dt_id = MT7988_CPU_0 },
 			{ .dt_id = MT7988_CPU_1 },
 			{ .dt_id = MT7988_ETH2P5G_0 },
 			{ .dt_id = MT7988_ETH2P5G_1 }
 		},
+		.cal_mask_len = 3,
 		.num_lvts_sensor = 4,
 		.offset = 0x0,
+		.mode = LVTS_MSR_FILTERED_MODE,
+		.hw_filter = LVTS_HW_FILTER_16_OF_18,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT7988,
 	},
 	{
 		.cal_offset = { 0x14, 0x18, 0x1c, 0x20 },
+		.hw_speed = {0xc, 0x1, 0x1, 0x1},
 		.lvts_sensor = {
 			{ .dt_id = MT7988_TOPS_0},
 			{ .dt_id = MT7988_TOPS_1},
 			{ .dt_id = MT7988_ETHWARP_0},
 			{ .dt_id = MT7988_ETHWARP_1}
 		},
+		.cal_mask_len = 3,
 		.num_lvts_sensor = 4,
 		.offset = 0x100,
+		.mode = LVTS_MSR_FILTERED_MODE,
+		.hw_filter = LVTS_HW_FILTER_16_OF_18,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT7988,
 	}
 };
@@ -1372,6 +1603,7 @@ static const struct lvts_ctrl_data mt8192_lvts_mcu_data_ctrl[] = {
 			{ .dt_id = MT8192_MCU_BIG_CPU0 },
 			{ .dt_id = MT8192_MCU_BIG_CPU1 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 2,
 		.offset = 0x0,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8192,
@@ -1383,6 +1615,7 @@ static const struct lvts_ctrl_data mt8192_lvts_mcu_data_ctrl[] = {
 			{ .dt_id = MT8192_MCU_BIG_CPU2 },
 			{ .dt_id = MT8192_MCU_BIG_CPU3 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 2,
 		.offset = 0x100,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8192,
@@ -1396,6 +1629,7 @@ static const struct lvts_ctrl_data mt8192_lvts_mcu_data_ctrl[] = {
 			{ .dt_id = MT8192_MCU_LITTLE_CPU2 },
 			{ .dt_id = MT8192_MCU_LITTLE_CPU3 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 4,
 		.offset = 0x200,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8192,
@@ -1410,6 +1644,7 @@ static const struct lvts_ctrl_data mt8192_lvts_ap_data_ctrl[] = {
 			{ .dt_id = MT8192_AP_VPU0 },
 			{ .dt_id = MT8192_AP_VPU1 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 2,
 		.offset = 0x0,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8192,
@@ -1420,6 +1655,7 @@ static const struct lvts_ctrl_data mt8192_lvts_ap_data_ctrl[] = {
 			{ .dt_id = MT8192_AP_GPU0 },
 			{ .dt_id = MT8192_AP_GPU1 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 2,
 		.offset = 0x100,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8192,
@@ -1430,6 +1666,7 @@ static const struct lvts_ctrl_data mt8192_lvts_ap_data_ctrl[] = {
 			{ .dt_id = MT8192_AP_INFRA },
 			{ .dt_id = MT8192_AP_CAM },
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 2,
 		.offset = 0x200,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8192,
@@ -1441,6 +1678,7 @@ static const struct lvts_ctrl_data mt8192_lvts_ap_data_ctrl[] = {
 			{ .dt_id = MT8192_AP_MD1 },
 			{ .dt_id = MT8192_AP_MD2 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 3,
 		.offset = 0x300,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8192,
@@ -1454,6 +1692,7 @@ static const struct lvts_ctrl_data mt8195_lvts_mcu_data_ctrl[] = {
 			{ .dt_id = MT8195_MCU_BIG_CPU0 },
 			{ .dt_id = MT8195_MCU_BIG_CPU1 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 2,
 		.offset = 0x0,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8195,
@@ -1464,6 +1703,7 @@ static const struct lvts_ctrl_data mt8195_lvts_mcu_data_ctrl[] = {
 			{ .dt_id = MT8195_MCU_BIG_CPU2 },
 			{ .dt_id = MT8195_MCU_BIG_CPU3 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 2,
 		.offset = 0x100,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8195,
@@ -1476,6 +1716,7 @@ static const struct lvts_ctrl_data mt8195_lvts_mcu_data_ctrl[] = {
 			{ .dt_id = MT8195_MCU_LITTLE_CPU2 },
 			{ .dt_id = MT8195_MCU_LITTLE_CPU3 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 4,
 		.offset = 0x200,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8195,
@@ -1489,6 +1730,7 @@ static const struct lvts_ctrl_data mt8195_lvts_ap_data_ctrl[] = {
 			{ .dt_id = MT8195_AP_VPU0 },
 			{ .dt_id = MT8195_AP_VPU1 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 2,
 		.offset = 0x0,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8195,
@@ -1499,6 +1741,7 @@ static const struct lvts_ctrl_data mt8195_lvts_ap_data_ctrl[] = {
 			{ .dt_id = MT8195_AP_GPU0 },
 			{ .dt_id = MT8195_AP_GPU1 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 2,
 		.offset = 0x100,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8195,
@@ -1510,6 +1753,7 @@ static const struct lvts_ctrl_data mt8195_lvts_ap_data_ctrl[] = {
 			{ .dt_id = MT8195_AP_IMG },
 			{ .dt_id = MT8195_AP_INFRA },
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 3,
 		.offset = 0x200,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8195,
@@ -1520,6 +1764,7 @@ static const struct lvts_ctrl_data mt8195_lvts_ap_data_ctrl[] = {
 			{ .dt_id = MT8195_AP_CAM0 },
 			{ .dt_id = MT8195_AP_CAM1 }
 		},
+		.cal_mask_len = 2,
 		.num_lvts_sensor = 2,
 		.offset = 0x300,
 		.hw_tshut_temp = LVTS_HW_SHUTDOWN_MT8195,
@@ -1528,6 +1773,17 @@ static const struct lvts_ctrl_data mt8195_lvts_ap_data_ctrl[] = {
 
 static const struct lvts_data mt7988_lvts_ap_data = {
 	.lvts_ctrl	= mt7988_lvts_ap_data_ctrl,
+	.cal_data = {
+		.default_golden_temp = 60,
+		.default_cal_data = 19380,
+	},
+	.ops = {
+		.lvts_ctrl_connect	= mt7988_lvts_ctrl_connect,
+		.lvts_ctrl_initialize	= mt7988_lvts_ctrl_initialize,
+		.lvts_ctrl_start	= mt7988_lvts_ctrl_start,
+	},
+	.irq_enable	= 0,
+	.hw_protection	= 1,
 	.num_lvts_ctrl	= ARRAY_SIZE(mt7988_lvts_ap_data_ctrl),
 	.temp_factor	= LVTS_COEFF_A_MT7988,
 	.temp_offset	= LVTS_COEFF_B_MT7988,
@@ -1535,16 +1791,46 @@ static const struct lvts_data mt7988_lvts_ap_data = {
 
 static const struct lvts_data mt8192_lvts_mcu_data = {
 	.lvts_ctrl	= mt8192_lvts_mcu_data_ctrl,
+	.cal_data = {
+		.default_golden_temp = 50,
+	},
+	.ops = {
+		.lvts_ctrl_connect	= lvts_ctrl_connect,
+		.lvts_ctrl_initialize	= lvts_ctrl_initialize,
+		.lvts_ctrl_start	= lvts_ctrl_start,
+	},
+	.irq_enable	= 1,
+	.hw_protection  = 1,
 	.num_lvts_ctrl	= ARRAY_SIZE(mt8192_lvts_mcu_data_ctrl),
 };
 
 static const struct lvts_data mt8192_lvts_ap_data = {
 	.lvts_ctrl	= mt8192_lvts_ap_data_ctrl,
+	.cal_data = {
+		.default_golden_temp = 50,
+	},
+	.ops = {
+		.lvts_ctrl_connect	= lvts_ctrl_connect,
+		.lvts_ctrl_initialize	= lvts_ctrl_initialize,
+		.lvts_ctrl_start	= lvts_ctrl_start,
+	},
+	.irq_enable	= 1,
+	.hw_protection  = 1,
 	.num_lvts_ctrl	= ARRAY_SIZE(mt8192_lvts_ap_data_ctrl),
 };
 
 static const struct lvts_data mt8195_lvts_mcu_data = {
 	.lvts_ctrl	= mt8195_lvts_mcu_data_ctrl,
+	.cal_data = {
+		.default_golden_temp = 50,
+	},
+	.ops = {
+		.lvts_ctrl_connect	= lvts_ctrl_connect,
+		.lvts_ctrl_initialize	= lvts_ctrl_initialize,
+		.lvts_ctrl_start	= lvts_ctrl_start,
+	},
+	.irq_enable	= 1,
+	.hw_protection  = 1,
 	.num_lvts_ctrl	= ARRAY_SIZE(mt8195_lvts_mcu_data_ctrl),
 	.temp_factor	= LVTS_COEFF_A_MT8195,
 	.temp_offset	= LVTS_COEFF_B_MT8195,
@@ -1552,6 +1838,16 @@ static const struct lvts_data mt8195_lvts_mcu_data = {
 
 static const struct lvts_data mt8195_lvts_ap_data = {
 	.lvts_ctrl	= mt8195_lvts_ap_data_ctrl,
+	.cal_data = {
+		.default_golden_temp = 50,
+	},
+	.ops = {
+		.lvts_ctrl_connect	= lvts_ctrl_connect,
+		.lvts_ctrl_initialize	= lvts_ctrl_initialize,
+		.lvts_ctrl_start	= lvts_ctrl_start,
+	},
+	.irq_enable	= 1,
+	.hw_protection  = 1,
 	.num_lvts_ctrl	= ARRAY_SIZE(mt8195_lvts_ap_data_ctrl),
 	.temp_factor	= LVTS_COEFF_A_MT8195,
 	.temp_offset	= LVTS_COEFF_B_MT8195,
-- 
2.45.2

