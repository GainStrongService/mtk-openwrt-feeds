--- a/tools/image-sig-host.c
+++ b/tools/image-sig-host.c
@@ -11,6 +11,7 @@
 #include <u-boot/ecdsa.h>
 #include <u-boot/rsa.h>
 #include <u-boot/hash-checksum.h>
+#include <signoffline.h>
 
 struct checksum_algo checksum_algos[] = {
 	{
@@ -76,6 +77,27 @@ struct crypto_algo crypto_algos[] = {
 		.add_verify_data = ecdsa_add_verify_data,
 		.verify = ecdsa_verify,
 	},
+	{
+		.name = "rsa2048,offline",
+		.key_len = RSA2048_BYTES,
+		.sign = offline_sign,
+		.add_verify_data = rsa_add_verify_data,
+		.verify = offline_verify,
+	},
+	{
+		.name = "rsa3072,offline",
+		.key_len = RSA3072_BYTES,
+		.sign = offline_sign,
+		.add_verify_data = rsa_add_verify_data,
+		.verify = offline_verify,
+	},
+	{
+		.name = "rsa4096,offline",
+		.key_len = RSA4096_BYTES,
+		.sign = offline_sign,
+		.add_verify_data = rsa_add_verify_data,
+		.verify = offline_verify,
+	},
 };
 
 struct padding_algo padding_algos[] = {
--- a/tools/Makefile
+++ b/tools/Makefile
@@ -84,6 +84,8 @@ RSA_OBJS-$(CONFIG_TOOLS_LIBCRYPTO) := $(
 					rsa-sign.o rsa-verify.o \
 					rsa-mod-exp.o)
 
+SIGNOFFLINE_OBJS-$(CONFIG_TOOLS_LIBCRYPTO) := signoffline.o
+
 ECDSA_OBJS-$(CONFIG_TOOLS_LIBCRYPTO) := $(addprefix generated/lib/ecdsa/, ecdsa-libcrypto.o)
 
 AES_OBJS-$(CONFIG_TOOLS_LIBCRYPTO) := $(addprefix generated/lib/aes/, \
@@ -149,7 +151,8 @@ dumpimage-mkimage-objs := aisimage.o \
 			mtk_nand_headers.o \
 			$(ECDSA_OBJS-y) \
 			$(RSA_OBJS-y) \
-			$(AES_OBJS-y)
+			$(AES_OBJS-y) \
+			$(SIGNOFFLINE_OBJS-y)
 
 dumpimage-objs := $(dumpimage-mkimage-objs) dumpimage.o
 mkimage-objs   := $(dumpimage-mkimage-objs) mkimage.o
--- /dev/null
+++ b/tools/signoffline.c
@@ -0,0 +1,292 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2025 MediaTek Incorporation. All Rights Reserved.
+ *
+ */
+#include <stdio.h>
+#include <stdint.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <errno.h>
+#include <image.h>
+#include <linux/libfdt.h>
+#include <malloc.h>
+#include <u-boot/sha512.h>
+#include "mkimage.h"
+
+#define OFFSIGN_MSG_FILE		".msg"
+#define OFFSIGN_SIG_FILE		".sig"
+#define OFFSIGN_MAX_TMPFILE_LEN		256
+#define OFFSIGN_MAX_CMDLINE_LEN		3 * OFFSIGN_MAX_TMPFILE_LEN + 128 + 1
+#define OPENSSL_PKEYUTL_CMD		"openssl pkeyutl"
+#define OPENSSL_PKEYUTL_OPER		"-sign"
+#define OPENSSL_PKEYUTL_PADDING		"-pkeyopt rsa_padding_mode"
+#define OPENSSL_PKEYUTL_SALT		"-pkeyopt rsa_pss_saltlen"
+
+extern char **environ;
+
+static char img_prefix[OFFSIGN_MAX_TMPFILE_LEN];
+static char sig_dir[OFFSIGN_MAX_TMPFILE_LEN];
+
+static int get_fit_config_identifier(const void *fit, int node_offset,
+				     char *img_prefix, size_t prefix_len)
+{
+	int ret = 0;
+	int len = 0;
+	int cfg_noffset = 0;
+	const char *cfg_name, *desc;
+	const char *p, *end_p;
+	char *dev = NULL;
+
+	cfg_noffset = fdt_parent_offset(fit, node_offset);
+	if (cfg_noffset < 0) {
+		fprintf(stderr, "Can't find configuration node\n");
+		return cfg_noffset;
+	}
+
+	cfg_name = fdt_get_name(fit, cfg_noffset, NULL);
+	if (!cfg_name) {
+		fprintf(stderr, "Can't find the name of the configuration node\n");
+		return -EINVAL;
+	}
+
+	desc = fdt_getprop(fit, cfg_noffset, FIT_DESC_PROP, &len);
+	if (!desc) {
+		fprintf(stderr, "Can't find %s property\n", FIT_DESC_PROP);
+		return -ENOENT;
+	}
+
+	/* find device name in description as part of tmpfile prefix */
+	p = strchr(desc, ' ');
+	if (!p)
+		return -EINVAL;
+
+	p++;
+	if (!(*p))
+		return -EINVAL;
+
+	end_p = strchr(p, ' ');
+	if (end_p)
+		dev = strndup(p, end_p - p);
+	else
+		dev = strndup(p, strlen(p));
+
+	len = snprintf(img_prefix, prefix_len, "%s-%s", dev, cfg_name);
+	if (len < 0 || len >= prefix_len)
+		ret = -EINVAL;
+
+	free(dev);
+
+	return ret;
+}
+
+static int prepare_offline_sign(struct image_sign_info *info,
+				const struct image_region region[],
+				int region_count)
+{
+	int ret = 0;
+	int l;
+	size_t len = 0;
+	struct stat st;
+	FILE *f = NULL;
+	char msg_file[OFFSIGN_MAX_TMPFILE_LEN] = {0};
+	uint8_t checksum[SHA512_SUM_LEN] = {0};
+
+	ret = get_fit_config_identifier(info->fit, info->node_offset,
+					img_prefix, sizeof(img_prefix));
+	if (ret)
+		return ret;
+
+	l = snprintf(sig_dir, sizeof(sig_dir), "%s/fit-signatures", info->keydir);
+	if (l < 0 || l >= sizeof(sig_dir))
+		return -EINVAL;
+
+	if (!stat(sig_dir, &st)) {
+		if (!S_ISDIR(st.st_mode)) {
+			fprintf(stderr, "a file with the same name as directory %s exists\n", sig_dir);
+			return -EINVAL;
+		}
+	} else if (errno == ENOENT) {
+		if (mkdir(sig_dir, 0755)) {
+			perror("mkdir");
+			return -errno;
+		}
+	} else {
+		perror("stat");
+		return -errno;
+	}
+
+	l = snprintf(msg_file, sizeof(msg_file), "%s/%s%s", sig_dir, img_prefix, OFFSIGN_MSG_FILE);
+	if (l < 0 || l >= sizeof(msg_file))
+		return -EINVAL;
+
+	/* calculate digest */
+	ret = info->checksum->calculate(info->checksum->name, region,
+					region_count, checksum);
+	if (ret) {
+		fprintf(stderr, "Failed to calculate checksum of regions: %d\n", ret);
+		return ret;
+	}
+
+	/* write message to be signed to msg_file */
+	f = fopen(msg_file, "w");
+	if (!f) {
+		fprintf(stderr, "Failed to open %s\n", msg_file);
+		return -EINVAL;
+	}
+
+	len = fwrite(checksum, sizeof(uint8_t), info->checksum->checksum_len, f);
+	if (!len || len != info->checksum->checksum_len) {
+		fprintf(stderr, "Failed to write to %s\n", msg_file);
+		ret = -EINVAL;
+	}
+
+	fclose(f);
+
+	return ret;
+}
+
+static int sign_offline(struct image_sign_info *info,
+			const struct image_region region[],
+			int region_count,
+			uint8_t **sigp, uint *sig_len)
+{
+	int len;
+	size_t length = 0;
+	char cmd[OFFSIGN_MAX_CMDLINE_LEN] = {0};
+	bool pss = 0;
+
+	/* check padding */
+	if (info->padding && !strncmp(info->padding->name, "pss", strlen("pss")))
+		pss = 1;
+
+	len = snprintf(cmd, sizeof(cmd),
+		"%s %s -in %s/%s%s -inkey %s/%s.key -out %s/%s%s -pkeyopt digest:%s %s:%s",
+								OPENSSL_PKEYUTL_CMD,
+								OPENSSL_PKEYUTL_OPER,
+								sig_dir,
+								img_prefix,
+								OFFSIGN_MSG_FILE,
+								info->keydir,
+								info->keyname,
+								sig_dir,
+								img_prefix,
+								OFFSIGN_SIG_FILE,
+								info->checksum->name,
+								OPENSSL_PKEYUTL_PADDING,
+								pss ? "pss" : "pkcs1");
+	if (len < 0 || len >= sizeof(cmd))
+		return -EINVAL;
+
+	if (pss) {
+		length = sizeof(cmd) - len;
+		len = snprintf(cmd + len, length, " %s:%d", OPENSSL_PKEYUTL_SALT,
+							    info->checksum->checksum_len);
+		if (len < 0 || len >= length)
+			return -EINVAL;
+	}
+
+	printf("%s\n", cmd);
+
+	/* execute openssl command */
+	if (system(cmd) == -1) {
+		fprintf(stderr,"%s: failed to sign FIT\n", OPENSSL_PKEYUTL_CMD);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int post_offline_sign(struct image_sign_info *info,
+			     uint8_t **sigp, uint *sig_len)
+{
+	int ret = 0;
+	int l;
+	FILE *f = NULL;
+	size_t len = 0;
+	void *sig = NULL;
+	char sig_file[OFFSIGN_MAX_TMPFILE_LEN] = {0};
+
+	l = snprintf(sig_file, sizeof(sig_file), "%s/%s%s", sig_dir, img_prefix, OFFSIGN_SIG_FILE);
+	if (l < 0 || l >= sizeof(sig_file))
+		return -EINVAL;
+
+	/* read signature from sig_file */
+	f = fopen(sig_file, "rb");
+	if (!f) {
+		fprintf(stderr, "Failed to open %s\n", sig_file);
+		return -EINVAL;
+	}
+
+	sig = calloc(info->crypto->key_len, sizeof(uint8_t));
+	if (!sig) {
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	len = fread(sig, sizeof(uint8_t), info->crypto->key_len, f);
+	if (!len) {
+		fprintf(stderr, "Failed to read from %s\n", sig_file);
+		ret = -EINVAL;
+		goto err;
+	}
+
+	if (len != info->crypto->key_len) {
+		fprintf(stderr, "Got signature: %lu bytes, expected %d\n", len, info->crypto->key_len);
+		ret = -EINVAL;
+		goto err;
+	}
+
+	fclose(f);
+
+	*sigp = sig;
+	*sig_len = info->crypto->key_len;
+
+	return 0;
+
+err:
+	fclose(f);
+	free(sig);
+
+	return ret;
+}
+
+int offline_sign(struct image_sign_info *info,
+		 const struct image_region region[], int region_count,
+		 uint8_t **sigp, uint *sig_len)
+{
+	int ret = 0;
+
+	printf("%s:\n", __func__);
+
+	ret = prepare_offline_sign(info, region, region_count);
+	if (ret) {
+		fprintf(stderr, "prepare_offline_sign() failed\n");
+		return -EINVAL;
+	}
+
+	ret = sign_offline(info, region, region_count, sigp, sig_len);
+	if (ret) {
+		fprintf(stderr, "sign_offline() failed\n");
+		return -EINVAL;
+	}
+
+	ret = post_offline_sign(info, sigp, sig_len);
+	if (ret) {
+		fprintf(stderr, "post_offline_sign() failed\n");
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+int offline_verify(struct image_sign_info *info,
+		   const struct image_region region[], int region_count,
+		   uint8_t *sig, uint sig_len)
+{
+	int ret = 0;
+
+	printf("%s:\n", __func__);
+
+	return ret;
+}
--- /dev/null
+++ b/tools/signoffline.h
@@ -0,0 +1,18 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2025 MediaTek Incorporation. All Rights Reserved.
+ *
+ */
+
+#ifndef SIGNOFFLINE_H_
+#define SIGNOFFLINE_H_
+
+int offline_sign(struct image_sign_info *info,
+		 const struct image_region region[], int region_count,
+		 uint8_t **sigp, uint *sig_len);
+
+int offline_verify(struct image_sign_info *info,
+		   const struct image_region region[], int region_count,
+		   uint8_t *sig, uint sig_len);
+
+#endif /* SIGNOFFLINE_H_ */
--- a/tools/image-host.c
+++ b/tools/image-host.c
@@ -157,7 +157,7 @@ static int fit_image_write_sig(void *fit
 					  strdata, sizeof(strdata));
 		}
 	}
-	if (algo_name && !ret)
+	if (algo_name && !strstr(algo_name, ",offline") && !ret)
 		ret = fdt_setprop_string(fit, noffset, "algo", algo_name);
 
 	return ret;
