--- a/include/image.h
+++ b/include/image.h
@@ -1327,6 +1327,9 @@ int fit_add_verification_data(const char
 			      const char *cmdname, const char *algo_name,
 			      struct image_summary *summary);
 
+int fit_image_recalc_hash_data(void *fit, int image_noffset, const void *data,
+			       size_t size);
+
 /**
  * fit_image_verify_with_data() - Verify an image with given data
  *
--- a/tools/fit_image.c
+++ b/tools/fit_image.c
@@ -482,6 +482,18 @@ err_buf:
 	return -1;
 }
 
+unsigned long fdt_getprop_u32(const void *fdt, int node, const char *prop)
+{
+	const uint32_t *cell;
+	int len;
+
+	cell = fdt_getprop(fdt, node, prop, &len);
+	if (!cell || len != sizeof(*cell))
+		return ULLONG_MAX;
+
+	return fdt32_to_cpu(*cell);
+}
+
 /**
  * fit_extract_data() - Move all data outside the FIT
  *
@@ -506,6 +518,7 @@ static int fit_extract_data(struct image
 	int node;
 	int image_number;
 	int align_size;
+	int extra_size = 0;
 
 	align_size = params->bl_len ? params->bl_len : 4;
 	fd = mmap_fdt(params->cmdname, fname, 0, &fdt, &sbuf, false, false);
@@ -521,11 +534,22 @@ static int fit_extract_data(struct image
 	}
 	image_number = fdtdec_get_child_count(fdt, images);
 
+	for (node = fdt_first_subnode(fdt, images);
+	     node >= 0;
+	     node = fdt_next_subnode(fdt, node)) {
+		long pad_align_size;
+
+		pad_align_size = fdt_getprop_u32(fdt, node,
+						 "data-padding-alignment");
+		if ((long)pad_align_size >= 0)
+			extra_size += pad_align_size;
+	}
+
 	/*
 	 * Allocate space to hold the image data we will extract,
 	 * extral space allocate for image alignment to prevent overflow.
 	 */
-	buf = calloc(1, fit_size + (align_size * image_number));
+	buf = calloc(1, fit_size + (align_size * image_number) + extra_size);
 	if (!buf) {
 		ret = -ENOMEM;
 		goto err_munmap;
@@ -537,6 +561,7 @@ static int fit_extract_data(struct image
 	     node = fdt_next_subnode(fdt, node)) {
 		const char *data;
 		int len;
+		long pad_align_size;
 
 		data = fdt_getprop(fdt, node, FIT_DATA_PROP, &len);
 		if (!data)
@@ -544,6 +569,21 @@ static int fit_extract_data(struct image
 		memcpy(buf + buf_ptr, data, len);
 		debug("Extracting data size %x\n", len);
 
+		pad_align_size = fdt_getprop_u32(fdt, node,
+						 "data-padding-alignment");
+		fdt_delprop(fdt, node, "data-padding-alignment");
+		if ((long)pad_align_size >= 0) {
+			debug("Data padding alignment %x\n", pad_align_size);
+			len = ALIGN(len, pad_align_size);
+
+			ret = fit_image_recalc_hash_data(fdt, node,
+							 buf + buf_ptr, len);
+			if (ret) {
+				ret = -EPERM;
+				goto err_munmap;
+			}
+		}
+
 		ret = fdt_delprop(fdt, node, FIT_DATA_PROP);
 		if (ret) {
 			ret = -EPERM;
--- a/tools/image-host.c
+++ b/tools/image-host.c
@@ -693,6 +693,39 @@ int fit_image_add_verification_data(cons
 	return 0;
 }
 
+int fit_image_recalc_hash_data(void *fit, int image_noffset, const void *data,
+			       size_t size)
+{
+	const char *image_name;
+	int noffset;
+
+	image_name = fit_get_name(fit, image_noffset, NULL);
+
+	/* Process all hash subnodes of the component image node */
+	for (noffset = fdt_first_subnode(fit, image_noffset);
+	     noffset >= 0;
+	     noffset = fdt_next_subnode(fit, noffset)) {
+		const char *node_name;
+		int ret = 0;
+
+		/*
+		 * Check subnode name, must be equal to "hash" or "signature".
+		 * Multiple hash nodes require unique unit node
+		 * names, e.g. hash-1, hash-2, signature-1, etc.
+		 */
+		node_name = fit_get_name(fit, noffset, NULL);
+		if (!strncmp(node_name, FIT_HASH_NODENAME,
+			     strlen(FIT_HASH_NODENAME))) {
+			ret = fit_image_process_hash(fit, image_name, noffset,
+						data, size);
+		}
+		if (ret < 0)
+			return ret;
+	}
+
+	return 0;
+}
+
 struct strlist {
 	int count;
 	char **strings;
