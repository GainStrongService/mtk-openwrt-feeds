#
# Copyright (C) 2023 Mediatek Ltd.
#
# This is free software, licensed under the GNU General Public License v2.
# See /LICENSE for more information.
#

OPTEE_OS_MAKE_FLAGS:= \
		CFG_DEBUG_INFO=$(CONFIG_OPTEE_DEBUG_INFO) \
		CFG_TEE_CORE_DEBUG=$(CONFIG_OPTEE_CORE_DEBUG) \
		CFG_TEE_CORE_MALLOC_DEBUG=$(CONFIG_OPTEE_CORE_MALLOC_DEBUG) \
		CFG_CORE_SANITIZE_UNDEFINED=$(CONFIG_OPTEE_CORE_SANITIZE_UNDEFINED) \
		CFG_CORE_SANITIZE_KADDRESS=$(CONFIG_OPTEE_CORE_SANITIZE_KADDRESS) \
		CFG_CORE_DEBUG_CHECK_STACKS=$(CONFIG_OPTEE_CORE_DEBUG_CHECK_STACKS) \
		CFG_TEE_CORE_TA_TRACE=$(CONFIG_OPTEE_CORE_TA_TRACE) \
		CFG_TA_STATS=$(CONFIG_OPTEE_TA_STATS) \
		CFG_TEE_TA_MALLOC_DEBUG=$(CONFIG_OPTEE_TA_MALLOC_DEBUG) \
		CFG_CORE_DYN_SHM=$(CONFIG_OPTEE_CORE_DYN_SHMEM) \
		CFG_REE_FS=$(CONFIG_OPTEE_REE_FS) \
		CFG_RPMB_FS=$(CONFIG_OPTEE_RPMB_FS) \
		CFG_RPMB_FS_DEBUG_DATA=$(CONFIG_OPTEE_RPMB_FS_DEBUG_DATA) \
		CFG_RPMB_WRITE_KEY=$(CONFIG_OPTEE_RPMB_WRITE_KEY) \
		CFG_RPMB_TESTKEY=$(CONFIG_OPTEE_RPMB_TESTKEY) \
		CFG_REE_FS_ALLOW_RESET=$(CONFIG_OPTEE_REE_FS_ALLOW_RESET) \
		CFG_ENABLE_EMBEDDED_TESTS=$(CONFIG_OPTEE_ENABLE_EMBEDDED_TESTS) \
		CFG_EARLY_TA=$(CONFIG_OPTEE_EARLY_TA) \
		CFG_BL32_TZRAM_BASE=$(CONFIG_BL32_TZRAM_BASE) \
		CFG_BL32_TZRAM_SIZE=$(CONFIG_BL32_TZRAM_SIZE) \
		CFG_BL32_LOAD_OFFSET=$(CONFIG_BL32_LOAD_OFFSET)

OPTEE_TA_SIGN_KEYS :=
ifeq ($(CONFIG_OPTEE_OFFLINE_SIGN),y)
OPTEE_TA_SIGN_KEYS += TA_SIGN_KEY=$(PKG_BUILD_DIR)/$(OPTEE_OS_NAME)/$(CONFIG_OPTEE_OFFLINE_SIGN_DUMMY_KEY)
OPTEE_TA_SIGN_KEYS += TA_PUBLIC_KEY=$(PKG_BUILD_DIR)/$(OPTEE_OS_NAME)/$(CONFIG_OPTEE_TA_PUBLIC_KEY)
else
OPTEE_TA_SIGN_KEYS += TA_SIGN_KEY=$(PKG_BUILD_DIR)/$(OPTEE_OS_NAME)/$(CONFIG_OPTEE_TA_SIGN_KEY)
endif


ifeq ($(CONFIG_OPTEE_CORE_LOG_LEVEL_NONE),y)
OPTEE_OS_MAKE_FLAGS += CFG_TEE_CORE_LOG_LEVEL=0
else ifeq ($(CONFIG_OPTEE_CORE_LOG_LEVEL_ERROR),y)
OPTEE_OS_MAKE_FLAGS += CFG_TEE_CORE_LOG_LEVEL=1
else ifeq ($(CONFIG_OPTEE_CORE_LOG_LEVEL_INFO),y)
OPTEE_OS_MAKE_FLAGS += CFG_TEE_CORE_LOG_LEVEL=2
else ifeq ($(CONFIG_OPTEE_CORE_LOG_LEVEL_DEBUG),y)
OPTEE_OS_MAKE_FLAGS += CFG_TEE_CORE_LOG_LEVEL=3
else ifeq ($(CONFIG_OPTEE_CORE_LOG_LEVEL_FLOW),y)
OPTEE_OS_MAKE_FLAGS += CFG_TEE_CORE_LOG_LEVEL=4
endif

ifeq ($(CONFIG_OPTEE_TA_LOG_LEVEL_NONE),y)
OPTEE_OS_MAKE_FLAGS += CFG_TEE_TA_LOG_LEVEL=0
else ifeq ($(CONFIG_OPTEE_TA_LOG_LEVEL_ERROR),y)
OPTEE_OS_MAKE_FLAGS += CFG_TEE_TA_LOG_LEVEL=1
else ifeq ($(CONFIG_OPTEE_TA_LOG_LEVEL_INFO),y)
OPTEE_OS_MAKE_FLAGS += CFG_TEE_TA_LOG_LEVEL=2
else ifeq ($(CONFIG_OPTEE_TA_LOG_LEVEL_DEBUG),y)
OPTEE_OS_MAKE_FLAGS += CFG_TEE_TA_LOG_LEVEL=3
else ifeq ($(CONFIG_OPTEE_TA_LOG_LEVEL_FLOW),y)
OPTEE_OS_MAKE_FLAGS += CFG_TEE_TA_LOG_LEVEL=4
endif

ifeq ($(CONFIG_OPTEE_CORE_DYN_SHMEM),y)
ifneq ($(CONFIG_OPTEE_DRAM_BASE),)
OPTEE_OS_MAKE_FLAGS += CFG_DRAM_BASE=$(CONFIG_OPTEE_DRAM_BASE)
endif
ifneq ($(CONFIG_OPTEE_DRAM_SIZE),)
OPTEE_OS_MAKE_FLAGS += CFG_DRAM_SIZE=$(CONFIG_OPTEE_DRAM_SIZE)
endif
endif

# MTK related make flags
OPTEE_MTK_MAKE_FLAGS += CFG_MTK_RNG=$(CONFIG_OPTEE_MTK_RNG) \
			CFG_MTK_SECURE_STORAGE=$(CONFIG_OPTEE_MTK_SECURE_STORAGE) \
			CFG_MTK_TEST_FIPS=$(CONFIG_OPTEE_MTK_TEST_FIPS) \
			CFG_MTK_TEST=$(CONFIG_OPTEE_MTK_TEST)
