From fbb1d181782f990c0ac5f39d4aa9eda5c39cb442 Mon Sep 17 00:00:00 2001
From: Sam Shih <sam.shih@mediatek.com>
Date: Tue, 4 Mar 2025 19:28:14 +0800
Subject: [PATCH 1/2] cpufreq: add support to adjust cpu volt by efuse
 calibration data

---
 drivers/cpufreq/mediatek-cpufreq.c | 81 ++++++++++++++++++++++++++++--
 1 file changed, 76 insertions(+), 5 deletions(-)

diff --git a/drivers/cpufreq/mediatek-cpufreq.c b/drivers/cpufreq/mediatek-cpufreq.c
index 508c70c2..ac483124 100644
--- a/drivers/cpufreq/mediatek-cpufreq.c
+++ b/drivers/cpufreq/mediatek-cpufreq.c
@@ -15,8 +15,18 @@
 #include <linux/platform_device.h>
 #include <linux/pm_opp.h>
 #include <linux/regulator/consumer.h>
+#include <linux/nvmem-consumer.h>
+
+struct mtk_cpufreq_vspec {
+	unsigned int freq;
+	unsigned int vbase;
+	unsigned int vscale;
+	unsigned int vmax;
+};
 
 struct mtk_cpufreq_platform_data {
+	const struct mtk_cpufreq_vspec *vspec;
+	unsigned char adjust_voltage;
 	int min_volt_shift;
 	int max_volt_shift;
 	int proc_max_volt;
@@ -197,6 +207,50 @@ static bool is_ccifreq_ready(struct mtk_cpu_dvfs_info *info)
 	return true;
 }
 
+static int mtk_cpufreq_adjust_voltage(struct mtk_cpu_dvfs_info *info,
+				      struct cpufreq_policy *policy)
+{
+	const struct mtk_cpufreq_vspec *vspec;
+	unsigned int target_voltage;
+	struct nvmem_cell *cell;
+	unsigned int cal_data;
+	const u8 *buf;
+	size_t len;
+	int i;
+
+	cell = nvmem_cell_get(info->cpu_dev, "calibration-data");
+	if (IS_ERR(cell))
+		return PTR_ERR(cell);
+
+	buf = nvmem_cell_read(cell, &len);
+	nvmem_cell_put(cell);
+	if (IS_ERR(buf))
+		return PTR_ERR(buf);
+
+	cal_data = buf[0] & 0x1f;
+	pr_debug("%s: read vbinning value: %d\n", __func__, cal_data);
+	kfree(buf);
+	if (!info->soc_data->vspec) {
+		pr_err("voltage spec not found\n");
+		return -EINVAL;
+	}
+
+	vspec = &info->soc_data->vspec[0];
+	for (i = 0 ; i < vspec->freq ; i++) {
+		target_voltage =  vspec->vbase + cal_data * vspec->vscale;
+		if (target_voltage > vspec->vmax) {
+			pr_warn("freq %u exceeds max voltage\n", vspec->freq);
+			pr_warn("force update voltage to %u\n", vspec->vmax);
+			target_voltage = vspec->vmax;
+		}
+		dev_pm_opp_remove(info->cpu_dev, vspec->freq);
+		dev_pm_opp_add(info->cpu_dev, vspec->freq, target_voltage);
+		vspec = &info->soc_data->vspec[i + 1];
+	}
+
+	return 0;
+}
+
 static int mtk_cpufreq_set_target(struct cpufreq_policy *policy,
 				  unsigned int index)
 {
@@ -583,6 +637,15 @@ static int mtk_cpufreq_init(struct cpufreq_policy *policy)
 		return -EINVAL;
 	}
 
+	if (info->soc_data->adjust_voltage) {
+		ret = mtk_cpufreq_adjust_voltage(info, policy);
+		if (ret) {
+			pr_err("failed to adjust voltage for cpu%d: %d\n",
+			       policy->cpu, ret);
+			return ret;
+		}
+	}
+
 	ret = dev_pm_opp_init_cpufreq_table(info->cpu_dev, &freq_table);
 	if (ret) {
 		dev_err(info->cpu_dev,
@@ -682,6 +745,16 @@ static struct platform_driver mtk_cpufreq_platdrv = {
 	.probe		= mtk_cpufreq_probe,
 };
 
+struct mtk_cpufreq_vspec mt7988_voltage_spec[] = {
+	{
+		.freq = 1800000000,
+		.vbase = 850000,
+		.vscale = 10000,
+		.vmax = 1120000,
+	},
+	{ } /* sentinel */
+};
+
 static const struct mtk_cpufreq_platform_data mt2701_platform_data = {
 	.min_volt_shift = 100000,
 	.max_volt_shift = 200000,
@@ -708,11 +781,9 @@ static const struct mtk_cpufreq_platform_data mt7623_platform_data = {
 };
 
 static const struct mtk_cpufreq_platform_data mt7988_platform_data = {
-	.min_volt_shift = 100000,
-	.max_volt_shift = 200000,
-	.proc_max_volt = 900000,
-	.sram_min_volt = 0,
-	.sram_max_volt = 1150000,
+	.vspec = mt7988_voltage_spec,
+	.adjust_voltage = 1,
+	.proc_max_volt = 1120000,
 	.ccifreq_supported = true,
 };
 
-- 
2.45.2

