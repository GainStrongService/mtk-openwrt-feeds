--- a/drivers/net/phy/mediatek/mtk-phy-lib.c
+++ b/drivers/net/phy/mediatek/mtk-phy-lib.c
@@ -36,6 +36,20 @@ static void __mtk_tr_read(struct phy_dev
 		*tr_high, *tr_low);
 }
 
+u32 mtk_tr_read(struct phy_device *phydev, u8 ch_addr, u8 node_addr,
+		u8 data_addr)
+{
+	u16 tr_high;
+	u16 tr_low;
+
+	phy_select_page(phydev, MTK_PHY_PAGE_EXTENDED_52B5);
+	__mtk_tr_read(phydev, ch_addr, node_addr, data_addr, &tr_high, &tr_low);
+	phy_restore_page(phydev, MTK_PHY_PAGE_STANDARD, 0);
+
+	return (tr_high << 16) | tr_low;
+}
+EXPORT_SYMBOL_GPL(mtk_tr_read);
+
 static void __mtk_tr_write(struct phy_device *phydev, u8 ch_addr, u8 node_addr,
 			   u8 data_addr, u32 tr_data)
 {
@@ -46,6 +60,15 @@ static void __mtk_tr_write(struct phy_de
 	__mtk_tr_access(phydev, false, ch_addr, node_addr, data_addr);
 }
 
+void mtk_tr_write(struct phy_device *phydev, u8 ch_addr, u8 node_addr,
+			u8 data_addr, u32 set)
+{
+	phy_select_page(phydev, MTK_PHY_PAGE_EXTENDED_52B5);
+	__mtk_tr_write(phydev, ch_addr, node_addr, data_addr, set);
+	phy_restore_page(phydev, MTK_PHY_PAGE_STANDARD, 0);
+}
+EXPORT_SYMBOL_GPL(mtk_tr_write);
+
 void __mtk_tr_modify(struct phy_device *phydev, u8 ch_addr, u8 node_addr,
 		     u8 data_addr, u32 mask, u32 set)
 {
@@ -111,14 +134,13 @@ int mtk_phy_led_hw_is_supported(struct p
 EXPORT_SYMBOL_GPL(mtk_phy_led_hw_is_supported);
 
 int mtk_phy_led_hw_ctrl_get(struct phy_device *phydev, u8 index,
-			    unsigned long *rules, u16 on_set,
-			    u16 rx_blink_set, u16 tx_blink_set)
+			    unsigned long *rules, unsigned long *led_state,
+			    u16 on_set, u16 rx_blink_set, u16 tx_blink_set)
 {
 	unsigned int bit_blink = MTK_PHY_LED_STATE_FORCE_BLINK +
 				 (index ? 16 : 0);
 	unsigned int bit_netdev = MTK_PHY_LED_STATE_NETDEV + (index ? 16 : 0);
 	unsigned int bit_on = MTK_PHY_LED_STATE_FORCE_ON + (index ? 16 : 0);
-	struct mtk_socphy_priv *priv = phydev->priv;
 	int on, blink;
 
 	if (index > 1)
@@ -139,19 +161,19 @@ int mtk_phy_led_hw_ctrl_get(struct phy_d
 	if ((on & (on_set | MTK_PHY_LED_ON_FDX |
 		   MTK_PHY_LED_ON_HDX | MTK_PHY_LED_ON_LINKDOWN)) ||
 	    (blink & (rx_blink_set | tx_blink_set)))
-		set_bit(bit_netdev, &priv->led_state);
+		set_bit(bit_netdev, led_state);
 	else
-		clear_bit(bit_netdev, &priv->led_state);
+		clear_bit(bit_netdev, led_state);
 
 	if (on & MTK_PHY_LED_ON_FORCE_ON)
-		set_bit(bit_on, &priv->led_state);
+		set_bit(bit_on, led_state);
 	else
-		clear_bit(bit_on, &priv->led_state);
+		clear_bit(bit_on, led_state);
 
 	if (blink & MTK_PHY_LED_BLINK_FORCE_BLINK)
-		set_bit(bit_blink, &priv->led_state);
+		set_bit(bit_blink, led_state);
 	else
-		clear_bit(bit_blink, &priv->led_state);
+		clear_bit(bit_blink, led_state);
 
 	if (!rules)
 		return 0;
@@ -188,11 +210,10 @@ int mtk_phy_led_hw_ctrl_get(struct phy_d
 EXPORT_SYMBOL_GPL(mtk_phy_led_hw_ctrl_get);
 
 int mtk_phy_led_hw_ctrl_set(struct phy_device *phydev, u8 index,
-			    unsigned long rules, u16 on_set,
-			    u16 rx_blink_set, u16 tx_blink_set)
+			    unsigned long rules, unsigned long *led_state,
+			    u16 on_set, u16 rx_blink_set, u16 tx_blink_set)
 {
 	unsigned int bit_netdev = MTK_PHY_LED_STATE_NETDEV + (index ? 16 : 0);
-	struct mtk_socphy_priv *priv = phydev->priv;
 	u16 on = 0, blink = 0;
 	int ret;
 
@@ -248,9 +269,9 @@ int mtk_phy_led_hw_ctrl_set(struct phy_d
 	}
 
 	if (blink || on)
-		set_bit(bit_netdev, &priv->led_state);
+		set_bit(bit_netdev, led_state);
 	else
-		clear_bit(bit_netdev, &priv->led_state);
+		clear_bit(bit_netdev, led_state);
 
 	ret = phy_modify_mmd(phydev, MDIO_MMD_VEND2, index ?
 			     MTK_PHY_LED1_ON_CTRL : MTK_PHY_LED0_ON_CTRL,
@@ -283,19 +304,18 @@ int mtk_phy_led_num_dly_cfg(u8 index, un
 EXPORT_SYMBOL_GPL(mtk_phy_led_num_dly_cfg);
 
 int mtk_phy_hw_led_on_set(struct phy_device *phydev, u8 index,
-			  u16 led_on_mask, bool on)
+			  unsigned long *led_state, u16 led_on_mask, bool on)
 {
 	unsigned int bit_on = MTK_PHY_LED_STATE_FORCE_ON + (index ? 16 : 0);
-	struct mtk_socphy_priv *priv = phydev->priv;
 	bool changed;
 
 	if (on)
-		changed = !test_and_set_bit(bit_on, &priv->led_state);
+		changed = !test_and_set_bit(bit_on, led_state);
 	else
-		changed = !!test_and_clear_bit(bit_on, &priv->led_state);
+		changed = !!test_and_clear_bit(bit_on, led_state);
 
 	changed |= !!test_and_clear_bit(MTK_PHY_LED_STATE_NETDEV +
-					(index ? 16 : 0), &priv->led_state);
+					(index ? 16 : 0), led_state);
 	if (changed)
 		return phy_modify_mmd(phydev, MDIO_MMD_VEND2, index ?
 				      MTK_PHY_LED1_ON_CTRL :
@@ -307,20 +327,20 @@ int mtk_phy_hw_led_on_set(struct phy_dev
 }
 EXPORT_SYMBOL_GPL(mtk_phy_hw_led_on_set);
 
-int mtk_phy_hw_led_blink_set(struct phy_device *phydev, u8 index, bool blinking)
+int mtk_phy_hw_led_blink_set(struct phy_device *phydev, u8 index,
+			     unsigned long *led_state, bool blinking)
 {
 	unsigned int bit_blink = MTK_PHY_LED_STATE_FORCE_BLINK +
 				 (index ? 16 : 0);
-	struct mtk_socphy_priv *priv = phydev->priv;
 	bool changed;
 
 	if (blinking)
-		changed = !test_and_set_bit(bit_blink, &priv->led_state);
+		changed = !test_and_set_bit(bit_blink, led_state);
 	else
-		changed = !!test_and_clear_bit(bit_blink, &priv->led_state);
+		changed = !!test_and_clear_bit(bit_blink, led_state);
 
 	changed |= !!test_bit(MTK_PHY_LED_STATE_NETDEV +
-			      (index ? 16 : 0), &priv->led_state);
+			      (index ? 16 : 0), led_state);
 	if (changed)
 		return phy_write_mmd(phydev, MDIO_MMD_VEND2, index ?
 				     MTK_PHY_LED1_BLINK_CTRL :
--- a/drivers/net/phy/mediatek/mtk.h
+++ b/drivers/net/phy/mediatek/mtk.h
@@ -8,13 +8,14 @@
 #ifndef _MTK_EPHY_H_
 #define _MTK_EPHY_H_
 
-#define MTK_PHY_AUX_CTRL_AND_STATUS		0x14
-#define   MTK_PHY_ENABLE_DOWNSHIFT		BIT(4)
-
 #define MTK_EXT_PAGE_ACCESS			0x1f
-#define MTK_PHY_PAGE_EXTENDED_1			0x0001
 #define MTK_PHY_PAGE_STANDARD			0x0000
+#define MTK_PHY_PAGE_EXTENDED_1			0x0001
 #define MTK_PHY_PAGE_EXTENDED_52B5		0x52b5
+#define MTK_PHY_AUX_CTRL_AND_STATUS		0x14
+
+/* suprv_media_select_RefClk */
+#define   MTK_PHY_ENABLE_DOWNSHIFT		BIT(4)
 
 /* Registers on MDIO_MMD_VEND2 */
 #define MTK_PHY_LED0_ON_CTRL			0x24
@@ -68,10 +69,10 @@
 #define MTK_PHY_LED_STATE_FORCE_BLINK	1
 #define MTK_PHY_LED_STATE_NETDEV	2
 
-struct mtk_socphy_priv {
-	unsigned long		led_state;
-};
-
+u32 mtk_tr_read(struct phy_device *phydev, u8 ch_addr, u8 node_addr,
+		u8 data_addr);
+void mtk_tr_write(struct phy_device *phydev, u8 ch_addr, u8 node_addr,
+			u8 data_addr, u32 set);
 void __mtk_tr_modify(struct phy_device *phydev, u8 ch_addr, u8 node_addr,
 		     u8 data_addr, u32 mask, u32 set);
 void mtk_tr_modify(struct phy_device *phydev, u8 ch_addr, u8 node_addr,
@@ -88,17 +89,17 @@ int mtk_phy_led_hw_is_supported(struct p
 				unsigned long rules,
 				unsigned long supported_triggers);
 int mtk_phy_led_hw_ctrl_set(struct phy_device *phydev, u8 index,
-			    unsigned long rules, u16 on_set,
-			    u16 rx_blink_set, u16 tx_blink_set);
+			    unsigned long rules, unsigned long *led_state,
+			    u16 on_set, u16 rx_blink_set, u16 tx_blink_set);
 int mtk_phy_led_hw_ctrl_get(struct phy_device *phydev, u8 index,
-			    unsigned long *rules, u16 on_set,
-			    u16 rx_blink_set, u16 tx_blink_set);
+			    unsigned long *rules, unsigned long *led_state,
+			    u16 on_set, u16 rx_blink_set, u16 tx_blink_set);
 int mtk_phy_led_num_dly_cfg(u8 index, unsigned long *delay_on,
 			    unsigned long *delay_off, bool *blinking);
 int mtk_phy_hw_led_on_set(struct phy_device *phydev, u8 index,
-			  u16 led_on_mask, bool on);
+			  unsigned long *led_state, u16 led_on_mask, bool on);
 int mtk_phy_hw_led_blink_set(struct phy_device *phydev, u8 index,
-			     bool blinking);
+			     unsigned long *led_state, bool blinking);
 void mtk_phy_leds_state_init(struct phy_device *phydev);
 
 #endif /* _MTK_EPHY_H_ */
