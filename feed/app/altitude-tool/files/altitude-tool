#!/usr/bin/env python3

import argparse
import pprint
import requests
import subprocess

class WeatherAPI:
    def __init__(self, key):
        self.key = key

    def fetch(self, lat, lon):
        pass

    def pressure_sealevel_get(self):
        pass

    def temp_sealevel_get(self):
        pass

class GoogleWeatherAPI(WeatherAPI):
    def fetch(self, lat, lon):
        url=f'https://weather.googleapis.com/v1/currentConditions:lookup?key={self.key}' \
            f'&location.latitude={lat}&location.longitude={lon}'
        response = requests.get(url)
        self.data = response.json()

    def pressure_sealevel_get(self):
        return float(self.data['airPressure']['meanSeaLevelMillibars'])

    def temp_sealevel_get(self):
        return float(self.data['temperature']['degrees'])

class OpenWeatherAPI(WeatherAPI):
    def fetch(self, lat, lon):
        url=f'https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&appid={self.key}'
        response = requests.get(url)
        self.data = response.json()

    def pressure_sealevel_get(self):
        return float(self.data['current']['pressure'])

    def temp_sealevel_get(self):
        return float(self.data['current']['temp']) - 273.15

class WeatherData:
    def __init__(self, api, lat, lon):
        api.fetch(lat, lon)

        self.pressure_sealevel = api.pressure_sealevel_get()
        self.temp_sealevel = api.temp_sealevel_get()

def sysfs_pressure_get():
    file_path = '/sys/bus/iio/devices/iio:device0/in_pressure_input'

    try:
        process = subprocess.Popen(['cat', file_path], stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        output, error = process.communicate()

        if process.returncode != 0:
            print(f"Error reading the file {file_path}: {error.decode().strip()}")
            return None

    except Exception as e:
        print(f"An error occurred: {e}")
        return None

    pressure = float(output.decode().strip()) * 10

    return pressure

def sysfs_temp_get():
    file_path = '/sys/bus/iio/devices/iio:device0/in_temp_input'

    try:
        process = subprocess.Popen(['cat', file_path], stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        output, error = process.communicate()

        if process.returncode != 0:
            print(f"Error reading the file {file_path}: {error.decode().strip()}")
            return None

    except Exception as e:
        print(f"An error occurred: {e}")
        return None

    temp = float(output.decode().strip()) / 1000

    return temp

def altitude_calculate(pressure_sealevel, pressure_target, temp_sealevel):
    '''ISA barometric formula'''

    l  = 0.0065                 # lapse rate of dry air
    r  = 287.0                  # air constant in 'J/kg*K' not 'J/mol*K'
    g  = 9.8                    # gravitational acceleration
    t  = temp_sealevel + 273.15 # sealevel temperature in K (kelvin) not degree celsius
    p0 = pressure_sealevel      # sealevel pressure (hPa)
    p  = pressure_target        # pressure at target area (hPa)

    val = ((((p0 / p)**((r * l) / g)) - 1) * t) / l

    return val

def altitude_write_to_file(filename, altitude):
    with open(filename, 'w') as f:
        f.write(str(altitude))

def main():
    parser = argparse.ArgumentParser(description='altitude-tool is a tool to get the altitude of '\
                                                 'a coordinate')
    parser.add_argument('-k', '--key', type=str, required=True,
                        help='API key to access openweather API')
    parser.add_argument('-x', '--lon', type=float, required=True, help='Longitude')
    parser.add_argument('-y', '--lat', type=float, required=True, help='Latitude')
    parser.add_argument('-w', '--write', type=str, required=False, help='Write to path')
    parser.add_argument('--api', type=str, choices=['gw', 'ow'], required=True,
                        help='Choose the API: gw (google-weather-api), ow (open-weather-map)')

    args = parser.parse_args()

    key = args.key
    lat = args.lat
    lon = args.lon
    path = args.write
    api = args.api

    if api == 'gw':
        weather_api = GoogleWeatherAPI(key)
    elif api == 'ow':
        weather_api = OpenWeatherAPI(key)

    weather_data = WeatherData(weather_api, lat, lon)

    pressure_sealevel = weather_data.pressure_sealevel
    temp_sealevel = weather_data.temp_sealevel
    pressure_target = sysfs_pressure_get()
    altitude = altitude_calculate(pressure_sealevel, pressure_target, temp_sealevel)

    print(f"pressure_sealevel(hPa): {pressure_sealevel}")
    print(f"pressure_target(hPa):   {pressure_target}")
    print(f"temp_sealevel(c):       {temp_sealevel}")
    print(f"altitude(m):            {altitude}")

    if path != None:
        altitude_write_to_file(path, altitude)

if __name__ == "__main__":
    main()
